var COMPILED = true;
var goog = {};
var Blockly = {};
var _global = {
    Blockly: Blockly,
    goog: goog,
};
goog.global = _global;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function (val) {
    return val !== void 0;
};
goog.isString = function (val) {
    return typeof val == 'string';
};
goog.isBoolean = function (val) {
    return typeof val == 'boolean';
};
goog.isNumber = function (val) {
    return typeof val == 'number';
};
goog.exportPath_ = function (name, opt_object, opt_objectToExportTo) {
    var parts = name.split('.');
    var cur = opt_objectToExportTo || goog.global;
    if (!(parts[0] in cur) && typeof cur.execScript != 'undefined') {
        cur.execScript('var ' + parts[0]);
    }
    for (var part; parts.length && (part = parts.shift());) {
        if (!parts.length && goog.isDef(opt_object)) {
            cur[part] = opt_object;
        }
        else if (cur[part] && cur[part] !== Object.prototype[part]) {
            cur = cur[part];
        }
        else {
            cur = cur[part] = {};
        }
    }
};
goog.define = function (name, defaultValue) {
    var value = defaultValue;
    if (!COMPILED) {
        var uncompiledDefines = goog.global.CLOSURE_UNCOMPILED_DEFINES;
        var defines = goog.global.CLOSURE_DEFINES;
        if (uncompiledDefines &&
            (uncompiledDefines).nodeType === undefined &&
            Object.prototype.hasOwnProperty.call(uncompiledDefines, name)) {
            value = uncompiledDefines[name];
        }
        else if (defines &&
            (defines).nodeType === undefined &&
            Object.prototype.hasOwnProperty.call(defines, name)) {
            value = defines[name];
        }
    }
    goog.exportPath_(name, value);
};
goog.define('goog.DEBUG', true);
goog.define('goog.LOCALE', 'en');
goog.define('goog.TRUSTED_SITE', true);
goog.define('goog.STRICT_MODE_COMPATIBLE', false);
goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);
goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);
goog.provide = function (name) {
    if (goog.isInModuleLoader_()) {
        throw new Error('goog.provide can not be used within a module.');
    }
    if (!COMPILED) {
        if (goog.isProvided_(name)) {
            throw new Error('Namespace "' + name + '" already declared.');
        }
    }
    goog.constructNamespace_(name);
};
goog.constructNamespace_ = function (name, opt_obj) {
    if (!COMPILED) {
        delete goog.implicitNamespaces_[name];
        var namespace = name;
        while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {
            if (goog.getObjectByName(namespace)) {
                break;
            }
            goog.implicitNamespaces_[namespace] = true;
        }
    }
    goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function (name) {
    if (!goog.isString(name) || !name ||
        name.search(goog.VALID_MODULE_RE_) == -1) {
        throw new Error('Invalid module identifier');
    }
    if (!goog.isInGoogModuleLoader_()) {
        throw new Error('Module ' + name + ' has been loaded incorrectly. Note, ' +
            'modules cannot be loaded as normal scripts. They require some kind of ' +
            'pre-processing step. You\'re likely trying to load a module via a ' +
            'script tag or as a part of a concatenated bundle without rewriting the ' +
            'module. For more info see: ' +
            'https://github.com/google/closure-library/wiki/goog.module:-an-ES6-module-like-alternative-to-goog.provide.');
    }
    if (goog.moduleLoaderState_.moduleName) {
        throw new Error('goog.module may only be called once per module.');
    }
    goog.moduleLoaderState_.moduleName = name;
    if (!COMPILED) {
        if (goog.isProvided_(name)) {
            throw new Error('Namespace "' + name + '" already declared.');
        }
        delete goog.implicitNamespaces_[name];
    }
};
goog.module.get = function (name) {
    if (!COMPILED && name in goog.loadedModules_) {
        if (goog.loadedModules_[name].type != goog.ModuleType.GOOG) {
            throw new Error('Can only goog.module.get for goog.modules.');
        }
        if (goog.loadedModules_[name].moduleId != name) {
            throw new Error('Cannot goog.module.get by path.');
        }
    }
    return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function (name) {
    if (!COMPILED) {
        if (name in goog.loadedModules_) {
            return goog.loadedModules_[name].exports;
        }
        else if (!goog.implicitNamespaces_[name]) {
            var ns = goog.getObjectByName(name);
            return ns != null ? ns : null;
        }
    }
    return null;
};
goog.ModuleType = {
    ES6: 'es6',
    GOOG: 'goog'
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function () {
    return goog.isInGoogModuleLoader_() || goog.isInEs6ModuleLoader_();
};
goog.isInGoogModuleLoader_ = function () {
    return !!goog.moduleLoaderState_ &&
        goog.moduleLoaderState_.type == goog.ModuleType.GOOG;
};
goog.isInEs6ModuleLoader_ = function () {
    return !!goog.moduleLoaderState_ &&
        goog.moduleLoaderState_.type == goog.ModuleType.ES6;
};
goog.getModulePath_ = function () {
    return goog.moduleLoaderState_ && goog.moduleLoaderState_.path;
};
goog.module.declareLegacyNamespace = function () {
    if (!COMPILED && !goog.isInGoogModuleLoader_()) {
        throw new Error('goog.module.declareLegacyNamespace must be called from ' +
            'within a goog.module');
    }
    if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
        throw new Error('goog.module must be called prior to ' +
            'goog.module.declareLegacyNamespace.');
    }
    goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function (opt_message) {
    if (goog.DISALLOW_TEST_ONLY_CODE) {
        opt_message = opt_message || '';
        throw new Error('Importing test-only code into non-debug environment' +
            (opt_message ? ': ' + opt_message : '.'));
    }
};
goog.forwardDeclare = function (name) { };
goog.forwardDeclare('Document');
goog.forwardDeclare('HTMLScriptElement');
goog.forwardDeclare('XMLHttpRequest');
if (!COMPILED) {
    goog.isProvided_ = function (name) {
        return (name in goog.loadedModules_) ||
            (!goog.implicitNamespaces_[name] &&
                goog.isDefAndNotNull(goog.getObjectByName(name)));
    };
    goog.implicitNamespaces_ = { 'goog.module': true };
}
goog.getObjectByName = function (name, opt_obj) {
    var parts = name.split('.');
    var cur = opt_obj || goog.global;
    for (var i = 0; i < parts.length; i++) {
        cur = cur[parts[i]];
        if (!goog.isDefAndNotNull(cur)) {
            return null;
        }
    }
    return cur;
};
goog.globalize = function (obj, opt_global) {
    var global = opt_global || goog.global;
    for (var x in obj) {
        global[x] = obj[x];
    }
};
goog.addDependency = function (relPath, provides, requires, opt_loadFlags) {
    if (!COMPILED && goog.DEPENDENCIES_ENABLED) {
        goog.debugLoader_.addDependency(relPath, provides, requires, opt_loadFlags);
    }
};
goog.define('goog.ENABLE_DEBUG_LOADER', true);
goog.logToConsole_ = function (msg) {
    if (goog.global.console) {
        goog.global.console['error'](msg);
    }
};
goog.isPath_ = function (requireOrPath) {
    return requireOrPath.indexOf('./') == 0 || requireOrPath.indexOf('../') == 0;
};
goog.require = function (name) {
    if (goog.isPath_(name)) {
        if (goog.isInGoogModuleLoader_()) {
            if (!goog.getModulePath_()) {
                throw new Error('Current module has no path information. Was it loaded via ' +
                    'goog.loadModule without a path argument?');
            }
            name = goog.normalizePath_(goog.getModulePath_() + '/../' + name);
        }
        else {
            throw new Error('Cannot require by path outside of goog.modules.');
        }
    }
    if (!COMPILED) {
        if (goog.ENABLE_DEBUG_LOADER) {
            goog.debugLoader_.requested(name);
        }
        if (goog.isProvided_(name)) {
            if (goog.isInModuleLoader_()) {
                return goog.module.getInternal_(name);
            }
        }
        else if (goog.ENABLE_DEBUG_LOADER) {
            var moduleLoaderState = goog.moduleLoaderState_;
            goog.moduleLoaderState_ = null;
            try {
                goog.debugLoader_.load_(name);
            }
            finally {
                goog.moduleLoaderState_ = moduleLoaderState;
            }
        }
        return null;
    }
};
goog.basePath = '';
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function () { };
goog.abstractMethod = function () {
    throw new Error('unimplemented abstract method');
};
goog.addSingletonGetter = function (ctor) {
    ctor.instance_ = undefined;
    ctor.getInstance = function () {
        if (ctor.instance_) {
            return ctor.instance_;
        }
        if (goog.DEBUG) {
            goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
        }
        return ctor.instance_ = new ctor;
    };
};
goog.instantiatedSingletons_ = [];
goog.define('goog.LOAD_MODULE_USING_EVAL', true);
goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
goog.define('goog.TRANSPILE', 'detect');
goog.define('goog.TRANSPILER', 'transpile.js');
goog.hasBadLetScoping = null;
goog.useSafari10Workaround = function () {
    if (goog.hasBadLetScoping == null) {
        var hasBadLetScoping;
        try {
            hasBadLetScoping = !eval('"use strict";' +
                'let x = 1; function f() { return typeof x; };' +
                'f() == "number";');
        }
        catch (e) {
            hasBadLetScoping = false;
        }
        goog.hasBadLetScoping = hasBadLetScoping;
    }
    return goog.hasBadLetScoping;
};
goog.workaroundSafari10EvalBug = function (moduleDef) {
    return '(function(){' + moduleDef +
        '\n' +
        ';' +
        '})();\n';
};
goog.loadModule = function (moduleDef, opt_path) {
    var previousState = goog.moduleLoaderState_;
    try {
        goog.moduleLoaderState_ = {
            moduleName: '',
            declareLegacyNamespace: false,
            type: goog.ModuleType.GOOG,
            path: opt_path
        };
        var exports;
        if (goog.isFunction(moduleDef)) {
            exports = moduleDef.call(undefined, {});
        }
        else if (goog.isString(moduleDef)) {
            if (goog.useSafari10Workaround()) {
                moduleDef = goog.workaroundSafari10EvalBug(moduleDef);
            }
            exports = goog.loadModuleFromSource_.call(undefined, moduleDef);
        }
        else {
            throw new Error('Invalid module definition');
        }
        var moduleName = goog.moduleLoaderState_.moduleName;
        if (goog.isString(moduleName) && moduleName) {
            if (goog.moduleLoaderState_.declareLegacyNamespace) {
                goog.constructNamespace_(moduleName, exports);
            }
            else if (goog.SEAL_MODULE_EXPORTS && Object.seal &&
                typeof exports == 'object' && exports != null) {
                Object.seal(exports);
            }
            var data = {
                exports: exports,
                type: goog.ModuleType.GOOG,
                moduleId: goog.moduleLoaderState_.moduleName
            };
            goog.loadedModules_[moduleName] = data;
            opt_path && (goog.loadedModules_[opt_path] = data);
        }
        else {
            throw new Error('Invalid module name \"' + moduleName + '\"');
        }
    }
    finally {
        goog.moduleLoaderState_ = previousState;
    }
};
goog.loadModuleFromSource_ = (function () {
    'use strict';
    var exports = {};
    eval(arguments[0]);
    return exports;
});
goog.normalizePath_ = function (path) {
    var components = path.split('/');
    var i = 0;
    while (i < components.length) {
        if (components[i] == '.') {
            components.splice(i, 1);
        }
        else if (i && components[i] == '..' && components[i - 1] &&
            components[i - 1] != '..') {
            components.splice(--i, 2);
        }
        else {
            i++;
        }
    }
    return components.join('/');
};
goog.global.CLOSURE_LOAD_FILE_SYNC;
goog.loadFileSync_ = function (src) {
    if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
        return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
    }
    else {
        try {
            var xhr = new goog.global['XMLHttpRequest']();
            xhr.open('get', src, false);
            xhr.send();
            return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;
        }
        catch (err) {
            return null;
        }
    }
};
goog.transpile_ = function (code, path) {
    var jscomp = goog.global['$jscomp'];
    if (!jscomp) {
        goog.global['$jscomp'] = jscomp = {};
    }
    var transpile = jscomp.transpile;
    if (!transpile) {
        var transpilerPath = goog.basePath + goog.TRANSPILER;
        var transpilerCode = goog.loadFileSync_(transpilerPath);
        if (transpilerCode) {
            (function () {
                eval(transpilerCode + '\n//# sourceURL=' + transpilerPath);
            }).call(goog.global);
            if (goog.global['$gwtExport'] && goog.global['$gwtExport']['$jscomp'] &&
                !goog.global['$gwtExport']['$jscomp']['transpile']) {
                throw new Error('The transpiler did not properly export the "transpile" ' +
                    'method. $gwtExport: ' + JSON.stringify(goog.global['$gwtExport']));
            }
            goog.global['$jscomp'].transpile =
                goog.global['$gwtExport']['$jscomp']['transpile'];
            jscomp = goog.global['$jscomp'];
            transpile = jscomp.transpile;
        }
    }
    if (!transpile) {
        var suffix = ' requires transpilation but no transpiler was found.';
        transpile = jscomp.transpile = function (code, path) {
            goog.logToConsole_(path + suffix);
            return code;
        };
    }
    return transpile(code, path);
};
goog.typeOf = function (value) {
    var s = typeof value;
    if (s == 'object') {
        if (value) {
            if (value instanceof Array) {
                return 'array';
            }
            else if (value instanceof Object) {
                return s;
            }
            var className = Object.prototype.toString.call((value));
            if (className == '[object Window]') {
                return 'object';
            }
            if ((className == '[object Array]' ||
                typeof value.length == 'number' &&
                    typeof value.splice != 'undefined' &&
                    typeof value.propertyIsEnumerable != 'undefined' &&
                    !value.propertyIsEnumerable('splice'))) {
                return 'array';
            }
            if ((className == '[object Function]' ||
                typeof value.call != 'undefined' &&
                    typeof value.propertyIsEnumerable != 'undefined' &&
                    !value.propertyIsEnumerable('call'))) {
                return 'function';
            }
        }
        else {
            return 'null';
        }
    }
    else if (s == 'function' && typeof value.call == 'undefined') {
        return 'object';
    }
    return s;
};
goog.isNull = function (val) {
    return val === null;
};
goog.isDefAndNotNull = function (val) {
    return val != null;
};
goog.isArray = function (val) {
    return goog.typeOf(val) == 'array';
};
goog.isArrayLike = function (val) {
    var type = goog.typeOf(val);
    return type == 'array' || type == 'object' && typeof val.length == 'number';
};
goog.isDateLike = function (val) {
    return goog.isObject(val) && typeof val.getFullYear == 'function';
};
goog.isFunction = function (val) {
    return goog.typeOf(val) == 'function';
};
goog.isObject = function (val) {
    var type = typeof val;
    return type == 'object' && val != null || type == 'function';
};
goog.getUid = function (obj) {
    return obj[goog.UID_PROPERTY_] ||
        (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function (obj) {
    return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function (obj) {
    if (obj !== null && 'removeAttribute' in obj) {
        obj.removeAttribute(goog.UID_PROPERTY_);
    }
    try {
        delete obj[goog.UID_PROPERTY_];
    }
    catch (ex) {
    }
};
goog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function (obj) {
    var type = goog.typeOf(obj);
    if (type == 'object' || type == 'array') {
        if (typeof obj.clone === 'function') {
            return obj.clone();
        }
        var clone = type == 'array' ? [] : {};
        for (var key in obj) {
            clone[key] = goog.cloneObject(obj[key]);
        }
        return clone;
    }
    return obj;
};
goog.bindNative_ = function (fn, selfObj, var_args) {
    return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function (fn, selfObj, var_args) {
    if (!fn) {
        throw new Error();
    }
    if (arguments.length > 2) {
        var boundArgs = Array.prototype.slice.call(arguments, 2);
        return function () {
            var newArgs = Array.prototype.slice.call(arguments);
            Array.prototype.unshift.apply(newArgs, boundArgs);
            return fn.apply(selfObj, newArgs);
        };
    }
    else {
        return function () {
            return fn.apply(selfObj, arguments);
        };
    }
};
goog.bind = function (fn, selfObj, var_args) {
    if (Function.prototype.bind &&
        Function.prototype.bind.toString().indexOf('native code') != -1) {
        goog.bind = goog.bindNative_;
    }
    else {
        goog.bind = goog.bindJs_;
    }
    return goog.bind.apply(null, arguments);
};
goog.partial = function (fn, var_args) {
    var args = Array.prototype.slice.call(arguments, 1);
    return function () {
        var newArgs = args.slice();
        newArgs.push.apply(newArgs, arguments);
        return fn.apply(this, newArgs);
    };
};
goog.mixin = function (target, source) {
    for (var x in source) {
        target[x] = source[x];
    }
};
goog.now = (goog.TRUSTED_SITE && Date.now) || (function () {
    return +new Date();
});
goog.globalEval = function (script) {
    if (goog.global.execScript) {
        goog.global.execScript(script, 'JavaScript');
    }
    else if (goog.global.eval) {
        if (goog.evalWorksForGlobals_ == null) {
            try {
                goog.global.eval('var _evalTest_ = 1;');
            }
            catch (ignore) {
            }
            if (typeof goog.global['_evalTest_'] != 'undefined') {
                try {
                    delete goog.global['_evalTest_'];
                }
                catch (ignore) {
                }
                goog.evalWorksForGlobals_ = true;
            }
            else {
                goog.evalWorksForGlobals_ = false;
            }
        }
        if (goog.evalWorksForGlobals_) {
            goog.global.eval(script);
        }
        else {
            var doc = goog.global.document;
            var scriptElt = (doc.createElement('SCRIPT'));
            scriptElt.type = 'text/javascript';
            scriptElt.defer = false;
            scriptElt.appendChild(doc.createTextNode(script));
            doc.head.appendChild(scriptElt);
            doc.head.removeChild(scriptElt);
        }
    }
    else {
        throw new Error('goog.globalEval not available');
    }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.global.CLOSURE_CSS_NAME_MAP_FN;
goog.getCssName = function (className, opt_modifier) {
    if (String(className).charAt(0) == '.') {
        throw new Error('className passed in goog.getCssName must not start with ".".' +
            ' You passed: ' + className);
    }
    var getMapping = function (cssName) {
        return goog.cssNameMapping_[cssName] || cssName;
    };
    var renameByParts = function (cssName) {
        var parts = cssName.split('-');
        var mapped = [];
        for (var i = 0; i < parts.length; i++) {
            mapped.push(getMapping(parts[i]));
        }
        return mapped.join('-');
    };
    var rename;
    if (goog.cssNameMapping_) {
        rename =
            goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;
    }
    else {
        rename = function (a) {
            return a;
        };
    }
    var result = opt_modifier ? className + '-' + rename(opt_modifier) : rename(className);
    if (goog.global.CLOSURE_CSS_NAME_MAP_FN) {
        return goog.global.CLOSURE_CSS_NAME_MAP_FN(result);
    }
    return result;
};
goog.setCssNameMapping = function (mapping, opt_style) {
    goog.cssNameMapping_ = mapping;
    goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
    goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function (str, opt_values) {
    if (opt_values) {
        str = str.replace(/\{\$([^}]+)}/g, function (match, key) {
            return (opt_values != null && key in opt_values) ? opt_values[key] :
                match;
        });
    }
    return str;
};
goog.getMsgWithFallback = function (a, b) {
    return a;
};
goog.exportSymbol = function (publicPath, object, opt_objectToExportTo) {
    goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function (object, publicName, symbol) {
    object[publicName] = symbol;
};
goog.inherits = function (childCtor, parentCtor) {
    function tempCtor() { }
    tempCtor.prototype = parentCtor.prototype;
    childCtor.superClass_ = parentCtor.prototype;
    childCtor.prototype = new tempCtor();
    childCtor.prototype.constructor = childCtor;
    childCtor.base = function (me, methodName, var_args) {
        var args = new Array(arguments.length - 2);
        for (var i = 2; i < arguments.length; i++) {
            args[i - 2] = arguments[i];
        }
        return parentCtor.prototype[methodName].apply(me, args);
    };
};
goog.base = function (me, opt_methodName, var_args) {
    var caller = arguments.callee.caller;
    if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {
        throw new Error('arguments.caller not defined.  goog.base() cannot be used ' +
            'with strict mode code. See ' +
            'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
    }
    if (typeof caller.superClass_ !== 'undefined') {
        var ctorArgs = new Array(arguments.length - 1);
        for (var i = 1; i < arguments.length; i++) {
            ctorArgs[i - 1] = arguments[i];
        }
        return caller.superClass_.constructor.apply(me, ctorArgs);
    }
    if (typeof opt_methodName != 'string' && typeof opt_methodName != 'symbol') {
        throw new Error('method names provided to goog.base must be a string or a symbol');
    }
    var args = new Array(arguments.length - 2);
    for (var i = 2; i < arguments.length; i++) {
        args[i - 2] = arguments[i];
    }
    var foundCaller = false;
    for (var ctor = me.constructor; ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {
        if (ctor.prototype[opt_methodName] === caller) {
            foundCaller = true;
        }
        else if (foundCaller) {
            return ctor.prototype[opt_methodName].apply(me, args);
        }
    }
    if (me[opt_methodName] === caller) {
        return me.constructor.prototype[opt_methodName].apply(me, args);
    }
    else {
        throw new Error('goog.base called from a method of one name ' +
            'to a method of a different name');
    }
};
goog.scope = function (fn) {
    if (goog.isInModuleLoader_()) {
        throw new Error('goog.scope is not supported within a module.');
    }
    fn.call(goog.global);
};
if (!COMPILED) {
    goog.global['COMPILED'] = COMPILED;
}
goog.defineClass = function (superClass, def) {
    var constructor = def.constructor;
    var statics = def.statics;
    if (!constructor || constructor == Object.prototype.constructor) {
        constructor = function () {
            throw new Error('cannot instantiate an interface (no constructor defined).');
        };
    }
    var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
    if (superClass) {
        goog.inherits(cls, superClass);
    }
    delete def.constructor;
    delete def.statics;
    goog.defineClass.applyProperties_(cls.prototype, def);
    if (statics != null) {
        if (statics instanceof Function) {
            statics(cls);
        }
        else {
            goog.defineClass.applyProperties_(cls, statics);
        }
    }
    return cls;
};
goog.defineClass.ClassDescriptor;
goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function (ctr, superClass) {
    if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
        return ctr;
    }
    var superclassSealable = !goog.defineClass.isUnsealable_(superClass);
    var wrappedCtr = function () {
        var instance = ctr.apply(this, arguments) || this;
        instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
        if (this.constructor === wrappedCtr && superclassSealable &&
            Object.seal instanceof Function) {
            Object.seal(instance);
        }
        return instance;
    };
    return wrappedCtr;
};
goog.defineClass.isUnsealable_ = function (ctr) {
    return ctr && ctr.prototype &&
        ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
];
goog.defineClass.applyProperties_ = function (target, source) {
    var key;
    for (key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
    for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
        key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
        if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
        }
    }
};
goog.tagUnsealableClass = function (ctr) {
    if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
        ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
    }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';
if (!COMPILED && goog.DEPENDENCIES_ENABLED) {
    goog.inHtmlDocument_ = function () {
        var doc = goog.global.document;
        return doc != null && 'write' in doc;
    };
    goog.isDocumentLoading_ = function () {
        var doc = goog.global.document;
        return doc.attachEvent ? doc.readyState != 'complete' :
            doc.readyState == 'loading';
    };
    goog.findBasePath_ = function () {
        if (goog.isDef(goog.global.CLOSURE_BASE_PATH) &&
            goog.isString(goog.global.CLOSURE_BASE_PATH)) {
            goog.basePath = goog.global.CLOSURE_BASE_PATH;
            return;
        }
        else if (!goog.inHtmlDocument_()) {
            return;
        }
        var doc = goog.global.document;
        var currentScript = doc.currentScript;
        if (currentScript) {
            var scripts = [currentScript];
        }
        else {
            var scripts = doc.getElementsByTagName('SCRIPT');
        }
        for (var i = scripts.length - 1; i >= 0; --i) {
            var script = (scripts[i]);
            var src = script.src;
            var qmark = src.lastIndexOf('?');
            var l = qmark == -1 ? src.length : qmark;
            if (src.substr(l - 7, 7) == 'base.js') {
                goog.basePath = src.substr(0, l - 7);
                return;
            }
        }
    };
    goog.findBasePath_();
    goog.Transpiler = function () {
        this.requiresTranspilation_ = null;
    };
    goog.Transpiler.prototype.createRequiresTranspilation_ = function () {
        var requiresTranspilation = { 'es3': false };
        var transpilationRequiredForAllLaterModes = false;
        function addNewerLanguageTranspilationCheck(modeName, isSupported) {
            if (transpilationRequiredForAllLaterModes) {
                requiresTranspilation[modeName] = true;
            }
            else if (isSupported()) {
                requiresTranspilation[modeName] = false;
            }
            else {
                requiresTranspilation[modeName] = true;
                transpilationRequiredForAllLaterModes = true;
            }
        }
        function evalCheck(code) {
            try {
                return !!eval(code);
            }
            catch (ignored) {
                return false;
            }
        }
        var userAgent = goog.global.navigator && goog.global.navigator.userAgent ?
            goog.global.navigator.userAgent :
            '';
        addNewerLanguageTranspilationCheck('es5', function () {
            return evalCheck('[1,].length==1');
        });
        addNewerLanguageTranspilationCheck('es6', function () {
            var re = /Edge\/(\d+)(\.\d)*/i;
            var edgeUserAgent = userAgent.match(re);
            if (edgeUserAgent && Number(edgeUserAgent[1]) < 15) {
                return false;
            }
            var es6fullTest = 'class X{constructor(){if(new.target!=String)throw 1;this.x=42}}' +
                'let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof ' +
                'String))throw 1;for(const a of[2,3]){if(a==2)continue;function ' +
                'f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()' +
                '==3}';
            return evalCheck('(()=>{"use strict";' + es6fullTest + '})()');
        });
        addNewerLanguageTranspilationCheck('es6-impl', function () {
            return true;
        });
        addNewerLanguageTranspilationCheck('es7', function () {
            return evalCheck('2 ** 2 == 4');
        });
        addNewerLanguageTranspilationCheck('es8', function () {
            return evalCheck('async () => 1, true');
        });
        addNewerLanguageTranspilationCheck('es9', function () {
            return evalCheck('({...rest} = {}), true');
        });
        addNewerLanguageTranspilationCheck('es_next', function () {
            return evalCheck('({...rest} = {}), true');
        });
        return requiresTranspilation;
    };
    goog.Transpiler.prototype.needsTranspile = function (lang, module) {
        if (goog.TRANSPILE == 'always') {
            return true;
        }
        else if (goog.TRANSPILE == 'never') {
            return false;
        }
        else if (!this.requiresTranspilation_) {
            this.requiresTranspilation_ = this.createRequiresTranspilation_();
        }
        if (lang in this.requiresTranspilation_) {
            return this.requiresTranspilation_[lang];
        }
        else {
            throw new Error('Unknown language mode: ' + lang);
        }
    };
    goog.Transpiler.prototype.transpile = function (code, path) {
        return goog.transpile_(code, path);
    };
    goog.transpiler_ = new goog.Transpiler();
    goog.protectScriptTag_ = function (str) {
        return str.replace(/<\/(SCRIPT)/ig, '\\x3c/$1');
    };
    goog.DebugLoader_ = function () {
        this.dependencies_ = {};
        this.idToPath_ = {};
        this.written_ = {};
        this.loadingDeps_ = [];
        this.depsToLoad_ = [];
        this.paused_ = false;
        this.factory_ = new goog.DependencyFactory(goog.transpiler_);
        this.deferredCallbacks_ = {};
        this.deferredQueue_ = [];
    };
    goog.DebugLoader_.prototype.bootstrap = function (namespaces, callback) {
        var cb = callback;
        function resolve() {
            if (cb) {
                goog.global.setTimeout(cb, 0);
                cb = null;
            }
        }
        if (!namespaces.length) {
            resolve();
            return;
        }
        var deps = [];
        for (var i = 0; i < namespaces.length; i++) {
            var path = this.getPathFromDeps_(namespaces[i]);
            if (!path) {
                throw new Error('Unregonized namespace: ' + namespaces[i]);
            }
            deps.push(this.dependencies_[path]);
        }
        var require = goog.require;
        var loaded = 0;
        for (var i = 0; i < namespaces.length; i++) {
            require(namespaces[i]);
            deps[i].onLoad(function () {
                if (++loaded == namespaces.length) {
                    resolve();
                }
            });
        }
    };
    goog.DebugLoader_.prototype.loadClosureDeps = function () {
        var relPath = 'deps.js';
        this.depsToLoad_.push(this.factory_.createDependency(goog.normalizePath_(goog.basePath + relPath), relPath, [], [], {}, false));
        this.loadDeps_();
    };
    goog.DebugLoader_.prototype.requested = function (absPathOrId, opt_force) {
        var path = this.getPathFromDeps_(absPathOrId);
        if (path &&
            (opt_force || this.areDepsLoaded_(this.dependencies_[path].requires))) {
            var callback = this.deferredCallbacks_[path];
            if (callback) {
                delete this.deferredCallbacks_[path];
                callback();
            }
        }
    };
    goog.DebugLoader_.prototype.setDependencyFactory = function (factory) {
        this.factory_ = factory;
    };
    goog.DebugLoader_.prototype.load_ = function (absPathOrId) {
        if (!this.getPathFromDeps_(absPathOrId)) {
            var errorMessage = 'goog.require could not find: ' + absPathOrId;
            goog.logToConsole_(errorMessage);
            throw Error(errorMessage);
        }
        else {
            var loader = this;
            var deps = [];
            var visit = function (absPathOrId) {
                var path = loader.getPathFromDeps_(absPathOrId);
                if (!path) {
                    throw new Error('Bad dependency path or symbol: ' + absPathOrId);
                }
                if (loader.written_[path]) {
                    return;
                }
                loader.written_[path] = true;
                var dep = loader.dependencies_[path];
                for (var i = 0; i < dep.requires.length; i++) {
                    if (!goog.isProvided_(dep.requires[i])) {
                        visit(dep.requires[i]);
                    }
                }
                deps.push(dep);
            };
            visit(absPathOrId);
            var wasLoading = !!this.depsToLoad_.length;
            this.depsToLoad_ = this.depsToLoad_.concat(deps);
            if (!this.paused_ && !wasLoading) {
                this.loadDeps_();
            }
        }
    };
    goog.DebugLoader_.prototype.loadDeps_ = function () {
        var loader = this;
        var paused = this.paused_;
        while (this.depsToLoad_.length && !paused) {
            (function () {
                var loadCallDone = false;
                var dep = loader.depsToLoad_.shift();
                var loaded = false;
                loader.loading_(dep);
                var controller = {
                    pause: function () {
                        if (loadCallDone) {
                            throw new Error('Cannot call pause after the call to load.');
                        }
                        else {
                            paused = true;
                        }
                    },
                    resume: function () {
                        if (loadCallDone) {
                            loader.resume_();
                        }
                        else {
                            paused = false;
                        }
                    },
                    loaded: function () {
                        if (loaded) {
                            throw new Error('Double call to loaded.');
                        }
                        loaded = true;
                        loader.loaded_(dep);
                    },
                    pending: function () {
                        var pending = [];
                        for (var i = 0; i < loader.loadingDeps_.length; i++) {
                            pending.push(loader.loadingDeps_[i]);
                        }
                        return pending;
                    },
                    setModuleState: function (path, type) {
                        goog.moduleLoaderState_ = {
                            path: path,
                            type: type,
                            moduleName: '',
                            declareLegacyNamespace: false
                        };
                    },
                    registerEs6ModuleExports: function (path, exports) {
                        goog.loadedModules_[path] = {
                            exports: exports,
                            type: goog.ModuleType.ES6,
                            moduleId: ''
                        };
                    },
                    registerGoogModuleExports: function (moduleId, exports) {
                        goog.loadedModules_[moduleId] = {
                            exports: exports,
                            type: goog.ModuleType.GOOG,
                            moduleId: moduleId
                        };
                    },
                    clearModuleState: function () {
                        goog.moduleLoaderState_ = null;
                    },
                    defer: function (callback) {
                        if (loadCallDone) {
                            throw new Error('Cannot register with defer after the call to load.');
                        }
                        loader.defer_(dep, callback);
                    },
                    areDepsLoaded: function () {
                        return loader.areDepsLoaded_(dep.requires);
                    }
                };
                try {
                    dep.load(controller);
                }
                finally {
                    loadCallDone = true;
                }
            })();
        }
        if (paused) {
            this.pause_();
        }
    };
    goog.DebugLoader_.prototype.pause_ = function () {
        this.paused_ = true;
    };
    goog.DebugLoader_.prototype.resume_ = function () {
        if (this.paused_) {
            this.paused_ = false;
            this.loadDeps_();
        }
    };
    goog.DebugLoader_.prototype.loading_ = function (dep) {
        this.loadingDeps_.push(dep);
    };
    goog.DebugLoader_.prototype.loaded_ = function (dep) {
        for (var i = 0; i < this.loadingDeps_.length; i++) {
            if (this.loadingDeps_[i] == dep) {
                this.loadingDeps_.splice(i, 1);
                break;
            }
        }
        for (var i = 0; i < this.deferredQueue_.length; i++) {
            if (this.deferredQueue_[i] == dep.path) {
                this.deferredQueue_.splice(i, 1);
                break;
            }
        }
        if (this.loadingDeps_.length == this.deferredQueue_.length &&
            !this.depsToLoad_.length) {
            while (this.deferredQueue_.length) {
                this.requested(this.deferredQueue_.shift(), true);
            }
        }
        dep.loaded();
    };
    goog.DebugLoader_.prototype.areDepsLoaded_ = function (pathsOrIds) {
        for (var i = 0; i < pathsOrIds.length; i++) {
            var path = this.getPathFromDeps_(pathsOrIds[i]);
            if (!path ||
                (!(path in this.deferredCallbacks_) &&
                    !goog.isProvided_(pathsOrIds[i]))) {
                return false;
            }
        }
        return true;
    };
    goog.DebugLoader_.prototype.getPathFromDeps_ = function (absPathOrId) {
        if (absPathOrId in this.idToPath_) {
            return this.idToPath_[absPathOrId];
        }
        else if (absPathOrId in this.dependencies_) {
            return absPathOrId;
        }
        else {
            return null;
        }
    };
    goog.DebugLoader_.prototype.defer_ = function (dependency, callback) {
        this.deferredCallbacks_[dependency.path] = callback;
        this.deferredQueue_.push(dependency.path);
    };
    goog.LoadController = function () { };
    goog.LoadController.prototype.pause = function () { };
    goog.LoadController.prototype.resume = function () { };
    goog.LoadController.prototype.loaded = function () { };
    goog.LoadController.prototype.pending = function () { };
    goog.LoadController.prototype.registerEs6ModuleExports = function (path, exports) { };
    goog.LoadController.prototype.setModuleState = function (path, type) { };
    goog.LoadController.prototype.clearModuleState = function () { };
    goog.LoadController.prototype.defer = function (callback) { };
    goog.LoadController.prototype.areDepsLoaded = function () { };
    goog.Dependency = function (path, relativePath, provides, requires, loadFlags) {
        this.path = path;
        this.relativePath = relativePath;
        this.provides = provides;
        this.requires = requires;
        this.loadFlags = loadFlags;
        this.loaded_ = false;
        this.loadCallbacks_ = [];
    };
    goog.Dependency.prototype.onLoad = function (callback) {
        if (this.loaded_) {
            callback();
        }
        else {
            this.loadCallbacks_.push(callback);
        }
    };
    goog.Dependency.prototype.loaded = function () {
        this.loaded_ = true;
        var callbacks = this.loadCallbacks_;
        this.loadCallbacks_ = [];
        for (var i = 0; i < callbacks.length; i++) {
            callbacks[i]();
        }
    };
    goog.Dependency.defer_ = false;
    goog.Dependency.callbackMap_ = {};
    goog.Dependency.registerCallback_ = function (callback) {
        var key = Math.random().toString(32);
        goog.Dependency.callbackMap_[key] = callback;
        return key;
    };
    goog.Dependency.unregisterCallback_ = function (key) {
        delete goog.Dependency.callbackMap_[key];
    };
    goog.Dependency.callback_ = function (key, var_args) {
        if (key in goog.Dependency.callbackMap_) {
            var callback = goog.Dependency.callbackMap_[key];
            var args = [];
            for (var i = 1; i < arguments.length; i++) {
                args.push(arguments[i]);
            }
            callback.apply(undefined, args);
        }
        else {
            var errorMessage = 'Callback key ' + key +
                ' does not exist (was base.js loaded more than once?).';
            throw Error(errorMessage);
        }
    };
    goog.Dependency.prototype.load = function (controller) {
        if (goog.global.CLOSURE_IMPORT_SCRIPT) {
            if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {
                controller.loaded();
            }
            else {
                controller.pause();
            }
            return;
        }
        if (!goog.inHtmlDocument_()) {
            goog.logToConsole_('Cannot use default debug loader outside of HTML documents.');
            if (this.relativePath == 'deps.js') {
                goog.logToConsole_('Consider setting CLOSURE_IMPORT_SCRIPT before loading base.js, ' +
                    'or seting CLOSURE_NO_DEPS to true.');
                controller.loaded();
            }
            else {
                controller.pause();
            }
            return;
        }
        var doc = goog.global.document;
        if (doc.readyState == 'complete' &&
            !goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            var isDeps = /\bdeps.js$/.test(this.path);
            if (isDeps) {
                controller.loaded();
                return;
            }
            else {
                throw Error('Cannot write "' + this.path + '" after document load');
            }
        }
        if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&
            goog.isDocumentLoading_()) {
            var key = goog.Dependency.registerCallback_(function (script) {
                if (!goog.DebugLoader_.IS_OLD_IE_ || script.readyState == 'complete') {
                    goog.Dependency.unregisterCallback_(key);
                    controller.loaded();
                }
            });
            var event = goog.DebugLoader_.IS_OLD_IE_ ? 'onreadystatechange' : 'onload';
            var defer = goog.Dependency.defer_ ? 'defer' : '';
            doc.write('<script src="' + this.path + '" ' + event +
                '="goog.Dependency.callback_(\'' + key +
                '\', this)" type="text/javascript" ' + defer + '><' +
                '/script>');
        }
        else {
            var scriptEl = (doc.createElement('script'));
            scriptEl.defer = goog.Dependency.defer_;
            scriptEl.async = false;
            scriptEl.type = 'text/javascript';
            if (goog.DebugLoader_.IS_OLD_IE_) {
                controller.pause();
                scriptEl.onreadystatechange = function () {
                    if (scriptEl.readyState == 'loaded' ||
                        scriptEl.readyState == 'complete') {
                        controller.loaded();
                        controller.resume();
                    }
                };
            }
            else {
                scriptEl.onload = function () {
                    scriptEl.onload = null;
                    controller.loaded();
                };
            }
            scriptEl.src = this.path;
            doc.head.appendChild(scriptEl);
        }
    };
    goog.Es6ModuleDependency = function (path, relativePath, requires, loadFlags) {
        goog.Es6ModuleDependency.base(this, 'constructor', path, relativePath, [], requires, loadFlags);
    };
    goog.inherits(goog.Es6ModuleDependency, goog.Dependency);
    goog.Es6ModuleDependency.prototype.load = function (controller) {
        if (goog.global.CLOSURE_IMPORT_SCRIPT) {
            if (goog.global.CLOSURE_IMPORT_SCRIPT(this.path)) {
                controller.loaded();
            }
            else {
                controller.pause();
            }
            return;
        }
        if (!goog.inHtmlDocument_()) {
            goog.logToConsole_('Cannot use default debug loader outside of HTML documents.');
            controller.pause();
            return;
        }
        var doc = goog.global.document;
        var dep = this;
        function write(src, contents) {
            if (contents) {
                doc.write('<script type="module" crossorigin>' + contents + '</' +
                    'script>');
            }
            else {
                doc.write('<script type="module" crossorigin src="' + src + '"></' +
                    'script>');
            }
        }
        function append(src, contents) {
            var scriptEl = (doc.createElement('script'));
            scriptEl.defer = true;
            scriptEl.async = false;
            scriptEl.type = 'module';
            scriptEl.setAttribute('crossorigin', true);
            if (contents) {
                scriptEl.textContent = contents;
            }
            else {
                scriptEl.src = src;
            }
            doc.head.appendChild(scriptEl);
        }
        var create;
        if (goog.isDocumentLoading_()) {
            create = write;
            goog.Dependency.defer_ = true;
        }
        else {
            create = append;
        }
        var beforeKey = goog.Dependency.registerCallback_(function () {
            goog.Dependency.unregisterCallback_(beforeKey);
            controller.setModuleState(dep.path, goog.ModuleType.ES6);
        });
        create(undefined, 'goog.Dependency.callback_("' + beforeKey + '")');
        create(this.path, undefined);
        var registerKey = goog.Dependency.registerCallback_(function (exports) {
            goog.Dependency.unregisterCallback_(registerKey);
            controller.registerEs6ModuleExports(dep.path, exports);
        });
        create(undefined, 'import * as m from "' + this.path + '"; goog.Dependency.callback_("' +
            registerKey + '", m)');
        var afterKey = goog.Dependency.registerCallback_(function () {
            goog.Dependency.unregisterCallback_(afterKey);
            controller.clearModuleState();
            controller.loaded();
        });
        create(undefined, 'goog.Dependency.callback_("' + afterKey + '")');
    };
    goog.TransformedDependency = function (path, relativePath, provides, requires, loadFlags) {
        goog.TransformedDependency.base(this, 'constructor', path, relativePath, provides, requires, loadFlags);
        this.contents_ = null;
    };
    goog.inherits(goog.TransformedDependency, goog.Dependency);
    goog.TransformedDependency.prototype.load = function (controller) {
        if (!goog.global.CLOSURE_IMPORT_SCRIPT && goog.inHtmlDocument_() &&
            goog.isDocumentLoading_()) {
            var doc = goog.global.document;
            var dep = this;
            var key = goog.Dependency.registerCallback_(function () {
                goog.Dependency.unregisterCallback_(key);
                dep.loadImpl_(controller);
            });
            doc.write('<script type="text/javascript">' +
                goog.protectScriptTag_('goog.Dependency.callback_("' + key + '");') +
                '</' +
                'script>');
        }
        else {
            this.loadImpl_(controller);
        }
    };
    goog.TransformedDependency.prototype.loadImpl_ = function (controller) {
        this.contents_ = goog.loadFileSync_(this.path);
        if (this.contents_) {
            this.contents_ = this.transform(this.contents_);
            if (this.contents_) {
                this.contents_ += '\n//# sourceURL=' + this.path;
            }
        }
        if (!this.contents_) {
            controller.pause();
            return;
        }
        if (goog.global.CLOSURE_IMPORT_SCRIPT) {
            if (goog.global.CLOSURE_IMPORT_SCRIPT('', this.contents_)) {
                this.contents_ = null;
                controller.loaded();
            }
            else {
                controller.pause();
            }
            return;
        }
        var dep = this;
        var isEs6 = this.loadFlags['module'] == goog.ModuleType.ES6;
        function load(shouldEval) {
            if (!dep.contents_) {
                return;
            }
            if (isEs6) {
                controller.setModuleState(dep.path, goog.ModuleType.ES6);
            }
            try {
                var contents = dep.contents_;
                dep.contents_ = null;
                if (shouldEval) {
                    goog.globalEval(contents);
                }
                else {
                    var doc = goog.global.document;
                    doc.write('<script type="text/javascript">' +
                        goog.protectScriptTag_(contents) + '</' +
                        'script>');
                }
            }
            finally {
                if (isEs6) {
                    controller.clearModuleState();
                }
            }
            if (isEs6) {
                goog.global['$jscomp']['require']['ensure']([dep.path], function () {
                    controller.registerEs6ModuleExports(dep.path, goog.global['$jscomp']['require'](dep.path));
                });
            }
            controller.loaded();
        }
        var pending = controller.pending();
        if (pending.length > 1 && goog.DebugLoader_.IS_OLD_IE_) {
            controller.defer(function () {
                load(true);
            });
            return;
        }
        if (isEs6 && goog.inHtmlDocument_() && goog.isDocumentLoading_()) {
            var doc = goog.global.document;
            controller.pause();
            var oldCallback = doc.onreadystatechange;
            doc.onreadystatechange = function () {
                if (doc.attachEvent ? doc.readyState == 'complete' :
                    doc.readyState == 'interactive') {
                    doc.onreadystatechange = oldCallback;
                    load(true);
                    controller.resume();
                }
                if (goog.isFunction(oldCallback)) {
                    oldCallback.apply(undefined, arguments);
                }
            };
        }
        else {
            load(goog.DebugLoader_.IS_OLD_IE_ || !goog.inHtmlDocument_() ||
                !goog.isDocumentLoading_());
        }
    };
    goog.TransformedDependency.prototype.transform = function (contents) { };
    goog.TranspiledDependency = function (path, relativePath, provides, requires, loadFlags, transpiler) {
        goog.TranspiledDependency.base(this, 'constructor', path, relativePath, provides, requires, loadFlags);
        this.transpiler = transpiler;
    };
    goog.inherits(goog.TranspiledDependency, goog.TransformedDependency);
    goog.TranspiledDependency.prototype.transform = function (contents) {
        return this.transpiler.transpile(contents, this.path);
    };
    goog.GoogModuleDependency = function (path, relativePath, provides, requires, loadFlags, needsTranspile, transpiler) {
        goog.GoogModuleDependency.base(this, 'constructor', path, relativePath, provides, requires, loadFlags);
        this.needsTranspile_ = needsTranspile;
        this.transpiler_ = transpiler;
    };
    goog.inherits(goog.GoogModuleDependency, goog.TransformedDependency);
    goog.GoogModuleDependency.prototype.transform = function (contents) {
        if (this.needsTranspile_) {
            contents = this.transpiler_.transpile(contents, this.path);
        }
        if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
            return '' +
                'goog.loadModule(function(exports) {' +
                '"use strict";' + contents +
                '\n' +
                ';return exports' +
                '}, "' + this.path + '");' +
                '\n//# sourceURL=' + this.path + '\n';
        }
        else {
            return '' +
                'goog.loadModule(' +
                goog.global.JSON.stringify(contents + '\n//# sourceURL=' + this.path + '\n') +
                ', "' + this.path + '");';
        }
    };
    goog.DebugLoader_.IS_OLD_IE_ =
        !!(!goog.global.atob && goog.global.document && goog.global.document.all);
    goog.DebugLoader_.prototype.addDependency = function (relPath, provides, requires, opt_loadFlags) {
        provides = provides || [];
        relPath = relPath.replace(/\\/g, '/');
        var path = goog.normalizePath_(goog.basePath + relPath);
        if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {
            opt_loadFlags = opt_loadFlags ? { 'module': goog.ModuleType.GOOG } : {};
        }
        var dep = this.factory_.createDependency(path, relPath, provides, requires, opt_loadFlags, goog.transpiler_.needsTranspile(opt_loadFlags['lang'] || 'es3', opt_loadFlags['module']));
        this.dependencies_[path] = dep;
        for (var i = 0; i < provides.length; i++) {
            this.idToPath_[provides[i]] = path;
        }
        this.idToPath_[relPath] = path;
    };
    goog.DependencyFactory = function (transpiler) {
        this.transpiler = transpiler;
    };
    goog.DependencyFactory.prototype.createDependency = function (path, relativePath, provides, requires, loadFlags, needsTranspile) {
        if (loadFlags['module'] == goog.ModuleType.ES6) {
            throw new Error('ES6 modules are not currently supported by the debug loader.');
        }
        if (loadFlags['module'] == goog.ModuleType.GOOG) {
            return new goog.GoogModuleDependency(path, relativePath, provides, requires, loadFlags, needsTranspile, this.transpiler);
        }
        else if (needsTranspile) {
            return new goog.TranspiledDependency(path, relativePath, provides, requires, loadFlags, this.transpiler);
        }
        else {
            if (loadFlags['module'] == goog.ModuleType.ES6) {
                return new goog.Es6ModuleDependency(path, relativePath, requires, loadFlags);
            }
            else {
                return new goog.Dependency(path, relativePath, provides, requires, loadFlags);
            }
        }
    };
    goog.debugLoader_ = new goog.DebugLoader_();
    goog.loadClosureDeps = function () {
        goog.debugLoader_.loadClosureDeps();
    };
    goog.setDependencyFactory = function (factory) {
        goog.debugLoader_.setDependencyFactory(factory);
    };
    if (!goog.global.CLOSURE_NO_DEPS) {
        goog.debugLoader_.loadClosureDeps();
    }
    goog.bootstrap = function (namespaces, callback) {
        goog.debugLoader_.bootstrap(namespaces, callback);
    };
}
goog.provide('goog.object');
goog.object.is = function (v, v2) {
    if (v === v2) {
        return v !== 0 || 1 / v === 1 / (v2);
    }
    return v !== v && v2 !== v2;
};
goog.object.forEach = function (obj, f, opt_obj) {
    for (var key in obj) {
        f.call((opt_obj), obj[key], key, obj);
    }
};
goog.object.filter = function (obj, f, opt_obj) {
    var res = {};
    for (var key in obj) {
        if (f.call((opt_obj), obj[key], key, obj)) {
            res[key] = obj[key];
        }
    }
    return res;
};
goog.object.map = function (obj, f, opt_obj) {
    var res = {};
    for (var key in obj) {
        res[key] = f.call((opt_obj), obj[key], key, obj);
    }
    return res;
};
goog.object.some = function (obj, f, opt_obj) {
    for (var key in obj) {
        if (f.call((opt_obj), obj[key], key, obj)) {
            return true;
        }
    }
    return false;
};
goog.object.every = function (obj, f, opt_obj) {
    for (var key in obj) {
        if (!f.call((opt_obj), obj[key], key, obj)) {
            return false;
        }
    }
    return true;
};
goog.object.getCount = function (obj) {
    var rv = 0;
    for (var key in obj) {
        rv++;
    }
    return rv;
};
goog.object.getAnyKey = function (obj) {
    for (var key in obj) {
        return key;
    }
};
goog.object.getAnyValue = function (obj) {
    for (var key in obj) {
        return obj[key];
    }
};
goog.object.contains = function (obj, val) {
    return goog.object.containsValue(obj, val);
};
goog.object.getValues = function (obj) {
    var res = [];
    var i = 0;
    for (var key in obj) {
        res[i++] = obj[key];
    }
    return res;
};
goog.object.getKeys = function (obj) {
    var res = [];
    var i = 0;
    for (var key in obj) {
        res[i++] = key;
    }
    return res;
};
goog.object.getValueByKeys = function (obj, var_args) {
    var isArrayLike = goog.isArrayLike(var_args);
    var keys = isArrayLike ?
        (var_args) :
        arguments;
    for (var i = isArrayLike ? 0 : 1; i < keys.length; i++) {
        if (obj == null)
            return undefined;
        obj = obj[keys[i]];
    }
    return obj;
};
goog.object.containsKey = function (obj, key) {
    return obj !== null && key in obj;
};
goog.object.containsValue = function (obj, val) {
    for (var key in obj) {
        if (obj[key] == val) {
            return true;
        }
    }
    return false;
};
goog.object.findKey = function (obj, f, opt_this) {
    for (var key in obj) {
        if (f.call((opt_this), obj[key], key, obj)) {
            return key;
        }
    }
    return undefined;
};
goog.object.findValue = function (obj, f, opt_this) {
    var key = goog.object.findKey(obj, f, opt_this);
    return key && obj[key];
};
goog.object.isEmpty = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
goog.object.clear = function (obj) {
    for (var i in obj) {
        delete obj[i];
    }
};
goog.object.remove = function (obj, key) {
    var rv;
    if (rv = key in (obj)) {
        delete obj[key];
    }
    return rv;
};
goog.object.add = function (obj, key, val) {
    if (obj !== null && key in obj) {
        throw new Error('The object already contains the key "' + key + '"');
    }
    goog.object.set(obj, key, val);
};
goog.object.get = function (obj, key, opt_val) {
    if (obj !== null && key in obj) {
        return obj[key];
    }
    return opt_val;
};
goog.object.set = function (obj, key, value) {
    obj[key] = value;
};
goog.object.setIfUndefined = function (obj, key, value) {
    return key in (obj) ? obj[key] : (obj[key] = value);
};
goog.object.setWithReturnValueIfNotSet = function (obj, key, f) {
    if (key in obj) {
        return obj[key];
    }
    var val = f();
    obj[key] = val;
    return val;
};
goog.object.equals = function (a, b) {
    for (var k in a) {
        if (!(k in b) || a[k] !== b[k]) {
            return false;
        }
    }
    for (var k in b) {
        if (!(k in a)) {
            return false;
        }
    }
    return true;
};
goog.object.clone = function (obj) {
    var res = {};
    for (var key in obj) {
        res[key] = obj[key];
    }
    return res;
};
goog.object.unsafeClone = function (obj) {
    var type = goog.typeOf(obj);
    if (type == 'object' || type == 'array') {
        if (goog.isFunction(obj.clone)) {
            return obj.clone();
        }
        var clone = type == 'array' ? [] : {};
        for (var key in obj) {
            clone[key] = goog.object.unsafeClone(obj[key]);
        }
        return clone;
    }
    return obj;
};
goog.object.transpose = function (obj) {
    var transposed = {};
    for (var key in obj) {
        transposed[obj[key]] = key;
    }
    return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = [
    'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
    'toLocaleString', 'toString', 'valueOf'
];
goog.object.extend = function (target, var_args) {
    var key, source;
    for (var i = 1; i < arguments.length; i++) {
        source = arguments[i];
        for (key in source) {
            target[key] = source[key];
        }
        for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
            key = goog.object.PROTOTYPE_FIELDS_[j];
            if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
            }
        }
    }
};
goog.object.create = function (var_args) {
    var argLength = arguments.length;
    if (argLength == 1 && goog.isArray(arguments[0])) {
        return goog.object.create.apply(null, arguments[0]);
    }
    if (argLength % 2) {
        throw new Error('Uneven number of arguments');
    }
    var rv = {};
    for (var i = 0; i < argLength; i += 2) {
        rv[arguments[i]] = arguments[i + 1];
    }
    return rv;
};
goog.object.createSet = function (var_args) {
    var argLength = arguments.length;
    if (argLength == 1 && goog.isArray(arguments[0])) {
        return goog.object.createSet.apply(null, arguments[0]);
    }
    var rv = {};
    for (var i = 0; i < argLength; i++) {
        rv[arguments[i]] = true;
    }
    return rv;
};
goog.object.createImmutableView = function (obj) {
    var result = obj;
    if (Object.isFrozen && !Object.isFrozen(obj)) {
        result = Object.create(obj);
        Object.freeze(result);
    }
    return result;
};
goog.object.isImmutableView = function (obj) {
    return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.object.getAllPropertyNames = function (obj, opt_includeObjectPrototype, opt_includeFunctionPrototype) {
    if (!obj) {
        return [];
    }
    if (!Object.getOwnPropertyNames || !Object.getPrototypeOf) {
        return goog.object.getKeys(obj);
    }
    var visitedSet = {};
    var proto = obj;
    while (proto &&
        (proto !== Object.prototype || !!opt_includeObjectPrototype) &&
        (proto !== Function.prototype || !!opt_includeFunctionPrototype)) {
        var names = Object.getOwnPropertyNames(proto);
        for (var i = 0; i < names.length; i++) {
            visitedSet[names[i]] = true;
        }
        proto = Object.getPrototypeOf(proto);
    }
    return goog.object.getKeys(visitedSet);
};
goog.provide('goog.debug');
goog.require('goog.array');
goog.require('goog.debug.errorcontext');
goog.require('goog.userAgent');
goog.define('goog.debug.LOGGING_ENABLED', goog.DEBUG);
goog.define('goog.debug.FORCE_SLOPPY_STACKS', false);
goog.debug.catchErrors = function (logFunc, opt_cancel, opt_target) {
    var target = opt_target || goog.global;
    var oldErrorHandler = target.onerror;
    var retVal = !!opt_cancel;
    if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher('535.3')) {
        retVal = !retVal;
    }
    target.onerror = function (message, url, line, opt_col, opt_error) {
        if (oldErrorHandler) {
            oldErrorHandler(message, url, line, opt_col, opt_error);
        }
        logFunc({
            message: message,
            fileName: url,
            line: line,
            lineNumber: line,
            col: opt_col,
            error: opt_error
        });
        return retVal;
    };
};
goog.debug.expose = function (obj, opt_showFn) {
    if (typeof obj == 'undefined') {
        return 'undefined';
    }
    if (obj == null) {
        return 'NULL';
    }
    var str = [];
    for (var x in obj) {
        if (!opt_showFn && goog.isFunction(obj[x])) {
            continue;
        }
        var s = x + ' = ';
        try {
            s += obj[x];
        }
        catch (e) {
            s += '*** ' + e + ' ***';
        }
        str.push(s);
    }
    return str.join('\n');
};
goog.debug.deepExpose = function (obj, opt_showFn) {
    var str = [];
    var uidsToCleanup = [];
    var ancestorUids = {};
    var helper = function (obj, space) {
        var nestspace = space + '  ';
        var indentMultiline = function (str) {
            return str.replace(/\n/g, '\n' + space);
        };
        try {
            if (!goog.isDef(obj)) {
                str.push('undefined');
            }
            else if (goog.isNull(obj)) {
                str.push('NULL');
            }
            else if (goog.isString(obj)) {
                str.push('"' + indentMultiline(obj) + '"');
            }
            else if (goog.isFunction(obj)) {
                str.push(indentMultiline(String(obj)));
            }
            else if (goog.isObject(obj)) {
                if (!goog.hasUid(obj)) {
                    uidsToCleanup.push(obj);
                }
                var uid = goog.getUid(obj);
                if (ancestorUids[uid]) {
                    str.push('*** reference loop detected (id=' + uid + ') ***');
                }
                else {
                    ancestorUids[uid] = true;
                    str.push('{');
                    for (var x in obj) {
                        if (!opt_showFn && goog.isFunction(obj[x])) {
                            continue;
                        }
                        str.push('\n');
                        str.push(nestspace);
                        str.push(x + ' = ');
                        helper(obj[x], nestspace);
                    }
                    str.push('\n' + space + '}');
                    delete ancestorUids[uid];
                }
            }
            else {
                str.push(obj);
            }
        }
        catch (e) {
            str.push('*** ' + e + ' ***');
        }
    };
    helper(obj, '');
    for (var i = 0; i < uidsToCleanup.length; i++) {
        goog.removeUid(uidsToCleanup[i]);
    }
    return str.join('');
};
goog.debug.exposeArray = function (arr) {
    var str = [];
    for (var i = 0; i < arr.length; i++) {
        if (goog.isArray(arr[i])) {
            str.push(goog.debug.exposeArray(arr[i]));
        }
        else {
            str.push(arr[i]);
        }
    }
    return '[ ' + str.join(', ') + ' ]';
};
goog.debug.normalizeErrorObject = function (err) {
    var href = goog.getObjectByName('window.location.href');
    if (goog.isString(err)) {
        return {
            'message': err,
            'name': 'Unknown error',
            'lineNumber': 'Not available',
            'fileName': href,
            'stack': 'Not available'
        };
    }
    var lineNumber, fileName;
    var threwError = false;
    try {
        lineNumber = err.lineNumber || err.line || 'Not available';
    }
    catch (e) {
        lineNumber = 'Not available';
        threwError = true;
    }
    try {
        fileName = err.fileName || err.filename || err.sourceURL ||
            goog.global['$googDebugFname'] || href;
    }
    catch (e) {
        fileName = 'Not available';
        threwError = true;
    }
    if (threwError || !err.lineNumber || !err.fileName || !err.stack ||
        !err.message || !err.name) {
        return {
            'message': err.message || 'Not available',
            'name': err.name || 'UnknownError',
            'lineNumber': lineNumber,
            'fileName': fileName,
            'stack': err.stack || 'Not available'
        };
    }
    return (err);
};
goog.debug.enhanceError = function (err, opt_message) {
    var error;
    if (!(err instanceof Error)) {
        error = Error(err);
        if (Error.captureStackTrace) {
            Error.captureStackTrace(error, goog.debug.enhanceError);
        }
    }
    else {
        error = err;
    }
    if (!error.stack) {
        error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
    }
    if (opt_message) {
        var x = 0;
        while (error['message' + x]) {
            ++x;
        }
        error['message' + x] = String(opt_message);
    }
    return error;
};
goog.debug.enhanceErrorWithContext = function (err, opt_context) {
    var error = goog.debug.enhanceError(err);
    if (opt_context) {
        for (var key in opt_context) {
            goog.debug.errorcontext.addErrorContext(error, key, opt_context[key]);
        }
    }
    return error;
};
goog.debug.getStacktraceSimple = function (opt_depth) {
    if (!goog.debug.FORCE_SLOPPY_STACKS) {
        var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
        if (stack) {
            return stack;
        }
    }
    var sb = [];
    var fn = arguments.callee.caller;
    var depth = 0;
    while (fn && (!opt_depth || depth < opt_depth)) {
        sb.push(goog.debug.getFunctionName(fn));
        sb.push('()\n');
        try {
            fn = fn.caller;
        }
        catch (e) {
            sb.push('[exception trying to get caller]\n');
            break;
        }
        depth++;
        if (depth >= goog.debug.MAX_STACK_DEPTH) {
            sb.push('[...long stack...]');
            break;
        }
    }
    if (opt_depth && depth >= opt_depth) {
        sb.push('[...reached max depth limit...]');
    }
    else {
        sb.push('[end]');
    }
    return sb.join('');
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function (fn) {
    var tempErr = new Error();
    if (Error.captureStackTrace) {
        Error.captureStackTrace(tempErr, fn);
        return String(tempErr.stack);
    }
    else {
        try {
            throw tempErr;
        }
        catch (e) {
            tempErr = e;
        }
        var stack = tempErr.stack;
        if (stack) {
            return String(stack);
        }
    }
    return null;
};
goog.debug.getStacktrace = function (fn) {
    var stack;
    if (!goog.debug.FORCE_SLOPPY_STACKS) {
        var contextFn = fn || goog.debug.getStacktrace;
        stack = goog.debug.getNativeStackTrace_(contextFn);
    }
    if (!stack) {
        stack = goog.debug.getStacktraceHelper_(fn || arguments.callee.caller, []);
    }
    return stack;
};
goog.debug.getStacktraceHelper_ = function (fn, visited) {
    var sb = [];
    if (goog.array.contains(visited, fn)) {
        sb.push('[...circular reference...]');
    }
    else if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
        sb.push(goog.debug.getFunctionName(fn) + '(');
        var args = fn.arguments;
        for (var i = 0; args && i < args.length; i++) {
            if (i > 0) {
                sb.push(', ');
            }
            var argDesc;
            var arg = args[i];
            switch (typeof arg) {
                case 'object':
                    argDesc = arg ? 'object' : 'null';
                    break;
                case 'string':
                    argDesc = arg;
                    break;
                case 'number':
                    argDesc = String(arg);
                    break;
                case 'boolean':
                    argDesc = arg ? 'true' : 'false';
                    break;
                case 'function':
                    argDesc = goog.debug.getFunctionName(arg);
                    argDesc = argDesc ? argDesc : '[fn]';
                    break;
                case 'undefined':
                default:
                    argDesc = typeof arg;
                    break;
            }
            if (argDesc.length > 40) {
                argDesc = argDesc.substr(0, 40) + '...';
            }
            sb.push(argDesc);
        }
        visited.push(fn);
        sb.push(')\n');
        try {
            sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
        }
        catch (e) {
            sb.push('[exception trying to get caller]\n');
        }
    }
    else if (fn) {
        sb.push('[...long stack...]');
    }
    else {
        sb.push('[end]');
    }
    return sb.join('');
};
goog.debug.setFunctionResolver = function (resolver) {
    goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function (fn) {
    if (goog.debug.fnNameCache_[fn]) {
        return goog.debug.fnNameCache_[fn];
    }
    if (goog.debug.fnNameResolver_) {
        var name = goog.debug.fnNameResolver_(fn);
        if (name) {
            goog.debug.fnNameCache_[fn] = name;
            return name;
        }
    }
    var functionSource = String(fn);
    if (!goog.debug.fnNameCache_[functionSource]) {
        var matches = /function ([^\(]+)/.exec(functionSource);
        if (matches) {
            var method = matches[1];
            goog.debug.fnNameCache_[functionSource] = method;
        }
        else {
            goog.debug.fnNameCache_[functionSource] = '[Anonymous]';
        }
    }
    return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function (string) {
    return string.replace(/ /g, '[_]')
        .replace(/\f/g, '[f]')
        .replace(/\n/g, '[n]\n')
        .replace(/\r/g, '[r]')
        .replace(/\t/g, '[t]');
};
goog.debug.runtimeType = function (value) {
    if (value instanceof Function) {
        return value.displayName || value.name || 'unknown type name';
    }
    else if (value instanceof Object) {
        return (value.constructor.displayName) ||
            value.constructor.name || Object.prototype.toString.call(value);
    }
    else {
        return value === null ? 'null' : typeof value;
    }
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.debug.freezeInternal_ = goog.DEBUG && Object.freeze || function (arg) {
    return arg;
};
goog.debug.freeze = function (arg) {
    return {
        valueOf: function () {
            return goog.debug.freezeInternal_(arg);
        }
    }.valueOf();
};
goog.provide('goog.debug.EntryPointMonitor');
goog.provide('goog.debug.entryPointRegistry');
goog.require('goog.asserts');
goog.debug.EntryPointMonitor = function () { };
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function (callback) {
    goog.debug.entryPointRegistry
        .refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
    if (goog.debug.entryPointRegistry.monitorsMayExist_) {
        var monitors = goog.debug.entryPointRegistry.monitors_;
        for (var i = 0; i < monitors.length; i++) {
            callback(goog.bind(monitors[i].wrap, monitors[i]));
        }
    }
};
goog.debug.entryPointRegistry.monitorAll = function (monitor) {
    goog.debug.entryPointRegistry.monitorsMayExist_ = true;
    var transformer = goog.bind(monitor.wrap, monitor);
    for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
        goog.debug.entryPointRegistry.refList_[i](transformer);
    }
    goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function (monitor) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    goog.asserts.assert(monitor == monitors[monitors.length - 1], 'Only the most recent monitor can be unwrapped.');
    var transformer = goog.bind(monitor.unwrap, monitor);
    for (var i = 0; i < goog.debug.entryPointRegistry.refList_.length; i++) {
        goog.debug.entryPointRegistry.refList_[i](transformer);
    }
    monitors.length--;
};
goog.provide('goog.debug.Error');
goog.debug.Error = function (opt_msg) {
    if (Error.captureStackTrace) {
        Error.captureStackTrace(this, goog.debug.Error);
    }
    else {
        var stack = new Error().stack;
        if (stack) {
            this.stack = stack;
        }
    }
    if (opt_msg) {
        this.message = String(opt_msg);
    }
    this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = 'CustomError';
goog.provide('goog.debug.errorcontext');
goog.debug.errorcontext.addErrorContext = function (err, contextKey, contextValue) {
    if (!err[goog.debug.errorcontext.CONTEXT_KEY_]) {
        err[goog.debug.errorcontext.CONTEXT_KEY_] = {};
    }
    err[goog.debug.errorcontext.CONTEXT_KEY_][contextKey] = contextValue;
};
goog.debug.errorcontext.getErrorContext = function (err) {
    return err[goog.debug.errorcontext.CONTEXT_KEY_] || {};
};
goog.debug.errorcontext.CONTEXT_KEY_ = '__closure__error__context__984382';
goog.provide('goog.debug.LogBuffer');
goog.require('goog.asserts');
goog.require('goog.debug.LogRecord');
goog.debug.LogBuffer = function () {
    goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), 'Cannot use goog.debug.LogBuffer without defining ' +
        'goog.debug.LogBuffer.CAPACITY.');
    this.clear();
};
goog.debug.LogBuffer.getInstance = function () {
    if (!goog.debug.LogBuffer.instance_) {
        goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer();
    }
    return goog.debug.LogBuffer.instance_;
};
goog.define('goog.debug.LogBuffer.CAPACITY', 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function (level, msg, loggerName) {
    var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
    this.curIndex_ = curIndex;
    if (this.isFull_) {
        var ret = this.buffer_[curIndex];
        ret.reset(level, msg, loggerName);
        return ret;
    }
    this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
    return this.buffer_[curIndex] =
        new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function () {
    return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function () {
    this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
    this.curIndex_ = -1;
    this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function (func) {
    var buffer = this.buffer_;
    if (!buffer[0]) {
        return;
    }
    var curIndex = this.curIndex_;
    var i = this.isFull_ ? curIndex : -1;
    do {
        i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
        func((buffer[i]));
    } while (i != curIndex);
};
goog.provide('goog.debug.LogManager');
goog.provide('goog.debug.Loggable');
goog.provide('goog.debug.Logger');
goog.provide('goog.debug.Logger.Level');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.debug');
goog.require('goog.debug.LogBuffer');
goog.require('goog.debug.LogRecord');
goog.debug.Loggable;
goog.debug.Logger = function (name) {
    this.name_ = name;
    this.parent_ = null;
    this.level_ = null;
    this.children_ = null;
    this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = '';
goog.define('goog.debug.Logger.ENABLE_HIERARCHY', true);
goog.define('goog.debug.Logger.ENABLE_PROFILER_LOGGING', false);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    goog.debug.Logger.rootHandlers_ = [];
    goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function (name, value) {
    this.name = name;
    this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function () {
    return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level('OFF', Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level('SHOUT', 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level('SEVERE', 1000);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level('WARNING', 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level('INFO', 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level('CONFIG', 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level('FINE', 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level('FINER', 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level('FINEST', 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level('ALL', 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [
    goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT,
    goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING,
    goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG,
    goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER,
    goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL
];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function () {
    goog.debug.Logger.Level.predefinedLevelsCache_ = {};
    for (var i = 0, level; level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i]; i++) {
        goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
        goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
    }
};
goog.debug.Logger.Level.getPredefinedLevel = function (name) {
    if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
        goog.debug.Logger.Level.createPredefinedLevelsCache_();
    }
    return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function (value) {
    if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
        goog.debug.Logger.Level.createPredefinedLevelsCache_();
    }
    if (value in (goog.debug.Logger.Level.predefinedLevelsCache_)) {
        return goog.debug.Logger.Level.predefinedLevelsCache_[value];
    }
    for (var i = 0; i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length; ++i) {
        var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
        if (level.value <= value) {
            return level;
        }
    }
    return null;
};
goog.debug.Logger.getLogger = function (name) {
    return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function (msg) {
    if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {
        var msWriteProfilerMark = goog.global['msWriteProfilerMark'];
        if (msWriteProfilerMark) {
            msWriteProfilerMark(msg);
            return;
        }
        var console = goog.global['console'];
        if (console && console['timeStamp']) {
            console['timeStamp'](msg);
        }
    }
};
goog.debug.Logger.prototype.getName = function () {
    return this.name_;
};
goog.debug.Logger.prototype.addHandler = function (handler) {
    if (goog.debug.LOGGING_ENABLED) {
        if (goog.debug.Logger.ENABLE_HIERARCHY) {
            if (!this.handlers_) {
                this.handlers_ = [];
            }
            this.handlers_.push(handler);
        }
        else {
            goog.asserts.assert(!this.name_, 'Cannot call addHandler on a non-root logger when ' +
                'goog.debug.Logger.ENABLE_HIERARCHY is false.');
            goog.debug.Logger.rootHandlers_.push(handler);
        }
    }
};
goog.debug.Logger.prototype.removeHandler = function (handler) {
    if (goog.debug.LOGGING_ENABLED) {
        var handlers = goog.debug.Logger.ENABLE_HIERARCHY ?
            this.handlers_ :
            goog.debug.Logger.rootHandlers_;
        return !!handlers && goog.array.remove(handlers, handler);
    }
    else {
        return false;
    }
};
goog.debug.Logger.prototype.getParent = function () {
    return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function () {
    if (!this.children_) {
        this.children_ = {};
    }
    return this.children_;
};
goog.debug.Logger.prototype.setLevel = function (level) {
    if (goog.debug.LOGGING_ENABLED) {
        if (goog.debug.Logger.ENABLE_HIERARCHY) {
            this.level_ = level;
        }
        else {
            goog.asserts.assert(!this.name_, 'Cannot call setLevel() on a non-root logger when ' +
                'goog.debug.Logger.ENABLE_HIERARCHY is false.');
            goog.debug.Logger.rootLevel_ = level;
        }
    }
};
goog.debug.Logger.prototype.getLevel = function () {
    return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function () {
    if (!goog.debug.LOGGING_ENABLED) {
        return goog.debug.Logger.Level.OFF;
    }
    if (!goog.debug.Logger.ENABLE_HIERARCHY) {
        return goog.debug.Logger.rootLevel_;
    }
    if (this.level_) {
        return this.level_;
    }
    if (this.parent_) {
        return this.parent_.getEffectiveLevel();
    }
    goog.asserts.fail('Root logger has no level set.');
    return null;
};
goog.debug.Logger.prototype.isLoggable = function (level) {
    return goog.debug.LOGGING_ENABLED &&
        level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function (level, msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
        if (goog.isFunction(msg)) {
            msg = msg();
        }
        this.doLogRecord_(this.getLogRecord(level, msg, opt_exception));
    }
};
goog.debug.Logger.prototype.getLogRecord = function (level, msg, opt_exception) {
    if (goog.debug.LogBuffer.isBufferingEnabled()) {
        var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_);
    }
    else {
        logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
    }
    if (opt_exception) {
        logRecord.setException(opt_exception);
    }
    return logRecord;
};
goog.debug.Logger.prototype.shout = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.severe = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.warning = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.info = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.config = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.fine = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.finer = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.finest = function (msg, opt_exception) {
    if (goog.debug.LOGGING_ENABLED) {
        this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
    }
};
goog.debug.Logger.prototype.logRecord = function (logRecord) {
    if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
        this.doLogRecord_(logRecord);
    }
};
goog.debug.Logger.prototype.doLogRecord_ = function (logRecord) {
    if (goog.debug.Logger.ENABLE_PROFILER_LOGGING) {
        goog.debug.Logger.logToProfilers('log:' + logRecord.getMessage());
    }
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
        var target = this;
        while (target) {
            target.callPublish_(logRecord);
            target = target.getParent();
        }
    }
    else {
        for (var i = 0, handler; handler = goog.debug.Logger.rootHandlers_[i++];) {
            handler(logRecord);
        }
    }
};
goog.debug.Logger.prototype.callPublish_ = function (logRecord) {
    if (this.handlers_) {
        for (var i = 0, handler; handler = this.handlers_[i]; i++) {
            handler(logRecord);
        }
    }
};
goog.debug.Logger.prototype.setParent_ = function (parent) {
    this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function (name, logger) {
    this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function () {
    if (!goog.debug.LogManager.rootLogger_) {
        goog.debug.LogManager.rootLogger_ =
            new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
        goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] =
            goog.debug.LogManager.rootLogger_;
        goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
    }
};
goog.debug.LogManager.getLoggers = function () {
    return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function () {
    goog.debug.LogManager.initialize();
    return (goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function (name) {
    goog.debug.LogManager.initialize();
    var ret = goog.debug.LogManager.loggers_[name];
    return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function (opt_logger) {
    return function (info) {
        var logger = opt_logger || goog.debug.LogManager.getRoot();
        logger.severe('Error: ' + info.message + ' (' + info.fileName + ' @ Line: ' +
            info.line + ')');
    };
};
goog.debug.LogManager.createLogger_ = function (name) {
    var logger = new goog.debug.Logger(name);
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
        var lastDotIndex = name.lastIndexOf('.');
        var parentName = name.substr(0, lastDotIndex);
        var leafName = name.substr(lastDotIndex + 1);
        var parentLogger = goog.debug.LogManager.getLogger(parentName);
        parentLogger.addChild_(leafName, logger);
        logger.setParent_(parentLogger);
    }
    goog.debug.LogManager.loggers_[name] = logger;
    return logger;
};
goog.provide('goog.debug.LogRecord');
goog.debug.LogRecord = function (level, msg, loggerName, opt_time, opt_sequenceNumber) {
    this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.define('goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS', true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function (level, msg, loggerName, opt_time, opt_sequenceNumber) {
    if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
        this.sequenceNumber_ = typeof opt_sequenceNumber == 'number' ?
            opt_sequenceNumber :
            goog.debug.LogRecord.nextSequenceNumber_++;
    }
    this.time_ = opt_time || goog.now();
    this.level_ = level;
    this.msg_ = msg;
    this.loggerName_ = loggerName;
    delete this.exception_;
};
goog.debug.LogRecord.prototype.getLoggerName = function () {
    return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function () {
    return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function (exception) {
    this.exception_ = exception;
};
goog.debug.LogRecord.prototype.setLoggerName = function (loggerName) {
    this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function () {
    return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function (level) {
    this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function () {
    return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function (msg) {
    this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function () {
    return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function (time) {
    this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function () {
    return this.sequenceNumber_;
};
goog.provide('goog.Disposable');
goog.provide('goog.dispose');
goog.provide('goog.disposeAll');
goog.require('goog.disposable.IDisposable');
goog.Disposable = function () {
    this.creationStack;
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
        if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
            this.creationStack = new Error().stack;
        }
        goog.Disposable.instances_[goog.getUid(this)] = this;
    }
    this.disposed_ = this.disposed_;
    this.onDisposeCallbacks_ = this.onDisposeCallbacks_;
};
goog.Disposable.MonitoringMode = {
    OFF: 0,
    PERMANENT: 1,
    INTERACTIVE: 2
};
goog.define('goog.Disposable.MONITORING_MODE', 0);
goog.define('goog.Disposable.INCLUDE_STACK_ON_CREATION', true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function () {
    var ret = [];
    for (var id in goog.Disposable.instances_) {
        if (goog.Disposable.instances_.hasOwnProperty(id)) {
            ret.push(goog.Disposable.instances_[Number(id)]);
        }
    }
    return ret;
};
goog.Disposable.clearUndisposedObjects = function () {
    goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.isDisposed = function () {
    return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function () {
    if (!this.disposed_) {
        this.disposed_ = true;
        this.disposeInternal();
        if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
            var uid = goog.getUid(this);
            if (goog.Disposable.MONITORING_MODE ==
                goog.Disposable.MonitoringMode.PERMANENT &&
                !goog.Disposable.instances_.hasOwnProperty(uid)) {
                throw new Error(this + ' did not call the goog.Disposable base ' +
                    'constructor or was disposed of after a clearUndisposedObjects ' +
                    'call');
            }
            if (goog.Disposable.MONITORING_MODE !=
                goog.Disposable.MonitoringMode.OFF &&
                this.onDisposeCallbacks_ && this.onDisposeCallbacks_.length > 0) {
                throw new Error(this + ' did not empty its onDisposeCallbacks queue. This ' +
                    'probably means it overrode dispose() or disposeInternal() ' +
                    'without calling the superclass\' method.');
            }
            delete goog.Disposable.instances_[uid];
        }
    }
};
goog.Disposable.prototype.registerDisposable = function (disposable) {
    this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function (callback, opt_scope) {
    if (this.disposed_) {
        goog.isDef(opt_scope) ? callback.call(opt_scope) : callback();
        return;
    }
    if (!this.onDisposeCallbacks_) {
        this.onDisposeCallbacks_ = [];
    }
    this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function () {
    if (this.onDisposeCallbacks_) {
        while (this.onDisposeCallbacks_.length) {
            this.onDisposeCallbacks_.shift()();
        }
    }
};
goog.Disposable.isDisposed = function (obj) {
    if (obj && typeof obj.isDisposed == 'function') {
        return obj.isDisposed();
    }
    return false;
};
goog.dispose = function (obj) {
    if (obj && typeof obj.dispose == 'function') {
        obj.dispose();
    }
};
goog.disposeAll = function (var_args) {
    for (var i = 0, len = arguments.length; i < len; ++i) {
        var disposable = arguments[i];
        if (goog.isArrayLike(disposable)) {
            goog.disposeAll.apply(null, disposable);
        }
        else {
            goog.dispose(disposable);
        }
    }
};
goog.provide('goog.disposable.IDisposable');
goog.disposable.IDisposable = function () { };
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide('goog.array');
goog.require('goog.asserts');
goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);
goog.define('goog.array.ASSUME_NATIVE_FUNCTIONS', false);
goog.array.peek = function (array) {
    return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?
    function (arr, obj, opt_fromIndex) {
        goog.asserts.assert(arr.length != null);
        return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
    } :
    function (arr, obj, opt_fromIndex) {
        var fromIndex = opt_fromIndex == null ?
            0 :
            (opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) :
                opt_fromIndex);
        if (goog.isString(arr)) {
            if (!goog.isString(obj) || obj.length != 1) {
                return -1;
            }
            return arr.indexOf(obj, fromIndex);
        }
        for (var i = fromIndex; i < arr.length; i++) {
            if (i in arr && arr[i] === obj)
                return i;
        }
        return -1;
    };
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?
    function (arr, obj, opt_fromIndex) {
        goog.asserts.assert(arr.length != null);
        var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
        return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);
    } :
    function (arr, obj, opt_fromIndex) {
        var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
        if (fromIndex < 0) {
            fromIndex = Math.max(0, arr.length + fromIndex);
        }
        if (goog.isString(arr)) {
            if (!goog.isString(obj) || obj.length != 1) {
                return -1;
            }
            return arr.lastIndexOf(obj, fromIndex);
        }
        for (var i = fromIndex; i >= 0; i--) {
            if (i in arr && arr[i] === obj)
                return i;
        }
        return -1;
    };
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?
    function (arr, f, opt_obj) {
        goog.asserts.assert(arr.length != null);
        Array.prototype.forEach.call(arr, f, opt_obj);
    } :
    function (arr, f, opt_obj) {
        var l = arr.length;
        var arr2 = goog.isString(arr) ? arr.split('') : arr;
        for (var i = 0; i < l; i++) {
            if (i in arr2) {
                f.call((opt_obj), arr2[i], i, arr);
            }
        }
    };
goog.array.forEachRight = function (arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = l - 1; i >= 0; --i) {
        if (i in arr2) {
            f.call((opt_obj), arr2[i], i, arr);
        }
    }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?
    function (arr, f, opt_obj) {
        goog.asserts.assert(arr.length != null);
        return Array.prototype.filter.call(arr, f, opt_obj);
    } :
    function (arr, f, opt_obj) {
        var l = arr.length;
        var res = [];
        var resLength = 0;
        var arr2 = goog.isString(arr) ? arr.split('') : arr;
        for (var i = 0; i < l; i++) {
            if (i in arr2) {
                var val = arr2[i];
                if (f.call((opt_obj), val, i, arr)) {
                    res[resLength++] = val;
                }
            }
        }
        return res;
    };
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?
    function (arr, f, opt_obj) {
        goog.asserts.assert(arr.length != null);
        return Array.prototype.map.call(arr, f, opt_obj);
    } :
    function (arr, f, opt_obj) {
        var l = arr.length;
        var res = new Array(l);
        var arr2 = goog.isString(arr) ? arr.split('') : arr;
        for (var i = 0; i < l; i++) {
            if (i in arr2) {
                res[i] = f.call((opt_obj), arr2[i], i, arr);
            }
        }
        return res;
    };
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?
    function (arr, f, val, opt_obj) {
        goog.asserts.assert(arr.length != null);
        if (opt_obj) {
            f = goog.bind(f, opt_obj);
        }
        return Array.prototype.reduce.call(arr, f, val);
    } :
    function (arr, f, val, opt_obj) {
        var rval = val;
        goog.array.forEach(arr, function (val, index) {
            rval = f.call((opt_obj), rval, val, index, arr);
        });
        return rval;
    };
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?
    function (arr, f, val, opt_obj) {
        goog.asserts.assert(arr.length != null);
        goog.asserts.assert(f != null);
        if (opt_obj) {
            f = goog.bind(f, opt_obj);
        }
        return Array.prototype.reduceRight.call(arr, f, val);
    } :
    function (arr, f, val, opt_obj) {
        var rval = val;
        goog.array.forEachRight(arr, function (val, index) {
            rval = f.call((opt_obj), rval, val, index, arr);
        });
        return rval;
    };
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?
    function (arr, f, opt_obj) {
        goog.asserts.assert(arr.length != null);
        return Array.prototype.some.call(arr, f, opt_obj);
    } :
    function (arr, f, opt_obj) {
        var l = arr.length;
        var arr2 = goog.isString(arr) ? arr.split('') : arr;
        for (var i = 0; i < l; i++) {
            if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
                return true;
            }
        }
        return false;
    };
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES &&
    (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?
    function (arr, f, opt_obj) {
        goog.asserts.assert(arr.length != null);
        return Array.prototype.every.call(arr, f, opt_obj);
    } :
    function (arr, f, opt_obj) {
        var l = arr.length;
        var arr2 = goog.isString(arr) ? arr.split('') : arr;
        for (var i = 0; i < l; i++) {
            if (i in arr2 && !f.call((opt_obj), arr2[i], i, arr)) {
                return false;
            }
        }
        return true;
    };
goog.array.count = function (arr, f, opt_obj) {
    var count = 0;
    goog.array.forEach(arr, function (element, index, arr) {
        if (f.call((opt_obj), element, index, arr)) {
            ++count;
        }
    }, opt_obj);
    return count;
};
goog.array.find = function (arr, f, opt_obj) {
    var i = goog.array.findIndex(arr, f, opt_obj);
    return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function (arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = 0; i < l; i++) {
        if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
            return i;
        }
    }
    return -1;
};
goog.array.findRight = function (arr, f, opt_obj) {
    var i = goog.array.findIndexRight(arr, f, opt_obj);
    return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function (arr, f, opt_obj) {
    var l = arr.length;
    var arr2 = goog.isString(arr) ? arr.split('') : arr;
    for (var i = l - 1; i >= 0; i--) {
        if (i in arr2 && f.call((opt_obj), arr2[i], i, arr)) {
            return i;
        }
    }
    return -1;
};
goog.array.contains = function (arr, obj) {
    return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function (arr) {
    return arr.length == 0;
};
goog.array.clear = function (arr) {
    if (!goog.isArray(arr)) {
        for (var i = arr.length - 1; i >= 0; i--) {
            delete arr[i];
        }
    }
    arr.length = 0;
};
goog.array.insert = function (arr, obj) {
    if (!goog.array.contains(arr, obj)) {
        arr.push(obj);
    }
};
goog.array.insertAt = function (arr, obj, opt_i) {
    goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function (arr, elementsToAdd, opt_i) {
    goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function (arr, obj, opt_obj2) {
    var i;
    if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
        arr.push(obj);
    }
    else {
        goog.array.insertAt(arr, obj, i);
    }
};
goog.array.remove = function (arr, obj) {
    var i = goog.array.indexOf(arr, obj);
    var rv;
    if ((rv = i >= 0)) {
        goog.array.removeAt(arr, i);
    }
    return rv;
};
goog.array.removeLast = function (arr, obj) {
    var i = goog.array.lastIndexOf(arr, obj);
    if (i >= 0) {
        goog.array.removeAt(arr, i);
        return true;
    }
    return false;
};
goog.array.removeAt = function (arr, i) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function (arr, f, opt_obj) {
    var i = goog.array.findIndex(arr, f, opt_obj);
    if (i >= 0) {
        goog.array.removeAt(arr, i);
        return true;
    }
    return false;
};
goog.array.removeAllIf = function (arr, f, opt_obj) {
    var removedCount = 0;
    goog.array.forEachRight(arr, function (val, index) {
        if (f.call((opt_obj), val, index, arr)) {
            if (goog.array.removeAt(arr, index)) {
                removedCount++;
            }
        }
    });
    return removedCount;
};
goog.array.concat = function (var_args) {
    return Array.prototype.concat.apply([], arguments);
};
goog.array.join = function (var_args) {
    return Array.prototype.concat.apply([], arguments);
};
goog.array.toArray = function (object) {
    var length = object.length;
    if (length > 0) {
        var rv = new Array(length);
        for (var i = 0; i < length; i++) {
            rv[i] = object[i];
        }
        return rv;
    }
    return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function (arr1, var_args) {
    for (var i = 1; i < arguments.length; i++) {
        var arr2 = arguments[i];
        if (goog.isArrayLike(arr2)) {
            var len1 = arr1.length || 0;
            var len2 = arr2.length || 0;
            arr1.length = len1 + len2;
            for (var j = 0; j < len2; j++) {
                arr1[len1 + j] = arr2[j];
            }
        }
        else {
            arr1.push(arr2);
        }
    }
};
goog.array.splice = function (arr, index, howMany, var_args) {
    goog.asserts.assert(arr.length != null);
    return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function (arr, start, opt_end) {
    goog.asserts.assert(arr.length != null);
    if (arguments.length <= 2) {
        return Array.prototype.slice.call(arr, start);
    }
    else {
        return Array.prototype.slice.call(arr, start, opt_end);
    }
};
goog.array.removeDuplicates = function (arr, opt_rv, opt_hashFn) {
    var returnArray = opt_rv || arr;
    var defaultHashFn = function (item) {
        return goog.isObject(item) ? 'o' + goog.getUid(item) :
            (typeof item).charAt(0) + item;
    };
    var hashFn = opt_hashFn || defaultHashFn;
    var seen = {}, cursorInsert = 0, cursorRead = 0;
    while (cursorRead < arr.length) {
        var current = arr[cursorRead++];
        var key = hashFn(current);
        if (!Object.prototype.hasOwnProperty.call(seen, key)) {
            seen[key] = true;
            returnArray[cursorInsert++] = current;
        }
    }
    returnArray.length = cursorInsert;
};
goog.array.binarySearch = function (arr, target, opt_compareFn) {
    return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function (arr, evaluator, opt_obj) {
    return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function (arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
    var left = 0;
    var right = arr.length;
    var found;
    while (left < right) {
        var middle = (left + right) >> 1;
        var compareResult;
        if (isEvaluator) {
            compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
        }
        else {
            compareResult = (compareFn)(opt_target, arr[middle]);
        }
        if (compareResult > 0) {
            left = middle + 1;
        }
        else {
            right = middle;
            found = !compareResult;
        }
    }
    return found ? left : ~left;
};
goog.array.sort = function (arr, opt_compareFn) {
    arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function (arr, opt_compareFn) {
    var compArr = new Array(arr.length);
    for (var i = 0; i < arr.length; i++) {
        compArr[i] = { index: i, value: arr[i] };
    }
    var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
    function stableCompareFn(obj1, obj2) {
        return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
    }
    goog.array.sort(compArr, stableCompareFn);
    for (var i = 0; i < arr.length; i++) {
        arr[i] = compArr[i].value;
    }
};
goog.array.sortByKey = function (arr, keyFn, opt_compareFn) {
    var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
    goog.array.sort(arr, function (a, b) { return keyCompareFn(keyFn(a), keyFn(b)); });
};
goog.array.sortObjectsByKey = function (arr, key, opt_compareFn) {
    goog.array.sortByKey(arr, function (obj) { return obj[key]; }, opt_compareFn);
};
goog.array.isSorted = function (arr, opt_compareFn, opt_strict) {
    var compare = opt_compareFn || goog.array.defaultCompare;
    for (var i = 1; i < arr.length; i++) {
        var compareResult = compare(arr[i - 1], arr[i]);
        if (compareResult > 0 || compareResult == 0 && opt_strict) {
            return false;
        }
    }
    return true;
};
goog.array.equals = function (arr1, arr2, opt_equalsFn) {
    if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||
        arr1.length != arr2.length) {
        return false;
    }
    var l = arr1.length;
    var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
    for (var i = 0; i < l; i++) {
        if (!equalsFn(arr1[i], arr2[i])) {
            return false;
        }
    }
    return true;
};
goog.array.compare3 = function (arr1, arr2, opt_compareFn) {
    var compare = opt_compareFn || goog.array.defaultCompare;
    var l = Math.min(arr1.length, arr2.length);
    for (var i = 0; i < l; i++) {
        var result = compare(arr1[i], arr2[i]);
        if (result != 0) {
            return result;
        }
    }
    return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function (a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function (a, b) {
    return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function (a, b) {
    return a === b;
};
goog.array.binaryInsert = function (array, value, opt_compareFn) {
    var index = goog.array.binarySearch(array, value, opt_compareFn);
    if (index < 0) {
        goog.array.insertAt(array, value, -(index + 1));
        return true;
    }
    return false;
};
goog.array.binaryRemove = function (array, value, opt_compareFn) {
    var index = goog.array.binarySearch(array, value, opt_compareFn);
    return (index >= 0) ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function (array, sorter, opt_obj) {
    var buckets = {};
    for (var i = 0; i < array.length; i++) {
        var value = array[i];
        var key = sorter.call((opt_obj), value, i, array);
        if (goog.isDef(key)) {
            var bucket = buckets[key] || (buckets[key] = []);
            bucket.push(value);
        }
    }
    return buckets;
};
goog.array.toObject = function (arr, keyFunc, opt_obj) {
    var ret = {};
    goog.array.forEach(arr, function (element, index) {
        ret[keyFunc.call((opt_obj), element, index, arr)] =
            element;
    });
    return ret;
};
goog.array.range = function (startOrEnd, opt_end, opt_step) {
    var array = [];
    var start = 0;
    var end = startOrEnd;
    var step = opt_step || 1;
    if (opt_end !== undefined) {
        start = startOrEnd;
        end = opt_end;
    }
    if (step * (end - start) < 0) {
        return [];
    }
    if (step > 0) {
        for (var i = start; i < end; i += step) {
            array.push(i);
        }
    }
    else {
        for (var i = start; i > end; i += step) {
            array.push(i);
        }
    }
    return array;
};
goog.array.repeat = function (value, n) {
    var array = [];
    for (var i = 0; i < n; i++) {
        array[i] = value;
    }
    return array;
};
goog.array.flatten = function (var_args) {
    var CHUNK_SIZE = 8192;
    var result = [];
    for (var i = 0; i < arguments.length; i++) {
        var element = arguments[i];
        if (goog.isArray(element)) {
            for (var c = 0; c < element.length; c += CHUNK_SIZE) {
                var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
                var recurseResult = goog.array.flatten.apply(null, chunk);
                for (var r = 0; r < recurseResult.length; r++) {
                    result.push(recurseResult[r]);
                }
            }
        }
        else {
            result.push(element);
        }
    }
    return result;
};
goog.array.rotate = function (array, n) {
    goog.asserts.assert(array.length != null);
    if (array.length) {
        n %= array.length;
        if (n > 0) {
            Array.prototype.unshift.apply(array, array.splice(-n, n));
        }
        else if (n < 0) {
            Array.prototype.push.apply(array, array.splice(0, -n));
        }
    }
    return array;
};
goog.array.moveItem = function (arr, fromIndex, toIndex) {
    goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
    goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
    var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
    Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function (var_args) {
    if (!arguments.length) {
        return [];
    }
    var result = [];
    var minLen = arguments[0].length;
    for (var i = 1; i < arguments.length; i++) {
        if (arguments[i].length < minLen) {
            minLen = arguments[i].length;
        }
    }
    for (var i = 0; i < minLen; i++) {
        var value = [];
        for (var j = 0; j < arguments.length; j++) {
            value.push(arguments[j][i]);
        }
        result.push(value);
    }
    return result;
};
goog.array.shuffle = function (arr, opt_randFn) {
    var randFn = opt_randFn || Math.random;
    for (var i = arr.length - 1; i > 0; i--) {
        var j = Math.floor(randFn() * (i + 1));
        var tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
};
goog.array.copyByIndex = function (arr, index_arr) {
    var result = [];
    goog.array.forEach(index_arr, function (index) { result.push(arr[index]); });
    return result;
};
goog.array.concatMap = function (arr, f, opt_obj) {
    return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));
};
goog.provide('goog.functions');
goog.functions.constant = function (retValue) {
    return function () { return retValue; };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function (opt_returnValue, var_args) {
    return opt_returnValue;
};
goog.functions.error = function (message) {
    return function () {
        throw new Error(message);
    };
};
goog.functions.fail = function (err) {
    return function () { throw err; };
};
goog.functions.lock = function (f, opt_numArgs) {
    opt_numArgs = opt_numArgs || 0;
    return function () {
        var self = (this);
        return f.apply(self, Array.prototype.slice.call(arguments, 0, opt_numArgs));
    };
};
goog.functions.nth = function (n) {
    return function () { return arguments[n]; };
};
goog.functions.partialRight = function (fn, var_args) {
    var rightArgs = Array.prototype.slice.call(arguments, 1);
    return function () {
        var self = (this);
        var newArgs = Array.prototype.slice.call(arguments);
        newArgs.push.apply(newArgs, rightArgs);
        return fn.apply(self, newArgs);
    };
};
goog.functions.withReturnValue = function (f, retValue) {
    return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.equalTo = function (value, opt_useLooseComparison) {
    return function (other) {
        return opt_useLooseComparison ? (value == other) : (value === other);
    };
};
goog.functions.compose = function (fn, var_args) {
    var functions = arguments;
    var length = functions.length;
    return function () {
        var self = (this);
        var result;
        if (length) {
            result = functions[length - 1].apply(self, arguments);
        }
        for (var i = length - 2; i >= 0; i--) {
            result = functions[i].call(self, result);
        }
        return result;
    };
};
goog.functions.sequence = function (var_args) {
    var functions = arguments;
    var length = functions.length;
    return function () {
        var self = (this);
        var result;
        for (var i = 0; i < length; i++) {
            result = functions[i].apply(self, arguments);
        }
        return result;
    };
};
goog.functions.and = function (var_args) {
    var functions = arguments;
    var length = functions.length;
    return function () {
        var self = (this);
        for (var i = 0; i < length; i++) {
            if (!functions[i].apply(self, arguments)) {
                return false;
            }
        }
        return true;
    };
};
goog.functions.or = function (var_args) {
    var functions = arguments;
    var length = functions.length;
    return function () {
        var self = (this);
        for (var i = 0; i < length; i++) {
            if (functions[i].apply(self, arguments)) {
                return true;
            }
        }
        return false;
    };
};
goog.functions.not = function (f) {
    return function () {
        var self = (this);
        return !f.apply(self, arguments);
    };
};
goog.functions.create = function (constructor, var_args) {
    var temp = function () { };
    temp.prototype = constructor.prototype;
    var obj = new temp();
    constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
    return obj;
};
goog.define('goog.functions.CACHE_RETURN_VALUE', true);
goog.functions.cacheReturnValue = function (fn) {
    var called = false;
    var value;
    return function () {
        if (!goog.functions.CACHE_RETURN_VALUE) {
            return fn();
        }
        if (!called) {
            value = fn();
            called = true;
        }
        return value;
    };
};
goog.functions.once = function (f) {
    var inner = f;
    return function () {
        if (inner) {
            var tmp = inner;
            inner = null;
            tmp();
        }
    };
};
goog.functions.debounce = function (f, interval, opt_scope) {
    var timeout = 0;
    return (function (var_args) {
        goog.global.clearTimeout(timeout);
        var args = arguments;
        timeout = goog.global.setTimeout(function () {
            f.apply(opt_scope, args);
        }, interval);
    });
};
goog.functions.throttle = function (f, interval, opt_scope) {
    var timeout = 0;
    var shouldFire = false;
    var args = [];
    var handleTimeout = function () {
        timeout = 0;
        if (shouldFire) {
            shouldFire = false;
            fire();
        }
    };
    var fire = function () {
        timeout = goog.global.setTimeout(handleTimeout, interval);
        f.apply(opt_scope, args);
    };
    return (function (var_args) {
        args = arguments;
        if (!timeout) {
            fire();
        }
        else {
            shouldFire = true;
        }
    });
};
goog.functions.rateLimit = function (f, interval, opt_scope) {
    var timeout = 0;
    var handleTimeout = function () {
        timeout = 0;
    };
    return (function (var_args) {
        if (!timeout) {
            timeout = goog.global.setTimeout(handleTimeout, interval);
            f.apply(opt_scope, arguments);
        }
    });
};
goog.provide('goog.asserts');
goog.provide('goog.asserts.AssertionError');
goog.require('goog.debug.Error');
goog.require('goog.dom.NodeType');
goog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);
goog.asserts.AssertionError = function (messagePattern, messageArgs) {
    goog.debug.Error.call(this, goog.asserts.subs_(messagePattern, messageArgs));
    this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = 'AssertionError';
goog.asserts.DEFAULT_ERROR_HANDLER = function (e) {
    throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.subs_ = function (pattern, subs) {
    var splitParts = pattern.split('%s');
    var returnString = '';
    var subLast = splitParts.length - 1;
    for (var i = 0; i < subLast; i++) {
        var sub = (i < subs.length) ? subs[i] : '%s';
        returnString += splitParts[i] + sub;
    }
    return returnString + splitParts[subLast];
};
goog.asserts.doAssertFailure_ = function (defaultMessage, defaultArgs, givenMessage, givenArgs) {
    var message = 'Assertion failed';
    if (givenMessage) {
        message += ': ' + givenMessage;
        var args = givenArgs;
    }
    else if (defaultMessage) {
        message += ': ' + defaultMessage;
        args = defaultArgs;
    }
    var e = new goog.asserts.AssertionError('' + message, args || []);
    goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function (errorHandler) {
    if (goog.asserts.ENABLE_ASSERTS) {
        goog.asserts.errorHandler_ = errorHandler;
    }
};
goog.asserts.assert = function (condition, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !condition) {
        goog.asserts.doAssertFailure_('', null, opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return condition;
};
goog.asserts.fail = function (opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS) {
        goog.asserts.errorHandler_(new goog.asserts.AssertionError('Failure' + (opt_message ? ': ' + opt_message : ''), Array.prototype.slice.call(arguments, 1)));
    }
};
goog.asserts.assertNumber = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
        goog.asserts.doAssertFailure_('Expected number but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertString = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
        goog.asserts.doAssertFailure_('Expected string but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertFunction = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
        goog.asserts.doAssertFailure_('Expected function but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertObject = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
        goog.asserts.doAssertFailure_('Expected object but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertArray = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
        goog.asserts.doAssertFailure_('Expected array but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertBoolean = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
        goog.asserts.doAssertFailure_('Expected boolean but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertElement = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS &&
        (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
        goog.asserts.doAssertFailure_('Expected Element but got %s: %s.', [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertInstanceof = function (value, type, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
        goog.asserts.doAssertFailure_('Expected instanceof %s but got %s.', [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
    }
    return value;
};
goog.asserts.assertFinite = function (value, opt_message, var_args) {
    if (goog.asserts.ENABLE_ASSERTS &&
        (typeof value != 'number' || !isFinite(value))) {
        goog.asserts.doAssertFailure_('Expected %s to be a finite number but it is not.', [value], opt_message, Array.prototype.slice.call(arguments, 2));
    }
    return (value);
};
goog.asserts.assertObjectPrototypeIsIntact = function () {
    for (var key in Object.prototype) {
        goog.asserts.fail(key + ' should not be enumerable in Object.prototype.');
    }
};
goog.asserts.getType_ = function (value) {
    if (value instanceof Function) {
        return value.displayName || value.name || 'unknown type name';
    }
    else if (value instanceof Object) {
        return (value.constructor.displayName) ||
            value.constructor.name || Object.prototype.toString.call(value);
    }
    else {
        return value === null ? 'null' : typeof value;
    }
};
goog.provide('goog.async.AnimationDelay');
goog.require('goog.Disposable');
goog.require('goog.events');
goog.require('goog.functions');
goog.async.AnimationDelay = function (listener, opt_window, opt_handler) {
    goog.async.AnimationDelay.base(this, 'constructor');
    this.id_ = null;
    this.usingListeners_ = false;
    this.listener_ = listener;
    this.handler_ = opt_handler;
    this.win_ = opt_window || window;
    this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.AnimationDelay, goog.Disposable);
goog.async.AnimationDelay.TIMEOUT = 20;
goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_ = 'MozBeforePaint';
goog.async.AnimationDelay.prototype.start = function () {
    this.stop();
    this.usingListeners_ = false;
    var raf = this.getRaf_();
    var cancelRaf = this.getCancelRaf_();
    if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
        this.id_ = goog.events.listen(this.win_, goog.async.AnimationDelay.MOZ_BEFORE_PAINT_EVENT_, this.callback_);
        this.win_.mozRequestAnimationFrame(null);
        this.usingListeners_ = true;
    }
    else if (raf && cancelRaf) {
        this.id_ = raf.call(this.win_, this.callback_);
    }
    else {
        this.id_ = this.win_.setTimeout(goog.functions.lock(this.callback_), goog.async.AnimationDelay.TIMEOUT);
    }
};
goog.async.AnimationDelay.prototype.startIfNotActive = function () {
    if (!this.isActive()) {
        this.start();
    }
};
goog.async.AnimationDelay.prototype.stop = function () {
    if (this.isActive()) {
        var raf = this.getRaf_();
        var cancelRaf = this.getCancelRaf_();
        if (raf && !cancelRaf && this.win_.mozRequestAnimationFrame) {
            goog.events.unlistenByKey(this.id_);
        }
        else if (raf && cancelRaf) {
            cancelRaf.call(this.win_, (this.id_));
        }
        else {
            this.win_.clearTimeout((this.id_));
        }
    }
    this.id_ = null;
};
goog.async.AnimationDelay.prototype.fire = function () {
    this.stop();
    this.doAction_();
};
goog.async.AnimationDelay.prototype.fireIfActive = function () {
    if (this.isActive()) {
        this.fire();
    }
};
goog.async.AnimationDelay.prototype.isActive = function () {
    return this.id_ != null;
};
goog.async.AnimationDelay.prototype.doAction_ = function () {
    if (this.usingListeners_ && this.id_) {
        goog.events.unlistenByKey(this.id_);
    }
    this.id_ = null;
    this.listener_.call(this.handler_, goog.now());
};
goog.async.AnimationDelay.prototype.disposeInternal = function () {
    this.stop();
    goog.async.AnimationDelay.base(this, 'disposeInternal');
};
goog.async.AnimationDelay.prototype.getRaf_ = function () {
    var win = this.win_;
    return win.requestAnimationFrame || win.webkitRequestAnimationFrame ||
        win.mozRequestAnimationFrame || win.oRequestAnimationFrame ||
        win.msRequestAnimationFrame || null;
};
goog.async.AnimationDelay.prototype.getCancelRaf_ = function () {
    var win = this.win_;
    return win.cancelAnimationFrame || win.cancelRequestAnimationFrame ||
        win.webkitCancelRequestAnimationFrame ||
        win.mozCancelRequestAnimationFrame || win.oCancelRequestAnimationFrame ||
        win.msCancelRequestAnimationFrame || null;
};
goog.provide('goog.Delay');
goog.provide('goog.async.Delay');
goog.require('goog.Disposable');
goog.require('goog.Timer');
goog.async.Delay = function (listener, opt_interval, opt_handler) {
    goog.async.Delay.base(this, 'constructor');
    this.listener_ = listener;
    this.interval_ = opt_interval || 0;
    this.handler_ = opt_handler;
    this.callback_ = goog.bind(this.doAction_, this);
};
goog.inherits(goog.async.Delay, goog.Disposable);
goog.Delay = goog.async.Delay;
goog.async.Delay.prototype.id_ = 0;
goog.async.Delay.prototype.disposeInternal = function () {
    goog.async.Delay.base(this, 'disposeInternal');
    this.stop();
    delete this.listener_;
    delete this.handler_;
};
goog.async.Delay.prototype.start = function (opt_interval) {
    this.stop();
    this.id_ = goog.Timer.callOnce(this.callback_, goog.isDef(opt_interval) ? opt_interval : this.interval_);
};
goog.async.Delay.prototype.startIfNotActive = function (opt_interval) {
    if (!this.isActive()) {
        this.start(opt_interval);
    }
};
goog.async.Delay.prototype.stop = function () {
    if (this.isActive()) {
        goog.Timer.clear(this.id_);
    }
    this.id_ = 0;
};
goog.async.Delay.prototype.fire = function () {
    this.stop();
    this.doAction_();
};
goog.async.Delay.prototype.fireIfActive = function () {
    if (this.isActive()) {
        this.fire();
    }
};
goog.async.Delay.prototype.isActive = function () {
    return this.id_ != 0;
};
goog.async.Delay.prototype.doAction_ = function () {
    this.id_ = 0;
    if (this.listener_) {
        this.listener_.call(this.handler_);
    }
};
goog.provide('goog.async.FreeList');
goog.async.FreeList = goog.defineClass(null, {
    constructor: function (create, reset, limit) {
        this.limit_ = limit;
        this.create_ = create;
        this.reset_ = reset;
        this.occupants_ = 0;
        this.head_ = null;
    },
    get: function () {
        var item;
        if (this.occupants_ > 0) {
            this.occupants_--;
            item = this.head_;
            this.head_ = item.next;
            item.next = null;
        }
        else {
            item = this.create_();
        }
        return item;
    },
    put: function (item) {
        this.reset_(item);
        if (this.occupants_ < this.limit_) {
            this.occupants_++;
            item.next = this.head_;
            this.head_ = item;
        }
    },
    occupants: function () { return this.occupants_; }
});
goog.provide('goog.async.nextTick');
goog.provide('goog.async.throwException');
goog.require('goog.debug.entryPointRegistry');
goog.require('goog.dom.TagName');
goog.require('goog.functions');
goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.engine');
goog.async.throwException = function (exception) {
    goog.global.setTimeout(function () { throw exception; }, 0);
};
goog.async.nextTick = function (callback, opt_context, opt_useSetImmediate) {
    var cb = callback;
    if (opt_context) {
        cb = goog.bind(callback, opt_context);
    }
    cb = goog.async.nextTick.wrapCallback_(cb);
    if (goog.isFunction(goog.global.setImmediate) &&
        (opt_useSetImmediate || goog.async.nextTick.useSetImmediate_())) {
        goog.global.setImmediate(cb);
        return;
    }
    if (!goog.async.nextTick.setImmediate_) {
        goog.async.nextTick.setImmediate_ =
            goog.async.nextTick.getSetImmediateEmulator_();
    }
    goog.async.nextTick.setImmediate_(cb);
};
goog.async.nextTick.useSetImmediate_ = function () {
    if (!goog.global.Window || !goog.global.Window.prototype) {
        return true;
    }
    if (goog.labs.userAgent.browser.isEdge() ||
        goog.global.Window.prototype.setImmediate != goog.global.setImmediate) {
        return true;
    }
    return false;
};
goog.async.nextTick.setImmediate_;
goog.async.nextTick.getSetImmediateEmulator_ = function () {
    var Channel = goog.global['MessageChannel'];
    if (typeof Channel === 'undefined' && typeof window !== 'undefined' &&
        window.postMessage && window.addEventListener &&
        !goog.labs.userAgent.engine.isPresto()) {
        Channel = function () {
            var iframe = (document.createElement(String(goog.dom.TagName.IFRAME)));
            iframe.style.display = 'none';
            iframe.src = '';
            document.documentElement.appendChild(iframe);
            var win = iframe.contentWindow;
            var doc = win.document;
            doc.open();
            doc.write('');
            doc.close();
            var message = 'callImmediate' + Math.random();
            var origin = win.location.protocol == 'file:' ?
                '*' :
                win.location.protocol + '//' + win.location.host;
            var onmessage = goog.bind(function (e) {
                if ((origin != '*' && e.origin != origin) || e.data != message) {
                    return;
                }
                this['port1'].onmessage();
            }, this);
            win.addEventListener('message', onmessage, false);
            this['port1'] = {};
            this['port2'] = {
                postMessage: function () { win.postMessage(message, origin); }
            };
        };
    }
    if (typeof Channel !== 'undefined' && !goog.labs.userAgent.browser.isIE()) {
        var channel = new Channel();
        var head = {};
        var tail = head;
        channel['port1'].onmessage = function () {
            if (goog.isDef(head.next)) {
                head = head.next;
                var cb = head.cb;
                head.cb = null;
                cb();
            }
        };
        return function (cb) {
            tail.next = { cb: cb };
            tail = tail.next;
            channel['port2'].postMessage(0);
        };
    }
    if (typeof document !== 'undefined' &&
        'onreadystatechange' in
            document.createElement(String(goog.dom.TagName.SCRIPT))) {
        return function (cb) {
            var script = document.createElement(String(goog.dom.TagName.SCRIPT));
            script.onreadystatechange = function () {
                script.onreadystatechange = null;
                script.parentNode.removeChild(script);
                script = null;
                cb();
                cb = null;
            };
            document.documentElement.appendChild(script);
        };
    }
    return function (cb) {
        goog.global.setTimeout((cb), 0);
    };
};
goog.async.nextTick.wrapCallback_ = goog.functions.identity;
goog.debug.entryPointRegistry.register(function (transformer) { goog.async.nextTick.wrapCallback_ = transformer; });
goog.provide('goog.async.WorkItem');
goog.provide('goog.async.WorkQueue');
goog.require('goog.asserts');
goog.require('goog.async.FreeList');
goog.async.WorkQueue = function () {
    this.workHead_ = null;
    this.workTail_ = null;
};
goog.define('goog.async.WorkQueue.DEFAULT_MAX_UNUSED', 100);
goog.async.WorkQueue.freelist_ = new goog.async.FreeList(function () { return new goog.async.WorkItem(); }, function (item) { item.reset(); }, goog.async.WorkQueue.DEFAULT_MAX_UNUSED);
goog.async.WorkQueue.prototype.add = function (fn, scope) {
    var item = this.getUnusedItem_();
    item.set(fn, scope);
    if (this.workTail_) {
        this.workTail_.next = item;
        this.workTail_ = item;
    }
    else {
        goog.asserts.assert(!this.workHead_);
        this.workHead_ = item;
        this.workTail_ = item;
    }
};
goog.async.WorkQueue.prototype.remove = function () {
    var item = null;
    if (this.workHead_) {
        item = this.workHead_;
        this.workHead_ = this.workHead_.next;
        if (!this.workHead_) {
            this.workTail_ = null;
        }
        item.next = null;
    }
    return item;
};
goog.async.WorkQueue.prototype.returnUnused = function (item) {
    goog.async.WorkQueue.freelist_.put(item);
};
goog.async.WorkQueue.prototype.getUnusedItem_ = function () {
    return goog.async.WorkQueue.freelist_.get();
};
goog.async.WorkItem = function () {
    this.fn = null;
    this.scope = null;
    this.next = null;
};
goog.async.WorkItem.prototype.set = function (fn, scope) {
    this.fn = fn;
    this.scope = scope;
    this.next = null;
};
goog.async.WorkItem.prototype.reset = function () {
    this.fn = null;
    this.scope = null;
    this.next = null;
};
goog.provide('goog.async.run');
goog.require('goog.async.WorkQueue');
goog.require('goog.async.nextTick');
goog.require('goog.async.throwException');
goog.async.run = function (callback, opt_context) {
    if (!goog.async.run.schedule_) {
        goog.async.run.initializeRunner_();
    }
    if (!goog.async.run.workQueueScheduled_) {
        goog.async.run.schedule_();
        goog.async.run.workQueueScheduled_ = true;
    }
    goog.async.run.workQueue_.add(callback, opt_context);
};
goog.async.run.initializeRunner_ = function () {
    if (goog.global.Promise && goog.global.Promise.resolve) {
        var promise = goog.global.Promise.resolve(undefined);
        goog.async.run.schedule_ = function () {
            promise.then(goog.async.run.processWorkQueue);
        };
    }
    else {
        goog.async.run.schedule_ = function () {
            goog.async.nextTick(goog.async.run.processWorkQueue);
        };
    }
};
goog.async.run.forceNextTick = function (opt_realSetTimeout) {
    goog.async.run.schedule_ = function () {
        goog.async.nextTick(goog.async.run.processWorkQueue);
        if (opt_realSetTimeout) {
            opt_realSetTimeout(goog.async.run.processWorkQueue);
        }
    };
};
goog.async.run.schedule_;
goog.async.run.workQueueScheduled_ = false;
goog.async.run.workQueue_ = new goog.async.WorkQueue();
if (goog.DEBUG) {
    goog.async.run.resetQueue = function () {
        goog.async.run.workQueueScheduled_ = false;
        goog.async.run.workQueue_ = new goog.async.WorkQueue();
    };
}
goog.async.run.processWorkQueue = function () {
    var item = null;
    while (item = goog.async.run.workQueue_.remove()) {
        try {
            item.fn.call(item.scope);
        }
        catch (e) {
            goog.async.throwException(e);
        }
        goog.async.run.workQueue_.returnUnused(item);
    }
    goog.async.run.workQueueScheduled_ = false;
};
goog.provide('goog.color');
goog.provide('goog.color.Hsl');
goog.provide('goog.color.Hsv');
goog.provide('goog.color.Rgb');
goog.require('goog.color.names');
goog.require('goog.math');
goog.color.Rgb;
goog.color.Hsv;
goog.color.Hsl;
goog.color.parse = function (str) {
    var result = {};
    str = String(str);
    var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
    if (goog.color.isValidHexColor_(maybeHex)) {
        result.hex = goog.color.normalizeHex(maybeHex);
        result.type = 'hex';
        return result;
    }
    else {
        var rgb = goog.color.isValidRgbColor_(str);
        if (rgb.length) {
            result.hex = goog.color.rgbArrayToHex(rgb);
            result.type = 'rgb';
            return result;
        }
        else if (goog.color.names) {
            var hex = goog.color.names[str.toLowerCase()];
            if (hex) {
                result.hex = hex;
                result.type = 'named';
                return result;
            }
        }
    }
    throw Error(str + ' is not a valid color string');
};
goog.color.isValidColor = function (str) {
    var maybeHex = goog.color.prependHashIfNecessaryHelper(str);
    return !!(goog.color.isValidHexColor_(maybeHex) ||
        goog.color.isValidRgbColor_(str).length ||
        goog.color.names && goog.color.names[str.toLowerCase()]);
};
goog.color.parseRgb = function (str) {
    var rgb = goog.color.isValidRgbColor_(str);
    if (!rgb.length) {
        throw Error(str + ' is not a valid RGB color');
    }
    return rgb;
};
goog.color.hexToRgbStyle = function (hexColor) {
    return goog.color.rgbStyle_(goog.color.hexToRgb(hexColor));
};
goog.color.hexTripletRe_ = /#(.)(.)(.)/;
goog.color.normalizeHex = function (hexColor) {
    if (!goog.color.isValidHexColor_(hexColor)) {
        throw Error("'" + hexColor + "' is not a valid hex color");
    }
    if (hexColor.length == 4) {
        hexColor = hexColor.replace(goog.color.hexTripletRe_, '#$1$1$2$2$3$3');
    }
    return hexColor.toLowerCase();
};
goog.color.hexToRgb = function (hexColor) {
    hexColor = goog.color.normalizeHex(hexColor);
    var r = parseInt(hexColor.substr(1, 2), 16);
    var g = parseInt(hexColor.substr(3, 2), 16);
    var b = parseInt(hexColor.substr(5, 2), 16);
    return [r, g, b];
};
goog.color.rgbToHex = function (r, g, b) {
    r = Number(r);
    g = Number(g);
    b = Number(b);
    if (r != (r & 255) || g != (g & 255) || b != (b & 255)) {
        throw Error('"(' + r + ',' + g + ',' + b + '") is not a valid RGB color');
    }
    var hexR = goog.color.prependZeroIfNecessaryHelper(r.toString(16));
    var hexG = goog.color.prependZeroIfNecessaryHelper(g.toString(16));
    var hexB = goog.color.prependZeroIfNecessaryHelper(b.toString(16));
    return '#' + hexR + hexG + hexB;
};
goog.color.rgbArrayToHex = function (rgb) {
    return goog.color.rgbToHex(rgb[0], rgb[1], rgb[2]);
};
goog.color.rgbToHsl = function (r, g, b) {
    var normR = r / 255;
    var normG = g / 255;
    var normB = b / 255;
    var max = Math.max(normR, normG, normB);
    var min = Math.min(normR, normG, normB);
    var h = 0;
    var s = 0;
    var l = 0.5 * (max + min);
    if (max != min) {
        if (max == normR) {
            h = 60 * (normG - normB) / (max - min);
        }
        else if (max == normG) {
            h = 60 * (normB - normR) / (max - min) + 120;
        }
        else if (max == normB) {
            h = 60 * (normR - normG) / (max - min) + 240;
        }
        if (0 < l && l <= 0.5) {
            s = (max - min) / (2 * l);
        }
        else {
            s = (max - min) / (2 - 2 * l);
        }
    }
    return [Math.round(h + 360) % 360, s, l];
};
goog.color.rgbArrayToHsl = function (rgb) {
    return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hueToRgb_ = function (v1, v2, vH) {
    if (vH < 0) {
        vH += 1;
    }
    else if (vH > 1) {
        vH -= 1;
    }
    if ((6 * vH) < 1) {
        return (v1 + (v2 - v1) * 6 * vH);
    }
    else if (2 * vH < 1) {
        return v2;
    }
    else if (3 * vH < 2) {
        return (v1 + (v2 - v1) * ((2 / 3) - vH) * 6);
    }
    return v1;
};
goog.color.hslToRgb = function (h, s, l) {
    var r = 0;
    var g = 0;
    var b = 0;
    var normH = h / 360;
    if (s == 0) {
        r = g = b = l * 255;
    }
    else {
        var temp1 = 0;
        var temp2 = 0;
        if (l < 0.5) {
            temp2 = l * (1 + s);
        }
        else {
            temp2 = l + s - (s * l);
        }
        temp1 = 2 * l - temp2;
        r = 255 * goog.color.hueToRgb_(temp1, temp2, normH + (1 / 3));
        g = 255 * goog.color.hueToRgb_(temp1, temp2, normH);
        b = 255 * goog.color.hueToRgb_(temp1, temp2, normH - (1 / 3));
    }
    return [Math.round(r), Math.round(g), Math.round(b)];
};
goog.color.hslArrayToRgb = function (hsl) {
    return goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]);
};
goog.color.validHexColorRe_ = /^#(?:[0-9a-f]{3}){1,2}$/i;
goog.color.isValidHexColor_ = function (str) {
    return goog.color.validHexColorRe_.test(str);
};
goog.color.normalizedHexColorRe_ = /^#[0-9a-f]{6}$/;
goog.color.isNormalizedHexColor_ = function (str) {
    return goog.color.normalizedHexColorRe_.test(str);
};
goog.color.rgbColorRe_ =
    /^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;
goog.color.isValidRgbColor_ = function (str) {
    var regExpResultArray = str.match(goog.color.rgbColorRe_);
    if (regExpResultArray) {
        var r = Number(regExpResultArray[1]);
        var g = Number(regExpResultArray[2]);
        var b = Number(regExpResultArray[3]);
        if (r >= 0 && r <= 255 && g >= 0 && g <= 255 && b >= 0 && b <= 255) {
            return [r, g, b];
        }
    }
    return [];
};
goog.color.prependZeroIfNecessaryHelper = function (hex) {
    return hex.length == 1 ? '0' + hex : hex;
};
goog.color.prependHashIfNecessaryHelper = function (str) {
    return str.charAt(0) == '#' ? str : '#' + str;
};
goog.color.rgbStyle_ = function (rgb) {
    return 'rgb(' + rgb.join(',') + ')';
};
goog.color.hsvToRgb = function (h, s, brightness) {
    var red = 0;
    var green = 0;
    var blue = 0;
    if (s == 0) {
        red = brightness;
        green = brightness;
        blue = brightness;
    }
    else {
        var sextant = Math.floor(h / 60);
        var remainder = (h / 60) - sextant;
        var val1 = brightness * (1 - s);
        var val2 = brightness * (1 - (s * remainder));
        var val3 = brightness * (1 - (s * (1 - remainder)));
        switch (sextant) {
            case 1:
                red = val2;
                green = brightness;
                blue = val1;
                break;
            case 2:
                red = val1;
                green = brightness;
                blue = val3;
                break;
            case 3:
                red = val1;
                green = val2;
                blue = brightness;
                break;
            case 4:
                red = val3;
                green = val1;
                blue = brightness;
                break;
            case 5:
                red = brightness;
                green = val1;
                blue = val2;
                break;
            case 6:
            case 0:
                red = brightness;
                green = val3;
                blue = val1;
                break;
        }
    }
    return [Math.floor(red), Math.floor(green), Math.floor(blue)];
};
goog.color.rgbToHsv = function (red, green, blue) {
    var max = Math.max(Math.max(red, green), blue);
    var min = Math.min(Math.min(red, green), blue);
    var hue;
    var saturation;
    var value = max;
    if (min == max) {
        hue = 0;
        saturation = 0;
    }
    else {
        var delta = (max - min);
        saturation = delta / max;
        if (red == max) {
            hue = (green - blue) / delta;
        }
        else if (green == max) {
            hue = 2 + ((blue - red) / delta);
        }
        else {
            hue = 4 + ((red - green) / delta);
        }
        hue *= 60;
        if (hue < 0) {
            hue += 360;
        }
        if (hue > 360) {
            hue -= 360;
        }
    }
    return [hue, saturation, value];
};
goog.color.rgbArrayToHsv = function (rgb) {
    return goog.color.rgbToHsv(rgb[0], rgb[1], rgb[2]);
};
goog.color.hsvArrayToRgb = function (hsv) {
    return goog.color.hsvToRgb(hsv[0], hsv[1], hsv[2]);
};
goog.color.hexToHsl = function (hex) {
    var rgb = goog.color.hexToRgb(hex);
    return goog.color.rgbToHsl(rgb[0], rgb[1], rgb[2]);
};
goog.color.hslToHex = function (h, s, l) {
    return goog.color.rgbArrayToHex(goog.color.hslToRgb(h, s, l));
};
goog.color.hslArrayToHex = function (hsl) {
    return goog.color.rgbArrayToHex(goog.color.hslToRgb(hsl[0], hsl[1], hsl[2]));
};
goog.color.hexToHsv = function (hex) {
    return goog.color.rgbArrayToHsv(goog.color.hexToRgb(hex));
};
goog.color.hsvToHex = function (h, s, v) {
    return goog.color.rgbArrayToHex(goog.color.hsvToRgb(h, s, v));
};
goog.color.hsvArrayToHex = function (hsv) {
    return goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
};
goog.color.hslDistance = function (hsl1, hsl2) {
    var sl1, sl2;
    if (hsl1[2] <= 0.5) {
        sl1 = hsl1[1] * hsl1[2];
    }
    else {
        sl1 = hsl1[1] * (1.0 - hsl1[2]);
    }
    if (hsl2[2] <= 0.5) {
        sl2 = hsl2[1] * hsl2[2];
    }
    else {
        sl2 = hsl2[1] * (1.0 - hsl2[2]);
    }
    var h1 = hsl1[0] / 360.0;
    var h2 = hsl2[0] / 360.0;
    var dh = (h1 - h2) * 2.0 * Math.PI;
    return (hsl1[2] - hsl2[2]) * (hsl1[2] - hsl2[2]) + sl1 * sl1 + sl2 * sl2 -
        2 * sl1 * sl2 * Math.cos(dh);
};
goog.color.blend = function (rgb1, rgb2, factor) {
    factor = goog.math.clamp(factor, 0, 1);
    return [
        Math.round(factor * rgb1[0] + (1.0 - factor) * rgb2[0]),
        Math.round(factor * rgb1[1] + (1.0 - factor) * rgb2[1]),
        Math.round(factor * rgb1[2] + (1.0 - factor) * rgb2[2])
    ];
};
goog.color.darken = function (rgb, factor) {
    var black = [0, 0, 0];
    return goog.color.blend(black, rgb, factor);
};
goog.color.lighten = function (rgb, factor) {
    var white = [255, 255, 255];
    return goog.color.blend(white, rgb, factor);
};
goog.color.highContrast = function (prime, suggestions) {
    var suggestionsWithDiff = [];
    for (var i = 0; i < suggestions.length; i++) {
        suggestionsWithDiff.push({
            color: suggestions[i],
            diff: goog.color.yiqBrightnessDiff_(suggestions[i], prime) +
                goog.color.colorDiff_(suggestions[i], prime)
        });
    }
    suggestionsWithDiff.sort(function (a, b) { return b.diff - a.diff; });
    return suggestionsWithDiff[0].color;
};
goog.color.yiqBrightness_ = function (rgb) {
    return Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000);
};
goog.color.yiqBrightnessDiff_ = function (rgb1, rgb2) {
    return Math.abs(goog.color.yiqBrightness_(rgb1) - goog.color.yiqBrightness_(rgb2));
};
goog.color.colorDiff_ = function (rgb1, rgb2) {
    return Math.abs(rgb1[0] - rgb2[0]) + Math.abs(rgb1[1] - rgb2[1]) +
        Math.abs(rgb1[2] - rgb2[2]);
};
goog.provide('goog.color.names');
goog.color.names = {
    'aliceblue': '#f0f8ff',
    'antiquewhite': '#faebd7',
    'aqua': '#00ffff',
    'aquamarine': '#7fffd4',
    'azure': '#f0ffff',
    'beige': '#f5f5dc',
    'bisque': '#ffe4c4',
    'black': '#000000',
    'blanchedalmond': '#ffebcd',
    'blue': '#0000ff',
    'blueviolet': '#8a2be2',
    'brown': '#a52a2a',
    'burlywood': '#deb887',
    'cadetblue': '#5f9ea0',
    'chartreuse': '#7fff00',
    'chocolate': '#d2691e',
    'coral': '#ff7f50',
    'cornflowerblue': '#6495ed',
    'cornsilk': '#fff8dc',
    'crimson': '#dc143c',
    'cyan': '#00ffff',
    'darkblue': '#00008b',
    'darkcyan': '#008b8b',
    'darkgoldenrod': '#b8860b',
    'darkgray': '#a9a9a9',
    'darkgreen': '#006400',
    'darkgrey': '#a9a9a9',
    'darkkhaki': '#bdb76b',
    'darkmagenta': '#8b008b',
    'darkolivegreen': '#556b2f',
    'darkorange': '#ff8c00',
    'darkorchid': '#9932cc',
    'darkred': '#8b0000',
    'darksalmon': '#e9967a',
    'darkseagreen': '#8fbc8f',
    'darkslateblue': '#483d8b',
    'darkslategray': '#2f4f4f',
    'darkslategrey': '#2f4f4f',
    'darkturquoise': '#00ced1',
    'darkviolet': '#9400d3',
    'deeppink': '#ff1493',
    'deepskyblue': '#00bfff',
    'dimgray': '#696969',
    'dimgrey': '#696969',
    'dodgerblue': '#1e90ff',
    'firebrick': '#b22222',
    'floralwhite': '#fffaf0',
    'forestgreen': '#228b22',
    'fuchsia': '#ff00ff',
    'gainsboro': '#dcdcdc',
    'ghostwhite': '#f8f8ff',
    'gold': '#ffd700',
    'goldenrod': '#daa520',
    'gray': '#808080',
    'green': '#008000',
    'greenyellow': '#adff2f',
    'grey': '#808080',
    'honeydew': '#f0fff0',
    'hotpink': '#ff69b4',
    'indianred': '#cd5c5c',
    'indigo': '#4b0082',
    'ivory': '#fffff0',
    'khaki': '#f0e68c',
    'lavender': '#e6e6fa',
    'lavenderblush': '#fff0f5',
    'lawngreen': '#7cfc00',
    'lemonchiffon': '#fffacd',
    'lightblue': '#add8e6',
    'lightcoral': '#f08080',
    'lightcyan': '#e0ffff',
    'lightgoldenrodyellow': '#fafad2',
    'lightgray': '#d3d3d3',
    'lightgreen': '#90ee90',
    'lightgrey': '#d3d3d3',
    'lightpink': '#ffb6c1',
    'lightsalmon': '#ffa07a',
    'lightseagreen': '#20b2aa',
    'lightskyblue': '#87cefa',
    'lightslategray': '#778899',
    'lightslategrey': '#778899',
    'lightsteelblue': '#b0c4de',
    'lightyellow': '#ffffe0',
    'lime': '#00ff00',
    'limegreen': '#32cd32',
    'linen': '#faf0e6',
    'magenta': '#ff00ff',
    'maroon': '#800000',
    'mediumaquamarine': '#66cdaa',
    'mediumblue': '#0000cd',
    'mediumorchid': '#ba55d3',
    'mediumpurple': '#9370db',
    'mediumseagreen': '#3cb371',
    'mediumslateblue': '#7b68ee',
    'mediumspringgreen': '#00fa9a',
    'mediumturquoise': '#48d1cc',
    'mediumvioletred': '#c71585',
    'midnightblue': '#191970',
    'mintcream': '#f5fffa',
    'mistyrose': '#ffe4e1',
    'moccasin': '#ffe4b5',
    'navajowhite': '#ffdead',
    'navy': '#000080',
    'oldlace': '#fdf5e6',
    'olive': '#808000',
    'olivedrab': '#6b8e23',
    'orange': '#ffa500',
    'orangered': '#ff4500',
    'orchid': '#da70d6',
    'palegoldenrod': '#eee8aa',
    'palegreen': '#98fb98',
    'paleturquoise': '#afeeee',
    'palevioletred': '#db7093',
    'papayawhip': '#ffefd5',
    'peachpuff': '#ffdab9',
    'peru': '#cd853f',
    'pink': '#ffc0cb',
    'plum': '#dda0dd',
    'powderblue': '#b0e0e6',
    'purple': '#800080',
    'red': '#ff0000',
    'rosybrown': '#bc8f8f',
    'royalblue': '#4169e1',
    'saddlebrown': '#8b4513',
    'salmon': '#fa8072',
    'sandybrown': '#f4a460',
    'seagreen': '#2e8b57',
    'seashell': '#fff5ee',
    'sienna': '#a0522d',
    'silver': '#c0c0c0',
    'skyblue': '#87ceeb',
    'slateblue': '#6a5acd',
    'slategray': '#708090',
    'slategrey': '#708090',
    'snow': '#fffafa',
    'springgreen': '#00ff7f',
    'steelblue': '#4682b4',
    'tan': '#d2b48c',
    'teal': '#008080',
    'thistle': '#d8bfd8',
    'tomato': '#ff6347',
    'turquoise': '#40e0d0',
    'violet': '#ee82ee',
    'wheat': '#f5deb3',
    'white': '#ffffff',
    'whitesmoke': '#f5f5f5',
    'yellow': '#ffff00',
    'yellowgreen': '#9acd32'
};
goog.provide('goog.i18n.bidi');
goog.provide('goog.i18n.bidi.Dir');
goog.provide('goog.i18n.bidi.DirectionalString');
goog.provide('goog.i18n.bidi.Format');
goog.define('goog.i18n.bidi.FORCE_RTL', false);
goog.i18n.bidi.IS_RTL = goog.i18n.bidi.FORCE_RTL ||
    ((goog.LOCALE.substring(0, 2).toLowerCase() == 'ar' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'fa' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'he' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'iw' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'ps' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'sd' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'ug' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'ur' ||
        goog.LOCALE.substring(0, 2).toLowerCase() == 'yi') &&
        (goog.LOCALE.length == 2 || goog.LOCALE.substring(2, 3) == '-' ||
            goog.LOCALE.substring(2, 3) == '_')) ||
    (goog.LOCALE.length >= 3 &&
        goog.LOCALE.substring(0, 3).toLowerCase() == 'ckb' &&
        (goog.LOCALE.length == 3 || goog.LOCALE.substring(3, 4) == '-' ||
            goog.LOCALE.substring(3, 4) == '_'));
goog.i18n.bidi.Format = {
    LRE: '\u202A',
    RLE: '\u202B',
    PDF: '\u202C',
    LRM: '\u200E',
    RLM: '\u200F'
};
goog.i18n.bidi.Dir = {
    LTR: 1,
    RTL: -1,
    NEUTRAL: 0
};
goog.i18n.bidi.RIGHT = 'right';
goog.i18n.bidi.LEFT = 'left';
goog.i18n.bidi.I18N_RIGHT =
    goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.LEFT : goog.i18n.bidi.RIGHT;
goog.i18n.bidi.I18N_LEFT =
    goog.i18n.bidi.IS_RTL ? goog.i18n.bidi.RIGHT : goog.i18n.bidi.LEFT;
goog.i18n.bidi.toDir = function (givenDir, opt_noNeutral) {
    if (typeof givenDir == 'number') {
        return givenDir > 0 ? goog.i18n.bidi.Dir.LTR : givenDir < 0 ?
            goog.i18n.bidi.Dir.RTL :
            opt_noNeutral ? null : goog.i18n.bidi.Dir.NEUTRAL;
    }
    else if (givenDir == null) {
        return null;
    }
    else {
        return givenDir ? goog.i18n.bidi.Dir.RTL : goog.i18n.bidi.Dir.LTR;
    }
};
goog.i18n.bidi.ltrChars_ =
    'A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF' +
        '\u200E\u2C00-\uFB1C\uFE00-\uFE6F\uFEFD-\uFFFF';
goog.i18n.bidi.rtlChars_ =
    '\u0591-\u06EF\u06FA-\u07FF\u200F\uFB1D-\uFDFF\uFE70-\uFEFC';
goog.i18n.bidi.htmlSkipReg_ = /<[^>]*>|&[^;]+;/g;
goog.i18n.bidi.stripHtmlIfNeeded_ = function (str, opt_isStripNeeded) {
    return opt_isStripNeeded ? str.replace(goog.i18n.bidi.htmlSkipReg_, '') : str;
};
goog.i18n.bidi.rtlCharReg_ = new RegExp('[' + goog.i18n.bidi.rtlChars_ + ']');
goog.i18n.bidi.ltrCharReg_ = new RegExp('[' + goog.i18n.bidi.ltrChars_ + ']');
goog.i18n.bidi.hasAnyRtl = function (str, opt_isHtml) {
    return goog.i18n.bidi.rtlCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.hasRtlChar = goog.i18n.bidi.hasAnyRtl;
goog.i18n.bidi.hasAnyLtr = function (str, opt_isHtml) {
    return goog.i18n.bidi.ltrCharReg_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.ltrRe_ = new RegExp('^[' + goog.i18n.bidi.ltrChars_ + ']');
goog.i18n.bidi.rtlRe_ = new RegExp('^[' + goog.i18n.bidi.rtlChars_ + ']');
goog.i18n.bidi.isRtlChar = function (str) {
    return goog.i18n.bidi.rtlRe_.test(str);
};
goog.i18n.bidi.isLtrChar = function (str) {
    return goog.i18n.bidi.ltrRe_.test(str);
};
goog.i18n.bidi.isNeutralChar = function (str) {
    return !goog.i18n.bidi.isLtrChar(str) && !goog.i18n.bidi.isRtlChar(str);
};
goog.i18n.bidi.ltrDirCheckRe_ = new RegExp('^[^' + goog.i18n.bidi.rtlChars_ + ']*[' + goog.i18n.bidi.ltrChars_ + ']');
goog.i18n.bidi.rtlDirCheckRe_ = new RegExp('^[^' + goog.i18n.bidi.ltrChars_ + ']*[' + goog.i18n.bidi.rtlChars_ + ']');
goog.i18n.bidi.startsWithRtl = function (str, opt_isHtml) {
    return goog.i18n.bidi.rtlDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlText = goog.i18n.bidi.startsWithRtl;
goog.i18n.bidi.startsWithLtr = function (str, opt_isHtml) {
    return goog.i18n.bidi.ltrDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrText = goog.i18n.bidi.startsWithLtr;
goog.i18n.bidi.isRequiredLtrRe_ = /^http:\/\/.*/;
goog.i18n.bidi.isNeutralText = function (str, opt_isHtml) {
    str = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml);
    return goog.i18n.bidi.isRequiredLtrRe_.test(str) ||
        !goog.i18n.bidi.hasAnyLtr(str) && !goog.i18n.bidi.hasAnyRtl(str);
};
goog.i18n.bidi.ltrExitDirCheckRe_ = new RegExp('[' + goog.i18n.bidi.ltrChars_ + '][^' + goog.i18n.bidi.rtlChars_ + ']*$');
goog.i18n.bidi.rtlExitDirCheckRe_ = new RegExp('[' + goog.i18n.bidi.rtlChars_ + '][^' + goog.i18n.bidi.ltrChars_ + ']*$');
goog.i18n.bidi.endsWithLtr = function (str, opt_isHtml) {
    return goog.i18n.bidi.ltrExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isLtrExitText = goog.i18n.bidi.endsWithLtr;
goog.i18n.bidi.endsWithRtl = function (str, opt_isHtml) {
    return goog.i18n.bidi.rtlExitDirCheckRe_.test(goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml));
};
goog.i18n.bidi.isRtlExitText = goog.i18n.bidi.endsWithRtl;
goog.i18n.bidi.rtlLocalesRe_ = new RegExp('^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|' +
    '.*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))' +
    '(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)', 'i');
goog.i18n.bidi.isRtlLanguage = function (lang) {
    return goog.i18n.bidi.rtlLocalesRe_.test(lang);
};
goog.i18n.bidi.bracketGuardTextRe_ =
    /(\(.*?\)+)|(\[.*?\]+)|(\{.*?\}+)|(<.*?>+)/g;
goog.i18n.bidi.guardBracketInText = function (s, opt_isRtlContext) {
    var useRtl = opt_isRtlContext === undefined ? goog.i18n.bidi.hasAnyRtl(s) :
        opt_isRtlContext;
    var mark = useRtl ? goog.i18n.bidi.Format.RLM : goog.i18n.bidi.Format.LRM;
    return s.replace(goog.i18n.bidi.bracketGuardTextRe_, mark + '$&' + mark);
};
goog.i18n.bidi.enforceRtlInHtml = function (html) {
    if (html.charAt(0) == '<') {
        return html.replace(/<\w+/, '$& dir=rtl');
    }
    return '\n<span dir=rtl>' + html + '</span>';
};
goog.i18n.bidi.enforceRtlInText = function (text) {
    return goog.i18n.bidi.Format.RLE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.enforceLtrInHtml = function (html) {
    if (html.charAt(0) == '<') {
        return html.replace(/<\w+/, '$& dir=ltr');
    }
    return '\n<span dir=ltr>' + html + '</span>';
};
goog.i18n.bidi.enforceLtrInText = function (text) {
    return goog.i18n.bidi.Format.LRE + text + goog.i18n.bidi.Format.PDF;
};
goog.i18n.bidi.dimensionsRe_ =
    /:\s*([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)\s+([.\d][.\w]*)/g;
goog.i18n.bidi.leftRe_ = /left/gi;
goog.i18n.bidi.rightRe_ = /right/gi;
goog.i18n.bidi.tempRe_ = /%%%%/g;
goog.i18n.bidi.mirrorCSS = function (cssStr) {
    return cssStr
        .
            replace(goog.i18n.bidi.dimensionsRe_, ':$1 $4 $3 $2')
        .replace(goog.i18n.bidi.leftRe_, '%%%%')
        .
            replace(goog.i18n.bidi.rightRe_, goog.i18n.bidi.LEFT)
        .replace(goog.i18n.bidi.tempRe_, goog.i18n.bidi.RIGHT);
};
goog.i18n.bidi.doubleQuoteSubstituteRe_ = /([\u0591-\u05f2])"/g;
goog.i18n.bidi.singleQuoteSubstituteRe_ = /([\u0591-\u05f2])'/g;
goog.i18n.bidi.normalizeHebrewQuote = function (str) {
    return str.replace(goog.i18n.bidi.doubleQuoteSubstituteRe_, '$1\u05f4')
        .replace(goog.i18n.bidi.singleQuoteSubstituteRe_, '$1\u05f3');
};
goog.i18n.bidi.wordSeparatorRe_ = /\s+/;
goog.i18n.bidi.hasNumeralsRe_ = /[\d\u06f0-\u06f9]/;
goog.i18n.bidi.rtlDetectionThreshold_ = 0.40;
goog.i18n.bidi.estimateDirection = function (str, opt_isHtml) {
    var rtlCount = 0;
    var totalCount = 0;
    var hasWeaklyLtr = false;
    var tokens = goog.i18n.bidi.stripHtmlIfNeeded_(str, opt_isHtml)
        .split(goog.i18n.bidi.wordSeparatorRe_);
    for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (goog.i18n.bidi.startsWithRtl(token)) {
            rtlCount++;
            totalCount++;
        }
        else if (goog.i18n.bidi.isRequiredLtrRe_.test(token)) {
            hasWeaklyLtr = true;
        }
        else if (goog.i18n.bidi.hasAnyLtr(token)) {
            totalCount++;
        }
        else if (goog.i18n.bidi.hasNumeralsRe_.test(token)) {
            hasWeaklyLtr = true;
        }
    }
    return totalCount == 0 ?
        (hasWeaklyLtr ? goog.i18n.bidi.Dir.LTR : goog.i18n.bidi.Dir.NEUTRAL) :
        (rtlCount / totalCount > goog.i18n.bidi.rtlDetectionThreshold_ ?
            goog.i18n.bidi.Dir.RTL :
            goog.i18n.bidi.Dir.LTR);
};
goog.i18n.bidi.detectRtlDirectionality = function (str, opt_isHtml) {
    return goog.i18n.bidi.estimateDirection(str, opt_isHtml) ==
        goog.i18n.bidi.Dir.RTL;
};
goog.i18n.bidi.setElementDirAndAlign = function (element, dir) {
    if (element) {
        var htmlElement = (element);
        dir = goog.i18n.bidi.toDir(dir);
        if (dir) {
            htmlElement.style.textAlign = dir == goog.i18n.bidi.Dir.RTL ?
                goog.i18n.bidi.RIGHT :
                goog.i18n.bidi.LEFT;
            htmlElement.dir = dir == goog.i18n.bidi.Dir.RTL ? 'rtl' : 'ltr';
        }
    }
};
goog.i18n.bidi.setElementDirByTextDirectionality = function (element, text) {
    var htmlElement = (element);
    switch (goog.i18n.bidi.estimateDirection(text)) {
        case (goog.i18n.bidi.Dir.LTR):
            htmlElement.dir = 'ltr';
            break;
        case (goog.i18n.bidi.Dir.RTL):
            htmlElement.dir = 'rtl';
            break;
        default:
            htmlElement.removeAttribute('dir');
    }
};
goog.i18n.bidi.DirectionalString = function () { };
goog.i18n.bidi.DirectionalString.prototype
    .implementsGoogI18nBidiDirectionalString;
goog.i18n.bidi.DirectionalString.prototype.getDirection;
goog.provide('goog.i18n.DateTimeFormat');
goog.provide('goog.i18n.DateTimeFormat.Format');
goog.require('goog.asserts');
goog.require('goog.date');
goog.require('goog.i18n.DateTimeSymbols');
goog.require('goog.i18n.TimeZone');
goog.require('goog.string');
goog.i18n.DateTimeFormat = function (pattern, opt_dateTimeSymbols) {
    goog.asserts.assert(goog.isDef(pattern), 'Pattern must be defined');
    goog.asserts.assert(goog.isDef(opt_dateTimeSymbols) || goog.isDef(goog.i18n.DateTimeSymbols), 'goog.i18n.DateTimeSymbols or explicit symbols must be defined');
    this.patternParts_ = [];
    this.dateTimeSymbols_ = (opt_dateTimeSymbols || goog.i18n.DateTimeSymbols);
    if (typeof pattern == 'number') {
        this.applyStandardPattern_(pattern);
    }
    else {
        this.applyPattern_(pattern);
    }
};
goog.i18n.DateTimeFormat.Format = {
    FULL_DATE: 0,
    LONG_DATE: 1,
    MEDIUM_DATE: 2,
    SHORT_DATE: 3,
    FULL_TIME: 4,
    LONG_TIME: 5,
    MEDIUM_TIME: 6,
    SHORT_TIME: 7,
    FULL_DATETIME: 8,
    LONG_DATETIME: 9,
    MEDIUM_DATETIME: 10,
    SHORT_DATETIME: 11
};
goog.i18n.DateTimeFormat.TOKENS_ = [
    /^\'(?:[^\']|\'\')*(\'|$)/,
    /^(?:G+|y+|M+|k+|S+|E+|a+|h+|K+|H+|c+|L+|Q+|d+|m+|s+|v+|V+|w+|z+|Z+)/,
    /^[^\'GyMkSEahKHcLQdmsvVwzZ]+/
];
goog.i18n.DateTimeFormat.PartTypes_ = {
    QUOTED_STRING: 0,
    FIELD: 1,
    LITERAL: 2
};
goog.i18n.DateTimeFormat.getHours_ = function (date) {
    return date.getHours ? date.getHours() : 0;
};
goog.i18n.DateTimeFormat.prototype.applyPattern_ = function (pattern) {
    if (goog.i18n.DateTimeFormat.removeRlmInPatterns_) {
        pattern = pattern.replace(/\u200f/g, '');
    }
    while (pattern) {
        var previousPattern = pattern;
        for (var i = 0; i < goog.i18n.DateTimeFormat.TOKENS_.length; ++i) {
            var m = pattern.match(goog.i18n.DateTimeFormat.TOKENS_[i]);
            if (m) {
                var part = m[0];
                pattern = pattern.substring(part.length);
                if (i == goog.i18n.DateTimeFormat.PartTypes_.QUOTED_STRING) {
                    if (part == "''") {
                        part = "'";
                    }
                    else {
                        part = part.substring(1, m[1] == '\'' ? part.length - 1 : part.length);
                        part = part.replace(/\'\'/g, '\'');
                    }
                }
                this.patternParts_.push({ text: part, type: i });
                break;
            }
        }
        if (previousPattern === pattern) {
            throw new Error('Malformed pattern part: ' + pattern);
        }
    }
};
goog.i18n.DateTimeFormat.prototype.format = function (date, opt_timeZone) {
    if (!date)
        throw new Error('The date to format must be non-null.');
    var diff = opt_timeZone ?
        (date.getTimezoneOffset() - opt_timeZone.getOffset(date)) * 60000 :
        0;
    var dateForDate = diff ? new Date(date.getTime() + diff) : date;
    var dateForTime = dateForDate;
    if (opt_timeZone &&
        dateForDate.getTimezoneOffset() != date.getTimezoneOffset()) {
        var dstDiff = (dateForDate.getTimezoneOffset() - date.getTimezoneOffset()) * 60000;
        dateForDate = new Date(dateForDate.getTime() + dstDiff);
        diff += diff > 0 ? -goog.date.MS_PER_DAY : goog.date.MS_PER_DAY;
        dateForTime = new Date(date.getTime() + diff);
    }
    var out = [];
    for (var i = 0; i < this.patternParts_.length; ++i) {
        var text = this.patternParts_[i].text;
        if (goog.i18n.DateTimeFormat.PartTypes_.FIELD ==
            this.patternParts_[i].type) {
            out.push(this.formatField_(text, date, dateForDate, dateForTime, opt_timeZone));
        }
        else {
            out.push(text);
        }
    }
    return out.join('');
};
goog.i18n.DateTimeFormat.prototype.applyStandardPattern_ = function (formatType) {
    var pattern;
    if (formatType < 4) {
        pattern = this.dateTimeSymbols_.DATEFORMATS[formatType];
    }
    else if (formatType < 8) {
        pattern = this.dateTimeSymbols_.TIMEFORMATS[formatType - 4];
    }
    else if (formatType < 12) {
        pattern = this.dateTimeSymbols_.DATETIMEFORMATS[formatType - 8];
        pattern = pattern.replace('{1}', this.dateTimeSymbols_.DATEFORMATS[formatType - 8]);
        pattern = pattern.replace('{0}', this.dateTimeSymbols_.TIMEFORMATS[formatType - 8]);
    }
    else {
        this.applyStandardPattern_(goog.i18n.DateTimeFormat.Format.MEDIUM_DATETIME);
        return;
    }
    this.applyPattern_(pattern);
};
goog.i18n.DateTimeFormat.prototype.localizeNumbers_ = function (input) {
    return goog.i18n.DateTimeFormat.localizeNumbers(input, this.dateTimeSymbols_);
};
goog.i18n.DateTimeFormat.enforceAsciiDigits_ = false;
goog.i18n.DateTimeFormat.removeRlmInPatterns_ = false;
goog.i18n.DateTimeFormat.setEnforceAsciiDigits = function (enforceAsciiDigits) {
    goog.i18n.DateTimeFormat.enforceAsciiDigits_ = enforceAsciiDigits;
    goog.i18n.DateTimeFormat.removeRlmInPatterns_ = enforceAsciiDigits;
};
goog.i18n.DateTimeFormat.isEnforceAsciiDigits = function () {
    return goog.i18n.DateTimeFormat.enforceAsciiDigits_;
};
goog.i18n.DateTimeFormat.localizeNumbers = function (input, opt_dateTimeSymbols) {
    input = String(input);
    var dateTimeSymbols = opt_dateTimeSymbols || goog.i18n.DateTimeSymbols;
    if (dateTimeSymbols.ZERODIGIT === undefined ||
        goog.i18n.DateTimeFormat.enforceAsciiDigits_) {
        return input;
    }
    var parts = [];
    for (var i = 0; i < input.length; i++) {
        var c = input.charCodeAt(i);
        parts.push((0x30 <= c && c <= 0x39) ?
            String.fromCharCode(dateTimeSymbols.ZERODIGIT + c - 0x30) :
            input.charAt(i));
    }
    return parts.join('');
};
goog.i18n.DateTimeFormat.prototype.formatEra_ = function (count, date) {
    var value = date.getFullYear() > 0 ? 1 : 0;
    return count >= 4 ? this.dateTimeSymbols_.ERANAMES[value] :
        this.dateTimeSymbols_.ERAS[value];
};
goog.i18n.DateTimeFormat.prototype.formatYear_ = function (count, date) {
    var value = date.getFullYear();
    if (value < 0) {
        value = -value;
    }
    if (count == 2) {
        value = value % 100;
    }
    return this.localizeNumbers_(goog.string.padNumber(value, count));
};
goog.i18n.DateTimeFormat.prototype.formatMonth_ = function (count, date) {
    var value = date.getMonth();
    switch (count) {
        case 5:
            return this.dateTimeSymbols_.NARROWMONTHS[value];
        case 4:
            return this.dateTimeSymbols_.MONTHS[value];
        case 3:
            return this.dateTimeSymbols_.SHORTMONTHS[value];
        default:
            return this.localizeNumbers_(goog.string.padNumber(value + 1, count));
    }
};
goog.i18n.DateTimeFormat.validateDateHasTime_ = function (date) {
    if (date.getHours && date.getSeconds && date.getMinutes)
        return;
    throw new Error('The date to format has no time (probably a goog.date.Date). ' +
        'Use Date or goog.date.DateTime, or use a pattern without time fields.');
};
goog.i18n.DateTimeFormat.prototype.format24Hours_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    var hours = goog.i18n.DateTimeFormat.getHours_(date) || 24;
    return this.localizeNumbers_(goog.string.padNumber(hours, count));
};
goog.i18n.DateTimeFormat.prototype.formatFractionalSeconds_ = function (count, date) {
    var value = date.getTime() % 1000 / 1000;
    return this.localizeNumbers_(value.toFixed(Math.min(3, count)).substr(2) +
        (count > 3 ? goog.string.padNumber(0, count - 3) : ''));
};
goog.i18n.DateTimeFormat.prototype.formatDayOfWeek_ = function (count, date) {
    var value = date.getDay();
    return count >= 4 ? this.dateTimeSymbols_.WEEKDAYS[value] :
        this.dateTimeSymbols_.SHORTWEEKDAYS[value];
};
goog.i18n.DateTimeFormat.prototype.formatAmPm_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    var hours = goog.i18n.DateTimeFormat.getHours_(date);
    return this.dateTimeSymbols_.AMPMS[hours >= 12 && hours < 24 ? 1 : 0];
};
goog.i18n.DateTimeFormat.prototype.format1To12Hours_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12 || 12;
    return this.localizeNumbers_(goog.string.padNumber(hours, count));
};
goog.i18n.DateTimeFormat.prototype.format0To11Hours_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    var hours = goog.i18n.DateTimeFormat.getHours_(date) % 12;
    return this.localizeNumbers_(goog.string.padNumber(hours, count));
};
goog.i18n.DateTimeFormat.prototype.format0To23Hours_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    var hours = goog.i18n.DateTimeFormat.getHours_(date);
    return this.localizeNumbers_(goog.string.padNumber(hours, count));
};
goog.i18n.DateTimeFormat.prototype.formatStandaloneDay_ = function (count, date) {
    var value = date.getDay();
    switch (count) {
        case 5:
            return this.dateTimeSymbols_.STANDALONENARROWWEEKDAYS[value];
        case 4:
            return this.dateTimeSymbols_.STANDALONEWEEKDAYS[value];
        case 3:
            return this.dateTimeSymbols_.STANDALONESHORTWEEKDAYS[value];
        default:
            return this.localizeNumbers_(goog.string.padNumber(value, 1));
    }
};
goog.i18n.DateTimeFormat.prototype.formatStandaloneMonth_ = function (count, date) {
    var value = date.getMonth();
    switch (count) {
        case 5:
            return this.dateTimeSymbols_.STANDALONENARROWMONTHS[value];
        case 4:
            return this.dateTimeSymbols_.STANDALONEMONTHS[value];
        case 3:
            return this.dateTimeSymbols_.STANDALONESHORTMONTHS[value];
        default:
            return this.localizeNumbers_(goog.string.padNumber(value + 1, count));
    }
};
goog.i18n.DateTimeFormat.prototype.formatQuarter_ = function (count, date) {
    var value = Math.floor(date.getMonth() / 3);
    return count < 4 ? this.dateTimeSymbols_.SHORTQUARTERS[value] :
        this.dateTimeSymbols_.QUARTERS[value];
};
goog.i18n.DateTimeFormat.prototype.formatDate_ = function (count, date) {
    return this.localizeNumbers_(goog.string.padNumber(date.getDate(), count));
};
goog.i18n.DateTimeFormat.prototype.formatMinutes_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    return this.localizeNumbers_(goog.string.padNumber((date).getMinutes(), count));
};
goog.i18n.DateTimeFormat.prototype.formatSeconds_ = function (count, date) {
    goog.i18n.DateTimeFormat.validateDateHasTime_(date);
    return this.localizeNumbers_(goog.string.padNumber((date).getSeconds(), count));
};
goog.i18n.DateTimeFormat.prototype.formatWeekOfYear_ = function (count, date) {
    var weekNum = goog.date.getWeekNumber(date.getFullYear(), date.getMonth(), date.getDate(), this.dateTimeSymbols_.FIRSTWEEKCUTOFFDAY, this.dateTimeSymbols_.FIRSTDAYOFWEEK);
    return this.localizeNumbers_(goog.string.padNumber(weekNum, count));
};
goog.i18n.DateTimeFormat.prototype.formatTimeZoneRFC_ = function (count, date, opt_timeZone) {
    opt_timeZone = opt_timeZone ||
        goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());
    return count < 4 ? opt_timeZone.getRFCTimeZoneString(date) :
        this.localizeNumbers_(opt_timeZone.getGMTString(date));
};
goog.i18n.DateTimeFormat.prototype.formatTimeZone_ = function (count, date, opt_timeZone) {
    opt_timeZone = opt_timeZone ||
        goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());
    return count < 4 ? opt_timeZone.getShortName(date) :
        opt_timeZone.getLongName(date);
};
goog.i18n.DateTimeFormat.prototype.formatTimeZoneId_ = function (date, opt_timeZone) {
    opt_timeZone = opt_timeZone ||
        goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());
    return opt_timeZone.getTimeZoneId();
};
goog.i18n.DateTimeFormat.prototype.formatTimeZoneLocationId_ = function (count, date, opt_timeZone) {
    opt_timeZone = opt_timeZone ||
        goog.i18n.TimeZone.createTimeZone(date.getTimezoneOffset());
    return count <= 2 ? opt_timeZone.getTimeZoneId() :
        opt_timeZone.getGenericLocation(date);
};
goog.i18n.DateTimeFormat.prototype.formatField_ = function (patternStr, date, dateForDate, dateForTime, opt_timeZone) {
    var count = patternStr.length;
    switch (patternStr.charAt(0)) {
        case 'G':
            return this.formatEra_(count, dateForDate);
        case 'y':
            return this.formatYear_(count, dateForDate);
        case 'M':
            return this.formatMonth_(count, dateForDate);
        case 'k':
            return this.format24Hours_(count, dateForTime);
        case 'S':
            return this.formatFractionalSeconds_(count, dateForTime);
        case 'E':
            return this.formatDayOfWeek_(count, dateForDate);
        case 'a':
            return this.formatAmPm_(count, dateForTime);
        case 'h':
            return this.format1To12Hours_(count, dateForTime);
        case 'K':
            return this.format0To11Hours_(count, dateForTime);
        case 'H':
            return this.format0To23Hours_(count, dateForTime);
        case 'c':
            return this.formatStandaloneDay_(count, dateForDate);
        case 'L':
            return this.formatStandaloneMonth_(count, dateForDate);
        case 'Q':
            return this.formatQuarter_(count, dateForDate);
        case 'd':
            return this.formatDate_(count, dateForDate);
        case 'm':
            return this.formatMinutes_(count, dateForTime);
        case 's':
            return this.formatSeconds_(count, dateForTime);
        case 'v':
            return this.formatTimeZoneId_(date, opt_timeZone);
        case 'V':
            return this.formatTimeZoneLocationId_(count, date, opt_timeZone);
        case 'w':
            return this.formatWeekOfYear_(count, dateForTime);
        case 'z':
            return this.formatTimeZone_(count, date, opt_timeZone);
        case 'Z':
            return this.formatTimeZoneRFC_(count, date, opt_timeZone);
        default:
            return '';
    }
};
goog.provide('goog.i18n.DateTimePatterns');
goog.provide('goog.i18n.DateTimeSymbols');
goog.provide('goog.i18n.TimeZone');
goog.require('goog.array');
goog.require('goog.date.DateLike');
goog.require('goog.object');
goog.require('goog.string');
goog.i18n.TimeZone = function () {
    this.timeZoneId_;
    this.standardOffset_;
    this.tzNames_;
    this.tzNamesExt_;
    this.transitions_;
};
goog.i18n.TimeZone.MILLISECONDS_PER_HOUR_ = 3600 * 1000;
goog.i18n.TimeZone.NameType = {
    STD_SHORT_NAME: 0,
    STD_LONG_NAME: 1,
    DLT_SHORT_NAME: 2,
    DLT_LONG_NAME: 3
};
goog.i18n.TimeZone.createTimeZone = function (timeZoneData) {
    if (typeof timeZoneData == 'number') {
        return goog.i18n.TimeZone.createSimpleTimeZone_(timeZoneData);
    }
    var tz = new goog.i18n.TimeZone();
    tz.timeZoneId_ = timeZoneData['id'];
    tz.standardOffset_ = -timeZoneData['std_offset'];
    tz.tzNames_ = timeZoneData['names'];
    tz.tzNamesExt_ = timeZoneData['names_ext'];
    tz.transitions_ = timeZoneData['transitions'];
    return tz;
};
goog.i18n.TimeZone.createSimpleTimeZone_ = function (timeZoneOffsetInMinutes) {
    var tz = new goog.i18n.TimeZone();
    tz.standardOffset_ = timeZoneOffsetInMinutes;
    tz.timeZoneId_ =
        goog.i18n.TimeZone.composePosixTimeZoneID_(timeZoneOffsetInMinutes);
    var str = goog.i18n.TimeZone.composeUTCString_(timeZoneOffsetInMinutes);
    var strGMT = goog.i18n.TimeZone.composeGMTString_(timeZoneOffsetInMinutes);
    tz.tzNames_ = [str, str];
    tz.tzNamesExt_ = { STD_LONG_NAME_GMT: strGMT, STD_GENERIC_LOCATION: strGMT };
    tz.transitions_ = [];
    return tz;
};
goog.i18n.TimeZone.composeGMTString_ = function (offset) {
    var parts = ['GMT'];
    parts.push(offset <= 0 ? '+' : '-');
    offset = Math.abs(offset);
    parts.push(goog.string.padNumber(Math.floor(offset / 60) % 100, 2), ':', goog.string.padNumber(offset % 60, 2));
    return parts.join('');
};
goog.i18n.TimeZone.composePosixTimeZoneID_ = function (offset) {
    if (offset == 0) {
        return 'Etc/GMT';
    }
    var parts = ['Etc/GMT', offset < 0 ? '-' : '+'];
    offset = Math.abs(offset);
    parts.push(Math.floor(offset / 60) % 100);
    offset = offset % 60;
    if (offset != 0) {
        parts.push(':', goog.string.padNumber(offset, 2));
    }
    return parts.join('');
};
goog.i18n.TimeZone.composeUTCString_ = function (offset) {
    if (offset == 0) {
        return 'UTC';
    }
    var parts = ['UTC', offset < 0 ? '+' : '-'];
    offset = Math.abs(offset);
    parts.push(Math.floor(offset / 60) % 100);
    offset = offset % 60;
    if (offset != 0) {
        parts.push(':', offset);
    }
    return parts.join('');
};
goog.i18n.TimeZone.prototype.getTimeZoneData = function () {
    return {
        'id': this.timeZoneId_,
        'std_offset': -this.standardOffset_,
        'names': goog.array.clone(this.tzNames_),
        'names_ext': goog.object.clone(this.tzNamesExt_),
        'transitions': goog.array.clone(this.transitions_)
    };
};
goog.i18n.TimeZone.prototype.getDaylightAdjustment = function (date) {
    var timeInMs = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes());
    var timeInHours = timeInMs / goog.i18n.TimeZone.MILLISECONDS_PER_HOUR_;
    var index = 0;
    while (index < this.transitions_.length &&
        timeInHours >= this.transitions_[index]) {
        index += 2;
    }
    return (index == 0) ? 0 : this.transitions_[index - 1];
};
goog.i18n.TimeZone.prototype.getGMTString = function (date) {
    return goog.i18n.TimeZone.composeGMTString_(this.getOffset(date));
};
goog.i18n.TimeZone.prototype.getLongName = function (date) {
    return this.tzNames_[this.isDaylightTime(date) ?
        goog.i18n.TimeZone.NameType.DLT_LONG_NAME :
        goog.i18n.TimeZone.NameType.STD_LONG_NAME];
};
goog.i18n.TimeZone.prototype.getOffset = function (date) {
    return this.standardOffset_ - this.getDaylightAdjustment(date);
};
goog.i18n.TimeZone.prototype.getRFCTimeZoneString = function (date) {
    var offset = -this.getOffset(date);
    var parts = [offset < 0 ? '-' : '+'];
    offset = Math.abs(offset);
    parts.push(goog.string.padNumber(Math.floor(offset / 60) % 100, 2), goog.string.padNumber(offset % 60, 2));
    return parts.join('');
};
goog.i18n.TimeZone.prototype.getShortName = function (date) {
    return this.tzNames_[this.isDaylightTime(date) ?
        goog.i18n.TimeZone.NameType.DLT_SHORT_NAME :
        goog.i18n.TimeZone.NameType.STD_SHORT_NAME];
};
goog.i18n.TimeZone.prototype.getTimeZoneId = function () {
    return this.timeZoneId_;
};
goog.i18n.TimeZone.prototype.isDaylightTime = function (date) {
    return this.getDaylightAdjustment(date) > 0;
};
goog.i18n.TimeZone.prototype.getLongNameGMT = function (date) {
    if (this.isDaylightTime(date)) {
        return (goog.isDef(this.tzNamesExt_.DST_LONG_NAME_GMT)) ?
            this.tzNamesExt_.DST_LONG_NAME_GMT :
            this.tzNamesExt_['DST_LONG_NAME_GMT'];
    }
    else {
        return (goog.isDef(this.tzNamesExt_.STD_LONG_NAME_GMT)) ?
            this.tzNamesExt_.STD_LONG_NAME_GMT :
            this.tzNamesExt_['STD_LONG_NAME_GMT'];
    }
};
goog.i18n.TimeZone.prototype.getGenericLocation = function (date) {
    if (this.isDaylightTime(date)) {
        return (goog.isDef(this.tzNamesExt_.DST_GENERIC_LOCATION)) ?
            this.tzNamesExt_.DST_GENERIC_LOCATION :
            this.tzNamesExt_['DST_GENERIC_LOCATION'];
    }
    else {
        return (goog.isDef(this.tzNamesExt_.STD_GENERIC_LOCATION)) ?
            this.tzNamesExt_.STD_GENERIC_LOCATION :
            this.tzNamesExt_['STD_GENERIC_LOCATION'];
    }
};
goog.provide('goog.iter');
goog.provide('goog.iter.Iterable');
goog.provide('goog.iter.Iterator');
goog.provide('goog.iter.StopIteration');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.functions');
goog.require('goog.math');
goog.iter.Iterable;
goog.iter.StopIteration = ('StopIteration' in goog.global) ?
    goog.global['StopIteration'] :
    { message: 'StopIteration', stack: '' };
goog.iter.Iterator = function () { };
goog.iter.Iterator.prototype.next = function () {
    throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function (opt_keys) {
    return this;
};
goog.iter.toIterator = function (iterable) {
    if (iterable instanceof goog.iter.Iterator) {
        return iterable;
    }
    if (typeof iterable.__iterator__ == 'function') {
        return (iterable)
            .__iterator__(false);
    }
    if (goog.isArrayLike(iterable)) {
        var like = (iterable);
        var i = 0;
        var newIter = new goog.iter.Iterator;
        newIter.next = function () {
            while (true) {
                if (i >= like.length) {
                    throw goog.iter.StopIteration;
                }
                if (!(i in like)) {
                    i++;
                    continue;
                }
                return like[i++];
            }
        };
        return newIter;
    }
    throw new Error('Not implemented');
};
goog.iter.forEach = function (iterable, f, opt_obj) {
    if (goog.isArrayLike(iterable)) {
        try {
            goog.array.forEach((iterable), f, opt_obj);
        }
        catch (ex) {
            if (ex !== goog.iter.StopIteration) {
                throw ex;
            }
        }
    }
    else {
        iterable = goog.iter.toIterator(iterable);
        try {
            while (true) {
                f.call(opt_obj, iterable.next(), undefined, iterable);
            }
        }
        catch (ex) {
            if (ex !== goog.iter.StopIteration) {
                throw ex;
            }
        }
    }
};
goog.iter.filter = function (iterable, f, opt_obj) {
    var iterator = goog.iter.toIterator(iterable);
    var newIter = new goog.iter.Iterator;
    newIter.next = function () {
        while (true) {
            var val = iterator.next();
            if (f.call(opt_obj, val, undefined, iterator)) {
                return val;
            }
        }
    };
    return newIter;
};
goog.iter.filterFalse = function (iterable, f, opt_obj) {
    return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function (startOrStop, opt_stop, opt_step) {
    var start = 0;
    var stop = startOrStop;
    var step = opt_step || 1;
    if (arguments.length > 1) {
        start = startOrStop;
        stop = +opt_stop;
    }
    if (step == 0) {
        throw new Error('Range step argument must not be zero');
    }
    var newIter = new goog.iter.Iterator;
    newIter.next = function () {
        if (step > 0 && start >= stop || step < 0 && start <= stop) {
            throw goog.iter.StopIteration;
        }
        var rv = start;
        start += step;
        return rv;
    };
    return newIter;
};
goog.iter.join = function (iterable, deliminator) {
    return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function (iterable, f, opt_obj) {
    var iterator = goog.iter.toIterator(iterable);
    var newIter = new goog.iter.Iterator;
    newIter.next = function () {
        var val = iterator.next();
        return f.call(opt_obj, val, undefined, iterator);
    };
    return newIter;
};
goog.iter.reduce = function (iterable, f, val, opt_obj) {
    var rval = val;
    goog.iter.forEach(iterable, function (val) { rval = f.call(opt_obj, rval, val); });
    return rval;
};
goog.iter.some = function (iterable, f, opt_obj) {
    iterable = goog.iter.toIterator(iterable);
    try {
        while (true) {
            if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
                return true;
            }
        }
    }
    catch (ex) {
        if (ex !== goog.iter.StopIteration) {
            throw ex;
        }
    }
    return false;
};
goog.iter.every = function (iterable, f, opt_obj) {
    iterable = goog.iter.toIterator(iterable);
    try {
        while (true) {
            if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
                return false;
            }
        }
    }
    catch (ex) {
        if (ex !== goog.iter.StopIteration) {
            throw ex;
        }
    }
    return true;
};
goog.iter.chain = function (var_args) {
    return goog.iter.chainFromIterable(arguments);
};
goog.iter.chainFromIterable = function (iterable) {
    var iterator = goog.iter.toIterator(iterable);
    var iter = new goog.iter.Iterator();
    var current = null;
    iter.next = function () {
        while (true) {
            if (current == null) {
                var it = iterator.next();
                current = goog.iter.toIterator(it);
            }
            try {
                return current.next();
            }
            catch (ex) {
                if (ex !== goog.iter.StopIteration) {
                    throw ex;
                }
                current = null;
            }
        }
    };
    return iter;
};
goog.iter.dropWhile = function (iterable, f, opt_obj) {
    var iterator = goog.iter.toIterator(iterable);
    var newIter = new goog.iter.Iterator;
    var dropping = true;
    newIter.next = function () {
        while (true) {
            var val = iterator.next();
            if (dropping && f.call(opt_obj, val, undefined, iterator)) {
                continue;
            }
            else {
                dropping = false;
            }
            return val;
        }
    };
    return newIter;
};
goog.iter.takeWhile = function (iterable, f, opt_obj) {
    var iterator = goog.iter.toIterator(iterable);
    var iter = new goog.iter.Iterator();
    iter.next = function () {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
            return val;
        }
        throw goog.iter.StopIteration;
    };
    return iter;
};
goog.iter.toArray = function (iterable) {
    if (goog.isArrayLike(iterable)) {
        return goog.array.toArray((iterable));
    }
    iterable = goog.iter.toIterator(iterable);
    var array = [];
    goog.iter.forEach(iterable, function (val) { array.push(val); });
    return array;
};
goog.iter.equals = function (iterable1, iterable2, opt_equalsFn) {
    var fillValue = {};
    var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
    var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
    return goog.iter.every(pairs, function (pair) { return equalsFn(pair[0], pair[1]); });
};
goog.iter.nextOrValue = function (iterable, defaultValue) {
    try {
        return goog.iter.toIterator(iterable).next();
    }
    catch (e) {
        if (e != goog.iter.StopIteration) {
            throw e;
        }
        return defaultValue;
    }
};
goog.iter.product = function (var_args) {
    var someArrayEmpty = goog.array.some(arguments, function (arr) { return !arr.length; });
    if (someArrayEmpty || !arguments.length) {
        return new goog.iter.Iterator();
    }
    var iter = new goog.iter.Iterator();
    var arrays = arguments;
    var indicies = goog.array.repeat(0, arrays.length);
    iter.next = function () {
        if (indicies) {
            var retVal = goog.array.map(indicies, function (valueIndex, arrayIndex) {
                return arrays[arrayIndex][valueIndex];
            });
            for (var i = indicies.length - 1; i >= 0; i--) {
                goog.asserts.assert(indicies);
                if (indicies[i] < arrays[i].length - 1) {
                    indicies[i]++;
                    break;
                }
                if (i == 0) {
                    indicies = null;
                    break;
                }
                indicies[i] = 0;
            }
            return retVal;
        }
        throw goog.iter.StopIteration;
    };
    return iter;
};
goog.iter.cycle = function (iterable) {
    var baseIterator = goog.iter.toIterator(iterable);
    var cache = [];
    var cacheIndex = 0;
    var iter = new goog.iter.Iterator();
    var useCache = false;
    iter.next = function () {
        var returnElement = null;
        if (!useCache) {
            try {
                returnElement = baseIterator.next();
                cache.push(returnElement);
                return returnElement;
            }
            catch (e) {
                if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
                    throw e;
                }
                useCache = true;
            }
        }
        returnElement = cache[cacheIndex];
        cacheIndex = (cacheIndex + 1) % cache.length;
        return returnElement;
    };
    return iter;
};
goog.iter.count = function (opt_start, opt_step) {
    var counter = opt_start || 0;
    var step = goog.isDef(opt_step) ? opt_step : 1;
    var iter = new goog.iter.Iterator();
    iter.next = function () {
        var returnValue = counter;
        counter += step;
        return returnValue;
    };
    return iter;
};
goog.iter.repeat = function (value) {
    var iter = new goog.iter.Iterator();
    iter.next = goog.functions.constant(value);
    return iter;
};
goog.iter.accumulate = function (iterable) {
    var iterator = goog.iter.toIterator(iterable);
    var total = 0;
    var iter = new goog.iter.Iterator();
    iter.next = function () {
        total += iterator.next();
        return total;
    };
    return iter;
};
goog.iter.zip = function (var_args) {
    var args = arguments;
    var iter = new goog.iter.Iterator();
    if (args.length > 0) {
        var iterators = goog.array.map(args, goog.iter.toIterator);
        iter.next = function () {
            var arr = goog.array.map(iterators, function (it) { return it.next(); });
            return arr;
        };
    }
    return iter;
};
goog.iter.zipLongest = function (fillValue, var_args) {
    var args = goog.array.slice(arguments, 1);
    var iter = new goog.iter.Iterator();
    if (args.length > 0) {
        var iterators = goog.array.map(args, goog.iter.toIterator);
        iter.next = function () {
            var iteratorsHaveValues = false;
            var arr = goog.array.map(iterators, function (it) {
                var returnValue;
                try {
                    returnValue = it.next();
                    iteratorsHaveValues = true;
                }
                catch (ex) {
                    if (ex !== goog.iter.StopIteration) {
                        throw ex;
                    }
                    returnValue = fillValue;
                }
                return returnValue;
            });
            if (!iteratorsHaveValues) {
                throw goog.iter.StopIteration;
            }
            return arr;
        };
    }
    return iter;
};
goog.iter.compress = function (iterable, selectors) {
    var selectorIterator = goog.iter.toIterator(selectors);
    return goog.iter.filter(iterable, function () { return !!selectorIterator.next(); });
};
goog.iter.GroupByIterator_ = function (iterable, opt_keyFunc) {
    this.iterator = goog.iter.toIterator(iterable);
    this.keyFunc = opt_keyFunc || goog.functions.identity;
    this.targetKey;
    this.currentKey;
    this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function () {
    while (this.currentKey == this.targetKey) {
        this.currentValue = this.iterator.next();
        this.currentKey = this.keyFunc(this.currentValue);
    }
    this.targetKey = this.currentKey;
    return [this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function (targetKey) {
    var arr = [];
    while (this.currentKey == targetKey) {
        arr.push(this.currentValue);
        try {
            this.currentValue = this.iterator.next();
        }
        catch (ex) {
            if (ex !== goog.iter.StopIteration) {
                throw ex;
            }
            break;
        }
        this.currentKey = this.keyFunc(this.currentValue);
    }
    return arr;
};
goog.iter.groupBy = function (iterable, opt_keyFunc) {
    return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function (iterable, f, opt_obj) {
    var iterator = goog.iter.toIterator(iterable);
    var iter = new goog.iter.Iterator();
    iter.next = function () {
        var args = goog.iter.toArray(iterator.next());
        return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
    };
    return iter;
};
goog.iter.tee = function (iterable, opt_num) {
    var iterator = goog.iter.toIterator(iterable);
    var num = goog.isNumber(opt_num) ? opt_num : 2;
    var buffers = goog.array.map(goog.array.range(num), function () { return []; });
    var addNextIteratorValueToBuffers = function () {
        var val = iterator.next();
        goog.array.forEach(buffers, function (buffer) { buffer.push(val); });
    };
    var createIterator = function (buffer) {
        var iter = new goog.iter.Iterator();
        iter.next = function () {
            if (goog.array.isEmpty(buffer)) {
                addNextIteratorValueToBuffers();
            }
            goog.asserts.assert(!goog.array.isEmpty(buffer));
            return buffer.shift();
        };
        return iter;
    };
    return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function (iterable, opt_start) {
    return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function (iterable, limitSize) {
    goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
    var iterator = goog.iter.toIterator(iterable);
    var iter = new goog.iter.Iterator();
    var remaining = limitSize;
    iter.next = function () {
        if (remaining-- > 0) {
            return iterator.next();
        }
        throw goog.iter.StopIteration;
    };
    return iter;
};
goog.iter.consume = function (iterable, count) {
    goog.asserts.assert(goog.math.isInt(count) && count >= 0);
    var iterator = goog.iter.toIterator(iterable);
    while (count-- > 0) {
        goog.iter.nextOrValue(iterator, null);
    }
    return iterator;
};
goog.iter.slice = function (iterable, start, opt_end) {
    goog.asserts.assert(goog.math.isInt(start) && start >= 0);
    var iterator = goog.iter.consume(iterable, start);
    if (goog.isNumber(opt_end)) {
        goog.asserts.assert(goog.math.isInt(opt_end) && opt_end >= start);
        iterator = goog.iter.limit(iterator, opt_end - start);
    }
    return iterator;
};
goog.iter.hasDuplicates_ = function (arr) {
    var deduped = [];
    goog.array.removeDuplicates(arr, deduped);
    return arr.length != deduped.length;
};
goog.iter.permutations = function (iterable, opt_length) {
    var elements = goog.iter.toArray(iterable);
    var length = goog.isNumber(opt_length) ? opt_length : elements.length;
    var sets = goog.array.repeat(elements, length);
    var product = goog.iter.product.apply(undefined, sets);
    return goog.iter.filter(product, function (arr) { return !goog.iter.hasDuplicates_(arr); });
};
goog.iter.combinations = function (iterable, length) {
    var elements = goog.iter.toArray(iterable);
    var indexes = goog.iter.range(elements.length);
    var indexIterator = goog.iter.permutations(indexes, length);
    var sortedIndexIterator = goog.iter.filter(indexIterator, function (arr) { return goog.array.isSorted(arr); });
    var iter = new goog.iter.Iterator();
    function getIndexFromElements(index) { return elements[index]; }
    iter.next = function () {
        return goog.array.map(sortedIndexIterator.next(), getIndexFromElements);
    };
    return iter;
};
goog.iter.combinationsWithReplacement = function (iterable, length) {
    var elements = goog.iter.toArray(iterable);
    var indexes = goog.array.range(elements.length);
    var sets = goog.array.repeat(indexes, length);
    var indexIterator = goog.iter.product.apply(undefined, sets);
    var sortedIndexIterator = goog.iter.filter(indexIterator, function (arr) { return goog.array.isSorted(arr); });
    var iter = new goog.iter.Iterator();
    function getIndexFromElements(index) { return elements[index]; }
    iter.next = function () {
        return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
    };
    return iter;
};
goog.provide('goog.date');
goog.provide('goog.date.Date');
goog.provide('goog.date.DateTime');
goog.provide('goog.date.Interval');
goog.provide('goog.date.month');
goog.provide('goog.date.weekDay');
goog.require('goog.asserts');
goog.require('goog.date.DateLike');
goog.require('goog.i18n.DateTimeSymbols');
goog.require('goog.string');
goog.date.weekDay = {
    MON: 0,
    TUE: 1,
    WED: 2,
    THU: 3,
    FRI: 4,
    SAT: 5,
    SUN: 6
};
goog.date.month = {
    JAN: 0,
    FEB: 1,
    MAR: 2,
    APR: 3,
    MAY: 4,
    JUN: 5,
    JUL: 6,
    AUG: 7,
    SEP: 8,
    OCT: 9,
    NOV: 10,
    DEC: 11
};
goog.date.formatMonthAndYear = function (monthName, yearNum) {
    var MSG_MONTH_AND_YEAR = goog.getMsg('{$monthName} {$yearNum}', { 'monthName': monthName, 'yearNum': String(yearNum) });
    return MSG_MONTH_AND_YEAR;
};
goog.date.splitDateStringRegex_ = new RegExp('^(\\d{4})(?:(?:-?(\\d{2})(?:-?(\\d{2}))?)|' +
    '(?:-?(\\d{3}))|(?:-?W(\\d{2})(?:-?([1-7]))?))?$');
goog.date.splitTimeStringRegex_ =
    /^(\d{2})(?::?(\d{2})(?::?(\d{2})(\.\d+)?)?)?$/;
goog.date.splitTimezoneStringRegex_ = /Z|(?:([-+])(\d{2})(?::?(\d{2}))?)$/;
goog.date.splitDurationRegex_ = new RegExp('^(-)?P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?' +
    '(T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$');
goog.date.MS_PER_DAY = 24 * 60 * 60 * 1000;
goog.date.isLeapYear = function (year) {
    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
};
goog.date.isLongIsoYear = function (year) {
    var n = 5 * year + 12 - 4 * (Math.floor(year / 100) - Math.floor(year / 400));
    n += Math.floor((year - 100) / 400) - Math.floor((year - 102) / 400);
    n += Math.floor((year - 200) / 400) - Math.floor((year - 199) / 400);
    return n % 28 < 5;
};
goog.date.getNumberOfDaysInMonth = function (year, month) {
    switch (month) {
        case goog.date.month.FEB:
            return goog.date.isLeapYear(year) ? 29 : 28;
        case goog.date.month.JUN:
        case goog.date.month.SEP:
        case goog.date.month.NOV:
        case goog.date.month.APR:
            return 30;
    }
    return 31;
};
goog.date.isSameDay = function (date, opt_now) {
    var now = opt_now || new Date(goog.now());
    return date.getDate() == now.getDate() && goog.date.isSameMonth(date, now);
};
goog.date.isSameMonth = function (date, opt_now) {
    var now = opt_now || new Date(goog.now());
    return date.getMonth() == now.getMonth() && goog.date.isSameYear(date, now);
};
goog.date.isSameYear = function (date, opt_now) {
    var now = opt_now || new Date(goog.now());
    return date.getFullYear() == now.getFullYear();
};
goog.date.getWeekNumber = function (year, month, date, opt_weekDay, opt_firstDayOfWeek) {
    var d = new Date(year, month, date);
    var cutoff = goog.isDef(opt_weekDay) ? opt_weekDay : goog.date.weekDay.THU;
    var firstday = opt_firstDayOfWeek || goog.date.weekDay.MON;
    var isoday = (d.getDay() + 6) % 7;
    var daypos = (isoday - firstday + 7) % 7;
    var cutoffpos = (cutoff - firstday + 7) % 7;
    var cutoffSameWeek = d.valueOf() + (cutoffpos - daypos) * goog.date.MS_PER_DAY;
    var jan1 = new Date(new Date(cutoffSameWeek).getFullYear(), 0, 1).valueOf();
    return Math.floor(Math.round((cutoffSameWeek - jan1) / goog.date.MS_PER_DAY) / 7) +
        1;
};
goog.date.min = function (date1, date2) {
    return date1 < date2 ? date1 : date2;
};
goog.date.max = function (date1, date2) {
    return date1 > date2 ? date1 : date2;
};
goog.date.setIso8601DateTime = function (dateTime, formatted) {
    formatted = goog.string.trim(formatted);
    var delim = formatted.indexOf('T') == -1 ? ' ' : 'T';
    var parts = formatted.split(delim);
    return goog.date.setIso8601DateOnly_(dateTime, parts[0]) &&
        (parts.length < 2 || goog.date.setIso8601TimeOnly_(dateTime, parts[1]));
};
goog.date.setIso8601DateOnly_ = function (d, formatted) {
    var parts = formatted.match(goog.date.splitDateStringRegex_);
    if (!parts) {
        return false;
    }
    var year = Number(parts[1]);
    var month = Number(parts[2]);
    var date = Number(parts[3]);
    var dayOfYear = Number(parts[4]);
    var week = Number(parts[5]);
    var dayOfWeek = Number(parts[6]) || 1;
    d.setFullYear(year);
    if (dayOfYear) {
        d.setDate(1);
        d.setMonth(0);
        var offset = dayOfYear - 1;
        d.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));
    }
    else if (week) {
        goog.date.setDateFromIso8601Week_(d, week, dayOfWeek);
    }
    else {
        if (month) {
            d.setDate(1);
            d.setMonth(month - 1);
        }
        if (date) {
            d.setDate(date);
        }
    }
    return true;
};
goog.date.setDateFromIso8601Week_ = function (d, week, dayOfWeek) {
    d.setMonth(0);
    d.setDate(1);
    var jsDay = d.getDay();
    var jan1WeekDay = jsDay || 7;
    var THURSDAY = 4;
    if (jan1WeekDay <= THURSDAY) {
        var startDelta = 1 - jan1WeekDay;
    }
    else {
        startDelta = 8 - jan1WeekDay;
    }
    var absoluteDays = Number(dayOfWeek) + (7 * (Number(week) - 1));
    var delta = startDelta + absoluteDays - 1;
    var interval = new goog.date.Interval(goog.date.Interval.DAYS, delta);
    d.add(interval);
};
goog.date.setIso8601TimeOnly_ = function (d, formatted) {
    var parts = formatted.match(goog.date.splitTimezoneStringRegex_);
    var offset = 0;
    if (parts) {
        if (parts[0] != 'Z') {
            offset = Number(parts[2]) * 60 + Number(parts[3]);
            offset *= parts[1] == '-' ? 1 : -1;
        }
        offset -= d.getTimezoneOffset();
        formatted = formatted.substr(0, formatted.length - parts[0].length);
    }
    parts = formatted.match(goog.date.splitTimeStringRegex_);
    if (!parts) {
        return false;
    }
    d.setHours(Number(parts[1]));
    d.setMinutes(Number(parts[2]) || 0);
    d.setSeconds(Number(parts[3]) || 0);
    d.setMilliseconds(parts[4] ? Number(parts[4]) * 1000 : 0);
    if (offset != 0) {
        d.setTime(d.getTime() + offset * 60000);
    }
    return true;
};
goog.date.Interval = function (opt_years, opt_months, opt_days, opt_hours, opt_minutes, opt_seconds) {
    if (goog.isString(opt_years)) {
        var type = opt_years;
        var interval = (opt_months);
        this.years = type == goog.date.Interval.YEARS ? interval : 0;
        this.months = type == goog.date.Interval.MONTHS ? interval : 0;
        this.days = type == goog.date.Interval.DAYS ? interval : 0;
        this.hours = type == goog.date.Interval.HOURS ? interval : 0;
        this.minutes = type == goog.date.Interval.MINUTES ? interval : 0;
        this.seconds = type == goog.date.Interval.SECONDS ? interval : 0;
    }
    else {
        this.years = (opt_years) || 0;
        this.months = opt_months || 0;
        this.days = opt_days || 0;
        this.hours = opt_hours || 0;
        this.minutes = opt_minutes || 0;
        this.seconds = opt_seconds || 0;
    }
};
goog.date.Interval.fromIsoString = function (duration) {
    var parts = duration.match(goog.date.splitDurationRegex_);
    if (!parts) {
        return null;
    }
    var timeEmpty = !(parts[6] || parts[7] || parts[8]);
    var dateTimeEmpty = timeEmpty && !(parts[2] || parts[3] || parts[4]);
    if (dateTimeEmpty || timeEmpty && parts[5]) {
        return null;
    }
    var negative = parts[1];
    var years = parseInt(parts[2], 10) || 0;
    var months = parseInt(parts[3], 10) || 0;
    var days = parseInt(parts[4], 10) || 0;
    var hours = parseInt(parts[6], 10) || 0;
    var minutes = parseInt(parts[7], 10) || 0;
    var seconds = parseFloat(parts[8]) || 0;
    return negative ?
        new goog.date.Interval(-years, -months, -days, -hours, -minutes, -seconds) :
        new goog.date.Interval(years, months, days, hours, minutes, seconds);
};
goog.date.Interval.prototype.toIsoString = function (opt_verbose) {
    var minField = Math.min(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);
    var maxField = Math.max(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);
    if (minField < 0 && maxField > 0) {
        return null;
    }
    if (!opt_verbose && minField == 0 && maxField == 0) {
        return 'PT0S';
    }
    var res = [];
    if (minField < 0) {
        res.push('-');
    }
    res.push('P');
    if (this.years || opt_verbose) {
        res.push(Math.abs(this.years) + 'Y');
    }
    if (this.months || opt_verbose) {
        res.push(Math.abs(this.months) + 'M');
    }
    if (this.days || opt_verbose) {
        res.push(Math.abs(this.days) + 'D');
    }
    if (this.hours || this.minutes || this.seconds || opt_verbose) {
        res.push('T');
        if (this.hours || opt_verbose) {
            res.push(Math.abs(this.hours) + 'H');
        }
        if (this.minutes || opt_verbose) {
            res.push(Math.abs(this.minutes) + 'M');
        }
        if (this.seconds || opt_verbose) {
            res.push(Math.abs(this.seconds) + 'S');
        }
    }
    return res.join('');
};
goog.date.Interval.prototype.equals = function (other) {
    return other.years == this.years && other.months == this.months &&
        other.days == this.days && other.hours == this.hours &&
        other.minutes == this.minutes && other.seconds == this.seconds;
};
goog.date.Interval.prototype.clone = function () {
    return new goog.date.Interval(this.years, this.months, this.days, this.hours, this.minutes, this.seconds);
};
goog.date.Interval.YEARS = 'y';
goog.date.Interval.MONTHS = 'm';
goog.date.Interval.DAYS = 'd';
goog.date.Interval.HOURS = 'h';
goog.date.Interval.MINUTES = 'n';
goog.date.Interval.SECONDS = 's';
goog.date.Interval.prototype.isZero = function () {
    return this.years == 0 && this.months == 0 && this.days == 0 &&
        this.hours == 0 && this.minutes == 0 && this.seconds == 0;
};
goog.date.Interval.prototype.getInverse = function () {
    return this.times(-1);
};
goog.date.Interval.prototype.times = function (n) {
    return new goog.date.Interval(this.years * n, this.months * n, this.days * n, this.hours * n, this.minutes * n, this.seconds * n);
};
goog.date.Interval.prototype.getTotalSeconds = function () {
    goog.asserts.assert(this.years == 0 && this.months == 0);
    return ((this.days * 24 + this.hours) * 60 + this.minutes) * 60 +
        this.seconds;
};
goog.date.Interval.prototype.add = function (interval) {
    this.years += interval.years;
    this.months += interval.months;
    this.days += interval.days;
    this.hours += interval.hours;
    this.minutes += interval.minutes;
    this.seconds += interval.seconds;
};
goog.date.Date = function (opt_year, opt_month, opt_date) {
    this.date;
    if (goog.isNumber(opt_year)) {
        this.date = this.buildDate_(opt_year, opt_month || 0, opt_date || 1);
        this.maybeFixDst_(opt_date || 1);
    }
    else if (goog.isObject(opt_year)) {
        this.date = this.buildDate_(opt_year.getFullYear(), opt_year.getMonth(), opt_year.getDate());
        this.maybeFixDst_(opt_year.getDate());
    }
    else {
        this.date = new Date(goog.now());
        var expectedDate = this.date.getDate();
        this.date.setHours(0);
        this.date.setMinutes(0);
        this.date.setSeconds(0);
        this.date.setMilliseconds(0);
        this.maybeFixDst_(expectedDate);
    }
};
goog.date.Date.prototype.buildDate_ = function (fullYear, month, date) {
    var d = new Date(fullYear, month, date);
    if (fullYear >= 0 && fullYear < 100) {
        d.setFullYear(d.getFullYear() - 1900);
    }
    return d;
};
goog.date.Date.prototype.firstDayOfWeek_ =
    goog.i18n.DateTimeSymbols.FIRSTDAYOFWEEK;
goog.date.Date.prototype.firstWeekCutOffDay_ =
    goog.i18n.DateTimeSymbols.FIRSTWEEKCUTOFFDAY;
goog.date.Date.prototype.clone = function () {
    var date = new goog.date.Date(this.date);
    date.firstDayOfWeek_ = this.firstDayOfWeek_;
    date.firstWeekCutOffDay_ = this.firstWeekCutOffDay_;
    return date;
};
goog.date.Date.prototype.getFullYear = function () {
    return this.date.getFullYear();
};
goog.date.Date.prototype.getYear = function () {
    return this.getFullYear();
};
goog.date.Date.prototype.getMonth = function () {
    return (this.date.getMonth());
};
goog.date.Date.prototype.getDate = function () {
    return this.date.getDate();
};
goog.date.Date.prototype.getTime = function () {
    return this.date.getTime();
};
goog.date.Date.prototype.getDay = function () {
    return this.date.getDay();
};
goog.date.Date.prototype.getIsoWeekday = function () {
    return ((this.getDay() + 6) % 7);
};
goog.date.Date.prototype.getWeekday = function () {
    return (this.getIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;
};
goog.date.Date.prototype.getUTCFullYear = function () {
    return this.date.getUTCFullYear();
};
goog.date.Date.prototype.getUTCMonth = function () {
    return (this.date.getUTCMonth());
};
goog.date.Date.prototype.getUTCDate = function () {
    return this.date.getUTCDate();
};
goog.date.Date.prototype.getUTCDay = function () {
    return this.date.getDay();
};
goog.date.Date.prototype.getUTCHours = function () {
    return this.date.getUTCHours();
};
goog.date.Date.prototype.getUTCMinutes = function () {
    return this.date.getUTCMinutes();
};
goog.date.Date.prototype.getUTCIsoWeekday = function () {
    return ((this.date.getUTCDay() + 6) % 7);
};
goog.date.Date.prototype.getUTCWeekday = function () {
    return (this.getUTCIsoWeekday() - this.firstDayOfWeek_ + 7) % 7;
};
goog.date.Date.prototype.getFirstDayOfWeek = function () {
    return this.firstDayOfWeek_;
};
goog.date.Date.prototype.getFirstWeekCutOffDay = function () {
    return this.firstWeekCutOffDay_;
};
goog.date.Date.prototype.getNumberOfDaysInMonth = function () {
    return goog.date.getNumberOfDaysInMonth(this.getFullYear(), this.getMonth());
};
goog.date.Date.prototype.getWeekNumber = function () {
    return goog.date.getWeekNumber(this.getFullYear(), this.getMonth(), this.getDate(), this.firstWeekCutOffDay_, this.firstDayOfWeek_);
};
goog.date.Date.prototype.getDayOfYear = function () {
    var dayOfYear = this.getDate();
    var year = this.getFullYear();
    for (var m = this.getMonth() - 1; m >= 0; m--) {
        dayOfYear += goog.date.getNumberOfDaysInMonth(year, m);
    }
    return dayOfYear;
};
goog.date.Date.prototype.getTimezoneOffset = function () {
    return this.date.getTimezoneOffset();
};
goog.date.Date.prototype.getTimezoneOffsetString = function () {
    var tz;
    var offset = this.getTimezoneOffset();
    if (offset == 0) {
        tz = 'Z';
    }
    else {
        var n = Math.abs(offset) / 60;
        var h = Math.floor(n);
        var m = (n - h) * 60;
        tz = (offset > 0 ? '-' : '+') + goog.string.padNumber(h, 2) + ':' +
            goog.string.padNumber(m, 2);
    }
    return tz;
};
goog.date.Date.prototype.set = function (date) {
    this.date = new Date(date.getFullYear(), date.getMonth(), date.getDate());
};
goog.date.Date.prototype.setFullYear = function (year) {
    this.date.setFullYear(year);
};
goog.date.Date.prototype.setYear = function (year) {
    this.setFullYear(year);
};
goog.date.Date.prototype.setMonth = function (month) {
    this.date.setMonth(month);
};
goog.date.Date.prototype.setDate = function (date) {
    this.date.setDate(date);
};
goog.date.Date.prototype.setTime = function (ms) {
    this.date.setTime(ms);
};
goog.date.Date.prototype.setUTCFullYear = function (year) {
    this.date.setUTCFullYear(year);
};
goog.date.Date.prototype.setUTCMonth = function (month) {
    this.date.setUTCMonth(month);
};
goog.date.Date.prototype.setUTCDate = function (date) {
    this.date.setUTCDate(date);
};
goog.date.Date.prototype.setFirstDayOfWeek = function (day) {
    this.firstDayOfWeek_ = day;
};
goog.date.Date.prototype.setFirstWeekCutOffDay = function (day) {
    this.firstWeekCutOffDay_ = day;
};
goog.date.Date.prototype.add = function (interval) {
    if (interval.years || interval.months) {
        var month = this.getMonth() + interval.months + interval.years * 12;
        var year = this.getYear() + Math.floor(month / 12);
        month %= 12;
        if (month < 0) {
            month += 12;
        }
        var daysInTargetMonth = goog.date.getNumberOfDaysInMonth(year, month);
        var date = Math.min(daysInTargetMonth, this.getDate());
        this.setDate(1);
        this.setFullYear(year);
        this.setMonth(month);
        this.setDate(date);
    }
    if (interval.days) {
        var noon = new Date(this.getYear(), this.getMonth(), this.getDate(), 12);
        var result = new Date(noon.getTime() + interval.days * 86400000);
        this.setDate(1);
        this.setFullYear(result.getFullYear());
        this.setMonth(result.getMonth());
        this.setDate(result.getDate());
        this.maybeFixDst_(result.getDate());
    }
};
goog.date.Date.prototype.toIsoString = function (opt_verbose, opt_tz) {
    var str = [
        this.getFullYear(), goog.string.padNumber(this.getMonth() + 1, 2),
        goog.string.padNumber(this.getDate(), 2)
    ];
    return str.join((opt_verbose) ? '-' : '') +
        (opt_tz ? this.getTimezoneOffsetString() : '');
};
goog.date.Date.prototype.toUTCIsoString = function (opt_verbose, opt_tz) {
    var str = [
        this.getUTCFullYear(), goog.string.padNumber(this.getUTCMonth() + 1, 2),
        goog.string.padNumber(this.getUTCDate(), 2)
    ];
    return str.join((opt_verbose) ? '-' : '') + (opt_tz ? 'Z' : '');
};
goog.date.Date.prototype.equals = function (other) {
    return !!(other && this.getYear() == other.getYear() &&
        this.getMonth() == other.getMonth() && this.getDate() == other.getDate());
};
goog.date.Date.prototype.toString = function () {
    return this.toIsoString();
};
goog.date.Date.prototype.maybeFixDst_ = function (expected) {
    if (this.getDate() != expected) {
        var dir = this.getDate() < expected ? 1 : -1;
        this.date.setUTCHours(this.date.getUTCHours() + dir);
    }
};
goog.date.Date.prototype.valueOf = function () {
    return this.date.valueOf();
};
goog.date.Date.compare = function (date1, date2) {
    return date1.getTime() - date2.getTime();
};
goog.date.Date.fromIsoString = function (formatted) {
    var ret = new goog.date.Date(2000);
    return goog.date.setIso8601DateOnly_(ret, formatted) ? ret : null;
};
goog.date.DateTime = function (opt_year, opt_month, opt_date, opt_hours, opt_minutes, opt_seconds, opt_milliseconds) {
    if (goog.isNumber(opt_year)) {
        this.date = new Date(opt_year, opt_month || 0, opt_date || 1, opt_hours || 0, opt_minutes || 0, opt_seconds || 0, opt_milliseconds || 0);
    }
    else {
        this.date = new Date(opt_year && opt_year.getTime ? opt_year.getTime() : goog.now());
    }
};
goog.inherits(goog.date.DateTime, goog.date.Date);
goog.date.DateTime.fromTimestamp = function (timestamp) {
    var date = new goog.date.DateTime();
    date.setTime(timestamp);
    return date;
};
goog.date.DateTime.fromRfc822String = function (formatted) {
    var date = new Date(formatted);
    return !isNaN(date.getTime()) ? new goog.date.DateTime(date) : null;
};
goog.date.DateTime.prototype.getHours = function () {
    return this.date.getHours();
};
goog.date.DateTime.prototype.getMinutes = function () {
    return this.date.getMinutes();
};
goog.date.DateTime.prototype.getSeconds = function () {
    return this.date.getSeconds();
};
goog.date.DateTime.prototype.getMilliseconds = function () {
    return this.date.getMilliseconds();
};
goog.date.DateTime.prototype.getUTCDay = function () {
    return (this.date.getUTCDay());
};
goog.date.DateTime.prototype.getUTCHours = function () {
    return this.date.getUTCHours();
};
goog.date.DateTime.prototype.getUTCMinutes = function () {
    return this.date.getUTCMinutes();
};
goog.date.DateTime.prototype.getUTCSeconds = function () {
    return this.date.getUTCSeconds();
};
goog.date.DateTime.prototype.getUTCMilliseconds = function () {
    return this.date.getUTCMilliseconds();
};
goog.date.DateTime.prototype.setHours = function (hours) {
    this.date.setHours(hours);
};
goog.date.DateTime.prototype.setMinutes = function (minutes) {
    this.date.setMinutes(minutes);
};
goog.date.DateTime.prototype.setSeconds = function (seconds) {
    this.date.setSeconds(seconds);
};
goog.date.DateTime.prototype.setMilliseconds = function (ms) {
    this.date.setMilliseconds(ms);
};
goog.date.DateTime.prototype.setUTCHours = function (hours) {
    this.date.setUTCHours(hours);
};
goog.date.DateTime.prototype.setUTCMinutes = function (minutes) {
    this.date.setUTCMinutes(minutes);
};
goog.date.DateTime.prototype.setUTCSeconds = function (seconds) {
    this.date.setUTCSeconds(seconds);
};
goog.date.DateTime.prototype.setUTCMilliseconds = function (ms) {
    this.date.setUTCMilliseconds(ms);
};
goog.date.DateTime.prototype.isMidnight = function () {
    return this.getHours() == 0 && this.getMinutes() == 0 &&
        this.getSeconds() == 0 && this.getMilliseconds() == 0;
};
goog.date.DateTime.prototype.add = function (interval) {
    goog.date.Date.prototype.add.call(this, interval);
    if (interval.hours) {
        this.setUTCHours(this.date.getUTCHours() + interval.hours);
    }
    if (interval.minutes) {
        this.setUTCMinutes(this.date.getUTCMinutes() + interval.minutes);
    }
    if (interval.seconds) {
        this.setUTCSeconds(this.date.getUTCSeconds() + interval.seconds);
    }
};
goog.date.DateTime.prototype.toIsoString = function (opt_verbose, opt_tz) {
    var dateString = goog.date.Date.prototype.toIsoString.call(this, opt_verbose);
    if (opt_verbose) {
        return dateString + ' ' + goog.string.padNumber(this.getHours(), 2) + ':' +
            goog.string.padNumber(this.getMinutes(), 2) + ':' +
            goog.string.padNumber(this.getSeconds(), 2) +
            (opt_tz ? this.getTimezoneOffsetString() : '');
    }
    return dateString + 'T' + goog.string.padNumber(this.getHours(), 2) +
        goog.string.padNumber(this.getMinutes(), 2) +
        goog.string.padNumber(this.getSeconds(), 2) +
        (opt_tz ? this.getTimezoneOffsetString() : '');
};
goog.date.DateTime.prototype.toXmlDateTime = function (opt_timezone) {
    return goog.date.Date.prototype.toIsoString.call(this, true) + 'T' +
        goog.string.padNumber(this.getHours(), 2) + ':' +
        goog.string.padNumber(this.getMinutes(), 2) + ':' +
        goog.string.padNumber(this.getSeconds(), 2) +
        (opt_timezone ? this.getTimezoneOffsetString() : '');
};
goog.date.DateTime.prototype.toUTCIsoString = function (opt_verbose, opt_tz) {
    var dateStr = goog.date.Date.prototype.toUTCIsoString.call(this, opt_verbose);
    if (opt_verbose) {
        return dateStr + ' ' + goog.string.padNumber(this.getUTCHours(), 2) + ':' +
            goog.string.padNumber(this.getUTCMinutes(), 2) + ':' +
            goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');
    }
    return dateStr + 'T' + goog.string.padNumber(this.getUTCHours(), 2) +
        goog.string.padNumber(this.getUTCMinutes(), 2) +
        goog.string.padNumber(this.getUTCSeconds(), 2) + (opt_tz ? 'Z' : '');
};
goog.date.DateTime.prototype.toUTCRfc3339String = function () {
    var date = this.toUTCIsoString(true).replace(' ', 'T');
    var millis = this.getUTCMilliseconds();
    return (millis ? date + '.' + goog.string.padNumber(millis, 3) : date) + 'Z';
};
goog.date.DateTime.prototype.equals = function (other) {
    return this.getTime() == other.getTime();
};
goog.date.DateTime.prototype.toString = function () {
    return this.toIsoString();
};
goog.date.DateTime.prototype.toUsTimeString = function (opt_padHours, opt_showAmPm, opt_omitZeroMinutes) {
    var hours = this.getHours();
    if (!goog.isDef(opt_showAmPm)) {
        opt_showAmPm = true;
    }
    var isPM = hours == 12;
    if (hours > 12) {
        hours -= 12;
        isPM = true;
    }
    if (hours == 0 && opt_showAmPm) {
        hours = 12;
    }
    var label = opt_padHours ? goog.string.padNumber(hours, 2) : String(hours);
    var minutes = this.getMinutes();
    if (!opt_omitZeroMinutes || minutes > 0) {
        label += ':' + goog.string.padNumber(minutes, 2);
    }
    if (opt_showAmPm) {
        label += isPM ? ' PM' : ' AM';
    }
    return label;
};
goog.date.DateTime.prototype.toIsoTimeString = function (opt_showSeconds) {
    var hours = this.getHours();
    var label = goog.string.padNumber(hours, 2) + ':' +
        goog.string.padNumber(this.getMinutes(), 2);
    if (!goog.isDef(opt_showSeconds) || opt_showSeconds) {
        label += ':' + goog.string.padNumber(this.getSeconds(), 2);
    }
    return label;
};
goog.date.DateTime.prototype.clone = function () {
    var date = new goog.date.DateTime(this.date);
    date.setFirstDayOfWeek(this.getFirstDayOfWeek());
    date.setFirstWeekCutOffDay(this.getFirstWeekCutOffDay());
    return date;
};
goog.date.DateTime.fromIsoString = function (formatted) {
    var ret = new goog.date.DateTime(2000);
    return goog.date.setIso8601DateTime(ret, formatted) ? ret : null;
};
goog.provide('goog.date.DateLike');
goog.forwardDeclare('goog.date.Date');
goog.date.DateLike;
goog.provide('goog.date.DateRange');
goog.provide('goog.date.DateRange.Iterator');
goog.provide('goog.date.DateRange.StandardDateRangeKeys');
goog.require('goog.date.Date');
goog.require('goog.date.Interval');
goog.require('goog.iter.Iterator');
goog.require('goog.iter.StopIteration');
goog.date.DateRange = function (startDate, endDate) {
    this.startDate_ = startDate;
    this.endDate_ = endDate;
};
goog.date.DateRange.MINIMUM_DATE = new goog.date.Date(0, 0, 1);
goog.date.DateRange.MAXIMUM_DATE = new goog.date.Date(9999, 11, 31);
goog.date.DateRange.prototype.getStartDate = function () {
    return this.startDate_;
};
goog.date.DateRange.prototype.getEndDate = function () {
    return this.endDate_;
};
goog.date.DateRange.prototype.contains = function (date) {
    return date.valueOf() >= this.startDate_.valueOf() &&
        date.valueOf() <= this.endDate_.valueOf();
};
goog.date.DateRange.prototype.iterator = function () {
    return new goog.date.DateRange.Iterator(this);
};
goog.date.DateRange.equals = function (a, b) {
    if (a === b) {
        return true;
    }
    if (a == null || b == null) {
        return false;
    }
    return a.startDate_.equals(b.startDate_) && a.endDate_.equals(b.endDate_);
};
goog.date.DateRange.offsetInDays_ = function (date, offset) {
    var newDate = date.clone();
    newDate.add(new goog.date.Interval(goog.date.Interval.DAYS, offset));
    return newDate;
};
goog.date.DateRange.offsetInMonths_ = function (date, offset) {
    var newDate = date.clone();
    newDate.setDate(1);
    newDate.add(new goog.date.Interval(goog.date.Interval.MONTHS, offset));
    return newDate;
};
goog.date.DateRange.yesterday = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    var yesterday = goog.date.DateRange.offsetInDays_(today, -1);
    return new goog.date.DateRange(yesterday, yesterday.clone());
};
goog.date.DateRange.today = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    return new goog.date.DateRange(today, today.clone());
};
goog.date.DateRange.last7Days = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    var yesterday = goog.date.DateRange.offsetInDays_(today, -1);
    return new goog.date.DateRange(goog.date.DateRange.offsetInDays_(today, -7), yesterday);
};
goog.date.DateRange.thisMonth = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    return new goog.date.DateRange(goog.date.DateRange.offsetInMonths_(today, 0), goog.date.DateRange.offsetInDays_(goog.date.DateRange.offsetInMonths_(today, 1), -1));
};
goog.date.DateRange.lastMonth = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    return new goog.date.DateRange(goog.date.DateRange.offsetInMonths_(today, -1), goog.date.DateRange.offsetInDays_(goog.date.DateRange.offsetInMonths_(today, 0), -1));
};
goog.date.DateRange.thisWeek = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    var iso = today.getIsoWeekday();
    var firstDay = today.getFirstDayOfWeek();
    var i18nFirstDay = (iso >= firstDay) ? iso - firstDay : iso + (7 - firstDay);
    var start = goog.date.DateRange.offsetInDays_(today, -i18nFirstDay);
    var end = goog.date.DateRange.offsetInDays_(start, 6);
    return new goog.date.DateRange(start, end);
};
goog.date.DateRange.lastWeek = function (opt_today) {
    var thisWeek = goog.date.DateRange.thisWeek(opt_today);
    var start = goog.date.DateRange.offsetInDays_(thisWeek.getStartDate(), -7);
    var end = goog.date.DateRange.offsetInDays_(thisWeek.getEndDate(), -7);
    return new goog.date.DateRange(start, end);
};
goog.date.DateRange.lastBusinessWeek = function (opt_today) {
    var today = goog.date.DateRange.cloneOrCreate_(opt_today);
    var start = goog.date.DateRange.offsetInDays_(today, -7 - today.getIsoWeekday());
    var end = goog.date.DateRange.offsetInDays_(start, 4);
    return new goog.date.DateRange(start, end);
};
goog.date.DateRange.allTime = function (opt_today) {
    return new goog.date.DateRange(goog.date.DateRange.MINIMUM_DATE, goog.date.DateRange.MAXIMUM_DATE);
};
goog.date.DateRange.StandardDateRangeKeys = {
    YESTERDAY: 'yesterday',
    TODAY: 'today',
    LAST_7_DAYS: 'last7days',
    THIS_MONTH: 'thismonth',
    LAST_MONTH: 'lastmonth',
    THIS_WEEK: 'thisweek',
    LAST_WEEK: 'lastweek',
    LAST_BUSINESS_WEEK: 'lastbusinessweek',
    ALL_TIME: 'alltime'
};
goog.date.DateRange.standardDateRange = function (dateRangeKey, opt_today) {
    switch (dateRangeKey) {
        case goog.date.DateRange.StandardDateRangeKeys.YESTERDAY:
            return goog.date.DateRange.yesterday(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.TODAY:
            return goog.date.DateRange.today(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.LAST_7_DAYS:
            return goog.date.DateRange.last7Days(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.THIS_MONTH:
            return goog.date.DateRange.thisMonth(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.LAST_MONTH:
            return goog.date.DateRange.lastMonth(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.THIS_WEEK:
            return goog.date.DateRange.thisWeek(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.LAST_WEEK:
            return goog.date.DateRange.lastWeek(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.LAST_BUSINESS_WEEK:
            return goog.date.DateRange.lastBusinessWeek(opt_today);
        case goog.date.DateRange.StandardDateRangeKeys.ALL_TIME:
            return goog.date.DateRange.allTime(opt_today);
        default:
            throw new Error('no such date range key: ' + dateRangeKey);
    }
};
goog.date.DateRange.cloneOrCreate_ = function (opt_today) {
    return opt_today ? opt_today.clone() : new goog.date.Date();
};
goog.date.DateRange.Iterator = function (dateRange) {
    this.nextDate_ = dateRange.getStartDate().clone();
    this.endDate_ = Number(dateRange.getEndDate().toIsoString());
};
goog.inherits(goog.date.DateRange.Iterator, goog.iter.Iterator);
goog.date.DateRange.Iterator.prototype.next = function () {
    if (Number(this.nextDate_.toIsoString()) > this.endDate_) {
        throw goog.iter.StopIteration;
    }
    var rv = this.nextDate_.clone();
    this.nextDate_.add(new goog.date.Interval(goog.date.Interval.DAYS, 1));
    return rv;
};
goog.provide('goog.string.Const');
goog.require('goog.asserts');
goog.require('goog.string.TypedString');
goog.string.Const = function () {
    this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ = '';
    this.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ =
        goog.string.Const.TYPE_MARKER_;
};
goog.string.Const.prototype.implementsGoogStringTypedString = true;
goog.string.Const.prototype.getTypedStringValue = function () {
    return this.stringConstValueWithSecurityContract__googStringSecurityPrivate_;
};
goog.string.Const.prototype.toString = function () {
    return 'Const{' +
        this.stringConstValueWithSecurityContract__googStringSecurityPrivate_ +
        '}';
};
goog.string.Const.unwrap = function (stringConst) {
    if (stringConst instanceof goog.string.Const &&
        stringConst.constructor === goog.string.Const &&
        stringConst.STRING_CONST_TYPE_MARKER__GOOG_STRING_SECURITY_PRIVATE_ ===
            goog.string.Const.TYPE_MARKER_) {
        return stringConst
            .stringConstValueWithSecurityContract__googStringSecurityPrivate_;
    }
    else {
        goog.asserts.fail('expected object of type Const, got \'' + stringConst + '\'');
        return 'type_error:Const';
    }
};
goog.string.Const.from = function (s) {
    return goog.string.Const.create__googStringSecurityPrivate_(s);
};
goog.string.Const.TYPE_MARKER_ = {};
goog.string.Const.create__googStringSecurityPrivate_ = function (s) {
    var stringConst = new goog.string.Const();
    stringConst.stringConstValueWithSecurityContract__googStringSecurityPrivate_ =
        s;
    return stringConst;
};
goog.string.Const.EMPTY = goog.string.Const.from('');
goog.provide('goog.string');
goog.provide('goog.string.Unicode');
goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);
goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);
goog.string.Unicode = {
    NBSP: '\xa0'
};
goog.string.startsWith = function (str, prefix) {
    return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function (str, suffix) {
    var l = str.length - suffix.length;
    return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function (str, prefix) {
    return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function (str, suffix) {
    return (goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0);
};
goog.string.caseInsensitiveEquals = function (str1, str2) {
    return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function (str, var_args) {
    var splitParts = str.split('%s');
    var returnString = '';
    var subsArguments = Array.prototype.slice.call(arguments, 1);
    while (subsArguments.length &&
        splitParts.length > 1) {
        returnString += splitParts.shift() + subsArguments.shift();
    }
    return returnString + splitParts.join('%s');
};
goog.string.collapseWhitespace = function (str) {
    return str.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '');
};
goog.string.isEmptyOrWhitespace = function (str) {
    return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function (str) {
    return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function (str) {
    return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function (str) {
    return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function (str) {
    return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function (str) {
    return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function (str) {
    return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function (ch) {
    return ch == ' ';
};
goog.string.isUnicodeChar = function (ch) {
    return ch.length == 1 && ch >= ' ' && ch <= '~' ||
        ch >= '\u0080' && ch <= '\uFFFD';
};
goog.string.stripNewlines = function (str) {
    return str.replace(/(\r\n|\r|\n)+/g, ' ');
};
goog.string.canonicalizeNewlines = function (str) {
    return str.replace(/(\r\n|\r|\n)/g, '\n');
};
goog.string.normalizeWhitespace = function (str) {
    return str.replace(/\xa0|\s/g, ' ');
};
goog.string.normalizeSpaces = function (str) {
    return str.replace(/\xa0|[ \t]+/g, ' ');
};
goog.string.collapseBreakingSpaces = function (str) {
    return str.replace(/[\t\r\n ]+/g, ' ')
        .replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, '');
};
goog.string.trim =
    (goog.TRUSTED_SITE && String.prototype.trim) ? function (str) {
        return str.trim();
    } : function (str) {
        return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(str)[1];
    };
goog.string.trimLeft = function (str) {
    return str.replace(/^[\s\xa0]+/, '');
};
goog.string.trimRight = function (str) {
    return str.replace(/[\s\xa0]+$/, '');
};
goog.string.caseInsensitiveCompare = function (str1, str2) {
    var test1 = String(str1).toLowerCase();
    var test2 = String(str2).toLowerCase();
    if (test1 < test2) {
        return -1;
    }
    else if (test1 == test2) {
        return 0;
    }
    else {
        return 1;
    }
};
goog.string.numberAwareCompare_ = function (str1, str2, tokenizerRegExp) {
    if (str1 == str2) {
        return 0;
    }
    if (!str1) {
        return -1;
    }
    if (!str2) {
        return 1;
    }
    var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
    var tokens2 = str2.toLowerCase().match(tokenizerRegExp);
    var count = Math.min(tokens1.length, tokens2.length);
    for (var i = 0; i < count; i++) {
        var a = tokens1[i];
        var b = tokens2[i];
        if (a != b) {
            var num1 = parseInt(a, 10);
            if (!isNaN(num1)) {
                var num2 = parseInt(b, 10);
                if (!isNaN(num2) && num1 - num2) {
                    return num1 - num2;
                }
            }
            return a < b ? -1 : 1;
        }
    }
    if (tokens1.length != tokens2.length) {
        return tokens1.length - tokens2.length;
    }
    return str1 < str2 ? -1 : 1;
};
goog.string.intAwareCompare = function (str1, str2) {
    return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
};
goog.string.floatAwareCompare = function (str1, str2) {
    return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
};
goog.string.numerateCompare = goog.string.floatAwareCompare;
goog.string.urlEncode = function (str) {
    return encodeURIComponent(String(str));
};
goog.string.urlDecode = function (str) {
    return decodeURIComponent(str.replace(/\+/g, ' '));
};
goog.string.newLineToBr = function (str, opt_xml) {
    return str.replace(/(\r\n|\r|\n)/g, opt_xml ? '<br />' : '<br>');
};
goog.string.htmlEscape = function (str, opt_isLikelyToContainHtmlChars) {
    if (opt_isLikelyToContainHtmlChars) {
        str = str.replace(goog.string.AMP_RE_, '&amp;')
            .replace(goog.string.LT_RE_, '&lt;')
            .replace(goog.string.GT_RE_, '&gt;')
            .replace(goog.string.QUOT_RE_, '&quot;')
            .replace(goog.string.SINGLE_QUOTE_RE_, '&#39;')
            .replace(goog.string.NULL_RE_, '&#0;');
        if (goog.string.DETECT_DOUBLE_ESCAPING) {
            str = str.replace(goog.string.E_RE_, '&#101;');
        }
        return str;
    }
    else {
        if (!goog.string.ALL_RE_.test(str))
            return str;
        if (str.indexOf('&') != -1) {
            str = str.replace(goog.string.AMP_RE_, '&amp;');
        }
        if (str.indexOf('<') != -1) {
            str = str.replace(goog.string.LT_RE_, '&lt;');
        }
        if (str.indexOf('>') != -1) {
            str = str.replace(goog.string.GT_RE_, '&gt;');
        }
        if (str.indexOf('"') != -1) {
            str = str.replace(goog.string.QUOT_RE_, '&quot;');
        }
        if (str.indexOf('\'') != -1) {
            str = str.replace(goog.string.SINGLE_QUOTE_RE_, '&#39;');
        }
        if (str.indexOf('\x00') != -1) {
            str = str.replace(goog.string.NULL_RE_, '&#0;');
        }
        if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf('e') != -1) {
            str = str.replace(goog.string.E_RE_, '&#101;');
        }
        return str;
    }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ =
    (goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/);
goog.string.unescapeEntities = function (str) {
    if (goog.string.contains(str, '&')) {
        if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&
            'document' in goog.global) {
            return goog.string.unescapeEntitiesUsingDom_(str);
        }
        else {
            return goog.string.unescapePureXmlEntities_(str);
        }
    }
    return str;
};
goog.string.unescapeEntitiesWithDocument = function (str, document) {
    if (goog.string.contains(str, '&')) {
        return goog.string.unescapeEntitiesUsingDom_(str, document);
    }
    return str;
};
goog.string.unescapeEntitiesUsingDom_ = function (str, opt_document) {
    var seen = { '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"' };
    var div;
    if (opt_document) {
        div = opt_document.createElement('div');
    }
    else {
        div = goog.global.document.createElement('div');
    }
    return str.replace(goog.string.HTML_ENTITY_PATTERN_, function (s, entity) {
        var value = seen[s];
        if (value) {
            return value;
        }
        if (entity.charAt(0) == '#') {
            var n = Number('0' + entity.substr(1));
            if (!isNaN(n)) {
                value = String.fromCharCode(n);
            }
        }
        if (!value) {
            div.innerHTML = s + ' ';
            value = div.firstChild.nodeValue.slice(0, -1);
        }
        return seen[s] = value;
    });
};
goog.string.unescapePureXmlEntities_ = function (str) {
    return str.replace(/&([^;]+);/g, function (s, entity) {
        switch (entity) {
            case 'amp':
                return '&';
            case 'lt':
                return '<';
            case 'gt':
                return '>';
            case 'quot':
                return '"';
            default:
                if (entity.charAt(0) == '#') {
                    var n = Number('0' + entity.substr(1));
                    if (!isNaN(n)) {
                        return String.fromCharCode(n);
                    }
                }
                return s;
        }
    });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function (str, opt_xml) {
    return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);
};
goog.string.preserveSpaces = function (str) {
    return str.replace(/(^|[\n ]) /g, '$1' + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function (str, quoteChars) {
    var length = quoteChars.length;
    for (var i = 0; i < length; i++) {
        var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
        if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
            return str.substring(1, str.length - 1);
        }
    }
    return str;
};
goog.string.truncate = function (str, chars, opt_protectEscapedCharacters) {
    if (opt_protectEscapedCharacters) {
        str = goog.string.unescapeEntities(str);
    }
    if (str.length > chars) {
        str = str.substring(0, chars - 3) + '...';
    }
    if (opt_protectEscapedCharacters) {
        str = goog.string.htmlEscape(str);
    }
    return str;
};
goog.string.truncateMiddle = function (str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
    if (opt_protectEscapedCharacters) {
        str = goog.string.unescapeEntities(str);
    }
    if (opt_trailingChars && str.length > chars) {
        if (opt_trailingChars > chars) {
            opt_trailingChars = chars;
        }
        var endPoint = str.length - opt_trailingChars;
        var startPoint = chars - opt_trailingChars;
        str = str.substring(0, startPoint) + '...' + str.substring(endPoint);
    }
    else if (str.length > chars) {
        var half = Math.floor(chars / 2);
        var endPos = str.length - half;
        half += chars % 2;
        str = str.substring(0, half) + '...' + str.substring(endPos);
    }
    if (opt_protectEscapedCharacters) {
        str = goog.string.htmlEscape(str);
    }
    return str;
};
goog.string.specialEscapeChars_ = {
    '\0': '\\0',
    '\b': '\\b',
    '\f': '\\f',
    '\n': '\\n',
    '\r': '\\r',
    '\t': '\\t',
    '\x0B': '\\x0B',
    '"': '\\"',
    '\\': '\\\\',
    '<': '\x3c'
};
goog.string.jsEscapeCache_ = {
    '\'': '\\\''
};
goog.string.quote = function (s) {
    s = String(s);
    var sb = ['"'];
    for (var i = 0; i < s.length; i++) {
        var ch = s.charAt(i);
        var cc = ch.charCodeAt(0);
        sb[i + 1] = goog.string.specialEscapeChars_[ch] ||
            ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join('');
};
goog.string.escapeString = function (str) {
    var sb = [];
    for (var i = 0; i < str.length; i++) {
        sb[i] = goog.string.escapeChar(str.charAt(i));
    }
    return sb.join('');
};
goog.string.escapeChar = function (c) {
    if (c in goog.string.jsEscapeCache_) {
        return goog.string.jsEscapeCache_[c];
    }
    if (c in goog.string.specialEscapeChars_) {
        return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
    }
    var rv = c;
    var cc = c.charCodeAt(0);
    if (cc > 31 && cc < 127) {
        rv = c;
    }
    else {
        if (cc < 256) {
            rv = '\\x';
            if (cc < 16 || cc > 256) {
                rv += '0';
            }
        }
        else {
            rv = '\\u';
            if (cc < 4096) {
                rv += '0';
            }
        }
        rv += cc.toString(16).toUpperCase();
    }
    return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function (str, subString) {
    return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function (str, subString) {
    return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function (s, ss) {
    return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function (s, index, stringLength) {
    var resultStr = s;
    if (index >= 0 && index < s.length && stringLength > 0) {
        resultStr = s.substr(0, index) +
            s.substr(index + stringLength, s.length - index - stringLength);
    }
    return resultStr;
};
goog.string.remove = function (str, substr) {
    return str.replace(substr, '');
};
goog.string.removeAll = function (s, ss) {
    var re = new RegExp(goog.string.regExpEscape(ss), 'g');
    return s.replace(re, '');
};
goog.string.replaceAll = function (s, ss, replacement) {
    var re = new RegExp(goog.string.regExpEscape(ss), 'g');
    return s.replace(re, replacement.replace(/\$/g, '$$$$'));
};
goog.string.regExpEscape = function (s) {
    return String(s)
        .replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1')
        .replace(/\x08/g, '\\x08');
};
goog.string.repeat = (String.prototype.repeat) ? function (string, length) {
    return string.repeat(length);
} : function (string, length) {
    return new Array(length + 1).join(string);
};
goog.string.padNumber = function (num, length, opt_precision) {
    var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
    var index = s.indexOf('.');
    if (index == -1) {
        index = s.length;
    }
    return goog.string.repeat('0', Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function (obj) {
    return obj == null ? '' : String(obj);
};
goog.string.buildString = function (var_args) {
    return Array.prototype.join.call(arguments, '');
};
goog.string.getRandomString = function () {
    var x = 2147483648;
    return Math.floor(Math.random() * x).toString(36) +
        Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function (version1, version2) {
    var order = 0;
    var v1Subs = goog.string.trim(String(version1)).split('.');
    var v2Subs = goog.string.trim(String(version2)).split('.');
    var subCount = Math.max(v1Subs.length, v2Subs.length);
    for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
        var v1Sub = v1Subs[subIdx] || '';
        var v2Sub = v2Subs[subIdx] || '';
        do {
            var v1Comp = /(\d*)(\D*)(.*)/.exec(v1Sub) || ['', '', '', ''];
            var v2Comp = /(\d*)(\D*)(.*)/.exec(v2Sub) || ['', '', '', ''];
            if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
                break;
            }
            var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
            var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
            order = goog.string.compareElements_(v1CompNum, v2CompNum) ||
                goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) ||
                goog.string.compareElements_(v1Comp[2], v2Comp[2]);
            v1Sub = v1Comp[3];
            v2Sub = v2Comp[3];
        } while (order == 0);
    }
    return order;
};
goog.string.compareElements_ = function (left, right) {
    if (left < right) {
        return -1;
    }
    else if (left > right) {
        return 1;
    }
    return 0;
};
goog.string.hashCode = function (str) {
    var result = 0;
    for (var i = 0; i < str.length; ++i) {
        result = (31 * result + str.charCodeAt(i)) >>> 0;
    }
    return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;
goog.string.createUniqueString = function () {
    return 'goog_' + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function (str) {
    var num = Number(str);
    if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
        return NaN;
    }
    return num;
};
goog.string.isLowerCamelCase = function (str) {
    return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function (str) {
    return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function (str) {
    return String(str).replace(/\-([a-z])/g, function (all, match) { return match.toUpperCase(); });
};
goog.string.toSelectorCase = function (str) {
    return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();
};
goog.string.toTitleCase = function (str, opt_delimiters) {
    var delimiters = goog.isString(opt_delimiters) ?
        goog.string.regExpEscape(opt_delimiters) :
        '\\s';
    delimiters = delimiters ? '|[' + delimiters + ']+' : '';
    var regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');
    return str.replace(regexp, function (all, p1, p2) { return p1 + p2.toUpperCase(); });
};
goog.string.capitalize = function (str) {
    return String(str.charAt(0)).toUpperCase() +
        String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function (value) {
    if (isFinite(value)) {
        value = String(value);
    }
    if (goog.isString(value)) {
        return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
    }
    return NaN;
};
goog.string.splitLimit = function (str, separator, limit) {
    var parts = str.split(separator);
    var returnVal = [];
    while (limit > 0 && parts.length) {
        returnVal.push(parts.shift());
        limit--;
    }
    if (parts.length) {
        returnVal.push(parts.join(separator));
    }
    return returnVal;
};
goog.string.lastComponent = function (str, separators) {
    if (!separators) {
        return str;
    }
    else if (typeof separators == 'string') {
        separators = [separators];
    }
    var lastSeparatorIndex = -1;
    for (var i = 0; i < separators.length; i++) {
        if (separators[i] == '') {
            continue;
        }
        var currentSeparatorIndex = str.lastIndexOf(separators[i]);
        if (currentSeparatorIndex > lastSeparatorIndex) {
            lastSeparatorIndex = currentSeparatorIndex;
        }
    }
    if (lastSeparatorIndex == -1) {
        return str;
    }
    return str.slice(lastSeparatorIndex + 1);
};
goog.string.editDistance = function (a, b) {
    var v0 = [];
    var v1 = [];
    if (a == b) {
        return 0;
    }
    if (!a.length || !b.length) {
        return Math.max(a.length, b.length);
    }
    for (var i = 0; i < b.length + 1; i++) {
        v0[i] = i;
    }
    for (var i = 0; i < a.length; i++) {
        v1[0] = i + 1;
        for (var j = 0; j < b.length; j++) {
            var cost = Number(a[i] != b[j]);
            v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
        }
        for (var j = 0; j < v0.length; j++) {
            v0[j] = v1[j];
        }
    }
    return v1[b.length];
};
goog.provide('goog.string.StringBuffer');
goog.string.StringBuffer = function (opt_a1, var_args) {
    if (opt_a1 != null) {
        this.append.apply(this, arguments);
    }
};
goog.string.StringBuffer.prototype.buffer_ = '';
goog.string.StringBuffer.prototype.set = function (s) {
    this.buffer_ = '' + s;
};
goog.string.StringBuffer.prototype.append = function (a1, opt_a2, var_args) {
    this.buffer_ += String(a1);
    if (opt_a2 != null) {
        for (var i = 1; i < arguments.length; i++) {
            this.buffer_ += arguments[i];
        }
    }
    return this;
};
goog.string.StringBuffer.prototype.clear = function () {
    this.buffer_ = '';
};
goog.string.StringBuffer.prototype.getLength = function () {
    return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function () {
    return this.buffer_;
};
goog.provide('goog.string.TypedString');
goog.string.TypedString = function () { };
goog.string.TypedString.prototype.implementsGoogStringTypedString;
goog.string.TypedString.prototype.getTypedStringValue;
goog.provide('goog.reflect');
goog.reflect.object = function (type, object) {
    return object;
};
goog.reflect.objectProperty = function (prop, object) {
    return prop;
};
goog.reflect.sinkValue = function (x) {
    goog.reflect.sinkValue[' '](x);
    return x;
};
goog.reflect.sinkValue[' '] = goog.nullFunction;
goog.reflect.canAccessProperty = function (obj, prop) {
    try {
        goog.reflect.sinkValue(obj[prop]);
        return true;
    }
    catch (e) {
    }
    return false;
};
goog.reflect.cache = function (cacheObj, key, valueFn, opt_keyFn) {
    var storedKey = opt_keyFn ? opt_keyFn(key) : key;
    if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey)) {
        return cacheObj[storedKey];
    }
    return (cacheObj[storedKey] = valueFn(key));
};
goog.provide('goog.labs.userAgent.browser');
goog.require('goog.array');
goog.require('goog.labs.userAgent.util');
goog.require('goog.object');
goog.require('goog.string');
goog.labs.userAgent.browser.matchOpera_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Opera');
};
goog.labs.userAgent.browser.matchIE_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Trident') ||
        goog.labs.userAgent.util.matchUserAgent('MSIE');
};
goog.labs.userAgent.browser.matchEdge_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Edge');
};
goog.labs.userAgent.browser.matchFirefox_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Firefox');
};
goog.labs.userAgent.browser.matchSafari_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Safari') &&
        !(goog.labs.userAgent.browser.matchChrome_() ||
            goog.labs.userAgent.browser.matchCoast_() ||
            goog.labs.userAgent.browser.matchOpera_() ||
            goog.labs.userAgent.browser.matchEdge_() ||
            goog.labs.userAgent.browser.isSilk() ||
            goog.labs.userAgent.util.matchUserAgent('Android'));
};
goog.labs.userAgent.browser.matchCoast_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Coast');
};
goog.labs.userAgent.browser.matchIosWebview_ = function () {
    return (goog.labs.userAgent.util.matchUserAgent('iPad') ||
        goog.labs.userAgent.util.matchUserAgent('iPhone')) &&
        !goog.labs.userAgent.browser.matchSafari_() &&
        !goog.labs.userAgent.browser.matchChrome_() &&
        !goog.labs.userAgent.browser.matchCoast_() &&
        goog.labs.userAgent.util.matchUserAgent('AppleWebKit');
};
goog.labs.userAgent.browser.matchChrome_ = function () {
    return (goog.labs.userAgent.util.matchUserAgent('Chrome') ||
        goog.labs.userAgent.util.matchUserAgent('CriOS')) &&
        !goog.labs.userAgent.browser.matchEdge_();
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function () {
    return goog.labs.userAgent.util.matchUserAgent('Android') &&
        !(goog.labs.userAgent.browser.isChrome() ||
            goog.labs.userAgent.browser.isFirefox() ||
            goog.labs.userAgent.browser.isOpera() ||
            goog.labs.userAgent.browser.isSilk());
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isEdge = goog.labs.userAgent.browser.matchEdge_;
goog.labs.userAgent.browser.isFirefox =
    goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isCoast = goog.labs.userAgent.browser.matchCoast_;
goog.labs.userAgent.browser.isIosWebview =
    goog.labs.userAgent.browser.matchIosWebview_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser =
    goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function () {
    return goog.labs.userAgent.util.matchUserAgent('Silk');
};
goog.labs.userAgent.browser.getVersion = function () {
    var userAgentString = goog.labs.userAgent.util.getUserAgent();
    if (goog.labs.userAgent.browser.isIE()) {
        return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
    }
    var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var versionMap = {};
    goog.array.forEach(versionTuples, function (tuple) {
        var key = tuple[0];
        var value = tuple[1];
        versionMap[key] = value;
    });
    var versionMapHasKey = goog.partial(goog.object.containsKey, versionMap);
    function lookUpValueWithKeys(keys) {
        var key = goog.array.find(keys, versionMapHasKey);
        return versionMap[key] || '';
    }
    if (goog.labs.userAgent.browser.isOpera()) {
        return lookUpValueWithKeys(['Version', 'Opera']);
    }
    if (goog.labs.userAgent.browser.isEdge()) {
        return lookUpValueWithKeys(['Edge']);
    }
    if (goog.labs.userAgent.browser.isChrome()) {
        return lookUpValueWithKeys(['Chrome', 'CriOS']);
    }
    var tuple = versionTuples[2];
    return tuple && tuple[1] || '';
};
goog.labs.userAgent.browser.isVersionOrHigher = function (version) {
    return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function (userAgent) {
    var rv = /rv: *([\d\.]*)/.exec(userAgent);
    if (rv && rv[1]) {
        return rv[1];
    }
    var version = '';
    var msie = /MSIE +([\d\.]+)/.exec(userAgent);
    if (msie && msie[1]) {
        var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
        if (msie[1] == '7.0') {
            if (tridentVersion && tridentVersion[1]) {
                switch (tridentVersion[1]) {
                    case '4.0':
                        version = '8.0';
                        break;
                    case '5.0':
                        version = '9.0';
                        break;
                    case '6.0':
                        version = '10.0';
                        break;
                    case '7.0':
                        version = '11.0';
                        break;
                }
            }
            else {
                version = '7.0';
            }
        }
        else {
            version = msie[1];
        }
    }
    return version;
};
goog.provide('goog.labs.userAgent.engine');
goog.require('goog.array');
goog.require('goog.labs.userAgent.util');
goog.require('goog.string');
goog.labs.userAgent.engine.isPresto = function () {
    return goog.labs.userAgent.util.matchUserAgent('Presto');
};
goog.labs.userAgent.engine.isTrident = function () {
    return goog.labs.userAgent.util.matchUserAgent('Trident') ||
        goog.labs.userAgent.util.matchUserAgent('MSIE');
};
goog.labs.userAgent.engine.isEdge = function () {
    return goog.labs.userAgent.util.matchUserAgent('Edge');
};
goog.labs.userAgent.engine.isWebKit = function () {
    return goog.labs.userAgent.util.matchUserAgentIgnoreCase('WebKit') &&
        !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.isGecko = function () {
    return goog.labs.userAgent.util.matchUserAgent('Gecko') &&
        !goog.labs.userAgent.engine.isWebKit() &&
        !goog.labs.userAgent.engine.isTrident() &&
        !goog.labs.userAgent.engine.isEdge();
};
goog.labs.userAgent.engine.getVersion = function () {
    var userAgentString = goog.labs.userAgent.util.getUserAgent();
    if (userAgentString) {
        var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
        var engineTuple = goog.labs.userAgent.engine.getEngineTuple_(tuples);
        if (engineTuple) {
            if (engineTuple[0] == 'Gecko') {
                return goog.labs.userAgent.engine.getVersionForKey_(tuples, 'Firefox');
            }
            return engineTuple[1];
        }
        var browserTuple = tuples[0];
        var info;
        if (browserTuple && (info = browserTuple[2])) {
            var match = /Trident\/([^\s;]+)/.exec(info);
            if (match) {
                return match[1];
            }
        }
    }
    return '';
};
goog.labs.userAgent.engine.getEngineTuple_ = function (tuples) {
    if (!goog.labs.userAgent.engine.isEdge()) {
        return tuples[1];
    }
    for (var i = 0; i < tuples.length; i++) {
        var tuple = tuples[i];
        if (tuple[0] == 'Edge') {
            return tuple;
        }
    }
};
goog.labs.userAgent.engine.isVersionOrHigher = function (version) {
    return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function (tuples, key) {
    var pair = goog.array.find(tuples, function (pair) { return key == pair[0]; });
    return pair && pair[1] || '';
};
goog.provide('goog.labs.userAgent.platform');
goog.require('goog.labs.userAgent.util');
goog.require('goog.string');
goog.labs.userAgent.platform.isAndroid = function () {
    return goog.labs.userAgent.util.matchUserAgent('Android');
};
goog.labs.userAgent.platform.isIpod = function () {
    return goog.labs.userAgent.util.matchUserAgent('iPod');
};
goog.labs.userAgent.platform.isIphone = function () {
    return goog.labs.userAgent.util.matchUserAgent('iPhone') &&
        !goog.labs.userAgent.util.matchUserAgent('iPod') &&
        !goog.labs.userAgent.util.matchUserAgent('iPad');
};
goog.labs.userAgent.platform.isIpad = function () {
    return goog.labs.userAgent.util.matchUserAgent('iPad');
};
goog.labs.userAgent.platform.isIos = function () {
    return goog.labs.userAgent.platform.isIphone() ||
        goog.labs.userAgent.platform.isIpad() ||
        goog.labs.userAgent.platform.isIpod();
};
goog.labs.userAgent.platform.isMacintosh = function () {
    return goog.labs.userAgent.util.matchUserAgent('Macintosh');
};
goog.labs.userAgent.platform.isLinux = function () {
    return goog.labs.userAgent.util.matchUserAgent('Linux');
};
goog.labs.userAgent.platform.isWindows = function () {
    return goog.labs.userAgent.util.matchUserAgent('Windows');
};
goog.labs.userAgent.platform.isChromeOS = function () {
    return goog.labs.userAgent.util.matchUserAgent('CrOS');
};
goog.labs.userAgent.platform.isChromecast = function () {
    return goog.labs.userAgent.util.matchUserAgent('CrKey');
};
goog.labs.userAgent.platform.getVersion = function () {
    var userAgentString = goog.labs.userAgent.util.getUserAgent();
    var version = '', re;
    if (goog.labs.userAgent.platform.isWindows()) {
        re = /Windows (?:NT|Phone) ([0-9.]+)/;
        var match = re.exec(userAgentString);
        if (match) {
            version = match[1];
        }
        else {
            version = '0.0';
        }
    }
    else if (goog.labs.userAgent.platform.isIos()) {
        re = /(?:iPhone|iPod|iPad|CPU)\s+OS\s+(\S+)/;
        var match = re.exec(userAgentString);
        version = match && match[1].replace(/_/g, '.');
    }
    else if (goog.labs.userAgent.platform.isMacintosh()) {
        re = /Mac OS X ([0-9_.]+)/;
        var match = re.exec(userAgentString);
        version = match ? match[1].replace(/_/g, '.') : '10';
    }
    else if (goog.labs.userAgent.platform.isAndroid()) {
        re = /Android\s+([^\);]+)(\)|;)/;
        var match = re.exec(userAgentString);
        version = match && match[1];
    }
    else if (goog.labs.userAgent.platform.isChromeOS()) {
        re = /(?:CrOS\s+(?:i686|x86_64)\s+([0-9.]+))/;
        var match = re.exec(userAgentString);
        version = match && match[1];
    }
    return version || '';
};
goog.labs.userAgent.platform.isVersionOrHigher = function (version) {
    return goog.string.compareVersions(goog.labs.userAgent.platform.getVersion(), version) >= 0;
};
goog.provide('goog.labs.userAgent.util');
goog.require('goog.string');
goog.labs.userAgent.util.getNativeUserAgentString_ = function () {
    var navigator = goog.labs.userAgent.util.getNavigator_();
    if (navigator) {
        var userAgent = navigator.userAgent;
        if (userAgent) {
            return userAgent;
        }
    }
    return '';
};
goog.labs.userAgent.util.getNavigator_ = function () {
    return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ =
    goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function (opt_userAgent) {
    goog.labs.userAgent.util.userAgent_ =
        opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function () {
    return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function (str) {
    var userAgent = goog.labs.userAgent.util.getUserAgent();
    return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function (str) {
    var userAgent = goog.labs.userAgent.util.getUserAgent();
    return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function (userAgent) {
    var versionRegExp = new RegExp('(\\w[\\w ]+)' +
        '/' +
        '([^\\s]+)' +
        '\\s*' +
        '(?:\\((.*?)\\))?', 'g');
    var data = [];
    var match;
    while (match = versionRegExp.exec(userAgent)) {
        data.push([
            match[1],
            match[2],
            match[3] || undefined
        ]);
    }
    return data;
};
goog.provide('goog.userAgent');
goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.engine');
goog.require('goog.labs.userAgent.platform');
goog.require('goog.labs.userAgent.util');
goog.require('goog.reflect');
goog.require('goog.string');
goog.define('goog.userAgent.ASSUME_IE', false);
goog.define('goog.userAgent.ASSUME_EDGE', false);
goog.define('goog.userAgent.ASSUME_GECKO', false);
goog.define('goog.userAgent.ASSUME_WEBKIT', false);
goog.define('goog.userAgent.ASSUME_MOBILE_WEBKIT', false);
goog.define('goog.userAgent.ASSUME_OPERA', false);
goog.define('goog.userAgent.ASSUME_ANY_VERSION', false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE ||
    goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_GECKO ||
    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT ||
    goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function () {
    return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigatorTyped = function () {
    return goog.global['navigator'] || null;
};
goog.userAgent.getNavigator = function () {
    return goog.userAgent.getNavigatorTyped();
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_OPERA :
    goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_IE :
    goog.labs.userAgent.browser.isIE();
goog.userAgent.EDGE = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_EDGE :
    goog.labs.userAgent.engine.isEdge();
goog.userAgent.EDGE_OR_IE = goog.userAgent.EDGE || goog.userAgent.IE;
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_GECKO :
    goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ?
    goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT :
    goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function () {
    return goog.userAgent.WEBKIT &&
        goog.labs.userAgent.util.matchUserAgent('Mobile');
};
goog.userAgent.MOBILE =
    goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function () {
    var navigator = goog.userAgent.getNavigatorTyped();
    return navigator && navigator.platform || '';
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define('goog.userAgent.ASSUME_MAC', false);
goog.define('goog.userAgent.ASSUME_WINDOWS', false);
goog.define('goog.userAgent.ASSUME_LINUX', false);
goog.define('goog.userAgent.ASSUME_X11', false);
goog.define('goog.userAgent.ASSUME_ANDROID', false);
goog.define('goog.userAgent.ASSUME_IPHONE', false);
goog.define('goog.userAgent.ASSUME_IPAD', false);
goog.define('goog.userAgent.ASSUME_IPOD', false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC ||
    goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX ||
    goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID ||
    goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||
    goog.userAgent.ASSUME_IPOD;
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_MAC :
    goog.labs.userAgent.platform.isMacintosh();
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_WINDOWS :
    goog.labs.userAgent.platform.isWindows();
goog.userAgent.isLegacyLinux_ = function () {
    return goog.labs.userAgent.platform.isLinux() ||
        goog.labs.userAgent.platform.isChromeOS();
};
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_LINUX :
    goog.userAgent.isLegacyLinux_();
goog.userAgent.isX11_ = function () {
    var navigator = goog.userAgent.getNavigatorTyped();
    return !!navigator &&
        goog.string.contains(navigator['appVersion'] || '', 'X11');
};
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_X11 :
    goog.userAgent.isX11_();
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_ANDROID :
    goog.labs.userAgent.platform.isAndroid();
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPHONE :
    goog.labs.userAgent.platform.isIphone();
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPAD :
    goog.labs.userAgent.platform.isIpad();
goog.userAgent.IPOD = goog.userAgent.PLATFORM_KNOWN_ ?
    goog.userAgent.ASSUME_IPOD :
    goog.labs.userAgent.platform.isIpod();
goog.userAgent.IOS = goog.userAgent.PLATFORM_KNOWN_ ?
    (goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD ||
        goog.userAgent.ASSUME_IPOD) :
    goog.labs.userAgent.platform.isIos();
goog.userAgent.determineVersion_ = function () {
    var version = '';
    var arr = goog.userAgent.getVersionRegexResult_();
    if (arr) {
        version = arr ? arr[1] : '';
    }
    if (goog.userAgent.IE) {
        var docMode = goog.userAgent.getDocumentMode_();
        if (docMode != null && docMode > parseFloat(version)) {
            return String(docMode);
        }
    }
    return version;
};
goog.userAgent.getVersionRegexResult_ = function () {
    var userAgent = goog.userAgent.getUserAgentString();
    if (goog.userAgent.GECKO) {
        return /rv\:([^\);]+)(\)|;)/.exec(userAgent);
    }
    if (goog.userAgent.EDGE) {
        return /Edge\/([\d\.]+)/.exec(userAgent);
    }
    if (goog.userAgent.IE) {
        return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(userAgent);
    }
    if (goog.userAgent.WEBKIT) {
        return /WebKit\/(\S+)/.exec(userAgent);
    }
    if (goog.userAgent.OPERA) {
        return /(?:Version)[ \/]?(\S+)/.exec(userAgent);
    }
    return undefined;
};
goog.userAgent.getDocumentMode_ = function () {
    var doc = goog.global['document'];
    return doc ? doc['documentMode'] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function (v1, v2) {
    return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function (version) {
    return goog.userAgent.ASSUME_ANY_VERSION ||
        goog.reflect.cache(goog.userAgent.isVersionOrHigherCache_, version, function () {
            return goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0;
        });
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function (documentMode) {
    return Number(goog.userAgent.DOCUMENT_MODE) >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = (function () {
    var doc = goog.global['document'];
    var mode = goog.userAgent.getDocumentMode_();
    if (!doc || !goog.userAgent.IE) {
        return undefined;
    }
    return mode || (doc['compatMode'] == 'CSS1Compat' ?
        parseInt(goog.userAgent.VERSION, 10) :
        5);
})();
goog.provide('goog.userAgent.platform');
goog.require('goog.string');
goog.require('goog.userAgent');
goog.userAgent.platform.determineVersion_ = function () {
    var re;
    if (goog.userAgent.WINDOWS) {
        re = /Windows NT ([0-9.]+)/;
        var match = re.exec(goog.userAgent.getUserAgentString());
        if (match) {
            return match[1];
        }
        else {
            return '0';
        }
    }
    else if (goog.userAgent.MAC) {
        re = /10[_.][0-9_.]+/;
        var match = re.exec(goog.userAgent.getUserAgentString());
        return match ? match[0].replace(/_/g, '.') : '10';
    }
    else if (goog.userAgent.ANDROID) {
        re = /Android\s+([^\);]+)(\)|;)/;
        var match = re.exec(goog.userAgent.getUserAgentString());
        return match ? match[1] : '';
    }
    else if (goog.userAgent.IPHONE || goog.userAgent.IPAD || goog.userAgent.IPOD) {
        re = /(?:iPhone|CPU)\s+OS\s+(\S+)/;
        var match = re.exec(goog.userAgent.getUserAgentString());
        return match ? match[1].replace(/_/g, '.') : '';
    }
    return '';
};
goog.userAgent.platform.VERSION = goog.userAgent.platform.determineVersion_();
goog.userAgent.platform.isVersion = function (version) {
    return goog.string.compareVersions(goog.userAgent.platform.VERSION, version) >= 0;
};
goog.provide('goog.userAgent.product');
goog.require('goog.labs.userAgent.browser');
goog.require('goog.labs.userAgent.platform');
goog.require('goog.userAgent');
goog.define('goog.userAgent.product.ASSUME_FIREFOX', false);
goog.define('goog.userAgent.product.ASSUME_IPHONE', false);
goog.define('goog.userAgent.product.ASSUME_IPAD', false);
goog.define('goog.userAgent.product.ASSUME_ANDROID', false);
goog.define('goog.userAgent.product.ASSUME_CHROME', false);
goog.define('goog.userAgent.product.ASSUME_SAFARI', false);
goog.userAgent.product.PRODUCT_KNOWN_ = goog.userAgent.ASSUME_IE ||
    goog.userAgent.ASSUME_EDGE || goog.userAgent.ASSUME_OPERA ||
    goog.userAgent.product.ASSUME_FIREFOX ||
    goog.userAgent.product.ASSUME_IPHONE ||
    goog.userAgent.product.ASSUME_IPAD ||
    goog.userAgent.product.ASSUME_ANDROID ||
    goog.userAgent.product.ASSUME_CHROME ||
    goog.userAgent.product.ASSUME_SAFARI;
goog.userAgent.product.OPERA = goog.userAgent.OPERA;
goog.userAgent.product.IE = goog.userAgent.IE;
goog.userAgent.product.EDGE = goog.userAgent.EDGE;
goog.userAgent.product.FIREFOX = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_FIREFOX :
    goog.labs.userAgent.browser.isFirefox();
goog.userAgent.product.isIphoneOrIpod_ = function () {
    return goog.labs.userAgent.platform.isIphone() ||
        goog.labs.userAgent.platform.isIpod();
};
goog.userAgent.product.IPHONE = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_IPHONE :
    goog.userAgent.product.isIphoneOrIpod_();
goog.userAgent.product.IPAD = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_IPAD :
    goog.labs.userAgent.platform.isIpad();
goog.userAgent.product.ANDROID = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_ANDROID :
    goog.labs.userAgent.browser.isAndroidBrowser();
goog.userAgent.product.CHROME = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_CHROME :
    goog.labs.userAgent.browser.isChrome();
goog.userAgent.product.isSafariDesktop_ = function () {
    return goog.labs.userAgent.browser.isSafari() &&
        !goog.labs.userAgent.platform.isIos();
};
goog.userAgent.product.SAFARI = goog.userAgent.product.PRODUCT_KNOWN_ ?
    goog.userAgent.product.ASSUME_SAFARI :
    goog.userAgent.product.isSafariDesktop_();
goog.provide('goog.userAgent.product.isVersion');
goog.require('goog.labs.userAgent.platform');
goog.require('goog.string');
goog.require('goog.userAgent');
goog.require('goog.userAgent.product');
goog.userAgent.product.determineVersion_ = function () {
    if (goog.userAgent.product.FIREFOX) {
        return goog.userAgent.product.getFirstRegExpGroup_(/Firefox\/([0-9.]+)/);
    }
    if (goog.userAgent.product.IE || goog.userAgent.product.EDGE ||
        goog.userAgent.product.OPERA) {
        return goog.userAgent.VERSION;
    }
    if (goog.userAgent.product.CHROME) {
        if (goog.labs.userAgent.platform.isIos()) {
            return goog.userAgent.product.getFirstRegExpGroup_(/CriOS\/([0-9.]+)/);
        }
        return goog.userAgent.product.getFirstRegExpGroup_(/Chrome\/([0-9.]+)/);
    }
    if (goog.userAgent.product.SAFARI && !goog.labs.userAgent.platform.isIos()) {
        return goog.userAgent.product.getFirstRegExpGroup_(/Version\/([0-9.]+)/);
    }
    if (goog.userAgent.product.IPHONE || goog.userAgent.product.IPAD) {
        var arr = goog.userAgent.product.execRegExp_(/Version\/(\S+).*Mobile\/(\S+)/);
        if (arr) {
            return arr[1] + '.' + arr[2];
        }
    }
    else if (goog.userAgent.product.ANDROID) {
        var version = goog.userAgent.product.getFirstRegExpGroup_(/Android\s+([0-9.]+)/);
        if (version) {
            return version;
        }
        return goog.userAgent.product.getFirstRegExpGroup_(/Version\/([0-9.]+)/);
    }
    return '';
};
goog.userAgent.product.getFirstRegExpGroup_ = function (re) {
    var arr = goog.userAgent.product.execRegExp_(re);
    return arr ? arr[1] : '';
};
goog.userAgent.product.execRegExp_ = function (re) {
    return re.exec(goog.userAgent.getUserAgentString());
};
goog.userAgent.product.VERSION = goog.userAgent.product.determineVersion_();
goog.userAgent.product.isVersion = function (version) {
    return goog.string.compareVersions(goog.userAgent.product.VERSION, version) >=
        0;
};
goog.provide('goog.dom.animationFrame.polyfill');
goog.define('goog.dom.animationFrame.polyfill.ENABLED', true);
goog.dom.animationFrame.polyfill.install = function () {
    if (goog.dom.animationFrame.polyfill.ENABLED) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0, v; v = vendors[i] && !goog.global.requestAnimationFrame; ++i) {
            goog.global.requestAnimationFrame =
                goog.global[v + 'RequestAnimationFrame'];
            goog.global.cancelAnimationFrame =
                goog.global[v + 'CancelAnimationFrame'] ||
                    goog.global[v + 'CancelRequestAnimationFrame'];
        }
        if (!goog.global.requestAnimationFrame) {
            var lastTime = 0;
            goog.global.requestAnimationFrame = function (callback) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                lastTime = currTime + timeToCall;
                return goog.global.setTimeout(function () {
                    callback(currTime + timeToCall);
                }, timeToCall);
            };
            if (!goog.global.cancelAnimationFrame) {
                goog.global.cancelAnimationFrame = function (id) { clearTimeout(id); };
            }
        }
    }
};
goog.provide('goog.dom.asserts');
goog.require('goog.asserts');
goog.dom.asserts.assertIsLocation = function (o) {
    if (goog.asserts.ENABLE_ASSERTS) {
        var win = goog.dom.asserts.getWindow_(o);
        if (typeof win.Location != 'undefined' &&
            typeof win.Element != 'undefined') {
            goog.asserts.assert(o && (o instanceof win.Location || !(o instanceof win.Element)), 'Argument is not a Location (or a non-Element mock); got: %s', goog.dom.asserts.debugStringForType_(o));
        }
    }
    return (o);
};
goog.dom.asserts.assertIsElementType_ = function (o, typename) {
    if (goog.asserts.ENABLE_ASSERTS) {
        var win = goog.dom.asserts.getWindow_(o);
        if (typeof win[typename] != 'undefined' &&
            typeof win.Location != 'undefined' &&
            typeof win.Element != 'undefined') {
            goog.asserts.assert(o &&
                (o instanceof win[typename] ||
                    !((o instanceof win.Location) || (o instanceof win.Element))), 'Argument is not a %s (or a non-Element, non-Location mock); got: %s', typename, goog.dom.asserts.debugStringForType_(o));
        }
    }
    return (o);
};
goog.dom.asserts.assertIsHTMLAnchorElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLAnchorElement'));
};
goog.dom.asserts.assertIsHTMLButtonElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLButtonElement'));
};
goog.dom.asserts.assertIsHTMLLinkElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLLinkElement'));
};
goog.dom.asserts.assertIsHTMLImageElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLImageElement'));
};
goog.dom.asserts.assertIsHTMLVideoElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLVideoElement'));
};
goog.dom.asserts.assertIsHTMLInputElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLInputElement'));
};
goog.dom.asserts.assertIsHTMLEmbedElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLEmbedElement'));
};
goog.dom.asserts.assertIsHTMLFormElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLFormElement'));
};
goog.dom.asserts.assertIsHTMLFrameElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLFrameElement'));
};
goog.dom.asserts.assertIsHTMLIFrameElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLIFrameElement'));
};
goog.dom.asserts.assertIsHTMLObjectElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLObjectElement'));
};
goog.dom.asserts.assertIsHTMLScriptElement = function (o) {
    return (goog.dom.asserts.assertIsElementType_(o, 'HTMLScriptElement'));
};
goog.dom.asserts.debugStringForType_ = function (value) {
    if (goog.isObject(value)) {
        return value.constructor.displayName || value.constructor.name ||
            Object.prototype.toString.call(value);
    }
    else {
        return value === undefined ? 'undefined' :
            value === null ? 'null' : typeof value;
    }
};
goog.dom.asserts.getWindow_ = function (o) {
    var doc = o && o.ownerDocument;
    var win = doc && (doc.defaultView || doc.parentWindow);
    return win || (goog.global);
};
goog.provide('goog.dom.BrowserFeature');
goog.require('goog.userAgent');
goog.dom.BrowserFeature = {
    CAN_ADD_NAME_OR_TYPE_ATTRIBUTES: !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),
    CAN_USE_CHILDREN_ATTRIBUTE: !goog.userAgent.GECKO && !goog.userAgent.IE ||
        goog.userAgent.IE && goog.userAgent.isDocumentModeOrHigher(9) ||
        goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher('1.9.1'),
    CAN_USE_INNER_TEXT: (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9')),
    CAN_USE_PARENT_ELEMENT_PROPERTY: goog.userAgent.IE || goog.userAgent.OPERA || goog.userAgent.WEBKIT,
    INNER_HTML_NEEDS_SCOPED_ELEMENT: goog.userAgent.IE,
    LEGACY_IE_RANGES: goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)
};
goog.provide('goog.dom.classlist');
goog.require('goog.array');
goog.define('goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST', false);
goog.dom.classlist.get = function (element) {
    if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
        return element.classList;
    }
    var className = element.className;
    return goog.isString(className) && className.match(/\S+/g) || [];
};
goog.dom.classlist.set = function (element, className) {
    element.className = className;
};
goog.dom.classlist.contains = function (element, className) {
    if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
        return element.classList.contains(className);
    }
    return goog.array.contains(goog.dom.classlist.get(element), className);
};
goog.dom.classlist.add = function (element, className) {
    if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
        element.classList.add(className);
        return;
    }
    if (!goog.dom.classlist.contains(element, className)) {
        element.className +=
            element.className.length > 0 ? (' ' + className) : className;
    }
};
goog.dom.classlist.addAll = function (element, classesToAdd) {
    if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
        goog.array.forEach(classesToAdd, function (className) {
            goog.dom.classlist.add(element, className);
        });
        return;
    }
    var classMap = {};
    goog.array.forEach(goog.dom.classlist.get(element), function (className) {
        classMap[className] = true;
    });
    goog.array.forEach(classesToAdd, function (className) { classMap[className] = true; });
    element.className = '';
    for (var className in classMap) {
        element.className +=
            element.className.length > 0 ? (' ' + className) : className;
    }
};
goog.dom.classlist.remove = function (element, className) {
    if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
        element.classList.remove(className);
        return;
    }
    if (goog.dom.classlist.contains(element, className)) {
        element.className = goog.array
            .filter(goog.dom.classlist.get(element), function (c) { return c != className; })
            .join(' ');
    }
};
goog.dom.classlist.removeAll = function (element, classesToRemove) {
    if (goog.dom.classlist.ALWAYS_USE_DOM_TOKEN_LIST || element.classList) {
        goog.array.forEach(classesToRemove, function (className) {
            goog.dom.classlist.remove(element, className);
        });
        return;
    }
    element.className =
        goog.array
            .filter(goog.dom.classlist.get(element), function (className) {
            return !goog.array.contains(classesToRemove, className);
        })
            .join(' ');
};
goog.dom.classlist.enable = function (element, className, enabled) {
    if (enabled) {
        goog.dom.classlist.add(element, className);
    }
    else {
        goog.dom.classlist.remove(element, className);
    }
};
goog.dom.classlist.enableAll = function (element, classesToEnable, enabled) {
    var f = enabled ? goog.dom.classlist.addAll : goog.dom.classlist.removeAll;
    f(element, classesToEnable);
};
goog.dom.classlist.swap = function (element, fromClass, toClass) {
    if (goog.dom.classlist.contains(element, fromClass)) {
        goog.dom.classlist.remove(element, fromClass);
        goog.dom.classlist.add(element, toClass);
        return true;
    }
    return false;
};
goog.dom.classlist.toggle = function (element, className) {
    var add = !goog.dom.classlist.contains(element, className);
    goog.dom.classlist.enable(element, className, add);
    return add;
};
goog.dom.classlist.addRemove = function (element, classToRemove, classToAdd) {
    goog.dom.classlist.remove(element, classToRemove);
    goog.dom.classlist.add(element, classToAdd);
};
goog.provide('goog.dom');
goog.provide('goog.dom.Appendable');
goog.provide('goog.dom.DomHelper');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom.BrowserFeature');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.safe');
goog.require('goog.html.SafeHtml');
goog.require('goog.html.uncheckedconversions');
goog.require('goog.math.Coordinate');
goog.require('goog.math.Size');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.string.Unicode');
goog.require('goog.userAgent');
goog.define('goog.dom.ASSUME_QUIRKS_MODE', false);
goog.define('goog.dom.ASSUME_STANDARDS_MODE', false);
goog.dom.COMPAT_MODE_KNOWN_ =
    goog.dom.ASSUME_QUIRKS_MODE || goog.dom.ASSUME_STANDARDS_MODE;
goog.dom.getDomHelper = function (opt_element) {
    return opt_element ?
        new goog.dom.DomHelper(goog.dom.getOwnerDocument(opt_element)) :
        (goog.dom.defaultDomHelper_ ||
            (goog.dom.defaultDomHelper_ = new goog.dom.DomHelper()));
};
goog.dom.defaultDomHelper_;
goog.dom.getDocument = function () {
    return document;
};
goog.dom.getElement = function (element) {
    return goog.dom.getElementHelper_(document, element);
};
goog.dom.getElementHelper_ = function (doc, element) {
    return goog.isString(element) ? doc.getElementById(element) : element;
};
goog.dom.getRequiredElement = function (id) {
    return goog.dom.getRequiredElementHelper_(document, id);
};
goog.dom.getRequiredElementHelper_ = function (doc, id) {
    goog.asserts.assertString(id);
    var element = goog.dom.getElementHelper_(doc, id);
    element =
        goog.asserts.assertElement(element, 'No element found with id: ' + id);
    return element;
};
goog.dom.$ = goog.dom.getElement;
goog.dom.getElementsByTagName = function (tagName, opt_parent) {
    var parent = opt_parent || document;
    return parent.getElementsByTagName(String(tagName));
};
goog.dom.getElementsByTagNameAndClass = function (opt_tag, opt_class, opt_el) {
    return goog.dom.getElementsByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementByTagNameAndClass = function (opt_tag, opt_class, opt_el) {
    return goog.dom.getElementByTagNameAndClass_(document, opt_tag, opt_class, opt_el);
};
goog.dom.getElementsByClass = function (className, opt_el) {
    var parent = opt_el || document;
    if (goog.dom.canUseQuerySelector_(parent)) {
        return parent.querySelectorAll('.' + className);
    }
    return goog.dom.getElementsByTagNameAndClass_(document, '*', className, opt_el);
};
goog.dom.getElementByClass = function (className, opt_el) {
    var parent = opt_el || document;
    var retVal = null;
    if (parent.getElementsByClassName) {
        retVal = parent.getElementsByClassName(className)[0];
    }
    else {
        retVal =
            goog.dom.getElementByTagNameAndClass_(document, '*', className, opt_el);
    }
    return retVal || null;
};
goog.dom.getRequiredElementByClass = function (className, opt_root) {
    var retValue = goog.dom.getElementByClass(className, opt_root);
    return goog.asserts.assert(retValue, 'No element found with className: ' + className);
};
goog.dom.canUseQuerySelector_ = function (parent) {
    return !!(parent.querySelectorAll && parent.querySelector);
};
goog.dom.getElementsByTagNameAndClass_ = function (doc, opt_tag, opt_class, opt_el) {
    var parent = opt_el || doc;
    var tagName = (opt_tag && opt_tag != '*') ? String(opt_tag).toUpperCase() : '';
    if (goog.dom.canUseQuerySelector_(parent) && (tagName || opt_class)) {
        var query = tagName + (opt_class ? '.' + opt_class : '');
        return parent.querySelectorAll(query);
    }
    if (opt_class && parent.getElementsByClassName) {
        var els = parent.getElementsByClassName(opt_class);
        if (tagName) {
            var arrayLike = {};
            var len = 0;
            for (var i = 0, el; el = els[i]; i++) {
                if (tagName == el.nodeName) {
                    arrayLike[len++] = el;
                }
            }
            arrayLike.length = len;
            return (arrayLike);
        }
        else {
            return els;
        }
    }
    var els = parent.getElementsByTagName(tagName || '*');
    if (opt_class) {
        var arrayLike = {};
        var len = 0;
        for (var i = 0, el; el = els[i]; i++) {
            var className = el.className;
            if (typeof className.split == 'function' &&
                goog.array.contains(className.split(/\s+/), opt_class)) {
                arrayLike[len++] = el;
            }
        }
        arrayLike.length = len;
        return (arrayLike);
    }
    else {
        return els;
    }
};
goog.dom.getElementByTagNameAndClass_ = function (doc, opt_tag, opt_class, opt_el) {
    var parent = opt_el || doc;
    var tag = (opt_tag && opt_tag != '*') ? String(opt_tag).toUpperCase() : '';
    if (goog.dom.canUseQuerySelector_(parent) && (tag || opt_class)) {
        return parent.querySelector(tag + (opt_class ? '.' + opt_class : ''));
    }
    var elements = goog.dom.getElementsByTagNameAndClass_(doc, opt_tag, opt_class, opt_el);
    return elements[0] || null;
};
goog.dom.$$ = goog.dom.getElementsByTagNameAndClass;
goog.dom.setProperties = function (element, properties) {
    goog.object.forEach(properties, function (val, key) {
        if (val && val.implementsGoogStringTypedString) {
            val = val.getTypedStringValue();
        }
        if (key == 'style') {
            element.style.cssText = val;
        }
        else if (key == 'class') {
            element.className = val;
        }
        else if (key == 'for') {
            element.htmlFor = val;
        }
        else if (goog.dom.DIRECT_ATTRIBUTE_MAP_.hasOwnProperty(key)) {
            element.setAttribute(goog.dom.DIRECT_ATTRIBUTE_MAP_[key], val);
        }
        else if (goog.string.startsWith(key, 'aria-') ||
            goog.string.startsWith(key, 'data-')) {
            element.setAttribute(key, val);
        }
        else {
            element[key] = val;
        }
    });
};
goog.dom.DIRECT_ATTRIBUTE_MAP_ = {
    'cellpadding': 'cellPadding',
    'cellspacing': 'cellSpacing',
    'colspan': 'colSpan',
    'frameborder': 'frameBorder',
    'height': 'height',
    'maxlength': 'maxLength',
    'nonce': 'nonce',
    'role': 'role',
    'rowspan': 'rowSpan',
    'type': 'type',
    'usemap': 'useMap',
    'valign': 'vAlign',
    'width': 'width'
};
goog.dom.getViewportSize = function (opt_window) {
    return goog.dom.getViewportSize_(opt_window || window);
};
goog.dom.getViewportSize_ = function (win) {
    var doc = win.document;
    var el = goog.dom.isCss1CompatMode_(doc) ? doc.documentElement : doc.body;
    return new goog.math.Size(el.clientWidth, el.clientHeight);
};
goog.dom.getDocumentHeight = function () {
    return goog.dom.getDocumentHeight_(window);
};
goog.dom.getDocumentHeightForWindow = function (win) {
    return goog.dom.getDocumentHeight_(win);
};
goog.dom.getDocumentHeight_ = function (win) {
    var doc = win.document;
    var height = 0;
    if (doc) {
        var body = doc.body;
        var docEl = (doc.documentElement);
        if (!(docEl && body)) {
            return 0;
        }
        var vh = goog.dom.getViewportSize_(win).height;
        if (goog.dom.isCss1CompatMode_(doc) && docEl.scrollHeight) {
            height =
                docEl.scrollHeight != vh ? docEl.scrollHeight : docEl.offsetHeight;
        }
        else {
            var sh = docEl.scrollHeight;
            var oh = docEl.offsetHeight;
            if (docEl.clientHeight != oh) {
                sh = body.scrollHeight;
                oh = body.offsetHeight;
            }
            if (sh > vh) {
                height = sh > oh ? sh : oh;
            }
            else {
                height = sh < oh ? sh : oh;
            }
        }
    }
    return height;
};
goog.dom.getPageScroll = function (opt_window) {
    var win = opt_window || goog.global || window;
    return goog.dom.getDomHelper(win.document).getDocumentScroll();
};
goog.dom.getDocumentScroll = function () {
    return goog.dom.getDocumentScroll_(document);
};
goog.dom.getDocumentScroll_ = function (doc) {
    var el = goog.dom.getDocumentScrollElement_(doc);
    var win = goog.dom.getWindow_(doc);
    if (goog.userAgent.IE && goog.userAgent.isVersionOrHigher('10') &&
        win.pageYOffset != el.scrollTop) {
        return new goog.math.Coordinate(el.scrollLeft, el.scrollTop);
    }
    return new goog.math.Coordinate(win.pageXOffset || el.scrollLeft, win.pageYOffset || el.scrollTop);
};
goog.dom.getDocumentScrollElement = function () {
    return goog.dom.getDocumentScrollElement_(document);
};
goog.dom.getDocumentScrollElement_ = function (doc) {
    if (doc.scrollingElement) {
        return doc.scrollingElement;
    }
    if (!goog.userAgent.WEBKIT && goog.dom.isCss1CompatMode_(doc)) {
        return doc.documentElement;
    }
    return doc.body || doc.documentElement;
};
goog.dom.getWindow = function (opt_doc) {
    return opt_doc ? goog.dom.getWindow_(opt_doc) : window;
};
goog.dom.getWindow_ = function (doc) {
    return (doc.parentWindow || doc.defaultView);
};
goog.dom.createDom = function (tagName, opt_attributes, var_args) {
    return goog.dom.createDom_(document, arguments);
};
goog.dom.createDom_ = function (doc, args) {
    var tagName = String(args[0]);
    var attributes = args[1];
    if (!goog.dom.BrowserFeature.CAN_ADD_NAME_OR_TYPE_ATTRIBUTES && attributes &&
        (attributes.name || attributes.type)) {
        var tagNameArr = ['<', tagName];
        if (attributes.name) {
            tagNameArr.push(' name="', goog.string.htmlEscape(attributes.name), '"');
        }
        if (attributes.type) {
            tagNameArr.push(' type="', goog.string.htmlEscape(attributes.type), '"');
            var clone = {};
            goog.object.extend(clone, attributes);
            delete clone['type'];
            attributes = clone;
        }
        tagNameArr.push('>');
        tagName = tagNameArr.join('');
    }
    var element = doc.createElement(tagName);
    if (attributes) {
        if (goog.isString(attributes)) {
            element.className = attributes;
        }
        else if (goog.isArray(attributes)) {
            element.className = attributes.join(' ');
        }
        else {
            goog.dom.setProperties(element, attributes);
        }
    }
    if (args.length > 2) {
        goog.dom.append_(doc, element, args, 2);
    }
    return element;
};
goog.dom.append_ = function (doc, parent, args, startIndex) {
    function childHandler(child) {
        if (child) {
            parent.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
        }
    }
    for (var i = startIndex; i < args.length; i++) {
        var arg = args[i];
        if (goog.isArrayLike(arg) && !goog.dom.isNodeLike(arg)) {
            goog.array.forEach(goog.dom.isNodeList(arg) ? goog.array.toArray(arg) : arg, childHandler);
        }
        else {
            childHandler(arg);
        }
    }
};
goog.dom.$dom = goog.dom.createDom;
goog.dom.createElement = function (name) {
    return goog.dom.createElement_(document, name);
};
goog.dom.createElement_ = function (doc, name) {
    return doc.createElement(String(name));
};
goog.dom.createTextNode = function (content) {
    return document.createTextNode(String(content));
};
goog.dom.createTable = function (rows, columns, opt_fillWithNbsp) {
    return goog.dom.createTable_(document, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.createTable_ = function (doc, rows, columns, fillWithNbsp) {
    var table = goog.dom.createElement_(doc, goog.dom.TagName.TABLE);
    var tbody = table.appendChild(goog.dom.createElement_(doc, goog.dom.TagName.TBODY));
    for (var i = 0; i < rows; i++) {
        var tr = goog.dom.createElement_(doc, goog.dom.TagName.TR);
        for (var j = 0; j < columns; j++) {
            var td = goog.dom.createElement_(doc, goog.dom.TagName.TD);
            if (fillWithNbsp) {
                goog.dom.setTextContent(td, goog.string.Unicode.NBSP);
            }
            tr.appendChild(td);
        }
        tbody.appendChild(tr);
    }
    return table;
};
goog.dom.constHtmlToNode = function (var_args) {
    var stringArray = goog.array.map(arguments, goog.string.Const.unwrap);
    var safeHtml = goog.html.uncheckedconversions
        .safeHtmlFromStringKnownToSatisfyTypeContract(goog.string.Const.from('Constant HTML string, that gets turned into a ' +
        'Node later, so it will be automatically balanced.'), stringArray.join(''));
    return goog.dom.safeHtmlToNode(safeHtml);
};
goog.dom.safeHtmlToNode = function (html) {
    return goog.dom.safeHtmlToNode_(document, html);
};
goog.dom.safeHtmlToNode_ = function (doc, html) {
    var tempDiv = goog.dom.createElement_(doc, goog.dom.TagName.DIV);
    if (goog.dom.BrowserFeature.INNER_HTML_NEEDS_SCOPED_ELEMENT) {
        goog.dom.safe.setInnerHtml(tempDiv, goog.html.SafeHtml.concat(goog.html.SafeHtml.BR, html));
        tempDiv.removeChild(tempDiv.firstChild);
    }
    else {
        goog.dom.safe.setInnerHtml(tempDiv, html);
    }
    return goog.dom.childrenToNode_(doc, tempDiv);
};
goog.dom.childrenToNode_ = function (doc, tempDiv) {
    if (tempDiv.childNodes.length == 1) {
        return tempDiv.removeChild(tempDiv.firstChild);
    }
    else {
        var fragment = doc.createDocumentFragment();
        while (tempDiv.firstChild) {
            fragment.appendChild(tempDiv.firstChild);
        }
        return fragment;
    }
};
goog.dom.isCss1CompatMode = function () {
    return goog.dom.isCss1CompatMode_(document);
};
goog.dom.isCss1CompatMode_ = function (doc) {
    if (goog.dom.COMPAT_MODE_KNOWN_) {
        return goog.dom.ASSUME_STANDARDS_MODE;
    }
    return doc.compatMode == 'CSS1Compat';
};
goog.dom.canHaveChildren = function (node) {
    if (node.nodeType != goog.dom.NodeType.ELEMENT) {
        return false;
    }
    switch ((node).tagName) {
        case String(goog.dom.TagName.APPLET):
        case String(goog.dom.TagName.AREA):
        case String(goog.dom.TagName.BASE):
        case String(goog.dom.TagName.BR):
        case String(goog.dom.TagName.COL):
        case String(goog.dom.TagName.COMMAND):
        case String(goog.dom.TagName.EMBED):
        case String(goog.dom.TagName.FRAME):
        case String(goog.dom.TagName.HR):
        case String(goog.dom.TagName.IMG):
        case String(goog.dom.TagName.INPUT):
        case String(goog.dom.TagName.IFRAME):
        case String(goog.dom.TagName.ISINDEX):
        case String(goog.dom.TagName.KEYGEN):
        case String(goog.dom.TagName.LINK):
        case String(goog.dom.TagName.NOFRAMES):
        case String(goog.dom.TagName.NOSCRIPT):
        case String(goog.dom.TagName.META):
        case String(goog.dom.TagName.OBJECT):
        case String(goog.dom.TagName.PARAM):
        case String(goog.dom.TagName.SCRIPT):
        case String(goog.dom.TagName.SOURCE):
        case String(goog.dom.TagName.STYLE):
        case String(goog.dom.TagName.TRACK):
        case String(goog.dom.TagName.WBR):
            return false;
    }
    return true;
};
goog.dom.appendChild = function (parent, child) {
    parent.appendChild(child);
};
goog.dom.append = function (parent, var_args) {
    goog.dom.append_(goog.dom.getOwnerDocument(parent), parent, arguments, 1);
};
goog.dom.removeChildren = function (node) {
    var child;
    while ((child = node.firstChild)) {
        node.removeChild(child);
    }
};
goog.dom.insertSiblingBefore = function (newNode, refNode) {
    if (refNode.parentNode) {
        refNode.parentNode.insertBefore(newNode, refNode);
    }
};
goog.dom.insertSiblingAfter = function (newNode, refNode) {
    if (refNode.parentNode) {
        refNode.parentNode.insertBefore(newNode, refNode.nextSibling);
    }
};
goog.dom.insertChildAt = function (parent, child, index) {
    parent.insertBefore(child, parent.childNodes[index] || null);
};
goog.dom.removeNode = function (node) {
    return node && node.parentNode ? node.parentNode.removeChild(node) : null;
};
goog.dom.replaceNode = function (newNode, oldNode) {
    var parent = oldNode.parentNode;
    if (parent) {
        parent.replaceChild(newNode, oldNode);
    }
};
goog.dom.flattenElement = function (element) {
    var child, parent = element.parentNode;
    if (parent && parent.nodeType != goog.dom.NodeType.DOCUMENT_FRAGMENT) {
        if (element.removeNode) {
            return (element.removeNode(false));
        }
        else {
            while ((child = element.firstChild)) {
                parent.insertBefore(child, element);
            }
            return (goog.dom.removeNode(element));
        }
    }
};
goog.dom.getChildren = function (element) {
    if (goog.dom.BrowserFeature.CAN_USE_CHILDREN_ATTRIBUTE &&
        element.children != undefined) {
        return element.children;
    }
    return goog.array.filter(element.childNodes, function (node) {
        return node.nodeType == goog.dom.NodeType.ELEMENT;
    });
};
goog.dom.getFirstElementChild = function (node) {
    if (goog.isDef(node.firstElementChild)) {
        return (node).firstElementChild;
    }
    return goog.dom.getNextElementNode_(node.firstChild, true);
};
goog.dom.getLastElementChild = function (node) {
    if (goog.isDef(node.lastElementChild)) {
        return (node).lastElementChild;
    }
    return goog.dom.getNextElementNode_(node.lastChild, false);
};
goog.dom.getNextElementSibling = function (node) {
    if (goog.isDef(node.nextElementSibling)) {
        return (node).nextElementSibling;
    }
    return goog.dom.getNextElementNode_(node.nextSibling, true);
};
goog.dom.getPreviousElementSibling = function (node) {
    if (goog.isDef(node.previousElementSibling)) {
        return (node).previousElementSibling;
    }
    return goog.dom.getNextElementNode_(node.previousSibling, false);
};
goog.dom.getNextElementNode_ = function (node, forward) {
    while (node && node.nodeType != goog.dom.NodeType.ELEMENT) {
        node = forward ? node.nextSibling : node.previousSibling;
    }
    return (node);
};
goog.dom.getNextNode = function (node) {
    if (!node) {
        return null;
    }
    if (node.firstChild) {
        return node.firstChild;
    }
    while (node && !node.nextSibling) {
        node = node.parentNode;
    }
    return node ? node.nextSibling : null;
};
goog.dom.getPreviousNode = function (node) {
    if (!node) {
        return null;
    }
    if (!node.previousSibling) {
        return node.parentNode;
    }
    node = node.previousSibling;
    while (node && node.lastChild) {
        node = node.lastChild;
    }
    return node;
};
goog.dom.isNodeLike = function (obj) {
    return goog.isObject(obj) && obj.nodeType > 0;
};
goog.dom.isElement = function (obj) {
    return goog.isObject(obj) && obj.nodeType == goog.dom.NodeType.ELEMENT;
};
goog.dom.isWindow = function (obj) {
    return goog.isObject(obj) && obj['window'] == obj;
};
goog.dom.getParentElement = function (element) {
    var parent;
    if (goog.dom.BrowserFeature.CAN_USE_PARENT_ELEMENT_PROPERTY) {
        var isIe9 = goog.userAgent.IE && goog.userAgent.isVersionOrHigher('9') &&
            !goog.userAgent.isVersionOrHigher('10');
        if (!(isIe9 && goog.global['SVGElement'] &&
            element instanceof goog.global['SVGElement'])) {
            parent = element.parentElement;
            if (parent) {
                return parent;
            }
        }
    }
    parent = element.parentNode;
    return goog.dom.isElement(parent) ? (parent) : null;
};
goog.dom.contains = function (parent, descendant) {
    if (!parent || !descendant) {
        return false;
    }
    if (parent.contains && descendant.nodeType == goog.dom.NodeType.ELEMENT) {
        return parent == descendant || parent.contains(descendant);
    }
    if (typeof parent.compareDocumentPosition != 'undefined') {
        return parent == descendant ||
            Boolean(parent.compareDocumentPosition(descendant) & 16);
    }
    while (descendant && parent != descendant) {
        descendant = descendant.parentNode;
    }
    return descendant == parent;
};
goog.dom.compareNodeOrder = function (node1, node2) {
    if (node1 == node2) {
        return 0;
    }
    if (node1.compareDocumentPosition) {
        return node1.compareDocumentPosition(node2) & 2 ? 1 : -1;
    }
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
        if (node1.nodeType == goog.dom.NodeType.DOCUMENT) {
            return -1;
        }
        if (node2.nodeType == goog.dom.NodeType.DOCUMENT) {
            return 1;
        }
    }
    if ('sourceIndex' in node1 ||
        (node1.parentNode && 'sourceIndex' in node1.parentNode)) {
        var isElement1 = node1.nodeType == goog.dom.NodeType.ELEMENT;
        var isElement2 = node2.nodeType == goog.dom.NodeType.ELEMENT;
        if (isElement1 && isElement2) {
            return node1.sourceIndex - node2.sourceIndex;
        }
        else {
            var parent1 = node1.parentNode;
            var parent2 = node2.parentNode;
            if (parent1 == parent2) {
                return goog.dom.compareSiblingOrder_(node1, node2);
            }
            if (!isElement1 && goog.dom.contains(parent1, node2)) {
                return -1 * goog.dom.compareParentsDescendantNodeIe_(node1, node2);
            }
            if (!isElement2 && goog.dom.contains(parent2, node1)) {
                return goog.dom.compareParentsDescendantNodeIe_(node2, node1);
            }
            return (isElement1 ? node1.sourceIndex : parent1.sourceIndex) -
                (isElement2 ? node2.sourceIndex : parent2.sourceIndex);
        }
    }
    var doc = goog.dom.getOwnerDocument(node1);
    var range1, range2;
    range1 = doc.createRange();
    range1.selectNode(node1);
    range1.collapse(true);
    range2 = doc.createRange();
    range2.selectNode(node2);
    range2.collapse(true);
    return range1.compareBoundaryPoints(goog.global['Range'].START_TO_END, range2);
};
goog.dom.compareParentsDescendantNodeIe_ = function (textNode, node) {
    var parent = textNode.parentNode;
    if (parent == node) {
        return -1;
    }
    var sibling = node;
    while (sibling.parentNode != parent) {
        sibling = sibling.parentNode;
    }
    return goog.dom.compareSiblingOrder_(sibling, textNode);
};
goog.dom.compareSiblingOrder_ = function (node1, node2) {
    var s = node2;
    while ((s = s.previousSibling)) {
        if (s == node1) {
            return -1;
        }
    }
    return 1;
};
goog.dom.findCommonAncestor = function (var_args) {
    var i, count = arguments.length;
    if (!count) {
        return null;
    }
    else if (count == 1) {
        return arguments[0];
    }
    var paths = [];
    var minLength = Infinity;
    for (i = 0; i < count; i++) {
        var ancestors = [];
        var node = arguments[i];
        while (node) {
            ancestors.unshift(node);
            node = node.parentNode;
        }
        paths.push(ancestors);
        minLength = Math.min(minLength, ancestors.length);
    }
    var output = null;
    for (i = 0; i < minLength; i++) {
        var first = paths[0][i];
        for (var j = 1; j < count; j++) {
            if (first != paths[j][i]) {
                return output;
            }
        }
        output = first;
    }
    return output;
};
goog.dom.getOwnerDocument = function (node) {
    goog.asserts.assert(node, 'Node cannot be null or undefined.');
    return (node.nodeType == goog.dom.NodeType.DOCUMENT ? node : node.ownerDocument ||
        node.document);
};
goog.dom.getFrameContentDocument = function (frame) {
    return frame.contentDocument ||
        (frame).contentWindow.document;
};
goog.dom.getFrameContentWindow = function (frame) {
    try {
        return frame.contentWindow ||
            (frame.contentDocument ? goog.dom.getWindow(frame.contentDocument) :
                null);
    }
    catch (e) {
    }
    return null;
};
goog.dom.setTextContent = function (node, text) {
    goog.asserts.assert(node != null, 'goog.dom.setTextContent expects a non-null value for node');
    if ('textContent' in node) {
        node.textContent = text;
    }
    else if (node.nodeType == goog.dom.NodeType.TEXT) {
        (node).data = String(text);
    }
    else if (node.firstChild && node.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        while (node.lastChild != node.firstChild) {
            node.removeChild(node.lastChild);
        }
        (node.firstChild).data = String(text);
    }
    else {
        goog.dom.removeChildren(node);
        var doc = goog.dom.getOwnerDocument(node);
        node.appendChild(doc.createTextNode(String(text)));
    }
};
goog.dom.getOuterHtml = function (element) {
    goog.asserts.assert(element !== null, 'goog.dom.getOuterHtml expects a non-null value for element');
    if ('outerHTML' in element) {
        return element.outerHTML;
    }
    else {
        var doc = goog.dom.getOwnerDocument(element);
        var div = goog.dom.createElement_(doc, goog.dom.TagName.DIV);
        div.appendChild(element.cloneNode(true));
        return div.innerHTML;
    }
};
goog.dom.findNode = function (root, p) {
    var rv = [];
    var found = goog.dom.findNodes_(root, p, rv, true);
    return found ? rv[0] : undefined;
};
goog.dom.findNodes = function (root, p) {
    var rv = [];
    goog.dom.findNodes_(root, p, rv, false);
    return rv;
};
goog.dom.findNodes_ = function (root, p, rv, findOne) {
    if (root != null) {
        var child = root.firstChild;
        while (child) {
            if (p(child)) {
                rv.push(child);
                if (findOne) {
                    return true;
                }
            }
            if (goog.dom.findNodes_(child, p, rv, findOne)) {
                return true;
            }
            child = child.nextSibling;
        }
    }
    return false;
};
goog.dom.TAGS_TO_IGNORE_ = {
    'SCRIPT': 1,
    'STYLE': 1,
    'HEAD': 1,
    'IFRAME': 1,
    'OBJECT': 1
};
goog.dom.PREDEFINED_TAG_VALUES_ = {
    'IMG': ' ',
    'BR': '\n'
};
goog.dom.isFocusableTabIndex = function (element) {
    return goog.dom.hasSpecifiedTabIndex_(element) &&
        goog.dom.isTabIndexFocusable_(element);
};
goog.dom.setFocusableTabIndex = function (element, enable) {
    if (enable) {
        element.tabIndex = 0;
    }
    else {
        element.tabIndex = -1;
        element.removeAttribute('tabIndex');
    }
};
goog.dom.isFocusable = function (element) {
    var focusable;
    if (goog.dom.nativelySupportsFocus_(element)) {
        focusable = !element.disabled &&
            (!goog.dom.hasSpecifiedTabIndex_(element) ||
                goog.dom.isTabIndexFocusable_(element));
    }
    else {
        focusable = goog.dom.isFocusableTabIndex(element);
    }
    return focusable && goog.userAgent.IE ?
        goog.dom.hasNonZeroBoundingRect_((element)) :
        focusable;
};
goog.dom.hasSpecifiedTabIndex_ = function (element) {
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9')) {
        var attrNode = element.getAttributeNode('tabindex');
        return goog.isDefAndNotNull(attrNode) && attrNode.specified;
    }
    else {
        return element.hasAttribute('tabindex');
    }
};
goog.dom.isTabIndexFocusable_ = function (element) {
    var index = (element).tabIndex;
    return goog.isNumber(index) && index >= 0 && index < 32768;
};
goog.dom.nativelySupportsFocus_ = function (element) {
    return element.tagName == goog.dom.TagName.A ||
        element.tagName == goog.dom.TagName.INPUT ||
        element.tagName == goog.dom.TagName.TEXTAREA ||
        element.tagName == goog.dom.TagName.SELECT ||
        element.tagName == goog.dom.TagName.BUTTON;
};
goog.dom.hasNonZeroBoundingRect_ = function (element) {
    var rect;
    if (!goog.isFunction(element['getBoundingClientRect']) ||
        (goog.userAgent.IE && element.parentElement == null)) {
        rect = { 'height': element.offsetHeight, 'width': element.offsetWidth };
    }
    else {
        rect = element.getBoundingClientRect();
    }
    return goog.isDefAndNotNull(rect) && rect.height > 0 && rect.width > 0;
};
goog.dom.getTextContent = function (node) {
    var textContent;
    if (goog.dom.BrowserFeature.CAN_USE_INNER_TEXT && node !== null &&
        ('innerText' in node)) {
        textContent = goog.string.canonicalizeNewlines(node.innerText);
    }
    else {
        var buf = [];
        goog.dom.getTextContent_(node, buf, true);
        textContent = buf.join('');
    }
    textContent = textContent.replace(/ \xAD /g, ' ').replace(/\xAD/g, '');
    textContent = textContent.replace(/\u200B/g, '');
    if (!goog.dom.BrowserFeature.CAN_USE_INNER_TEXT) {
        textContent = textContent.replace(/ +/g, ' ');
    }
    if (textContent != ' ') {
        textContent = textContent.replace(/^\s*/, '');
    }
    return textContent;
};
goog.dom.getRawTextContent = function (node) {
    var buf = [];
    goog.dom.getTextContent_(node, buf, false);
    return buf.join('');
};
goog.dom.getTextContent_ = function (node, buf, normalizeWhitespace) {
    if (node.nodeName in goog.dom.TAGS_TO_IGNORE_) {
    }
    else if (node.nodeType == goog.dom.NodeType.TEXT) {
        if (normalizeWhitespace) {
            buf.push(String(node.nodeValue).replace(/(\r\n|\r|\n)/g, ''));
        }
        else {
            buf.push(node.nodeValue);
        }
    }
    else if (node.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
        buf.push(goog.dom.PREDEFINED_TAG_VALUES_[node.nodeName]);
    }
    else {
        var child = node.firstChild;
        while (child) {
            goog.dom.getTextContent_(child, buf, normalizeWhitespace);
            child = child.nextSibling;
        }
    }
};
goog.dom.getNodeTextLength = function (node) {
    return goog.dom.getTextContent(node).length;
};
goog.dom.getNodeTextOffset = function (node, opt_offsetParent) {
    var root = opt_offsetParent || goog.dom.getOwnerDocument(node).body;
    var buf = [];
    while (node && node != root) {
        var cur = node;
        while ((cur = cur.previousSibling)) {
            buf.unshift(goog.dom.getTextContent(cur));
        }
        node = node.parentNode;
    }
    return goog.string.trimLeft(buf.join('')).replace(/ +/g, ' ').length;
};
goog.dom.getNodeAtOffset = function (parent, offset, opt_result) {
    var stack = [parent], pos = 0, cur = null;
    while (stack.length > 0 && pos < offset) {
        cur = stack.pop();
        if (cur.nodeName in goog.dom.TAGS_TO_IGNORE_) {
        }
        else if (cur.nodeType == goog.dom.NodeType.TEXT) {
            var text = cur.nodeValue.replace(/(\r\n|\r|\n)/g, '').replace(/ +/g, ' ');
            pos += text.length;
        }
        else if (cur.nodeName in goog.dom.PREDEFINED_TAG_VALUES_) {
            pos += goog.dom.PREDEFINED_TAG_VALUES_[cur.nodeName].length;
        }
        else {
            for (var i = cur.childNodes.length - 1; i >= 0; i--) {
                stack.push(cur.childNodes[i]);
            }
        }
    }
    if (goog.isObject(opt_result)) {
        opt_result.remainder = cur ? cur.nodeValue.length + offset - pos - 1 : 0;
        opt_result.node = cur;
    }
    return cur;
};
goog.dom.isNodeList = function (val) {
    if (val && typeof val.length == 'number') {
        if (goog.isObject(val)) {
            return typeof val.item == 'function' || typeof val.item == 'string';
        }
        else if (goog.isFunction(val)) {
            return typeof (val.item) == 'function';
        }
    }
    return false;
};
goog.dom.getAncestorByTagNameAndClass = function (element, opt_tag, opt_class, opt_maxSearchSteps) {
    if (!opt_tag && !opt_class) {
        return null;
    }
    var tagName = opt_tag ? String(opt_tag).toUpperCase() : null;
    return (goog.dom.getAncestor(element, function (node) {
        return (!tagName || node.nodeName == tagName) &&
            (!opt_class ||
                goog.isString(node.className) &&
                    goog.array.contains(node.className.split(/\s+/), opt_class));
    }, true, opt_maxSearchSteps));
};
goog.dom.getAncestorByClass = function (element, className, opt_maxSearchSteps) {
    return goog.dom.getAncestorByTagNameAndClass(element, null, className, opt_maxSearchSteps);
};
goog.dom.getAncestor = function (element, matcher, opt_includeNode, opt_maxSearchSteps) {
    if (element && !opt_includeNode) {
        element = element.parentNode;
    }
    var steps = 0;
    while (element &&
        (opt_maxSearchSteps == null || steps <= opt_maxSearchSteps)) {
        goog.asserts.assert(element.name != 'parentNode');
        if (matcher(element)) {
            return element;
        }
        element = element.parentNode;
        steps++;
    }
    return null;
};
goog.dom.getActiveElement = function (doc) {
    try {
        var activeElement = doc && doc.activeElement;
        return activeElement && activeElement.nodeName ? activeElement : null;
    }
    catch (e) {
        return null;
    }
};
goog.dom.getPixelRatio = function () {
    var win = goog.dom.getWindow();
    if (goog.isDef(win.devicePixelRatio)) {
        return win.devicePixelRatio;
    }
    else if (win.matchMedia) {
        return goog.dom.matchesPixelRatio_(3) || goog.dom.matchesPixelRatio_(2) ||
            goog.dom.matchesPixelRatio_(1.5) || goog.dom.matchesPixelRatio_(1) ||
            .75;
    }
    return 1;
};
goog.dom.matchesPixelRatio_ = function (pixelRatio) {
    var win = goog.dom.getWindow();
    var dpiPerDppx = 96;
    var query = '(min-resolution: ' + pixelRatio + 'dppx),' +
        '(min--moz-device-pixel-ratio: ' + pixelRatio + '),' +
        '(min-resolution: ' + (pixelRatio * dpiPerDppx) + 'dpi)';
    return win.matchMedia(query).matches ? pixelRatio : 0;
};
goog.dom.getCanvasContext2D = function (canvas) {
    return (canvas.getContext('2d'));
};
goog.dom.DomHelper = function (opt_document) {
    this.document_ = opt_document || goog.global.document || document;
};
goog.dom.DomHelper.prototype.getDomHelper = goog.dom.getDomHelper;
goog.dom.DomHelper.prototype.setDocument = function (document) {
    this.document_ = document;
};
goog.dom.DomHelper.prototype.getDocument = function () {
    return this.document_;
};
goog.dom.DomHelper.prototype.getElement = function (element) {
    return goog.dom.getElementHelper_(this.document_, element);
};
goog.dom.DomHelper.prototype.getRequiredElement = function (id) {
    return goog.dom.getRequiredElementHelper_(this.document_, id);
};
goog.dom.DomHelper.prototype.$ = goog.dom.DomHelper.prototype.getElement;
goog.dom.DomHelper.prototype.getElementsByTagName =
    function (tagName, opt_parent) {
        var parent = opt_parent || this.document_;
        return parent.getElementsByTagName(String(tagName));
    };
goog.dom.DomHelper.prototype.getElementsByTagNameAndClass = function (opt_tag, opt_class, opt_el) {
    return goog.dom.getElementsByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementByTagNameAndClass = function (opt_tag, opt_class, opt_el) {
    return goog.dom.getElementByTagNameAndClass_(this.document_, opt_tag, opt_class, opt_el);
};
goog.dom.DomHelper.prototype.getElementsByClass = function (className, opt_el) {
    var doc = opt_el || this.document_;
    return goog.dom.getElementsByClass(className, doc);
};
goog.dom.DomHelper.prototype.getElementByClass = function (className, opt_el) {
    var doc = opt_el || this.document_;
    return goog.dom.getElementByClass(className, doc);
};
goog.dom.DomHelper.prototype.getRequiredElementByClass = function (className, opt_root) {
    var root = opt_root || this.document_;
    return goog.dom.getRequiredElementByClass(className, root);
};
goog.dom.DomHelper.prototype.$$ =
    goog.dom.DomHelper.prototype.getElementsByTagNameAndClass;
goog.dom.DomHelper.prototype.setProperties = goog.dom.setProperties;
goog.dom.DomHelper.prototype.getViewportSize = function (opt_window) {
    return goog.dom.getViewportSize(opt_window || this.getWindow());
};
goog.dom.DomHelper.prototype.getDocumentHeight = function () {
    return goog.dom.getDocumentHeight_(this.getWindow());
};
goog.dom.Appendable;
goog.dom.DomHelper.prototype.createDom = function (tagName, opt_attributes, var_args) {
    return goog.dom.createDom_(this.document_, arguments);
};
goog.dom.DomHelper.prototype.$dom = goog.dom.DomHelper.prototype.createDom;
goog.dom.DomHelper.prototype.createElement = function (name) {
    return goog.dom.createElement_(this.document_, name);
};
goog.dom.DomHelper.prototype.createTextNode = function (content) {
    return this.document_.createTextNode(String(content));
};
goog.dom.DomHelper.prototype.createTable = function (rows, columns, opt_fillWithNbsp) {
    return goog.dom.createTable_(this.document_, rows, columns, !!opt_fillWithNbsp);
};
goog.dom.DomHelper.prototype.safeHtmlToNode = function (html) {
    return goog.dom.safeHtmlToNode_(this.document_, html);
};
goog.dom.DomHelper.prototype.isCss1CompatMode = function () {
    return goog.dom.isCss1CompatMode_(this.document_);
};
goog.dom.DomHelper.prototype.getWindow = function () {
    return goog.dom.getWindow_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScrollElement = function () {
    return goog.dom.getDocumentScrollElement_(this.document_);
};
goog.dom.DomHelper.prototype.getDocumentScroll = function () {
    return goog.dom.getDocumentScroll_(this.document_);
};
goog.dom.DomHelper.prototype.getActiveElement = function (opt_doc) {
    return goog.dom.getActiveElement(opt_doc || this.document_);
};
goog.dom.DomHelper.prototype.appendChild = goog.dom.appendChild;
goog.dom.DomHelper.prototype.append = goog.dom.append;
goog.dom.DomHelper.prototype.canHaveChildren = goog.dom.canHaveChildren;
goog.dom.DomHelper.prototype.removeChildren = goog.dom.removeChildren;
goog.dom.DomHelper.prototype.insertSiblingBefore = goog.dom.insertSiblingBefore;
goog.dom.DomHelper.prototype.insertSiblingAfter = goog.dom.insertSiblingAfter;
goog.dom.DomHelper.prototype.insertChildAt = goog.dom.insertChildAt;
goog.dom.DomHelper.prototype.removeNode = goog.dom.removeNode;
goog.dom.DomHelper.prototype.replaceNode = goog.dom.replaceNode;
goog.dom.DomHelper.prototype.flattenElement = goog.dom.flattenElement;
goog.dom.DomHelper.prototype.getChildren = goog.dom.getChildren;
goog.dom.DomHelper.prototype.getFirstElementChild =
    goog.dom.getFirstElementChild;
goog.dom.DomHelper.prototype.getLastElementChild = goog.dom.getLastElementChild;
goog.dom.DomHelper.prototype.getNextElementSibling =
    goog.dom.getNextElementSibling;
goog.dom.DomHelper.prototype.getPreviousElementSibling =
    goog.dom.getPreviousElementSibling;
goog.dom.DomHelper.prototype.getNextNode = goog.dom.getNextNode;
goog.dom.DomHelper.prototype.getPreviousNode = goog.dom.getPreviousNode;
goog.dom.DomHelper.prototype.isNodeLike = goog.dom.isNodeLike;
goog.dom.DomHelper.prototype.isElement = goog.dom.isElement;
goog.dom.DomHelper.prototype.isWindow = goog.dom.isWindow;
goog.dom.DomHelper.prototype.getParentElement = goog.dom.getParentElement;
goog.dom.DomHelper.prototype.contains = goog.dom.contains;
goog.dom.DomHelper.prototype.compareNodeOrder = goog.dom.compareNodeOrder;
goog.dom.DomHelper.prototype.findCommonAncestor = goog.dom.findCommonAncestor;
goog.dom.DomHelper.prototype.getOwnerDocument = goog.dom.getOwnerDocument;
goog.dom.DomHelper.prototype.getFrameContentDocument =
    goog.dom.getFrameContentDocument;
goog.dom.DomHelper.prototype.getFrameContentWindow =
    goog.dom.getFrameContentWindow;
goog.dom.DomHelper.prototype.setTextContent = goog.dom.setTextContent;
goog.dom.DomHelper.prototype.getOuterHtml = goog.dom.getOuterHtml;
goog.dom.DomHelper.prototype.findNode = goog.dom.findNode;
goog.dom.DomHelper.prototype.findNodes = goog.dom.findNodes;
goog.dom.DomHelper.prototype.isFocusableTabIndex = goog.dom.isFocusableTabIndex;
goog.dom.DomHelper.prototype.setFocusableTabIndex =
    goog.dom.setFocusableTabIndex;
goog.dom.DomHelper.prototype.isFocusable = goog.dom.isFocusable;
goog.dom.DomHelper.prototype.getTextContent = goog.dom.getTextContent;
goog.dom.DomHelper.prototype.getNodeTextLength = goog.dom.getNodeTextLength;
goog.dom.DomHelper.prototype.getNodeTextOffset = goog.dom.getNodeTextOffset;
goog.dom.DomHelper.prototype.getNodeAtOffset = goog.dom.getNodeAtOffset;
goog.dom.DomHelper.prototype.isNodeList = goog.dom.isNodeList;
goog.dom.DomHelper.prototype.getAncestorByTagNameAndClass =
    goog.dom.getAncestorByTagNameAndClass;
goog.dom.DomHelper.prototype.getAncestorByClass = goog.dom.getAncestorByClass;
goog.dom.DomHelper.prototype.getAncestor = goog.dom.getAncestor;
goog.dom.DomHelper.prototype.getCanvasContext2D = goog.dom.getCanvasContext2D;
goog.provide('goog.dom.HtmlElement');
goog.dom.HtmlElement = function () { };
goog.provide('goog.dom.TagIterator');
goog.provide('goog.dom.TagWalkType');
goog.require('goog.dom');
goog.require('goog.dom.NodeType');
goog.require('goog.iter.Iterator');
goog.require('goog.iter.StopIteration');
goog.dom.TagWalkType = {
    START_TAG: 1,
    OTHER: 0,
    END_TAG: -1
};
goog.dom.TagIterator = function (opt_node, opt_reversed, opt_unconstrained, opt_tagType, opt_depth) {
    this.reversed = !!opt_reversed;
    this.node = null;
    this.tagType = goog.dom.TagWalkType.OTHER;
    this.depth;
    this.started_ = false;
    this.constrained = !opt_unconstrained;
    if (opt_node) {
        this.setPosition(opt_node, opt_tagType);
    }
    this.depth = opt_depth != undefined ? opt_depth : this.tagType || 0;
    if (this.reversed) {
        this.depth *= -1;
    }
};
goog.inherits(goog.dom.TagIterator, goog.iter.Iterator);
goog.dom.TagIterator.prototype.setPosition = function (node, opt_tagType, opt_depth) {
    this.node = node;
    if (node) {
        if (goog.isNumber(opt_tagType)) {
            this.tagType = opt_tagType;
        }
        else {
            this.tagType = this.node.nodeType != goog.dom.NodeType.ELEMENT ?
                goog.dom.TagWalkType.OTHER :
                this.reversed ? goog.dom.TagWalkType.END_TAG :
                    goog.dom.TagWalkType.START_TAG;
        }
    }
    if (goog.isNumber(opt_depth)) {
        this.depth = opt_depth;
    }
};
goog.dom.TagIterator.prototype.copyFrom = function (other) {
    this.node = other.node;
    this.tagType = other.tagType;
    this.depth = other.depth;
    this.reversed = other.reversed;
    this.constrained = other.constrained;
};
goog.dom.TagIterator.prototype.clone = function () {
    return new goog.dom.TagIterator(this.node, this.reversed, !this.constrained, this.tagType, this.depth);
};
goog.dom.TagIterator.prototype.skipTag = function () {
    var check = this.reversed ? goog.dom.TagWalkType.END_TAG :
        goog.dom.TagWalkType.START_TAG;
    if (this.tagType == check) {
        this.tagType = (check * -1);
        this.depth += this.tagType * (this.reversed ? -1 : 1);
    }
};
goog.dom.TagIterator.prototype.restartTag = function () {
    var check = this.reversed ? goog.dom.TagWalkType.START_TAG :
        goog.dom.TagWalkType.END_TAG;
    if (this.tagType == check) {
        this.tagType = (check * -1);
        this.depth += this.tagType * (this.reversed ? -1 : 1);
    }
};
goog.dom.TagIterator.prototype.next = function () {
    var node;
    if (this.started_) {
        if (!this.node || this.constrained && this.depth == 0) {
            throw goog.iter.StopIteration;
        }
        node = this.node;
        var startType = this.reversed ? goog.dom.TagWalkType.END_TAG :
            goog.dom.TagWalkType.START_TAG;
        if (this.tagType == startType) {
            var child = this.reversed ? node.lastChild : node.firstChild;
            if (child) {
                this.setPosition(child);
            }
            else {
                this.setPosition(node, (startType * -1));
            }
        }
        else {
            var sibling = this.reversed ? node.previousSibling : node.nextSibling;
            if (sibling) {
                this.setPosition(sibling);
            }
            else {
                this.setPosition(node.parentNode, (startType * -1));
            }
        }
        this.depth += this.tagType * (this.reversed ? -1 : 1);
    }
    else {
        this.started_ = true;
    }
    node = this.node;
    if (!this.node) {
        throw goog.iter.StopIteration;
    }
    return node;
};
goog.dom.TagIterator.prototype.isStarted = function () {
    return this.started_;
};
goog.dom.TagIterator.prototype.isStartTag = function () {
    return this.tagType == goog.dom.TagWalkType.START_TAG;
};
goog.dom.TagIterator.prototype.isEndTag = function () {
    return this.tagType == goog.dom.TagWalkType.END_TAG;
};
goog.dom.TagIterator.prototype.isNonElement = function () {
    return this.tagType == goog.dom.TagWalkType.OTHER;
};
goog.dom.TagIterator.prototype.equals = function (other) {
    return other.node == this.node &&
        (!this.node || other.tagType == this.tagType);
};
goog.dom.TagIterator.prototype.splice = function (var_args) {
    var node = this.node;
    this.restartTag();
    this.reversed = !this.reversed;
    goog.dom.TagIterator.prototype.next.call(this);
    this.reversed = !this.reversed;
    var arr = goog.isArrayLike(arguments[0]) ? arguments[0] : arguments;
    for (var i = arr.length - 1; i >= 0; i--) {
        goog.dom.insertSiblingAfter(arr[i], node);
    }
    goog.dom.removeNode(node);
};
goog.provide('goog.dom.NodeIterator');
goog.require('goog.dom.TagIterator');
goog.dom.NodeIterator = function (opt_node, opt_reversed, opt_unconstrained, opt_depth) {
    goog.dom.TagIterator.call(this, opt_node, opt_reversed, opt_unconstrained, null, opt_depth);
};
goog.inherits(goog.dom.NodeIterator, goog.dom.TagIterator);
goog.dom.NodeIterator.prototype.next = function () {
    do {
        goog.dom.NodeIterator.superClass_.next.call(this);
    } while (this.isEndTag());
    return this.node;
};
goog.provide('goog.dom.NodeType');
goog.dom.NodeType = {
    ELEMENT: 1,
    ATTRIBUTE: 2,
    TEXT: 3,
    CDATA_SECTION: 4,
    ENTITY_REFERENCE: 5,
    ENTITY: 6,
    PROCESSING_INSTRUCTION: 7,
    COMMENT: 8,
    DOCUMENT: 9,
    DOCUMENT_TYPE: 10,
    DOCUMENT_FRAGMENT: 11,
    NOTATION: 12
};
goog.provide('goog.dom.safe');
goog.provide('goog.dom.safe.InsertAdjacentHtmlPosition');
goog.require('goog.asserts');
goog.require('goog.dom.asserts');
goog.require('goog.html.SafeHtml');
goog.require('goog.html.SafeScript');
goog.require('goog.html.SafeStyle');
goog.require('goog.html.SafeUrl');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.dom.safe.InsertAdjacentHtmlPosition = {
    AFTERBEGIN: 'afterbegin',
    AFTEREND: 'afterend',
    BEFOREBEGIN: 'beforebegin',
    BEFOREEND: 'beforeend'
};
goog.dom.safe.insertAdjacentHtml = function (node, position, html) {
    node.insertAdjacentHTML(position, goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_ = {
    'MATH': true,
    'SCRIPT': true,
    'STYLE': true,
    'SVG': true,
    'TEMPLATE': true
};
goog.dom.safe.setInnerHtml = function (elem, html) {
    if (goog.asserts.ENABLE_ASSERTS) {
        var tagName = elem.tagName.toUpperCase();
        if (goog.dom.safe.SET_INNER_HTML_DISALLOWED_TAGS_[tagName]) {
            throw new Error('goog.dom.safe.setInnerHtml cannot be used to set content of ' +
                elem.tagName + '.');
        }
    }
    elem.innerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setOuterHtml = function (elem, html) {
    elem.outerHTML = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setFormElementAction = function (form, url) {
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    goog.dom.asserts.assertIsHTMLFormElement(form).action =
        goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setButtonFormAction = function (button, url) {
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    goog.dom.asserts.assertIsHTMLButtonElement(button).formAction =
        goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setInputFormAction = function (input, url) {
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    goog.dom.asserts.assertIsHTMLInputElement(input).formAction =
        goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setStyle = function (elem, style) {
    elem.style.cssText = goog.html.SafeStyle.unwrap(style);
};
goog.dom.safe.documentWrite = function (doc, html) {
    doc.write(goog.html.SafeHtml.unwrap(html));
};
goog.dom.safe.setAnchorHref = function (anchor, url) {
    goog.dom.asserts.assertIsHTMLAnchorElement(anchor);
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    anchor.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setImageSrc = function (imageElement, url) {
    goog.dom.asserts.assertIsHTMLImageElement(imageElement);
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    imageElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setVideoSrc = function (videoElement, url) {
    goog.dom.asserts.assertIsHTMLVideoElement(videoElement);
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    videoElement.src = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.setEmbedSrc = function (embed, url) {
    goog.dom.asserts.assertIsHTMLEmbedElement(embed);
    embed.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setFrameSrc = function (frame, url) {
    goog.dom.asserts.assertIsHTMLFrameElement(frame);
    frame.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrc = function (iframe, url) {
    goog.dom.asserts.assertIsHTMLIFrameElement(iframe);
    iframe.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setIframeSrcdoc = function (iframe, html) {
    goog.dom.asserts.assertIsHTMLIFrameElement(iframe);
    iframe.srcdoc = goog.html.SafeHtml.unwrap(html);
};
goog.dom.safe.setLinkHrefAndRel = function (link, url, rel) {
    goog.dom.asserts.assertIsHTMLLinkElement(link);
    link.rel = rel;
    if (goog.string.caseInsensitiveContains(rel, 'stylesheet')) {
        goog.asserts.assert(url instanceof goog.html.TrustedResourceUrl, 'URL must be TrustedResourceUrl because "rel" contains "stylesheet"');
        link.href = goog.html.TrustedResourceUrl.unwrap(url);
    }
    else if (url instanceof goog.html.TrustedResourceUrl) {
        link.href = goog.html.TrustedResourceUrl.unwrap(url);
    }
    else if (url instanceof goog.html.SafeUrl) {
        link.href = goog.html.SafeUrl.unwrap(url);
    }
    else {
        link.href =
            goog.html.SafeUrl.sanitizeAssertUnchanged(url).getTypedStringValue();
    }
};
goog.dom.safe.setObjectData = function (object, url) {
    goog.dom.asserts.assertIsHTMLObjectElement(object);
    object.data = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptSrc = function (script, url) {
    goog.dom.asserts.assertIsHTMLScriptElement(script);
    script.src = goog.html.TrustedResourceUrl.unwrap(url);
};
goog.dom.safe.setScriptContent = function (script, content) {
    goog.dom.asserts.assertIsHTMLScriptElement(script);
    script.text = goog.html.SafeScript.unwrap(content);
};
goog.dom.safe.setLocationHref = function (loc, url) {
    goog.dom.asserts.assertIsLocation(loc);
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    loc.href = goog.html.SafeUrl.unwrap(safeUrl);
};
goog.dom.safe.replaceLocation = function (loc, url) {
    goog.dom.asserts.assertIsLocation(loc);
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    loc.replace(goog.html.SafeUrl.unwrap(safeUrl));
};
goog.dom.safe.openInWindow = function (url, opt_openerWin, opt_name, opt_specs, opt_replace) {
    var safeUrl;
    if (url instanceof goog.html.SafeUrl) {
        safeUrl = url;
    }
    else {
        safeUrl = goog.html.SafeUrl.sanitizeAssertUnchanged(url);
    }
    var win = opt_openerWin || window;
    return win.open(goog.html.SafeUrl.unwrap(safeUrl), opt_name ? goog.string.Const.unwrap(opt_name) : '', opt_specs, opt_replace);
};
goog.provide('goog.dom.TagName');
goog.require('goog.dom.HtmlElement');
goog.dom.TagName = function (tagName) {
    this.tagName_ = tagName;
};
goog.dom.TagName.prototype.toString = function () {
    return this.tagName_;
};
goog.dom.TagName.A = new goog.dom.TagName('A');
goog.dom.TagName.ABBR = new goog.dom.TagName('ABBR');
goog.dom.TagName.ACRONYM = new goog.dom.TagName('ACRONYM');
goog.dom.TagName.ADDRESS = new goog.dom.TagName('ADDRESS');
goog.dom.TagName.APPLET = new goog.dom.TagName('APPLET');
goog.dom.TagName.AREA = new goog.dom.TagName('AREA');
goog.dom.TagName.ARTICLE = new goog.dom.TagName('ARTICLE');
goog.dom.TagName.ASIDE = new goog.dom.TagName('ASIDE');
goog.dom.TagName.AUDIO = new goog.dom.TagName('AUDIO');
goog.dom.TagName.B = new goog.dom.TagName('B');
goog.dom.TagName.BASE = new goog.dom.TagName('BASE');
goog.dom.TagName.BASEFONT = new goog.dom.TagName('BASEFONT');
goog.dom.TagName.BDI = new goog.dom.TagName('BDI');
goog.dom.TagName.BDO = new goog.dom.TagName('BDO');
goog.dom.TagName.BIG = new goog.dom.TagName('BIG');
goog.dom.TagName.BLOCKQUOTE = new goog.dom.TagName('BLOCKQUOTE');
goog.dom.TagName.BODY = new goog.dom.TagName('BODY');
goog.dom.TagName.BR = new goog.dom.TagName('BR');
goog.dom.TagName.BUTTON = new goog.dom.TagName('BUTTON');
goog.dom.TagName.CANVAS = new goog.dom.TagName('CANVAS');
goog.dom.TagName.CAPTION = new goog.dom.TagName('CAPTION');
goog.dom.TagName.CENTER = new goog.dom.TagName('CENTER');
goog.dom.TagName.CITE = new goog.dom.TagName('CITE');
goog.dom.TagName.CODE = new goog.dom.TagName('CODE');
goog.dom.TagName.COL = new goog.dom.TagName('COL');
goog.dom.TagName.COLGROUP = new goog.dom.TagName('COLGROUP');
goog.dom.TagName.COMMAND = new goog.dom.TagName('COMMAND');
goog.dom.TagName.DATA = new goog.dom.TagName('DATA');
goog.dom.TagName.DATALIST = new goog.dom.TagName('DATALIST');
goog.dom.TagName.DD = new goog.dom.TagName('DD');
goog.dom.TagName.DEL = new goog.dom.TagName('DEL');
goog.dom.TagName.DETAILS = new goog.dom.TagName('DETAILS');
goog.dom.TagName.DFN = new goog.dom.TagName('DFN');
goog.dom.TagName.DIALOG = new goog.dom.TagName('DIALOG');
goog.dom.TagName.DIR = new goog.dom.TagName('DIR');
goog.dom.TagName.DIV = new goog.dom.TagName('DIV');
goog.dom.TagName.DL = new goog.dom.TagName('DL');
goog.dom.TagName.DT = new goog.dom.TagName('DT');
goog.dom.TagName.EM = new goog.dom.TagName('EM');
goog.dom.TagName.EMBED = new goog.dom.TagName('EMBED');
goog.dom.TagName.FIELDSET = new goog.dom.TagName('FIELDSET');
goog.dom.TagName.FIGCAPTION = new goog.dom.TagName('FIGCAPTION');
goog.dom.TagName.FIGURE = new goog.dom.TagName('FIGURE');
goog.dom.TagName.FONT = new goog.dom.TagName('FONT');
goog.dom.TagName.FOOTER = new goog.dom.TagName('FOOTER');
goog.dom.TagName.FORM = new goog.dom.TagName('FORM');
goog.dom.TagName.FRAME = new goog.dom.TagName('FRAME');
goog.dom.TagName.FRAMESET = new goog.dom.TagName('FRAMESET');
goog.dom.TagName.H1 = new goog.dom.TagName('H1');
goog.dom.TagName.H2 = new goog.dom.TagName('H2');
goog.dom.TagName.H3 = new goog.dom.TagName('H3');
goog.dom.TagName.H4 = new goog.dom.TagName('H4');
goog.dom.TagName.H5 = new goog.dom.TagName('H5');
goog.dom.TagName.H6 = new goog.dom.TagName('H6');
goog.dom.TagName.HEAD = new goog.dom.TagName('HEAD');
goog.dom.TagName.HEADER = new goog.dom.TagName('HEADER');
goog.dom.TagName.HGROUP = new goog.dom.TagName('HGROUP');
goog.dom.TagName.HR = new goog.dom.TagName('HR');
goog.dom.TagName.HTML = new goog.dom.TagName('HTML');
goog.dom.TagName.I = new goog.dom.TagName('I');
goog.dom.TagName.IFRAME = new goog.dom.TagName('IFRAME');
goog.dom.TagName.IMG = new goog.dom.TagName('IMG');
goog.dom.TagName.INPUT = new goog.dom.TagName('INPUT');
goog.dom.TagName.INS = new goog.dom.TagName('INS');
goog.dom.TagName.ISINDEX = new goog.dom.TagName('ISINDEX');
goog.dom.TagName.KBD = new goog.dom.TagName('KBD');
goog.dom.TagName.KEYGEN = new goog.dom.TagName('KEYGEN');
goog.dom.TagName.LABEL = new goog.dom.TagName('LABEL');
goog.dom.TagName.LEGEND = new goog.dom.TagName('LEGEND');
goog.dom.TagName.LI = new goog.dom.TagName('LI');
goog.dom.TagName.LINK = new goog.dom.TagName('LINK');
goog.dom.TagName.MAIN = new goog.dom.TagName('MAIN');
goog.dom.TagName.MAP = new goog.dom.TagName('MAP');
goog.dom.TagName.MARK = new goog.dom.TagName('MARK');
goog.dom.TagName.MATH = new goog.dom.TagName('MATH');
goog.dom.TagName.MENU = new goog.dom.TagName('MENU');
goog.dom.TagName.MENUITEM = new goog.dom.TagName('MENUITEM');
goog.dom.TagName.META = new goog.dom.TagName('META');
goog.dom.TagName.METER = new goog.dom.TagName('METER');
goog.dom.TagName.NAV = new goog.dom.TagName('NAV');
goog.dom.TagName.NOFRAMES = new goog.dom.TagName('NOFRAMES');
goog.dom.TagName.NOSCRIPT = new goog.dom.TagName('NOSCRIPT');
goog.dom.TagName.OBJECT = new goog.dom.TagName('OBJECT');
goog.dom.TagName.OL = new goog.dom.TagName('OL');
goog.dom.TagName.OPTGROUP = new goog.dom.TagName('OPTGROUP');
goog.dom.TagName.OPTION = new goog.dom.TagName('OPTION');
goog.dom.TagName.OUTPUT = new goog.dom.TagName('OUTPUT');
goog.dom.TagName.P = new goog.dom.TagName('P');
goog.dom.TagName.PARAM = new goog.dom.TagName('PARAM');
goog.dom.TagName.PICTURE = new goog.dom.TagName('PICTURE');
goog.dom.TagName.PRE = new goog.dom.TagName('PRE');
goog.dom.TagName.PROGRESS = new goog.dom.TagName('PROGRESS');
goog.dom.TagName.Q = new goog.dom.TagName('Q');
goog.dom.TagName.RP = new goog.dom.TagName('RP');
goog.dom.TagName.RT = new goog.dom.TagName('RT');
goog.dom.TagName.RTC = new goog.dom.TagName('RTC');
goog.dom.TagName.RUBY = new goog.dom.TagName('RUBY');
goog.dom.TagName.S = new goog.dom.TagName('S');
goog.dom.TagName.SAMP = new goog.dom.TagName('SAMP');
goog.dom.TagName.SCRIPT = new goog.dom.TagName('SCRIPT');
goog.dom.TagName.SECTION = new goog.dom.TagName('SECTION');
goog.dom.TagName.SELECT = new goog.dom.TagName('SELECT');
goog.dom.TagName.SMALL = new goog.dom.TagName('SMALL');
goog.dom.TagName.SOURCE = new goog.dom.TagName('SOURCE');
goog.dom.TagName.SPAN = new goog.dom.TagName('SPAN');
goog.dom.TagName.STRIKE = new goog.dom.TagName('STRIKE');
goog.dom.TagName.STRONG = new goog.dom.TagName('STRONG');
goog.dom.TagName.STYLE = new goog.dom.TagName('STYLE');
goog.dom.TagName.SUB = new goog.dom.TagName('SUB');
goog.dom.TagName.SUMMARY = new goog.dom.TagName('SUMMARY');
goog.dom.TagName.SUP = new goog.dom.TagName('SUP');
goog.dom.TagName.SVG = new goog.dom.TagName('SVG');
goog.dom.TagName.TABLE = new goog.dom.TagName('TABLE');
goog.dom.TagName.TBODY = new goog.dom.TagName('TBODY');
goog.dom.TagName.TD = new goog.dom.TagName('TD');
goog.dom.TagName.TEMPLATE = new goog.dom.TagName('TEMPLATE');
goog.dom.TagName.TEXTAREA = new goog.dom.TagName('TEXTAREA');
goog.dom.TagName.TFOOT = new goog.dom.TagName('TFOOT');
goog.dom.TagName.TH = new goog.dom.TagName('TH');
goog.dom.TagName.THEAD = new goog.dom.TagName('THEAD');
goog.dom.TagName.TIME = new goog.dom.TagName('TIME');
goog.dom.TagName.TITLE = new goog.dom.TagName('TITLE');
goog.dom.TagName.TR = new goog.dom.TagName('TR');
goog.dom.TagName.TRACK = new goog.dom.TagName('TRACK');
goog.dom.TagName.TT = new goog.dom.TagName('TT');
goog.dom.TagName.U = new goog.dom.TagName('U');
goog.dom.TagName.UL = new goog.dom.TagName('UL');
goog.dom.TagName.VAR = new goog.dom.TagName('VAR');
goog.dom.TagName.VIDEO = new goog.dom.TagName('VIDEO');
goog.dom.TagName.WBR = new goog.dom.TagName('WBR');
goog.provide('goog.dom.tags');
goog.require('goog.object');
goog.dom.tags.VOID_TAGS_ = goog.object.createSet('area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr');
goog.dom.tags.isVoidTag = function (tagName) {
    return goog.dom.tags.VOID_TAGS_[tagName] === true;
};
goog.provide('goog.dom.vendor');
goog.require('goog.string');
goog.require('goog.userAgent');
goog.dom.vendor.getVendorJsPrefix = function () {
    if (goog.userAgent.WEBKIT) {
        return 'Webkit';
    }
    else if (goog.userAgent.GECKO) {
        return 'Moz';
    }
    else if (goog.userAgent.IE) {
        return 'ms';
    }
    else if (goog.userAgent.OPERA) {
        return 'O';
    }
    return null;
};
goog.dom.vendor.getVendorPrefix = function () {
    if (goog.userAgent.WEBKIT) {
        return '-webkit';
    }
    else if (goog.userAgent.GECKO) {
        return '-moz';
    }
    else if (goog.userAgent.IE) {
        return '-ms';
    }
    else if (goog.userAgent.OPERA) {
        return '-o';
    }
    return null;
};
goog.dom.vendor.getPrefixedPropertyName = function (propertyName, opt_object) {
    if (opt_object && propertyName in opt_object) {
        return propertyName;
    }
    var prefix = goog.dom.vendor.getVendorJsPrefix();
    if (prefix) {
        prefix = prefix.toLowerCase();
        var prefixedPropertyName = prefix + goog.string.toTitleCase(propertyName);
        return (!goog.isDef(opt_object) || prefixedPropertyName in opt_object) ?
            prefixedPropertyName :
            null;
    }
    return null;
};
goog.dom.vendor.getPrefixedEventType = function (eventType) {
    var prefix = goog.dom.vendor.getVendorJsPrefix() || '';
    return (prefix + eventType).toLowerCase();
};
goog.provide('goog.events.Event');
goog.provide('goog.events.EventLike');
goog.require('goog.Disposable');
goog.require('goog.events.EventId');
goog.events.EventLike;
goog.events.Event = function (type, opt_target) {
    this.type = type instanceof goog.events.EventId ? String(type) : type;
    this.target = opt_target;
    this.currentTarget = this.target;
    this.propagationStopped_ = false;
    this.defaultPrevented = false;
    this.returnValue_ = true;
};
goog.events.Event.prototype.stopPropagation = function () {
    this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function () {
    this.defaultPrevented = true;
    this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function (e) {
    e.stopPropagation();
};
goog.events.Event.preventDefault = function (e) {
    e.preventDefault();
};
goog.provide('goog.events.BrowserEvent');
goog.provide('goog.events.BrowserEvent.MouseButton');
goog.provide('goog.events.BrowserEvent.PointerType');
goog.require('goog.debug');
goog.require('goog.events.BrowserFeature');
goog.require('goog.events.Event');
goog.require('goog.events.EventType');
goog.require('goog.reflect');
goog.require('goog.userAgent');
goog.events.BrowserEvent = function (opt_e, opt_currentTarget) {
    goog.events.BrowserEvent.base(this, 'constructor', opt_e ? opt_e.type : '');
    this.target = null;
    this.currentTarget = null;
    this.relatedTarget = null;
    this.offsetX = 0;
    this.offsetY = 0;
    this.clientX = 0;
    this.clientY = 0;
    this.screenX = 0;
    this.screenY = 0;
    this.button = 0;
    this.key = '';
    this.keyCode = 0;
    this.charCode = 0;
    this.ctrlKey = false;
    this.altKey = false;
    this.shiftKey = false;
    this.metaKey = false;
    this.state = null;
    this.platformModifierKey = false;
    this.pointerId = 0;
    this.pointerType = '';
    this.event_ = null;
    if (opt_e) {
        this.init(opt_e, opt_currentTarget);
    }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {
    LEFT: 0,
    MIDDLE: 1,
    RIGHT: 2
};
goog.events.BrowserEvent.PointerType = {
    MOUSE: 'mouse',
    PEN: 'pen',
    TOUCH: 'touch'
};
goog.events.BrowserEvent.IEButtonMap = goog.debug.freeze([
    1,
    4,
    2
]);
goog.events.BrowserEvent.IE_BUTTON_MAP = goog.events.BrowserEvent.IEButtonMap;
goog.events.BrowserEvent.IE_POINTER_TYPE_MAP = goog.debug.freeze({
    2: goog.events.BrowserEvent.PointerType.TOUCH,
    3: goog.events.BrowserEvent.PointerType.PEN,
    4: goog.events.BrowserEvent.PointerType.MOUSE
});
goog.events.BrowserEvent.prototype.init = function (e, opt_currentTarget) {
    var type = this.type = e.type;
    var relevantTouch = e.changedTouches ? e.changedTouches[0] : null;
    this.target = (e.target) || e.srcElement;
    this.currentTarget = (opt_currentTarget);
    var relatedTarget = (e.relatedTarget);
    if (relatedTarget) {
        if (goog.userAgent.GECKO) {
            if (!goog.reflect.canAccessProperty(relatedTarget, 'nodeName')) {
                relatedTarget = null;
            }
        }
    }
    else if (type == goog.events.EventType.MOUSEOVER) {
        relatedTarget = e.fromElement;
    }
    else if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
    }
    this.relatedTarget = relatedTarget;
    if (!goog.isNull(relevantTouch)) {
        this.clientX = relevantTouch.clientX !== undefined ? relevantTouch.clientX :
            relevantTouch.pageX;
        this.clientY = relevantTouch.clientY !== undefined ? relevantTouch.clientY :
            relevantTouch.pageY;
        this.screenX = relevantTouch.screenX || 0;
        this.screenY = relevantTouch.screenY || 0;
    }
    else {
        this.offsetX = (goog.userAgent.WEBKIT || e.offsetX !== undefined) ?
            e.offsetX :
            e.layerX;
        this.offsetY = (goog.userAgent.WEBKIT || e.offsetY !== undefined) ?
            e.offsetY :
            e.layerY;
        this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
        this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
        this.screenX = e.screenX || 0;
        this.screenY = e.screenY || 0;
    }
    this.button = e.button;
    this.keyCode = e.keyCode || 0;
    this.key = e.key || '';
    this.charCode = e.charCode || (type == 'keypress' ? e.keyCode : 0);
    this.ctrlKey = e.ctrlKey;
    this.altKey = e.altKey;
    this.shiftKey = e.shiftKey;
    this.metaKey = e.metaKey;
    this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
    this.pointerId = e.pointerId || 0;
    this.pointerType = goog.events.BrowserEvent.getPointerType_(e);
    this.state = e.state;
    this.event_ = e;
    if (e.defaultPrevented) {
        this.preventDefault();
    }
};
goog.events.BrowserEvent.prototype.isButton = function (button) {
    if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
        if (this.type == 'click') {
            return button == goog.events.BrowserEvent.MouseButton.LEFT;
        }
        else {
            return !!(this.event_.button & goog.events.BrowserEvent.IE_BUTTON_MAP[button]);
        }
    }
    else {
        return this.event_.button == button;
    }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function () {
    return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) &&
        !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function () {
    goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
    if (this.event_.stopPropagation) {
        this.event_.stopPropagation();
    }
    else {
        this.event_.cancelBubble = true;
    }
};
goog.events.BrowserEvent.prototype.preventDefault = function () {
    goog.events.BrowserEvent.superClass_.preventDefault.call(this);
    var be = this.event_;
    if (!be.preventDefault) {
        be.returnValue = false;
        if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
            try {
                var VK_F1 = 112;
                var VK_F12 = 123;
                if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
                    be.keyCode = -1;
                }
            }
            catch (ex) {
            }
        }
    }
    else {
        be.preventDefault();
    }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function () {
    return this.event_;
};
goog.events.BrowserEvent.getPointerType_ = function (e) {
    if (goog.isString(e.pointerType)) {
        return e.pointerType;
    }
    return goog.events.BrowserEvent.IE_POINTER_TYPE_MAP[e.pointerType] || '';
};
goog.provide('goog.events.BrowserFeature');
goog.require('goog.userAgent');
goog.scope(function () {
    goog.events.BrowserFeature = {
        HAS_W3C_BUTTON: !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),
        HAS_W3C_EVENT_SUPPORT: !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9),
        SET_KEY_CODE_TO_PREVENT_DEFAULT: goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9'),
        HAS_NAVIGATOR_ONLINE_PROPERTY: !goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher('528'),
        HAS_HTML5_NETWORK_EVENT_SUPPORT: goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher('1.9b') ||
            goog.userAgent.IE && goog.userAgent.isVersionOrHigher('8') ||
            goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher('9.5') ||
            goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('528'),
        HTML5_NETWORK_EVENTS_FIRE_ON_BODY: goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher('8') ||
            goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('9'),
        TOUCH_ENABLED: ('ontouchstart' in goog.global ||
            !!(goog.global['document'] && document.documentElement &&
                'ontouchstart' in document.documentElement) ||
            !!(goog.global['navigator'] &&
                (goog.global['navigator']['maxTouchPoints'] ||
                    goog.global['navigator']['msMaxTouchPoints']))),
        POINTER_EVENTS: ('PointerEvent' in goog.global),
        MSPOINTER_EVENTS: ('MSPointerEvent' in goog.global &&
            !!(goog.global['navigator'] &&
                goog.global['navigator']['msPointerEnabled'])),
        PASSIVE_EVENTS: purify(function () {
            if (!goog.global.addEventListener || !Object.defineProperty) {
                return false;
            }
            var passive = false;
            var options = Object.defineProperty({}, 'passive', {
                get: function () {
                    passive = true;
                }
            });
            goog.global.addEventListener('test', goog.nullFunction, options);
            goog.global.removeEventListener('test', goog.nullFunction, options);
            return passive;
        })
    };
    function purify(fn) {
        return ({ valueOf: fn }).valueOf();
    }
});
goog.provide('goog.events.EventHandler');
goog.require('goog.Disposable');
goog.require('goog.events');
goog.require('goog.object');
goog.forwardDeclare('goog.events.EventWrapper');
goog.events.EventHandler = function (opt_scope) {
    goog.Disposable.call(this);
    this.handler_ = opt_scope;
    this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function (src, type, opt_fn, opt_options) {
    var self = (this);
    return self.listen_(src, type, opt_fn, opt_options);
};
goog.events.EventHandler.prototype.listenWithScope = function (src, type, fn, options, scope) {
    var self = (this);
    return self.listen_(src, type, fn, options, scope);
};
goog.events.EventHandler.prototype.listen_ = function (src, type, opt_fn, opt_options, opt_scope) {
    var self = (this);
    if (!goog.isArray(type)) {
        if (type) {
            goog.events.EventHandler.typeArray_[0] = type.toString();
        }
        type = goog.events.EventHandler.typeArray_;
    }
    for (var i = 0; i < type.length; i++) {
        var listenerObj = goog.events.listen(src, type[i], opt_fn || self.handleEvent, opt_options || false, opt_scope || self.handler_ || self);
        if (!listenerObj) {
            return self;
        }
        var key = listenerObj.key;
        self.keys_[key] = listenerObj;
    }
    return self;
};
goog.events.EventHandler.prototype.listenOnce = function (src, type, opt_fn, opt_options) {
    var self = (this);
    return self.listenOnce_(src, type, opt_fn, opt_options);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function (src, type, fn, capture, scope) {
    var self = (this);
    return self.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function (src, type, opt_fn, opt_options, opt_scope) {
    var self = (this);
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++) {
            self.listenOnce_(src, type[i], opt_fn, opt_options, opt_scope);
        }
    }
    else {
        var listenerObj = goog.events.listenOnce(src, type, opt_fn || self.handleEvent, opt_options, opt_scope || self.handler_ || self);
        if (!listenerObj) {
            return self;
        }
        var key = listenerObj.key;
        self.keys_[key] = listenerObj;
    }
    return self;
};
goog.events.EventHandler.prototype.listenWithWrapper = function (src, wrapper, listener, opt_capt) {
    var self = (this);
    return self.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function (src, wrapper, listener, capture, scope) {
    var self = (this);
    return self.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function (src, wrapper, listener, opt_capt, opt_scope) {
    var self = (this);
    wrapper.listen(src, listener, opt_capt, opt_scope || self.handler_ || self, self);
    return self;
};
goog.events.EventHandler.prototype.getListenerCount = function () {
    var count = 0;
    for (var key in this.keys_) {
        if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
            count++;
        }
    }
    return count;
};
goog.events.EventHandler.prototype.unlisten = function (src, type, opt_fn, opt_options, opt_scope) {
    var self = (this);
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++) {
            self.unlisten(src, type[i], opt_fn, opt_options, opt_scope);
        }
    }
    else {
        var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
        var listener = goog.events.getListener(src, type, opt_fn || self.handleEvent, capture, opt_scope || self.handler_ || self);
        if (listener) {
            goog.events.unlistenByKey(listener);
            delete self.keys_[listener.key];
        }
    }
    return self;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function (src, wrapper, listener, opt_capt, opt_scope) {
    var self = (this);
    wrapper.unlisten(src, listener, opt_capt, opt_scope || self.handler_ || self, self);
    return self;
};
goog.events.EventHandler.prototype.removeAll = function () {
    goog.object.forEach(this.keys_, function (listenerObj, key) {
        if (this.keys_.hasOwnProperty(key)) {
            goog.events.unlistenByKey(listenerObj);
        }
    }, this);
    this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function () {
    goog.events.EventHandler.superClass_.disposeInternal.call(this);
    this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function (e) {
    throw new Error('EventHandler.handleEvent not implemented');
};
goog.provide('goog.events.EventId');
goog.events.EventId = function (eventId) {
    this.id = eventId;
};
goog.events.EventId.prototype.toString = function () {
    return this.id;
};
goog.provide('goog.events');
goog.provide('goog.events.CaptureSimulationMode');
goog.provide('goog.events.Key');
goog.provide('goog.events.ListenableType');
goog.require('goog.asserts');
goog.require('goog.debug.entryPointRegistry');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.BrowserFeature');
goog.require('goog.events.Listenable');
goog.require('goog.events.ListenerMap');
goog.forwardDeclare('goog.debug.ErrorHandler');
goog.forwardDeclare('goog.events.EventWrapper');
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = 'closure_lm_' + ((Math.random() * 1e6) | 0);
goog.events.onString_ = 'on';
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {
    OFF_AND_FAIL: 0,
    OFF_AND_SILENT: 1,
    ON: 2
};
goog.define('goog.events.CAPTURE_SIMULATION_MODE', 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function (src, type, listener, opt_options, opt_handler) {
    if (opt_options && opt_options.once) {
        return goog.events.listenOnce(src, type, listener, opt_options, opt_handler);
    }
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++) {
            goog.events.listen(src, type[i], listener, opt_options, opt_handler);
        }
        return null;
    }
    listener = goog.events.wrapListener(listener);
    if (goog.events.Listenable.isImplementedBy(src)) {
        var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
        return src.listen((type), listener, capture, opt_handler);
    }
    else {
        return goog.events.listen_((src), type, listener, false, opt_options, opt_handler);
    }
};
goog.events.listen_ = function (src, type, listener, callOnce, opt_options, opt_handler) {
    if (!type) {
        throw new Error('Invalid event type');
    }
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
        if (goog.events.CAPTURE_SIMULATION_MODE ==
            goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
            goog.asserts.fail('Can not register capture listener in IE8-.');
            return null;
        }
        else if (goog.events.CAPTURE_SIMULATION_MODE ==
            goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
            return null;
        }
    }
    var listenerMap = goog.events.getListenerMap_(src);
    if (!listenerMap) {
        src[goog.events.LISTENER_MAP_PROP_] = listenerMap =
            new goog.events.ListenerMap(src);
    }
    var listenerObj = (listenerMap.add(type, listener, callOnce, capture, opt_handler));
    if (listenerObj.proxy) {
        return listenerObj;
    }
    var proxy = goog.events.getProxy();
    listenerObj.proxy = proxy;
    proxy.src = src;
    proxy.listener = listenerObj;
    if (src.addEventListener) {
        if (!goog.events.BrowserFeature.PASSIVE_EVENTS) {
            opt_options = capture;
        }
        if (opt_options === undefined)
            opt_options = false;
        src.addEventListener(type.toString(), proxy, opt_options);
    }
    else if (src.attachEvent) {
        src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
    }
    else if (src.addListener && src.removeListener) {
        goog.asserts.assert(type === 'change', 'MediaQueryList only has a change event');
        src.addListener(proxy);
    }
    else {
        throw new Error('addEventListener and attachEvent are unavailable.');
    }
    goog.events.listenerCountEstimate_++;
    return listenerObj;
};
goog.events.getProxy = function () {
    var proxyCallbackFunction = goog.events.handleBrowserEvent_;
    var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function (eventObject) {
        return proxyCallbackFunction.call(f.src, f.listener, eventObject);
    } : function (eventObject) {
        var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
        if (!v)
            return v;
    };
    return f;
};
goog.events.listenOnce = function (src, type, listener, opt_options, opt_handler) {
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++) {
            goog.events.listenOnce(src, type[i], listener, opt_options, opt_handler);
        }
        return null;
    }
    listener = goog.events.wrapListener(listener);
    if (goog.events.Listenable.isImplementedBy(src)) {
        var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
        return src.listenOnce((type), listener, capture, opt_handler);
    }
    else {
        return goog.events.listen_((src), type, listener, true, opt_options, opt_handler);
    }
};
goog.events.listenWithWrapper = function (src, wrapper, listener, opt_capt, opt_handler) {
    wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function (src, type, listener, opt_options, opt_handler) {
    if (goog.isArray(type)) {
        for (var i = 0; i < type.length; i++) {
            goog.events.unlisten(src, type[i], listener, opt_options, opt_handler);
        }
        return null;
    }
    var capture = goog.isObject(opt_options) ? !!opt_options.capture : !!opt_options;
    listener = goog.events.wrapListener(listener);
    if (goog.events.Listenable.isImplementedBy(src)) {
        return src.unlisten((type), listener, capture, opt_handler);
    }
    if (!src) {
        return false;
    }
    var listenerMap = goog.events.getListenerMap_((src));
    if (listenerMap) {
        var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
        if (listenerObj) {
            return goog.events.unlistenByKey(listenerObj);
        }
    }
    return false;
};
goog.events.unlistenByKey = function (key) {
    if (goog.isNumber(key)) {
        return false;
    }
    var listener = key;
    if (!listener || listener.removed) {
        return false;
    }
    var src = listener.src;
    if (goog.events.Listenable.isImplementedBy(src)) {
        return (src).unlistenByKey(listener);
    }
    var type = listener.type;
    var proxy = listener.proxy;
    if (src.removeEventListener) {
        src.removeEventListener(type, proxy, listener.capture);
    }
    else if (src.detachEvent) {
        src.detachEvent(goog.events.getOnString_(type), proxy);
    }
    else if (src.addListener && src.removeListener) {
        src.removeListener(proxy);
    }
    goog.events.listenerCountEstimate_--;
    var listenerMap = goog.events.getListenerMap_((src));
    if (listenerMap) {
        listenerMap.removeByKey(listener);
        if (listenerMap.getTypeCount() == 0) {
            listenerMap.src = null;
            src[goog.events.LISTENER_MAP_PROP_] = null;
        }
    }
    else {
        (listener).markAsRemoved();
    }
    return true;
};
goog.events.unlistenWithWrapper = function (src, wrapper, listener, opt_capt, opt_handler) {
    wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function (obj, opt_type) {
    if (!obj) {
        return 0;
    }
    if (goog.events.Listenable.isImplementedBy(obj)) {
        return (obj).removeAllListeners(opt_type);
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    if (!listenerMap) {
        return 0;
    }
    var count = 0;
    var typeStr = opt_type && opt_type.toString();
    for (var type in listenerMap.listeners) {
        if (!typeStr || type == typeStr) {
            var listeners = listenerMap.listeners[type].concat();
            for (var i = 0; i < listeners.length; ++i) {
                if (goog.events.unlistenByKey(listeners[i])) {
                    ++count;
                }
            }
        }
    }
    return count;
};
goog.events.getListeners = function (obj, type, capture) {
    if (goog.events.Listenable.isImplementedBy(obj)) {
        return (obj).getListeners(type, capture);
    }
    else {
        if (!obj) {
            return [];
        }
        var listenerMap = goog.events.getListenerMap_((obj));
        return listenerMap ? listenerMap.getListeners(type, capture) : [];
    }
};
goog.events.getListener = function (src, type, listener, opt_capt, opt_handler) {
    type = (type);
    listener = goog.events.wrapListener(listener);
    var capture = !!opt_capt;
    if (goog.events.Listenable.isImplementedBy(src)) {
        return src.getListener(type, listener, capture, opt_handler);
    }
    if (!src) {
        return null;
    }
    var listenerMap = goog.events.getListenerMap_((src));
    if (listenerMap) {
        return listenerMap.getListener(type, listener, capture, opt_handler);
    }
    return null;
};
goog.events.hasListener = function (obj, opt_type, opt_capture) {
    if (goog.events.Listenable.isImplementedBy(obj)) {
        return obj.hasListener(opt_type, opt_capture);
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return !!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function (e) {
    var str = [];
    for (var key in e) {
        if (e[key] && e[key].id) {
            str.push(key + ' = ' + e[key] + ' (' + e[key].id + ')');
        }
        else {
            str.push(key + ' = ' + e[key]);
        }
    }
    return str.join('\n');
};
goog.events.getOnString_ = function (type) {
    if (type in goog.events.onStringMap_) {
        return goog.events.onStringMap_[type];
    }
    return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function (obj, type, capture, eventObject) {
    if (goog.events.Listenable.isImplementedBy(obj)) {
        return (obj).fireListeners(type, capture, eventObject);
    }
    return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function (obj, type, capture, eventObject) {
    var retval = true;
    var listenerMap = goog.events.getListenerMap_((obj));
    if (listenerMap) {
        var listenerArray = listenerMap.listeners[type.toString()];
        if (listenerArray) {
            listenerArray = listenerArray.concat();
            for (var i = 0; i < listenerArray.length; i++) {
                var listener = listenerArray[i];
                if (listener && listener.capture == capture && !listener.removed) {
                    var result = goog.events.fireListener(listener, eventObject);
                    retval = retval && (result !== false);
                }
            }
        }
    }
    return retval;
};
goog.events.fireListener = function (listener, eventObject) {
    var listenerFn = listener.listener;
    var listenerHandler = listener.handler || listener.src;
    if (listener.callOnce) {
        goog.events.unlistenByKey(listener);
    }
    return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function () {
    return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function (src, e) {
    goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), 'Can not use goog.events.dispatchEvent with ' +
        'non-goog.events.Listenable instance.');
    return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function (errorHandler) {
    goog.events.handleBrowserEvent_ =
        errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function (listener, opt_evt) {
    if (listener.removed) {
        return true;
    }
    if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
        var ieEvent = opt_evt ||
            (goog.getObjectByName('window.event'));
        var evt = new goog.events.BrowserEvent(ieEvent, this);
        var retval = true;
        if (goog.events.CAPTURE_SIMULATION_MODE ==
            goog.events.CaptureSimulationMode.ON) {
            if (!goog.events.isMarkedIeEvent_(ieEvent)) {
                goog.events.markIeEvent_(ieEvent);
                var ancestors = [];
                for (var parent = evt.currentTarget; parent; parent = parent.parentNode) {
                    ancestors.push(parent);
                }
                var type = listener.type;
                for (var i = ancestors.length - 1; !evt.propagationStopped_ && i >= 0; i--) {
                    evt.currentTarget = ancestors[i];
                    var result = goog.events.fireListeners_(ancestors[i], type, true, evt);
                    retval = retval && result;
                }
                for (var i = 0; !evt.propagationStopped_ && i < ancestors.length; i++) {
                    evt.currentTarget = ancestors[i];
                    var result = goog.events.fireListeners_(ancestors[i], type, false, evt);
                    retval = retval && result;
                }
            }
        }
        else {
            retval = goog.events.fireListener(listener, evt);
        }
        return retval;
    }
    return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function (e) {
    var useReturnValue = false;
    if (e.keyCode == 0) {
        try {
            e.keyCode = -1;
            return;
        }
        catch (ex) {
            useReturnValue = true;
        }
    }
    if (useReturnValue ||
        (e.returnValue) == undefined) {
        e.returnValue = true;
    }
};
goog.events.isMarkedIeEvent_ = function (e) {
    return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function (identifier) {
    return identifier + '_' + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function (src) {
    var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
    return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ =
    '__closure_events_fn_' + ((Math.random() * 1e9) >>> 0);
goog.events.wrapListener = function (listener) {
    goog.asserts.assert(listener, 'Listener can not be null.');
    if (goog.isFunction(listener)) {
        return listener;
    }
    goog.asserts.assert(listener.handleEvent, 'An object listener must have handleEvent method.');
    if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
        listener[goog.events.LISTENER_WRAPPER_PROP_] = function (e) {
            return (listener).handleEvent(e);
        };
    }
    return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function (transformer) {
    goog.events.handleBrowserEvent_ =
        transformer(goog.events.handleBrowserEvent_);
});
goog.provide('goog.events.Listenable');
goog.provide('goog.events.ListenableKey');
goog.require('goog.events.EventId');
goog.forwardDeclare('goog.events.EventLike');
goog.forwardDeclare('goog.events.EventTarget');
goog.events.Listenable = function () { };
goog.events.Listenable.IMPLEMENTED_BY_PROP =
    'closure_listenable_' + ((Math.random() * 1e6) | 0);
goog.events.Listenable.addImplementation = function (cls) {
    cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function (obj) {
    return !!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function () { };
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function () {
    return ++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide('goog.events.EventTarget');
goog.require('goog.Disposable');
goog.require('goog.asserts');
goog.require('goog.events');
goog.require('goog.events.Event');
goog.require('goog.events.Listenable');
goog.require('goog.events.ListenerMap');
goog.require('goog.object');
goog.events.EventTarget = function () {
    goog.Disposable.call(this);
    this.eventTargetListeners_ = new goog.events.ListenerMap(this);
    this.actualEventTarget_ = this;
    this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1000;
goog.events.EventTarget.prototype.getParentEventTarget = function () {
    return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function (parent) {
    this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function (type, handler, opt_capture, opt_handlerScope) {
    goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function (type, handler, opt_capture, opt_handlerScope) {
    goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function (e) {
    this.assertInitialized_();
    var ancestorsTree, ancestor = this.getParentEventTarget();
    if (ancestor) {
        ancestorsTree = [];
        var ancestorCount = 1;
        for (; ancestor; ancestor = ancestor.getParentEventTarget()) {
            ancestorsTree.push(ancestor);
            goog.asserts.assert((++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_), 'infinite loop');
        }
    }
    return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function () {
    goog.events.EventTarget.superClass_.disposeInternal.call(this);
    this.removeAllListeners();
    this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function (type, listener, opt_useCapture, opt_listenerScope) {
    this.assertInitialized_();
    return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function (type, listener, opt_useCapture, opt_listenerScope) {
    return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function (type, listener, opt_useCapture, opt_listenerScope) {
    return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function (key) {
    return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function (opt_type) {
    if (!this.eventTargetListeners_) {
        return 0;
    }
    return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function (type, capture, eventObject) {
    var listenerArray = this.eventTargetListeners_.listeners[String(type)];
    if (!listenerArray) {
        return true;
    }
    listenerArray = listenerArray.concat();
    var rv = true;
    for (var i = 0; i < listenerArray.length; ++i) {
        var listener = listenerArray[i];
        if (listener && !listener.removed && listener.capture == capture) {
            var listenerFn = listener.listener;
            var listenerHandler = listener.handler || listener.src;
            if (listener.callOnce) {
                this.unlistenByKey(listener);
            }
            rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
        }
    }
    return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function (type, capture) {
    return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function (type, listener, capture, opt_listenerScope) {
    return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function (opt_type, opt_capture) {
    var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
    return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function (target) {
    this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function () {
    goog.asserts.assert(this.eventTargetListeners_, 'Event target is not initialized. Did you call the superclass ' +
        '(goog.events.EventTarget) constructor?');
};
goog.events.EventTarget.dispatchEventInternal_ = function (target, e, opt_ancestorsTree) {
    var type = e.type || (e);
    if (goog.isString(e)) {
        e = new goog.events.Event(e, target);
    }
    else if (!(e instanceof goog.events.Event)) {
        var oldEvent = e;
        e = new goog.events.Event(type, target);
        goog.object.extend(e, oldEvent);
    }
    else {
        e.target = e.target || target;
    }
    var rv = true, currentTarget;
    if (opt_ancestorsTree) {
        for (var i = opt_ancestorsTree.length - 1; !e.propagationStopped_ && i >= 0; i--) {
            currentTarget = e.currentTarget = opt_ancestorsTree[i];
            rv = currentTarget.fireListeners(type, true, e) && rv;
        }
    }
    if (!e.propagationStopped_) {
        currentTarget = (e.currentTarget = target);
        rv = currentTarget.fireListeners(type, true, e) && rv;
        if (!e.propagationStopped_) {
            rv = currentTarget.fireListeners(type, false, e) && rv;
        }
    }
    if (opt_ancestorsTree) {
        for (i = 0; !e.propagationStopped_ && i < opt_ancestorsTree.length; i++) {
            currentTarget = e.currentTarget = opt_ancestorsTree[i];
            rv = currentTarget.fireListeners(type, false, e) && rv;
        }
    }
    return rv;
};
goog.provide('goog.events.EventType');
goog.provide('goog.events.PointerFallbackEventType');
goog.require('goog.events.BrowserFeature');
goog.require('goog.userAgent');
goog.events.getVendorPrefixedName_ = function (eventName) {
    return goog.userAgent.WEBKIT ?
        'webkit' + eventName :
        (goog.userAgent.OPERA ? 'o' + eventName.toLowerCase() :
            eventName.toLowerCase());
};
goog.events.EventType = {
    CLICK: 'click',
    RIGHTCLICK: 'rightclick',
    DBLCLICK: 'dblclick',
    MOUSEDOWN: 'mousedown',
    MOUSEUP: 'mouseup',
    MOUSEOVER: 'mouseover',
    MOUSEOUT: 'mouseout',
    MOUSEMOVE: 'mousemove',
    MOUSEENTER: 'mouseenter',
    MOUSELEAVE: 'mouseleave',
    SELECTIONCHANGE: 'selectionchange',
    SELECTSTART: 'selectstart',
    WHEEL: 'wheel',
    KEYPRESS: 'keypress',
    KEYDOWN: 'keydown',
    KEYUP: 'keyup',
    BLUR: 'blur',
    FOCUS: 'focus',
    DEACTIVATE: 'deactivate',
    FOCUSIN: 'focusin',
    FOCUSOUT: 'focusout',
    CHANGE: 'change',
    RESET: 'reset',
    SELECT: 'select',
    SUBMIT: 'submit',
    INPUT: 'input',
    PROPERTYCHANGE: 'propertychange',
    DRAGSTART: 'dragstart',
    DRAG: 'drag',
    DRAGENTER: 'dragenter',
    DRAGOVER: 'dragover',
    DRAGLEAVE: 'dragleave',
    DROP: 'drop',
    DRAGEND: 'dragend',
    TOUCHSTART: 'touchstart',
    TOUCHMOVE: 'touchmove',
    TOUCHEND: 'touchend',
    TOUCHCANCEL: 'touchcancel',
    BEFOREUNLOAD: 'beforeunload',
    CONSOLEMESSAGE: 'consolemessage',
    CONTEXTMENU: 'contextmenu',
    DEVICECHANGE: 'devicechange',
    DEVICEMOTION: 'devicemotion',
    DEVICEORIENTATION: 'deviceorientation',
    DOMCONTENTLOADED: 'DOMContentLoaded',
    ERROR: 'error',
    HELP: 'help',
    LOAD: 'load',
    LOSECAPTURE: 'losecapture',
    ORIENTATIONCHANGE: 'orientationchange',
    READYSTATECHANGE: 'readystatechange',
    RESIZE: 'resize',
    SCROLL: 'scroll',
    UNLOAD: 'unload',
    CANPLAY: 'canplay',
    CANPLAYTHROUGH: 'canplaythrough',
    DURATIONCHANGE: 'durationchange',
    EMPTIED: 'emptied',
    ENDED: 'ended',
    LOADEDDATA: 'loadeddata',
    LOADEDMETADATA: 'loadedmetadata',
    PAUSE: 'pause',
    PLAY: 'play',
    PLAYING: 'playing',
    RATECHANGE: 'ratechange',
    SEEKED: 'seeked',
    SEEKING: 'seeking',
    STALLED: 'stalled',
    SUSPEND: 'suspend',
    TIMEUPDATE: 'timeupdate',
    VOLUMECHANGE: 'volumechange',
    WAITING: 'waiting',
    SOURCEOPEN: 'sourceopen',
    SOURCEENDED: 'sourceended',
    SOURCECLOSED: 'sourceclosed',
    ABORT: 'abort',
    UPDATE: 'update',
    UPDATESTART: 'updatestart',
    UPDATEEND: 'updateend',
    HASHCHANGE: 'hashchange',
    PAGEHIDE: 'pagehide',
    PAGESHOW: 'pageshow',
    POPSTATE: 'popstate',
    COPY: 'copy',
    PASTE: 'paste',
    CUT: 'cut',
    BEFORECOPY: 'beforecopy',
    BEFORECUT: 'beforecut',
    BEFOREPASTE: 'beforepaste',
    ONLINE: 'online',
    OFFLINE: 'offline',
    MESSAGE: 'message',
    CONNECT: 'connect',
    INSTALL: 'install',
    ACTIVATE: 'activate',
    FETCH: 'fetch',
    FOREIGNFETCH: 'foreignfetch',
    MESSAGEERROR: 'messageerror',
    STATECHANGE: 'statechange',
    UPDATEFOUND: 'updatefound',
    CONTROLLERCHANGE: 'controllerchange',
    ANIMATIONSTART: goog.events.getVendorPrefixedName_('AnimationStart'),
    ANIMATIONEND: goog.events.getVendorPrefixedName_('AnimationEnd'),
    ANIMATIONITERATION: goog.events.getVendorPrefixedName_('AnimationIteration'),
    TRANSITIONEND: goog.events.getVendorPrefixedName_('TransitionEnd'),
    POINTERDOWN: 'pointerdown',
    POINTERUP: 'pointerup',
    POINTERCANCEL: 'pointercancel',
    POINTERMOVE: 'pointermove',
    POINTEROVER: 'pointerover',
    POINTEROUT: 'pointerout',
    POINTERENTER: 'pointerenter',
    POINTERLEAVE: 'pointerleave',
    GOTPOINTERCAPTURE: 'gotpointercapture',
    LOSTPOINTERCAPTURE: 'lostpointercapture',
    MSGESTURECHANGE: 'MSGestureChange',
    MSGESTUREEND: 'MSGestureEnd',
    MSGESTUREHOLD: 'MSGestureHold',
    MSGESTURESTART: 'MSGestureStart',
    MSGESTURETAP: 'MSGestureTap',
    MSGOTPOINTERCAPTURE: 'MSGotPointerCapture',
    MSINERTIASTART: 'MSInertiaStart',
    MSLOSTPOINTERCAPTURE: 'MSLostPointerCapture',
    MSPOINTERCANCEL: 'MSPointerCancel',
    MSPOINTERDOWN: 'MSPointerDown',
    MSPOINTERENTER: 'MSPointerEnter',
    MSPOINTERHOVER: 'MSPointerHover',
    MSPOINTERLEAVE: 'MSPointerLeave',
    MSPOINTERMOVE: 'MSPointerMove',
    MSPOINTEROUT: 'MSPointerOut',
    MSPOINTEROVER: 'MSPointerOver',
    MSPOINTERUP: 'MSPointerUp',
    TEXT: 'text',
    TEXTINPUT: goog.userAgent.IE ? 'textinput' : 'textInput',
    COMPOSITIONSTART: 'compositionstart',
    COMPOSITIONUPDATE: 'compositionupdate',
    COMPOSITIONEND: 'compositionend',
    BEFOREINPUT: 'beforeinput',
    EXIT: 'exit',
    LOADABORT: 'loadabort',
    LOADCOMMIT: 'loadcommit',
    LOADREDIRECT: 'loadredirect',
    LOADSTART: 'loadstart',
    LOADSTOP: 'loadstop',
    RESPONSIVE: 'responsive',
    SIZECHANGED: 'sizechanged',
    UNRESPONSIVE: 'unresponsive',
    VISIBILITYCHANGE: 'visibilitychange',
    STORAGE: 'storage',
    DOMSUBTREEMODIFIED: 'DOMSubtreeModified',
    DOMNODEINSERTED: 'DOMNodeInserted',
    DOMNODEREMOVED: 'DOMNodeRemoved',
    DOMNODEREMOVEDFROMDOCUMENT: 'DOMNodeRemovedFromDocument',
    DOMNODEINSERTEDINTODOCUMENT: 'DOMNodeInsertedIntoDocument',
    DOMATTRMODIFIED: 'DOMAttrModified',
    DOMCHARACTERDATAMODIFIED: 'DOMCharacterDataModified',
    BEFOREPRINT: 'beforeprint',
    AFTERPRINT: 'afterprint',
    BEFOREINSTALLPROMPT: 'beforeinstallprompt',
    APPINSTALLED: 'appinstalled'
};
goog.events.getPointerFallbackEventName_ = function (pointerEventName, msPointerEventName, mouseEventName) {
    if (goog.events.BrowserFeature.POINTER_EVENTS) {
        return pointerEventName;
    }
    if (goog.events.BrowserFeature.MSPOINTER_EVENTS) {
        return msPointerEventName;
    }
    return mouseEventName;
};
goog.events.PointerFallbackEventType = {
    POINTERDOWN: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERDOWN, goog.events.EventType.MSPOINTERDOWN, goog.events.EventType.MOUSEDOWN),
    POINTERUP: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERUP, goog.events.EventType.MSPOINTERUP, goog.events.EventType.MOUSEUP),
    POINTERCANCEL: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERCANCEL, goog.events.EventType.MSPOINTERCANCEL, 'mousecancel'),
    POINTERMOVE: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERMOVE, goog.events.EventType.MSPOINTERMOVE, goog.events.EventType.MOUSEMOVE),
    POINTEROVER: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTEROVER, goog.events.EventType.MSPOINTEROVER, goog.events.EventType.MOUSEOVER),
    POINTEROUT: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTEROUT, goog.events.EventType.MSPOINTEROUT, goog.events.EventType.MOUSEOUT),
    POINTERENTER: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERENTER, goog.events.EventType.MSPOINTERENTER, goog.events.EventType.MOUSEENTER),
    POINTERLEAVE: goog.events.getPointerFallbackEventName_(goog.events.EventType.POINTERLEAVE, goog.events.EventType.MSPOINTERLEAVE, goog.events.EventType.MOUSELEAVE)
};
goog.provide('goog.events.FocusHandler');
goog.provide('goog.events.FocusHandler.EventType');
goog.require('goog.events');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.EventTarget');
goog.require('goog.userAgent');
goog.events.FocusHandler = function (element) {
    goog.events.EventTarget.call(this);
    this.element_ = element;
    var typeIn = goog.userAgent.IE ? 'focusin' : 'focus';
    var typeOut = goog.userAgent.IE ? 'focusout' : 'blur';
    this.listenKeyIn_ =
        goog.events.listen(this.element_, typeIn, this, !goog.userAgent.IE);
    this.listenKeyOut_ =
        goog.events.listen(this.element_, typeOut, this, !goog.userAgent.IE);
};
goog.inherits(goog.events.FocusHandler, goog.events.EventTarget);
goog.events.FocusHandler.EventType = {
    FOCUSIN: 'focusin',
    FOCUSOUT: 'focusout'
};
goog.events.FocusHandler.prototype.handleEvent = function (e) {
    var be = e.getBrowserEvent();
    var event = new goog.events.BrowserEvent(be);
    event.type = e.type == 'focusin' || e.type == 'focus' ?
        goog.events.FocusHandler.EventType.FOCUSIN :
        goog.events.FocusHandler.EventType.FOCUSOUT;
    this.dispatchEvent(event);
};
goog.events.FocusHandler.prototype.disposeInternal = function () {
    goog.events.FocusHandler.superClass_.disposeInternal.call(this);
    goog.events.unlistenByKey(this.listenKeyIn_);
    goog.events.unlistenByKey(this.listenKeyOut_);
    delete this.element_;
};
goog.provide('goog.events.KeyCodes');
goog.require('goog.userAgent');
goog.forwardDeclare('goog.events.BrowserEvent');
goog.events.KeyCodes = {
    WIN_KEY_FF_LINUX: 0,
    MAC_ENTER: 3,
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    END: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PLUS_SIGN: 43,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    FF_SEMICOLON: 59,
    FF_EQUALS: 61,
    FF_DASH: 173,
    QUESTION_MARK: 63,
    AT_SIGN: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    META: 91,
    WIN_KEY_RIGHT: 92,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    NUMLOCK: 144,
    SCROLL_LOCK: 145,
    FIRST_MEDIA_KEY: 166,
    LAST_MEDIA_KEY: 183,
    SEMICOLON: 186,
    DASH: 189,
    EQUALS: 187,
    COMMA: 188,
    PERIOD: 190,
    SLASH: 191,
    APOSTROPHE: 192,
    TILDE: 192,
    SINGLE_QUOTE: 222,
    OPEN_SQUARE_BRACKET: 219,
    BACKSLASH: 220,
    CLOSE_SQUARE_BRACKET: 221,
    WIN_KEY: 224,
    MAC_FF_META: 224,
    MAC_WK_CMD_LEFT: 91,
    MAC_WK_CMD_RIGHT: 93,
    WIN_IME: 229,
    VK_NONAME: 252,
    PHANTOM: 255
};
goog.events.KeyCodes.isTextModifyingKeyEvent = function (e) {
    if (e.altKey && !e.ctrlKey || e.metaKey ||
        e.keyCode >= goog.events.KeyCodes.F1 &&
            e.keyCode <= goog.events.KeyCodes.F12) {
        return false;
    }
    switch (e.keyCode) {
        case goog.events.KeyCodes.ALT:
        case goog.events.KeyCodes.CAPS_LOCK:
        case goog.events.KeyCodes.CONTEXT_MENU:
        case goog.events.KeyCodes.CTRL:
        case goog.events.KeyCodes.DOWN:
        case goog.events.KeyCodes.END:
        case goog.events.KeyCodes.ESC:
        case goog.events.KeyCodes.HOME:
        case goog.events.KeyCodes.INSERT:
        case goog.events.KeyCodes.LEFT:
        case goog.events.KeyCodes.MAC_FF_META:
        case goog.events.KeyCodes.META:
        case goog.events.KeyCodes.NUMLOCK:
        case goog.events.KeyCodes.NUM_CENTER:
        case goog.events.KeyCodes.PAGE_DOWN:
        case goog.events.KeyCodes.PAGE_UP:
        case goog.events.KeyCodes.PAUSE:
        case goog.events.KeyCodes.PHANTOM:
        case goog.events.KeyCodes.PRINT_SCREEN:
        case goog.events.KeyCodes.RIGHT:
        case goog.events.KeyCodes.SCROLL_LOCK:
        case goog.events.KeyCodes.SHIFT:
        case goog.events.KeyCodes.UP:
        case goog.events.KeyCodes.VK_NONAME:
        case goog.events.KeyCodes.WIN_KEY:
        case goog.events.KeyCodes.WIN_KEY_RIGHT:
            return false;
        case goog.events.KeyCodes.WIN_KEY_FF_LINUX:
            return !goog.userAgent.GECKO;
        default:
            return e.keyCode < goog.events.KeyCodes.FIRST_MEDIA_KEY ||
                e.keyCode > goog.events.KeyCodes.LAST_MEDIA_KEY;
    }
};
goog.events.KeyCodes.firesKeyPressEvent = function (keyCode, opt_heldKeyCode, opt_shiftKey, opt_ctrlKey, opt_altKey, opt_metaKey) {
    if (!goog.userAgent.IE && !goog.userAgent.EDGE &&
        !(goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('525'))) {
        return true;
    }
    if (goog.userAgent.MAC && opt_altKey) {
        return goog.events.KeyCodes.isCharacterKey(keyCode);
    }
    if (opt_altKey && !opt_ctrlKey) {
        return false;
    }
    if (goog.isNumber(opt_heldKeyCode)) {
        opt_heldKeyCode = goog.events.KeyCodes.normalizeKeyCode(opt_heldKeyCode);
    }
    var heldKeyIsModifier = opt_heldKeyCode == goog.events.KeyCodes.CTRL ||
        opt_heldKeyCode == goog.events.KeyCodes.ALT ||
        goog.userAgent.MAC && opt_heldKeyCode == goog.events.KeyCodes.META;
    var modifiedShiftKey = opt_heldKeyCode == goog.events.KeyCodes.SHIFT &&
        (opt_ctrlKey || opt_metaKey);
    if ((!opt_shiftKey || goog.userAgent.MAC) && heldKeyIsModifier ||
        goog.userAgent.MAC && modifiedShiftKey) {
        return false;
    }
    if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && opt_ctrlKey &&
        opt_shiftKey) {
        switch (keyCode) {
            case goog.events.KeyCodes.BACKSLASH:
            case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:
            case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:
            case goog.events.KeyCodes.TILDE:
            case goog.events.KeyCodes.SEMICOLON:
            case goog.events.KeyCodes.DASH:
            case goog.events.KeyCodes.EQUALS:
            case goog.events.KeyCodes.COMMA:
            case goog.events.KeyCodes.PERIOD:
            case goog.events.KeyCodes.SLASH:
            case goog.events.KeyCodes.APOSTROPHE:
            case goog.events.KeyCodes.SINGLE_QUOTE:
                return false;
        }
    }
    if (goog.userAgent.IE && opt_ctrlKey && opt_heldKeyCode == keyCode) {
        return false;
    }
    switch (keyCode) {
        case goog.events.KeyCodes.ENTER:
            return true;
        case goog.events.KeyCodes.ESC:
            return !(goog.userAgent.WEBKIT || goog.userAgent.EDGE);
    }
    return goog.events.KeyCodes.isCharacterKey(keyCode);
};
goog.events.KeyCodes.isCharacterKey = function (keyCode) {
    if (keyCode >= goog.events.KeyCodes.ZERO &&
        keyCode <= goog.events.KeyCodes.NINE) {
        return true;
    }
    if (keyCode >= goog.events.KeyCodes.NUM_ZERO &&
        keyCode <= goog.events.KeyCodes.NUM_MULTIPLY) {
        return true;
    }
    if (keyCode >= goog.events.KeyCodes.A && keyCode <= goog.events.KeyCodes.Z) {
        return true;
    }
    if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) && keyCode == 0) {
        return true;
    }
    switch (keyCode) {
        case goog.events.KeyCodes.SPACE:
        case goog.events.KeyCodes.PLUS_SIGN:
        case goog.events.KeyCodes.QUESTION_MARK:
        case goog.events.KeyCodes.AT_SIGN:
        case goog.events.KeyCodes.NUM_PLUS:
        case goog.events.KeyCodes.NUM_MINUS:
        case goog.events.KeyCodes.NUM_PERIOD:
        case goog.events.KeyCodes.NUM_DIVISION:
        case goog.events.KeyCodes.SEMICOLON:
        case goog.events.KeyCodes.FF_SEMICOLON:
        case goog.events.KeyCodes.DASH:
        case goog.events.KeyCodes.EQUALS:
        case goog.events.KeyCodes.FF_EQUALS:
        case goog.events.KeyCodes.COMMA:
        case goog.events.KeyCodes.PERIOD:
        case goog.events.KeyCodes.SLASH:
        case goog.events.KeyCodes.APOSTROPHE:
        case goog.events.KeyCodes.SINGLE_QUOTE:
        case goog.events.KeyCodes.OPEN_SQUARE_BRACKET:
        case goog.events.KeyCodes.BACKSLASH:
        case goog.events.KeyCodes.CLOSE_SQUARE_BRACKET:
            return true;
        default:
            return false;
    }
};
goog.events.KeyCodes.normalizeKeyCode = function (keyCode) {
    if (goog.userAgent.GECKO) {
        return goog.events.KeyCodes.normalizeGeckoKeyCode(keyCode);
    }
    else if (goog.userAgent.MAC && goog.userAgent.WEBKIT) {
        return goog.events.KeyCodes.normalizeMacWebKitKeyCode(keyCode);
    }
    else {
        return keyCode;
    }
};
goog.events.KeyCodes.normalizeGeckoKeyCode = function (keyCode) {
    switch (keyCode) {
        case goog.events.KeyCodes.FF_EQUALS:
            return goog.events.KeyCodes.EQUALS;
        case goog.events.KeyCodes.FF_SEMICOLON:
            return goog.events.KeyCodes.SEMICOLON;
        case goog.events.KeyCodes.FF_DASH:
            return goog.events.KeyCodes.DASH;
        case goog.events.KeyCodes.MAC_FF_META:
            return goog.events.KeyCodes.META;
        case goog.events.KeyCodes.WIN_KEY_FF_LINUX:
            return goog.events.KeyCodes.WIN_KEY;
        default:
            return keyCode;
    }
};
goog.events.KeyCodes.normalizeMacWebKitKeyCode = function (keyCode) {
    switch (keyCode) {
        case goog.events.KeyCodes.MAC_WK_CMD_RIGHT:
            return goog.events.KeyCodes.META;
        default:
            return keyCode;
    }
};
goog.provide('goog.events.KeyEvent');
goog.provide('goog.events.KeyHandler');
goog.provide('goog.events.KeyHandler.EventType');
goog.require('goog.events');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.EventTarget');
goog.require('goog.events.EventType');
goog.require('goog.events.KeyCodes');
goog.require('goog.userAgent');
goog.events.KeyHandler = function (opt_element, opt_capture) {
    goog.events.EventTarget.call(this);
    if (opt_element) {
        this.attach(opt_element, opt_capture);
    }
};
goog.inherits(goog.events.KeyHandler, goog.events.EventTarget);
goog.events.KeyHandler.prototype.element_ = null;
goog.events.KeyHandler.prototype.keyPressKey_ = null;
goog.events.KeyHandler.prototype.keyDownKey_ = null;
goog.events.KeyHandler.prototype.keyUpKey_ = null;
goog.events.KeyHandler.prototype.lastKey_ = -1;
goog.events.KeyHandler.prototype.keyCode_ = -1;
goog.events.KeyHandler.prototype.altKey_ = false;
goog.events.KeyHandler.EventType = {
    KEY: 'key'
};
goog.events.KeyHandler.safariKey_ = {
    '3': goog.events.KeyCodes.ENTER,
    '12': goog.events.KeyCodes.NUMLOCK,
    '63232': goog.events.KeyCodes.UP,
    '63233': goog.events.KeyCodes.DOWN,
    '63234': goog.events.KeyCodes.LEFT,
    '63235': goog.events.KeyCodes.RIGHT,
    '63236': goog.events.KeyCodes.F1,
    '63237': goog.events.KeyCodes.F2,
    '63238': goog.events.KeyCodes.F3,
    '63239': goog.events.KeyCodes.F4,
    '63240': goog.events.KeyCodes.F5,
    '63241': goog.events.KeyCodes.F6,
    '63242': goog.events.KeyCodes.F7,
    '63243': goog.events.KeyCodes.F8,
    '63244': goog.events.KeyCodes.F9,
    '63245': goog.events.KeyCodes.F10,
    '63246': goog.events.KeyCodes.F11,
    '63247': goog.events.KeyCodes.F12,
    '63248': goog.events.KeyCodes.PRINT_SCREEN,
    '63272': goog.events.KeyCodes.DELETE,
    '63273': goog.events.KeyCodes.HOME,
    '63275': goog.events.KeyCodes.END,
    '63276': goog.events.KeyCodes.PAGE_UP,
    '63277': goog.events.KeyCodes.PAGE_DOWN,
    '63289': goog.events.KeyCodes.NUMLOCK,
    '63302': goog.events.KeyCodes.INSERT
};
goog.events.KeyHandler.keyIdentifier_ = {
    'Up': goog.events.KeyCodes.UP,
    'Down': goog.events.KeyCodes.DOWN,
    'Left': goog.events.KeyCodes.LEFT,
    'Right': goog.events.KeyCodes.RIGHT,
    'Enter': goog.events.KeyCodes.ENTER,
    'F1': goog.events.KeyCodes.F1,
    'F2': goog.events.KeyCodes.F2,
    'F3': goog.events.KeyCodes.F3,
    'F4': goog.events.KeyCodes.F4,
    'F5': goog.events.KeyCodes.F5,
    'F6': goog.events.KeyCodes.F6,
    'F7': goog.events.KeyCodes.F7,
    'F8': goog.events.KeyCodes.F8,
    'F9': goog.events.KeyCodes.F9,
    'F10': goog.events.KeyCodes.F10,
    'F11': goog.events.KeyCodes.F11,
    'F12': goog.events.KeyCodes.F12,
    'U+007F': goog.events.KeyCodes.DELETE,
    'Home': goog.events.KeyCodes.HOME,
    'End': goog.events.KeyCodes.END,
    'PageUp': goog.events.KeyCodes.PAGE_UP,
    'PageDown': goog.events.KeyCodes.PAGE_DOWN,
    'Insert': goog.events.KeyCodes.INSERT
};
goog.events.KeyHandler.USES_KEYDOWN_ = goog.userAgent.IE ||
    goog.userAgent.EDGE ||
    goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher('525');
goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_ =
    goog.userAgent.MAC && goog.userAgent.GECKO;
goog.events.KeyHandler.prototype.handleKeyDown_ = function (e) {
    if (goog.userAgent.WEBKIT || goog.userAgent.EDGE) {
        if (this.lastKey_ == goog.events.KeyCodes.CTRL && !e.ctrlKey ||
            this.lastKey_ == goog.events.KeyCodes.ALT && !e.altKey ||
            goog.userAgent.MAC && this.lastKey_ == goog.events.KeyCodes.META &&
                !e.metaKey) {
            this.resetState();
        }
    }
    if (this.lastKey_ == -1) {
        if (e.ctrlKey && e.keyCode != goog.events.KeyCodes.CTRL) {
            this.lastKey_ = goog.events.KeyCodes.CTRL;
        }
        else if (e.altKey && e.keyCode != goog.events.KeyCodes.ALT) {
            this.lastKey_ = goog.events.KeyCodes.ALT;
        }
        else if (e.metaKey && e.keyCode != goog.events.KeyCodes.META) {
            this.lastKey_ = goog.events.KeyCodes.META;
        }
    }
    if (goog.events.KeyHandler.USES_KEYDOWN_ &&
        !goog.events.KeyCodes.firesKeyPressEvent(e.keyCode, this.lastKey_, e.shiftKey, e.ctrlKey, e.altKey, e.metaKey)) {
        this.handleEvent(e);
    }
    else {
        this.keyCode_ = goog.events.KeyCodes.normalizeKeyCode(e.keyCode);
        if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {
            this.altKey_ = e.altKey;
        }
    }
};
goog.events.KeyHandler.prototype.resetState = function () {
    this.lastKey_ = -1;
    this.keyCode_ = -1;
};
goog.events.KeyHandler.prototype.handleKeyup_ = function (e) {
    this.resetState();
    this.altKey_ = e.altKey;
};
goog.events.KeyHandler.prototype.handleEvent = function (e) {
    var be = e.getBrowserEvent();
    var keyCode, charCode;
    var altKey = be.altKey;
    if (goog.userAgent.IE && e.type == goog.events.EventType.KEYPRESS) {
        keyCode = this.keyCode_;
        charCode = keyCode != goog.events.KeyCodes.ENTER &&
            keyCode != goog.events.KeyCodes.ESC ?
            be.keyCode :
            0;
    }
    else if ((goog.userAgent.WEBKIT || goog.userAgent.EDGE) &&
        e.type == goog.events.EventType.KEYPRESS) {
        keyCode = this.keyCode_;
        charCode = be.charCode >= 0 && be.charCode < 63232 &&
            goog.events.KeyCodes.isCharacterKey(keyCode) ?
            be.charCode :
            0;
    }
    else if (goog.userAgent.OPERA && !goog.userAgent.WEBKIT) {
        keyCode = this.keyCode_;
        charCode = goog.events.KeyCodes.isCharacterKey(keyCode) ? be.keyCode : 0;
    }
    else {
        keyCode = be.keyCode || this.keyCode_;
        charCode = be.charCode || 0;
        if (goog.events.KeyHandler.SAVE_ALT_FOR_KEYPRESS_) {
            altKey = this.altKey_;
        }
        if (goog.userAgent.MAC && charCode == goog.events.KeyCodes.QUESTION_MARK &&
            keyCode == goog.events.KeyCodes.WIN_KEY) {
            keyCode = goog.events.KeyCodes.SLASH;
        }
    }
    keyCode = goog.events.KeyCodes.normalizeKeyCode(keyCode);
    var key = keyCode;
    if (keyCode) {
        if (keyCode >= 63232 && keyCode in goog.events.KeyHandler.safariKey_) {
            key = goog.events.KeyHandler.safariKey_[keyCode];
        }
        else {
            if (keyCode == 25 && e.shiftKey) {
                key = 9;
            }
        }
    }
    else if (be.keyIdentifier &&
        be.keyIdentifier in goog.events.KeyHandler.keyIdentifier_) {
        key = goog.events.KeyHandler.keyIdentifier_[be.keyIdentifier];
    }
    var repeat = key == this.lastKey_;
    this.lastKey_ = key;
    var event = new goog.events.KeyEvent(key, charCode, repeat, be);
    event.altKey = altKey;
    this.dispatchEvent(event);
};
goog.events.KeyHandler.prototype.getElement = function () {
    return this.element_;
};
goog.events.KeyHandler.prototype.attach = function (element, opt_capture) {
    if (this.keyUpKey_) {
        this.detach();
    }
    this.element_ = element;
    this.keyPressKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYPRESS, this, opt_capture);
    this.keyDownKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYDOWN, this.handleKeyDown_, opt_capture, this);
    this.keyUpKey_ = goog.events.listen(this.element_, goog.events.EventType.KEYUP, this.handleKeyup_, opt_capture, this);
};
goog.events.KeyHandler.prototype.detach = function () {
    if (this.keyPressKey_) {
        goog.events.unlistenByKey(this.keyPressKey_);
        goog.events.unlistenByKey(this.keyDownKey_);
        goog.events.unlistenByKey(this.keyUpKey_);
        this.keyPressKey_ = null;
        this.keyDownKey_ = null;
        this.keyUpKey_ = null;
    }
    this.element_ = null;
    this.lastKey_ = -1;
    this.keyCode_ = -1;
};
goog.events.KeyHandler.prototype.disposeInternal = function () {
    goog.events.KeyHandler.superClass_.disposeInternal.call(this);
    this.detach();
};
goog.events.KeyEvent = function (keyCode, charCode, repeat, browserEvent) {
    goog.events.BrowserEvent.call(this, browserEvent);
    this.type = goog.events.KeyHandler.EventType.KEY;
    this.keyCode = keyCode;
    this.charCode = charCode;
    this.repeat = repeat;
};
goog.inherits(goog.events.KeyEvent, goog.events.BrowserEvent);
goog.provide('goog.events.Listener');
goog.require('goog.events.ListenableKey');
goog.events.Listener = function (listener, proxy, src, type, capture, opt_handler) {
    if (goog.events.Listener.ENABLE_MONITORING) {
        this.creationStack = new Error().stack;
    }
    this.listener = listener;
    this.proxy = proxy;
    this.src = src;
    this.type = type;
    this.capture = !!capture;
    this.handler = opt_handler;
    this.key = goog.events.ListenableKey.reserveKey();
    this.callOnce = false;
    this.removed = false;
};
goog.define('goog.events.Listener.ENABLE_MONITORING', false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function () {
    this.removed = true;
    this.listener = null;
    this.proxy = null;
    this.src = null;
    this.handler = null;
};
goog.provide('goog.events.ListenerMap');
goog.require('goog.array');
goog.require('goog.events.Listener');
goog.require('goog.object');
goog.events.ListenerMap = function (src) {
    this.src = src;
    this.listeners = {};
    this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function () {
    return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function () {
    var count = 0;
    for (var type in this.listeners) {
        count += this.listeners[type].length;
    }
    return count;
};
goog.events.ListenerMap.prototype.add = function (type, listener, callOnce, opt_useCapture, opt_listenerScope) {
    var typeStr = type.toString();
    var listenerArray = this.listeners[typeStr];
    if (!listenerArray) {
        listenerArray = this.listeners[typeStr] = [];
        this.typeCount_++;
    }
    var listenerObj;
    var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
        listenerObj = listenerArray[index];
        if (!callOnce) {
            listenerObj.callOnce = false;
        }
    }
    else {
        listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
        listenerObj.callOnce = callOnce;
        listenerArray.push(listenerObj);
    }
    return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function (type, listener, opt_useCapture, opt_listenerScope) {
    var typeStr = type.toString();
    if (!(typeStr in this.listeners)) {
        return false;
    }
    var listenerArray = this.listeners[typeStr];
    var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
    if (index > -1) {
        var listenerObj = listenerArray[index];
        listenerObj.markAsRemoved();
        goog.array.removeAt(listenerArray, index);
        if (listenerArray.length == 0) {
            delete this.listeners[typeStr];
            this.typeCount_--;
        }
        return true;
    }
    return false;
};
goog.events.ListenerMap.prototype.removeByKey = function (listener) {
    var type = listener.type;
    if (!(type in this.listeners)) {
        return false;
    }
    var removed = goog.array.remove(this.listeners[type], listener);
    if (removed) {
        (listener).markAsRemoved();
        if (this.listeners[type].length == 0) {
            delete this.listeners[type];
            this.typeCount_--;
        }
    }
    return removed;
};
goog.events.ListenerMap.prototype.removeAll = function (opt_type) {
    var typeStr = opt_type && opt_type.toString();
    var count = 0;
    for (var type in this.listeners) {
        if (!typeStr || type == typeStr) {
            var listenerArray = this.listeners[type];
            for (var i = 0; i < listenerArray.length; i++) {
                ++count;
                listenerArray[i].markAsRemoved();
            }
            delete this.listeners[type];
            this.typeCount_--;
        }
    }
    return count;
};
goog.events.ListenerMap.prototype.getListeners = function (type, capture) {
    var listenerArray = this.listeners[type.toString()];
    var rv = [];
    if (listenerArray) {
        for (var i = 0; i < listenerArray.length; ++i) {
            var listenerObj = listenerArray[i];
            if (listenerObj.capture == capture) {
                rv.push(listenerObj);
            }
        }
    }
    return rv;
};
goog.events.ListenerMap.prototype.getListener = function (type, listener, capture, opt_listenerScope) {
    var listenerArray = this.listeners[type.toString()];
    var i = -1;
    if (listenerArray) {
        i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
    }
    return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function (opt_type, opt_capture) {
    var hasType = goog.isDef(opt_type);
    var typeStr = hasType ? opt_type.toString() : '';
    var hasCapture = goog.isDef(opt_capture);
    return goog.object.some(this.listeners, function (listenerArray, type) {
        for (var i = 0; i < listenerArray.length; ++i) {
            if ((!hasType || listenerArray[i].type == typeStr) &&
                (!hasCapture || listenerArray[i].capture == opt_capture)) {
                return true;
            }
        }
        return false;
    });
};
goog.events.ListenerMap.findListenerIndex_ = function (listenerArray, listener, opt_useCapture, opt_listenerScope) {
    for (var i = 0; i < listenerArray.length; ++i) {
        var listenerObj = listenerArray[i];
        if (!listenerObj.removed && listenerObj.listener == listener &&
            listenerObj.capture == !!opt_useCapture &&
            listenerObj.handler == opt_listenerScope) {
            return i;
        }
    }
    return -1;
};
goog.provide('goog.events.MouseWheelEvent');
goog.provide('goog.events.MouseWheelHandler');
goog.provide('goog.events.MouseWheelHandler.EventType');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.EventTarget');
goog.require('goog.math');
goog.require('goog.style');
goog.require('goog.userAgent');
goog.events.MouseWheelHandler = function (element, opt_capture) {
    goog.events.EventTarget.call(this);
    this.element_ = element;
    var rtlElement = goog.dom.isElement(this.element_) ?
        (this.element_) :
        (this.element_ ?
            (this.element_).body :
            null);
    this.isRtl_ = !!rtlElement && goog.style.isRightToLeft(rtlElement);
    var type = goog.userAgent.GECKO ? 'DOMMouseScroll' : 'mousewheel';
    this.listenKey_ = goog.events.listen(this.element_, type, this, opt_capture);
};
goog.inherits(goog.events.MouseWheelHandler, goog.events.EventTarget);
goog.events.MouseWheelHandler.EventType = {
    MOUSEWHEEL: 'mousewheel'
};
goog.events.MouseWheelHandler.prototype.maxDeltaX_;
goog.events.MouseWheelHandler.prototype.maxDeltaY_;
goog.events.MouseWheelHandler.prototype.setMaxDeltaX = function (maxDeltaX) {
    this.maxDeltaX_ = maxDeltaX;
};
goog.events.MouseWheelHandler.prototype.setMaxDeltaY = function (maxDeltaY) {
    this.maxDeltaY_ = maxDeltaY;
};
goog.events.MouseWheelHandler.prototype.handleEvent = function (e) {
    var deltaX = 0;
    var deltaY = 0;
    var detail = 0;
    var be = e.getBrowserEvent();
    if (be.type == 'mousewheel') {
        var wheelDeltaScaleFactor = 40;
        detail = goog.events.MouseWheelHandler.smartScale_(-be.wheelDelta, wheelDeltaScaleFactor);
        if (goog.isDef(be.wheelDeltaX)) {
            deltaX = goog.events.MouseWheelHandler.smartScale_(-be.wheelDeltaX, wheelDeltaScaleFactor);
            deltaY = goog.events.MouseWheelHandler.smartScale_(-be.wheelDeltaY, wheelDeltaScaleFactor);
        }
        else {
            deltaY = detail;
        }
    }
    else {
        detail = be.detail;
        if (detail > 100) {
            detail = 3;
        }
        else if (detail < -100) {
            detail = -3;
        }
        if (goog.isDef(be.axis) && be.axis === be.HORIZONTAL_AXIS) {
            deltaX = detail;
        }
        else {
            deltaY = detail;
        }
    }
    if (goog.isNumber(this.maxDeltaX_)) {
        deltaX = goog.math.clamp(deltaX, -this.maxDeltaX_, this.maxDeltaX_);
    }
    if (goog.isNumber(this.maxDeltaY_)) {
        deltaY = goog.math.clamp(deltaY, -this.maxDeltaY_, this.maxDeltaY_);
    }
    if (this.isRtl_) {
        deltaX = -deltaX;
    }
    var newEvent = new goog.events.MouseWheelEvent(detail, be, deltaX, deltaY);
    this.dispatchEvent(newEvent);
};
goog.events.MouseWheelHandler.smartScale_ = function (mouseWheelDelta, scaleFactor) {
    if (goog.userAgent.WEBKIT && (goog.userAgent.MAC || goog.userAgent.LINUX) &&
        (mouseWheelDelta % scaleFactor) != 0) {
        return mouseWheelDelta;
    }
    else {
        return mouseWheelDelta / scaleFactor;
    }
};
goog.events.MouseWheelHandler.prototype.disposeInternal = function () {
    goog.events.MouseWheelHandler.superClass_.disposeInternal.call(this);
    goog.events.unlistenByKey(this.listenKey_);
    this.listenKey_ = null;
};
goog.events.MouseWheelEvent = function (detail, browserEvent, deltaX, deltaY) {
    goog.events.BrowserEvent.call(this, browserEvent);
    this.type = goog.events.MouseWheelHandler.EventType.MOUSEWHEEL;
    this.detail = detail;
    this.deltaX = deltaX;
    this.deltaY = deltaY;
};
goog.inherits(goog.events.MouseWheelEvent, goog.events.BrowserEvent);
goog.provide('goog.fs.url');
goog.fs.url.createObjectUrl = function (blob) {
    return goog.fs.url.getUrlObject_().createObjectURL(blob);
};
goog.fs.url.revokeObjectUrl = function (url) {
    goog.fs.url.getUrlObject_().revokeObjectURL(url);
};
goog.fs.url.UrlObject_;
goog.fs.url.getUrlObject_ = function () {
    var urlObject = goog.fs.url.findUrlObject_();
    if (urlObject != null) {
        return urlObject;
    }
    else {
        throw new Error('This browser doesn\'t seem to support blob URLs');
    }
};
goog.fs.url.findUrlObject_ = function () {
    if (goog.isDef(goog.global.URL) &&
        goog.isDef(goog.global.URL.createObjectURL)) {
        return (goog.global.URL);
    }
    else if (goog.isDef(goog.global.webkitURL) &&
        goog.isDef(goog.global.webkitURL.createObjectURL)) {
        return (goog.global.webkitURL);
    }
    else if (goog.isDef(goog.global.createObjectURL)) {
        return (goog.global);
    }
    else {
        return null;
    }
};
goog.fs.url.browserSupportsObjectUrls = function () {
    return goog.fs.url.findUrlObject_() != null;
};
goog.provide('goog.fx.Transition');
goog.provide('goog.fx.Transition.EventType');
goog.fx.Transition = function () { };
goog.fx.Transition.EventType = {
    PLAY: 'play',
    BEGIN: 'begin',
    RESUME: 'resume',
    END: 'end',
    STOP: 'stop',
    FINISH: 'finish',
    PAUSE: 'pause'
};
goog.fx.Transition.prototype.play;
goog.fx.Transition.prototype.stop;
goog.provide('goog.fx.TransitionBase');
goog.provide('goog.fx.TransitionBase.State');
goog.require('goog.events.EventTarget');
goog.require('goog.fx.Transition');
goog.fx.TransitionBase = function () {
    goog.fx.TransitionBase.base(this, 'constructor');
    this.state_ = goog.fx.TransitionBase.State.STOPPED;
    this.startTime = null;
    this.endTime = null;
};
goog.inherits(goog.fx.TransitionBase, goog.events.EventTarget);
goog.fx.TransitionBase.State = {
    STOPPED: 0,
    PAUSED: -1,
    PLAYING: 1
};
goog.fx.TransitionBase.prototype.play = goog.abstractMethod;
goog.fx.TransitionBase.prototype.stop = goog.abstractMethod;
goog.fx.TransitionBase.prototype.pause = goog.abstractMethod;
goog.fx.TransitionBase.prototype.getStateInternal = function () {
    return this.state_;
};
goog.fx.TransitionBase.prototype.setStatePlaying = function () {
    this.state_ = goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.setStatePaused = function () {
    this.state_ = goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.setStateStopped = function () {
    this.state_ = goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.isPlaying = function () {
    return this.state_ == goog.fx.TransitionBase.State.PLAYING;
};
goog.fx.TransitionBase.prototype.isPaused = function () {
    return this.state_ == goog.fx.TransitionBase.State.PAUSED;
};
goog.fx.TransitionBase.prototype.isStopped = function () {
    return this.state_ == goog.fx.TransitionBase.State.STOPPED;
};
goog.fx.TransitionBase.prototype.onBegin = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.BEGIN);
};
goog.fx.TransitionBase.prototype.onEnd = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.END);
};
goog.fx.TransitionBase.prototype.onFinish = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.FINISH);
};
goog.fx.TransitionBase.prototype.onPause = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.PAUSE);
};
goog.fx.TransitionBase.prototype.onPlay = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.PLAY);
};
goog.fx.TransitionBase.prototype.onResume = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.RESUME);
};
goog.fx.TransitionBase.prototype.onStop = function () {
    this.dispatchAnimationEvent(goog.fx.Transition.EventType.STOP);
};
goog.fx.TransitionBase.prototype.dispatchAnimationEvent = function (type) {
    this.dispatchEvent(type);
};
goog.provide('goog.fx.anim');
goog.provide('goog.fx.anim.Animated');
goog.require('goog.async.AnimationDelay');
goog.require('goog.async.Delay');
goog.require('goog.object');
goog.fx.anim.Animated = function () { };
goog.fx.anim.Animated.prototype.onAnimationFrame;
goog.fx.anim.TIMEOUT = goog.async.AnimationDelay.TIMEOUT;
goog.fx.anim.activeAnimations_ = {};
goog.fx.anim.animationWindow_ = null;
goog.fx.anim.animationDelay_ = null;
goog.fx.anim.registerAnimation = function (animation) {
    var uid = goog.getUid(animation);
    if (!(uid in goog.fx.anim.activeAnimations_)) {
        goog.fx.anim.activeAnimations_[uid] = animation;
    }
    goog.fx.anim.requestAnimationFrame_();
};
goog.fx.anim.unregisterAnimation = function (animation) {
    var uid = goog.getUid(animation);
    delete goog.fx.anim.activeAnimations_[uid];
    if (goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
        goog.fx.anim.cancelAnimationFrame_();
    }
};
goog.fx.anim.tearDown = function () {
    goog.fx.anim.animationWindow_ = null;
    goog.dispose(goog.fx.anim.animationDelay_);
    goog.fx.anim.animationDelay_ = null;
    goog.fx.anim.activeAnimations_ = {};
};
goog.fx.anim.setAnimationWindow = function (animationWindow) {
    var hasTimer = goog.fx.anim.animationDelay_ && goog.fx.anim.animationDelay_.isActive();
    goog.dispose(goog.fx.anim.animationDelay_);
    goog.fx.anim.animationDelay_ = null;
    goog.fx.anim.animationWindow_ = animationWindow;
    if (hasTimer) {
        goog.fx.anim.requestAnimationFrame_();
    }
};
goog.fx.anim.requestAnimationFrame_ = function () {
    if (!goog.fx.anim.animationDelay_) {
        if (goog.fx.anim.animationWindow_) {
            goog.fx.anim.animationDelay_ =
                new goog.async.AnimationDelay(function (now) {
                    goog.fx.anim.cycleAnimations_(now);
                }, goog.fx.anim.animationWindow_);
        }
        else {
            goog.fx.anim.animationDelay_ = new goog.async.Delay(function () {
                goog.fx.anim.cycleAnimations_(goog.now());
            }, goog.fx.anim.TIMEOUT);
        }
    }
    var delay = goog.fx.anim.animationDelay_;
    if (!delay.isActive()) {
        delay.start();
    }
};
goog.fx.anim.cancelAnimationFrame_ = function () {
    if (goog.fx.anim.animationDelay_) {
        goog.fx.anim.animationDelay_.stop();
    }
};
goog.fx.anim.cycleAnimations_ = function (now) {
    goog.object.forEach(goog.fx.anim.activeAnimations_, function (anim) {
        anim.onAnimationFrame(now);
    });
    if (!goog.object.isEmpty(goog.fx.anim.activeAnimations_)) {
        goog.fx.anim.requestAnimationFrame_();
    }
};
goog.provide('goog.fx.Animation');
goog.provide('goog.fx.Animation.EventType');
goog.provide('goog.fx.Animation.State');
goog.provide('goog.fx.AnimationEvent');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.events.Event');
goog.require('goog.fx.Transition');
goog.require('goog.fx.TransitionBase');
goog.require('goog.fx.anim');
goog.require('goog.fx.anim.Animated');
goog.fx.Animation = function (start, end, duration, opt_acc) {
    goog.fx.Animation.base(this, 'constructor');
    if (!goog.isArray(start) || !goog.isArray(end)) {
        throw new Error('Start and end parameters must be arrays');
    }
    if (start.length != end.length) {
        throw new Error('Start and end points must be the same length');
    }
    this.startPoint = start;
    this.endPoint = end;
    this.duration = duration;
    this.accel_ = opt_acc;
    this.coords = [];
    this.useRightPositioningForRtl_ = false;
    this.fps_ = 0;
    this.progress = 0;
    this.lastFrame = null;
};
goog.inherits(goog.fx.Animation, goog.fx.TransitionBase);
goog.fx.Animation.prototype.getDuration = function () {
    return this.duration;
};
goog.fx.Animation.prototype.enableRightPositioningForRtl = function (useRightPositioningForRtl) {
    this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Animation.prototype.isRightPositioningForRtlEnabled = function () {
    return this.useRightPositioningForRtl_;
};
goog.fx.Animation.EventType = {
    PLAY: goog.fx.Transition.EventType.PLAY,
    BEGIN: goog.fx.Transition.EventType.BEGIN,
    RESUME: goog.fx.Transition.EventType.RESUME,
    END: goog.fx.Transition.EventType.END,
    STOP: goog.fx.Transition.EventType.STOP,
    FINISH: goog.fx.Transition.EventType.FINISH,
    PAUSE: goog.fx.Transition.EventType.PAUSE,
    ANIMATE: 'animate',
    DESTROY: 'destroy'
};
goog.fx.Animation.TIMEOUT = goog.fx.anim.TIMEOUT;
goog.fx.Animation.State = goog.fx.TransitionBase.State;
goog.fx.Animation.setAnimationWindow = function (animationWindow) {
    goog.fx.anim.setAnimationWindow(animationWindow);
};
goog.fx.Animation.prototype.play = function (opt_restart) {
    if (opt_restart || this.isStopped()) {
        this.progress = 0;
        this.coords = this.startPoint;
    }
    else if (this.isPlaying()) {
        return false;
    }
    goog.fx.anim.unregisterAnimation(this);
    var now = (goog.now());
    this.startTime = now;
    if (this.isPaused()) {
        this.startTime -= this.duration * this.progress;
    }
    this.endTime = this.startTime + this.duration;
    this.lastFrame = this.startTime;
    if (!this.progress) {
        this.onBegin();
    }
    this.onPlay();
    if (this.isPaused()) {
        this.onResume();
    }
    this.setStatePlaying();
    goog.fx.anim.registerAnimation(this);
    this.cycle(now);
    return true;
};
goog.fx.Animation.prototype.stop = function (opt_gotoEnd) {
    goog.fx.anim.unregisterAnimation(this);
    this.setStateStopped();
    if (opt_gotoEnd) {
        this.progress = 1;
    }
    this.updateCoords_(this.progress);
    this.onStop();
    this.onEnd();
};
goog.fx.Animation.prototype.pause = function () {
    if (this.isPlaying()) {
        goog.fx.anim.unregisterAnimation(this);
        this.setStatePaused();
        this.onPause();
    }
};
goog.fx.Animation.prototype.getProgress = function () {
    return this.progress;
};
goog.fx.Animation.prototype.setProgress = function (progress) {
    this.progress = progress;
    if (this.isPlaying()) {
        var now = goog.now();
        this.startTime = now - this.duration * this.progress;
        this.endTime = this.startTime + this.duration;
    }
};
goog.fx.Animation.prototype.disposeInternal = function () {
    if (!this.isStopped()) {
        this.stop(false);
    }
    this.onDestroy();
    goog.fx.Animation.base(this, 'disposeInternal');
};
goog.fx.Animation.prototype.destroy = function () {
    this.dispose();
};
goog.fx.Animation.prototype.onAnimationFrame = function (now) {
    this.cycle(now);
};
goog.fx.Animation.prototype.cycle = function (now) {
    goog.asserts.assertNumber(this.startTime);
    goog.asserts.assertNumber(this.endTime);
    goog.asserts.assertNumber(this.lastFrame);
    if (now < this.startTime) {
        this.endTime = now + this.endTime - this.startTime;
        this.startTime = now;
    }
    this.progress = (now - this.startTime) / (this.endTime - this.startTime);
    if (this.progress > 1) {
        this.progress = 1;
    }
    this.fps_ = 1000 / (now - this.lastFrame);
    this.lastFrame = now;
    this.updateCoords_(this.progress);
    if (this.progress == 1) {
        this.setStateStopped();
        goog.fx.anim.unregisterAnimation(this);
        this.onFinish();
        this.onEnd();
    }
    else if (this.isPlaying()) {
        this.onAnimate();
    }
};
goog.fx.Animation.prototype.updateCoords_ = function (t) {
    if (goog.isFunction(this.accel_)) {
        t = this.accel_(t);
    }
    this.coords = new Array(this.startPoint.length);
    for (var i = 0; i < this.startPoint.length; i++) {
        this.coords[i] =
            (this.endPoint[i] - this.startPoint[i]) * t + this.startPoint[i];
    }
};
goog.fx.Animation.prototype.onAnimate = function () {
    this.dispatchAnimationEvent(goog.fx.Animation.EventType.ANIMATE);
};
goog.fx.Animation.prototype.onDestroy = function () {
    this.dispatchAnimationEvent(goog.fx.Animation.EventType.DESTROY);
};
goog.fx.Animation.prototype.dispatchAnimationEvent = function (type) {
    this.dispatchEvent(new goog.fx.AnimationEvent(type, this));
};
goog.fx.AnimationEvent = function (type, anim) {
    goog.fx.AnimationEvent.base(this, 'constructor', type);
    this.coords = anim.coords;
    this.x = anim.coords[0];
    this.y = anim.coords[1];
    this.z = anim.coords[2];
    this.duration = anim.duration;
    this.progress = anim.getProgress();
    this.fps = anim.fps_;
    this.state = anim.getStateInternal();
    this.anim = anim;
};
goog.inherits(goog.fx.AnimationEvent, goog.events.Event);
goog.fx.AnimationEvent.prototype.coordsAsInts = function () {
    return goog.array.map(this.coords, Math.round);
};
goog.provide('goog.fx.AnimationParallelQueue');
goog.provide('goog.fx.AnimationQueue');
goog.provide('goog.fx.AnimationSerialQueue');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.events');
goog.require('goog.fx.Animation');
goog.require('goog.fx.Transition');
goog.require('goog.fx.TransitionBase');
goog.fx.AnimationQueue = function () {
    goog.fx.AnimationQueue.base(this, 'constructor');
    this.queue = [];
};
goog.inherits(goog.fx.AnimationQueue, goog.fx.TransitionBase);
goog.fx.AnimationQueue.prototype.add = function (animation) {
    goog.asserts.assert(this.isStopped(), 'Not allowed to add animations to a running animation queue.');
    if (goog.array.contains(this.queue, animation)) {
        return;
    }
    this.queue.push(animation);
    goog.events.listen(animation, goog.fx.Transition.EventType.FINISH, this.onAnimationFinish, false, this);
};
goog.fx.AnimationQueue.prototype.remove = function (animation) {
    goog.asserts.assert(this.isStopped(), 'Not allowed to remove animations from a running animation queue.');
    if (goog.array.remove(this.queue, animation)) {
        goog.events.unlisten(animation, goog.fx.Transition.EventType.FINISH, this.onAnimationFinish, false, this);
    }
};
goog.fx.AnimationQueue.prototype.onAnimationFinish = goog.abstractMethod;
goog.fx.AnimationQueue.prototype.disposeInternal = function () {
    goog.array.forEach(this.queue, function (animation) { animation.dispose(); });
    this.queue.length = 0;
    goog.fx.AnimationQueue.base(this, 'disposeInternal');
};
goog.fx.AnimationParallelQueue = function () {
    goog.fx.AnimationParallelQueue.base(this, 'constructor');
    this.finishedCounter_ = 0;
};
goog.inherits(goog.fx.AnimationParallelQueue, goog.fx.AnimationQueue);
goog.fx.AnimationParallelQueue.prototype.play = function (opt_restart) {
    if (this.queue.length == 0) {
        return false;
    }
    if (opt_restart || this.isStopped()) {
        this.finishedCounter_ = 0;
        this.onBegin();
    }
    else if (this.isPlaying()) {
        return false;
    }
    this.onPlay();
    if (this.isPaused()) {
        this.onResume();
    }
    var resuming = this.isPaused() && !opt_restart;
    this.startTime = goog.now();
    this.endTime = null;
    this.setStatePlaying();
    goog.array.forEach(this.queue, function (anim) {
        if (!resuming || anim.isPaused()) {
            anim.play(opt_restart);
        }
    });
    return true;
};
goog.fx.AnimationParallelQueue.prototype.pause = function () {
    if (this.isPlaying()) {
        goog.array.forEach(this.queue, function (anim) {
            if (anim.isPlaying()) {
                anim.pause();
            }
        });
        this.setStatePaused();
        this.onPause();
    }
};
goog.fx.AnimationParallelQueue.prototype.stop = function (opt_gotoEnd) {
    goog.array.forEach(this.queue, function (anim) {
        if (!anim.isStopped()) {
            anim.stop(opt_gotoEnd);
        }
    });
    this.setStateStopped();
    this.endTime = goog.now();
    this.onStop();
    this.onEnd();
};
goog.fx.AnimationParallelQueue.prototype.onAnimationFinish = function (e) {
    this.finishedCounter_++;
    if (this.finishedCounter_ == this.queue.length) {
        this.endTime = goog.now();
        this.setStateStopped();
        this.onFinish();
        this.onEnd();
    }
};
goog.fx.AnimationSerialQueue = function () {
    goog.fx.AnimationSerialQueue.base(this, 'constructor');
    this.current_ = 0;
};
goog.inherits(goog.fx.AnimationSerialQueue, goog.fx.AnimationQueue);
goog.fx.AnimationSerialQueue.prototype.play = function (opt_restart) {
    if (this.queue.length == 0) {
        return false;
    }
    if (opt_restart || this.isStopped()) {
        if (this.current_ < this.queue.length &&
            !this.queue[this.current_].isStopped()) {
            this.queue[this.current_].stop(false);
        }
        this.current_ = 0;
        this.onBegin();
    }
    else if (this.isPlaying()) {
        return false;
    }
    this.onPlay();
    if (this.isPaused()) {
        this.onResume();
    }
    this.startTime = goog.now();
    this.endTime = null;
    this.setStatePlaying();
    this.queue[this.current_].play(opt_restart);
    return true;
};
goog.fx.AnimationSerialQueue.prototype.pause = function () {
    if (this.isPlaying()) {
        this.queue[this.current_].pause();
        this.setStatePaused();
        this.onPause();
    }
};
goog.fx.AnimationSerialQueue.prototype.stop = function (opt_gotoEnd) {
    this.setStateStopped();
    this.endTime = goog.now();
    if (opt_gotoEnd) {
        for (var i = this.current_; i < this.queue.length; ++i) {
            var anim = this.queue[i];
            if (anim.isStopped())
                anim.play();
            if (!anim.isStopped())
                anim.stop(true);
        }
    }
    else if (this.current_ < this.queue.length) {
        this.queue[this.current_].stop(false);
    }
    this.onStop();
    this.onEnd();
};
goog.fx.AnimationSerialQueue.prototype.onAnimationFinish = function (e) {
    if (this.isPlaying()) {
        this.current_++;
        if (this.current_ < this.queue.length) {
            this.queue[this.current_].play();
        }
        else {
            this.endTime = goog.now();
            this.setStateStopped();
            this.onFinish();
            this.onEnd();
        }
    }
};
goog.provide('goog.fx.dom');
goog.provide('goog.fx.dom.BgColorTransform');
goog.provide('goog.fx.dom.ColorTransform');
goog.provide('goog.fx.dom.Fade');
goog.provide('goog.fx.dom.FadeIn');
goog.provide('goog.fx.dom.FadeInAndShow');
goog.provide('goog.fx.dom.FadeOut');
goog.provide('goog.fx.dom.FadeOutAndHide');
goog.provide('goog.fx.dom.PredefinedEffect');
goog.provide('goog.fx.dom.Resize');
goog.provide('goog.fx.dom.ResizeHeight');
goog.provide('goog.fx.dom.ResizeWidth');
goog.provide('goog.fx.dom.Scroll');
goog.provide('goog.fx.dom.Slide');
goog.provide('goog.fx.dom.SlideFrom');
goog.provide('goog.fx.dom.Swipe');
goog.require('goog.color');
goog.require('goog.events');
goog.require('goog.fx.Animation');
goog.require('goog.fx.Transition');
goog.require('goog.style');
goog.require('goog.style.bidi');
goog.forwardDeclare('goog.events.EventHandler');
goog.fx.dom.PredefinedEffect = function (element, start, end, time, opt_acc) {
    goog.fx.Animation.call(this, start, end, time, opt_acc);
    this.element = element;
    this.rightToLeft_;
};
goog.inherits(goog.fx.dom.PredefinedEffect, goog.fx.Animation);
goog.fx.dom.PredefinedEffect.prototype.updateStyle = goog.nullFunction;
goog.fx.dom.PredefinedEffect.prototype.isRightToLeft = function () {
    if (!goog.isDef(this.rightToLeft_)) {
        this.rightToLeft_ = goog.style.isRightToLeft(this.element);
    }
    return this.rightToLeft_;
};
goog.fx.dom.PredefinedEffect.prototype.onAnimate = function () {
    this.updateStyle();
    goog.fx.dom.PredefinedEffect.superClass_.onAnimate.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onEnd = function () {
    this.updateStyle();
    goog.fx.dom.PredefinedEffect.superClass_.onEnd.call(this);
};
goog.fx.dom.PredefinedEffect.prototype.onBegin = function () {
    this.updateStyle();
    goog.fx.dom.PredefinedEffect.superClass_.onBegin.call(this);
};
goog.fx.dom.Slide = function (element, start, end, time, opt_acc) {
    if (start.length != 2 || end.length != 2) {
        throw new Error('Start and end points must be 2D');
    }
    goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Slide, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Slide.prototype.updateStyle = function () {
    var pos = (this.isRightPositioningForRtlEnabled() && this.isRightToLeft()) ?
        'right' :
        'left';
    this.element.style[pos] = Math.round(this.coords[0]) + 'px';
    this.element.style.top = Math.round(this.coords[1]) + 'px';
};
goog.fx.dom.SlideFrom = function (element, end, time, opt_acc) {
    this.startPoint;
    var offsetLeft = this.isRightPositioningForRtlEnabled() ?
        goog.style.bidi.getOffsetStart(element) :
        (element).offsetLeft;
    var start = [offsetLeft, (element).offsetTop];
    goog.fx.dom.Slide.call(this, element, start, end, time, opt_acc);
};
goog.inherits(goog.fx.dom.SlideFrom, goog.fx.dom.Slide);
goog.fx.dom.SlideFrom.prototype.onBegin = function () {
    var offsetLeft = this.isRightPositioningForRtlEnabled() ?
        goog.style.bidi.getOffsetStart(this.element) :
        this.element.offsetLeft;
    this.startPoint = [
        offsetLeft,
        (this.element).offsetTop
    ];
    goog.fx.dom.SlideFrom.superClass_.onBegin.call(this);
};
goog.fx.dom.Swipe = function (element, start, end, time, opt_acc) {
    if (start.length != 2 || end.length != 2) {
        throw new Error('Start and end points must be 2D');
    }
    goog.fx.dom.PredefinedEffect.apply(this, arguments);
    this.maxWidth_ = Math.max(this.endPoint[0], this.startPoint[0]);
    this.maxHeight_ = Math.max(this.endPoint[1], this.startPoint[1]);
};
goog.inherits(goog.fx.dom.Swipe, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Swipe.prototype.updateStyle = function () {
    var x = this.coords[0];
    var y = this.coords[1];
    this.clip_(Math.round(x), Math.round(y), this.maxWidth_, this.maxHeight_);
    this.element.style.width = Math.round(x) + 'px';
    var marginX = (this.isRightPositioningForRtlEnabled() && this.isRightToLeft()) ?
        'marginRight' :
        'marginLeft';
    this.element.style[marginX] = Math.round(x) - this.maxWidth_ + 'px';
    this.element.style.marginTop = Math.round(y) - this.maxHeight_ + 'px';
};
goog.fx.dom.Swipe.prototype.clip_ = function (x, y, w, h) {
    this.element.style.clip =
        'rect(' + (h - y) + 'px ' + w + 'px ' + h + 'px ' + (w - x) + 'px)';
};
goog.fx.dom.Scroll = function (element, start, end, time, opt_acc) {
    if (start.length != 2 || end.length != 2) {
        throw new Error('Start and end points must be 2D');
    }
    goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Scroll, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Scroll.prototype.updateStyle = function () {
    if (this.isRightPositioningForRtlEnabled()) {
        goog.style.bidi.setScrollOffset(this.element, Math.round(this.coords[0]));
    }
    else {
        this.element.scrollLeft = Math.round(this.coords[0]);
    }
    this.element.scrollTop = Math.round(this.coords[1]);
};
goog.fx.dom.Resize = function (element, start, end, time, opt_acc) {
    if (start.length != 2 || end.length != 2) {
        throw new Error('Start and end points must be 2D');
    }
    goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.Resize, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Resize.prototype.updateStyle = function () {
    this.element.style.width = Math.round(this.coords[0]) + 'px';
    this.element.style.height = Math.round(this.coords[1]) + 'px';
};
goog.fx.dom.ResizeWidth = function (element, start, end, time, opt_acc) {
    goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeWidth, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeWidth.prototype.updateStyle = function () {
    this.element.style.width = Math.round(this.coords[0]) + 'px';
};
goog.fx.dom.ResizeHeight = function (element, start, end, time, opt_acc) {
    goog.fx.dom.PredefinedEffect.call(this, element, [start], [end], time, opt_acc);
};
goog.inherits(goog.fx.dom.ResizeHeight, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ResizeHeight.prototype.updateStyle = function () {
    this.element.style.height = Math.round(this.coords[0]) + 'px';
};
goog.fx.dom.Fade = function (element, start, end, time, opt_acc) {
    if (goog.isNumber(start))
        start = [start];
    if (goog.isNumber(end))
        end = [end];
    goog.fx.dom.Fade.base(this, 'constructor', element, start, end, time, opt_acc);
    if (start.length != 1 || end.length != 1) {
        throw new Error('Start and end points must be 1D');
    }
    this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
};
goog.inherits(goog.fx.dom.Fade, goog.fx.dom.PredefinedEffect);
goog.fx.dom.Fade.TOLERANCE_ = 1.0 / 0x400;
goog.fx.dom.Fade.OPACITY_UNSET_ = -1;
goog.fx.dom.Fade.prototype.updateStyle = function () {
    var opacity = this.coords[0];
    var delta = Math.abs(opacity - this.lastOpacityUpdate_);
    if (delta >= goog.fx.dom.Fade.TOLERANCE_) {
        goog.style.setOpacity(this.element, opacity);
        this.lastOpacityUpdate_ = opacity;
    }
};
goog.fx.dom.Fade.prototype.onBegin = function () {
    this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
    goog.fx.dom.Fade.base(this, 'onBegin');
};
goog.fx.dom.Fade.prototype.onEnd = function () {
    this.lastOpacityUpdate_ = goog.fx.dom.Fade.OPACITY_UNSET_;
    goog.fx.dom.Fade.base(this, 'onEnd');
};
goog.fx.dom.Fade.prototype.show = function () {
    this.element.style.display = '';
};
goog.fx.dom.Fade.prototype.hide = function () {
    this.element.style.display = 'none';
};
goog.fx.dom.FadeOut = function (element, time, opt_acc) {
    goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOut, goog.fx.dom.Fade);
goog.fx.dom.FadeIn = function (element, time, opt_acc) {
    goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeIn, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide = function (element, time, opt_acc) {
    goog.fx.dom.Fade.call(this, element, 1, 0, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeOutAndHide, goog.fx.dom.Fade);
goog.fx.dom.FadeOutAndHide.prototype.onBegin = function () {
    this.show();
    goog.fx.dom.FadeOutAndHide.superClass_.onBegin.call(this);
};
goog.fx.dom.FadeOutAndHide.prototype.onEnd = function () {
    this.hide();
    goog.fx.dom.FadeOutAndHide.superClass_.onEnd.call(this);
};
goog.fx.dom.FadeInAndShow = function (element, time, opt_acc) {
    goog.fx.dom.Fade.call(this, element, 0, 1, time, opt_acc);
};
goog.inherits(goog.fx.dom.FadeInAndShow, goog.fx.dom.Fade);
goog.fx.dom.FadeInAndShow.prototype.onBegin = function () {
    this.show();
    goog.fx.dom.FadeInAndShow.superClass_.onBegin.call(this);
};
goog.fx.dom.BgColorTransform = function (element, start, end, time, opt_acc) {
    if (start.length != 3 || end.length != 3) {
        throw new Error('Start and end points must be 3D');
    }
    goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.BgColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.BgColorTransform.prototype.setColor = function () {
    var coordsAsInts = [];
    for (var i = 0; i < this.coords.length; i++) {
        coordsAsInts[i] = Math.round(this.coords[i]);
    }
    var color = 'rgb(' + coordsAsInts.join(',') + ')';
    this.element.style.backgroundColor = color;
};
goog.fx.dom.BgColorTransform.prototype.updateStyle = function () {
    this.setColor();
};
goog.fx.dom.bgColorFadeIn = function (element, start, time, opt_eventHandler) {
    var initialBgColor = element.style.backgroundColor || '';
    var computedBgColor = goog.style.getBackgroundColor(element);
    var end;
    if (computedBgColor && computedBgColor != 'transparent' &&
        computedBgColor != 'rgba(0, 0, 0, 0)') {
        end = goog.color.hexToRgb(goog.color.parse(computedBgColor).hex);
    }
    else {
        end = [255, 255, 255];
    }
    var anim = new goog.fx.dom.BgColorTransform(element, start, end, time);
    function setBgColor() { element.style.backgroundColor = initialBgColor; }
    if (opt_eventHandler) {
        opt_eventHandler.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
    }
    else {
        goog.events.listen(anim, goog.fx.Transition.EventType.END, setBgColor);
    }
    anim.play();
};
goog.fx.dom.ColorTransform = function (element, start, end, time, opt_acc) {
    if (start.length != 3 || end.length != 3) {
        throw new Error('Start and end points must be 3D');
    }
    goog.fx.dom.PredefinedEffect.apply(this, arguments);
};
goog.inherits(goog.fx.dom.ColorTransform, goog.fx.dom.PredefinedEffect);
goog.fx.dom.ColorTransform.prototype.updateStyle = function () {
    var coordsAsInts = [];
    for (var i = 0; i < this.coords.length; i++) {
        coordsAsInts[i] = Math.round(this.coords[i]);
    }
    var color = 'rgb(' + coordsAsInts.join(',') + ')';
    this.element.style.color = color;
};
goog.provide('goog.fx.DragEvent');
goog.provide('goog.fx.Dragger');
goog.provide('goog.fx.Dragger.EventType');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.events');
goog.require('goog.events.Event');
goog.require('goog.events.EventHandler');
goog.require('goog.events.EventTarget');
goog.require('goog.events.EventType');
goog.require('goog.math.Coordinate');
goog.require('goog.math.Rect');
goog.require('goog.style');
goog.require('goog.style.bidi');
goog.require('goog.userAgent');
goog.fx.Dragger = function (target, opt_handle, opt_limits) {
    goog.fx.Dragger.base(this, 'constructor');
    this.target = target;
    this.handle = opt_handle || target;
    this.limits = opt_limits || new goog.math.Rect(NaN, NaN, NaN, NaN);
    this.document_ = goog.dom.getOwnerDocument(target);
    this.eventHandler_ = new goog.events.EventHandler(this);
    this.registerDisposable(this.eventHandler_);
    this.rightToLeft_;
    this.clientX = 0;
    this.clientY = 0;
    this.screenX = 0;
    this.screenY = 0;
    this.startX = 0;
    this.startY = 0;
    this.deltaX = 0;
    this.deltaY = 0;
    this.pageScroll;
    this.enabled_ = true;
    this.dragging_ = false;
    this.preventMouseDown_ = true;
    this.hysteresisDistanceSquared_ = 0;
    this.scrollTarget_;
    this.ieDragStartCancellingOn_ = false;
    this.useRightPositioningForRtl_ = false;
    goog.events.listen(this.handle, [goog.events.EventType.TOUCHSTART, goog.events.EventType.MOUSEDOWN], this.startDrag, false, this);
    this.useSetCapture_ = goog.fx.Dragger.HAS_SET_CAPTURE_;
};
goog.inherits(goog.fx.Dragger, goog.events.EventTarget);
goog.tagUnsealableClass(goog.fx.Dragger);
goog.fx.Dragger.HAS_SET_CAPTURE_ = goog.global.document &&
    goog.global.document.documentElement &&
    !!goog.global.document.documentElement.setCapture &&
    !!goog.global.document.releaseCapture;
goog.fx.Dragger.cloneNode = function (sourceEl) {
    var clonedEl = sourceEl.cloneNode(true), origTexts = goog.dom.getElementsByTagName(goog.dom.TagName.TEXTAREA, sourceEl), dragTexts = goog.dom.getElementsByTagName(goog.dom.TagName.TEXTAREA, clonedEl);
    for (var i = 0; i < origTexts.length; i++) {
        dragTexts[i].value = origTexts[i].value;
    }
    switch (sourceEl.tagName) {
        case String(goog.dom.TagName.TR):
            return goog.dom.createDom(goog.dom.TagName.TABLE, null, goog.dom.createDom(goog.dom.TagName.TBODY, null, clonedEl));
        case String(goog.dom.TagName.TD):
        case String(goog.dom.TagName.TH):
            return goog.dom.createDom(goog.dom.TagName.TABLE, null, goog.dom.createDom(goog.dom.TagName.TBODY, null, goog.dom.createDom(goog.dom.TagName.TR, null, clonedEl)));
        case String(goog.dom.TagName.TEXTAREA):
            clonedEl.value = sourceEl.value;
        default:
            return clonedEl;
    }
};
goog.fx.Dragger.EventType = {
    EARLY_CANCEL: 'earlycancel',
    START: 'start',
    BEFOREDRAG: 'beforedrag',
    DRAG: 'drag',
    END: 'end'
};
goog.fx.Dragger.prototype.setAllowSetCapture = function (allow) {
    this.useSetCapture_ = allow && goog.fx.Dragger.HAS_SET_CAPTURE_;
};
goog.fx.Dragger.prototype.enableRightPositioningForRtl = function (useRightPositioningForRtl) {
    this.useRightPositioningForRtl_ = useRightPositioningForRtl;
};
goog.fx.Dragger.prototype.getHandler = function () {
    var self = (this);
    return self.eventHandler_;
};
goog.fx.Dragger.prototype.setLimits = function (limits) {
    this.limits = limits || new goog.math.Rect(NaN, NaN, NaN, NaN);
};
goog.fx.Dragger.prototype.setHysteresis = function (distance) {
    this.hysteresisDistanceSquared_ = Math.pow(distance, 2);
};
goog.fx.Dragger.prototype.getHysteresis = function () {
    return Math.sqrt(this.hysteresisDistanceSquared_);
};
goog.fx.Dragger.prototype.setScrollTarget = function (scrollTarget) {
    this.scrollTarget_ = scrollTarget;
};
goog.fx.Dragger.prototype.setCancelIeDragStart = function (cancelIeDragStart) {
    this.ieDragStartCancellingOn_ = cancelIeDragStart;
};
goog.fx.Dragger.prototype.getEnabled = function () {
    return this.enabled_;
};
goog.fx.Dragger.prototype.setEnabled = function (enabled) {
    this.enabled_ = enabled;
};
goog.fx.Dragger.prototype.setPreventMouseDown = function (preventMouseDown) {
    this.preventMouseDown_ = preventMouseDown;
};
goog.fx.Dragger.prototype.disposeInternal = function () {
    goog.fx.Dragger.superClass_.disposeInternal.call(this);
    goog.events.unlisten(this.handle, [goog.events.EventType.TOUCHSTART, goog.events.EventType.MOUSEDOWN], this.startDrag, false, this);
    this.cleanUpAfterDragging_();
    this.target = null;
    this.handle = null;
};
goog.fx.Dragger.prototype.isRightToLeft_ = function () {
    if (!goog.isDef(this.rightToLeft_)) {
        this.rightToLeft_ = goog.style.isRightToLeft(this.target);
    }
    return this.rightToLeft_;
};
goog.fx.Dragger.prototype.startDrag = function (e) {
    var isMouseDown = e.type == goog.events.EventType.MOUSEDOWN;
    if (this.enabled_ && !this.dragging_ &&
        (!isMouseDown || e.isMouseActionButton())) {
        if (this.hysteresisDistanceSquared_ == 0) {
            if (this.fireDragStart_(e)) {
                this.dragging_ = true;
                if (this.preventMouseDown_ && isMouseDown) {
                    e.preventDefault();
                }
            }
            else {
                return;
            }
        }
        else if (this.preventMouseDown_ && isMouseDown) {
            e.preventDefault();
        }
        this.setupDragHandlers();
        this.clientX = this.startX = e.clientX;
        this.clientY = this.startY = e.clientY;
        this.screenX = e.screenX;
        this.screenY = e.screenY;
        this.computeInitialPosition();
        this.pageScroll = goog.dom.getDomHelper(this.document_).getDocumentScroll();
    }
    else {
        this.dispatchEvent(goog.fx.Dragger.EventType.EARLY_CANCEL);
    }
};
goog.fx.Dragger.prototype.setupDragHandlers = function () {
    var doc = this.document_;
    var docEl = doc.documentElement;
    var useCapture = !this.useSetCapture_;
    this.eventHandler_.listen(doc, [goog.events.EventType.TOUCHMOVE, goog.events.EventType.MOUSEMOVE], this.handleMove_, { capture: useCapture, passive: false });
    this.eventHandler_.listen(doc, [goog.events.EventType.TOUCHEND, goog.events.EventType.MOUSEUP], this.endDrag, useCapture);
    if (this.useSetCapture_) {
        docEl.setCapture(false);
        this.eventHandler_.listen(docEl, goog.events.EventType.LOSECAPTURE, this.endDrag);
    }
    else {
        this.eventHandler_.listen(goog.dom.getWindow(doc), goog.events.EventType.BLUR, this.endDrag);
    }
    if (goog.userAgent.IE && this.ieDragStartCancellingOn_) {
        this.eventHandler_.listen(doc, goog.events.EventType.DRAGSTART, goog.events.Event.preventDefault);
    }
    if (this.scrollTarget_) {
        this.eventHandler_.listen(this.scrollTarget_, goog.events.EventType.SCROLL, this.onScroll_, useCapture);
    }
};
goog.fx.Dragger.prototype.fireDragStart_ = function (e) {
    return this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.START, this, e.clientX, e.clientY, e));
};
goog.fx.Dragger.prototype.cleanUpAfterDragging_ = function () {
    this.eventHandler_.removeAll();
    if (this.useSetCapture_) {
        this.document_.releaseCapture();
    }
};
goog.fx.Dragger.prototype.endDrag = function (e, opt_dragCanceled) {
    this.cleanUpAfterDragging_();
    if (this.dragging_) {
        this.dragging_ = false;
        var x = this.limitX(this.deltaX);
        var y = this.limitY(this.deltaY);
        var dragCanceled = opt_dragCanceled || e.type == goog.events.EventType.TOUCHCANCEL;
        this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.END, this, e.clientX, e.clientY, e, x, y, dragCanceled));
    }
    else {
        this.dispatchEvent(goog.fx.Dragger.EventType.EARLY_CANCEL);
    }
};
goog.fx.Dragger.prototype.endDragCancel = function (e) {
    this.endDrag(e, true);
};
goog.fx.Dragger.prototype.handleMove_ = function (e) {
    if (this.enabled_) {
        var sign = this.useRightPositioningForRtl_ && this.isRightToLeft_() ? -1 : 1;
        var dx = sign * (e.clientX - this.clientX);
        var dy = e.clientY - this.clientY;
        this.clientX = e.clientX;
        this.clientY = e.clientY;
        this.screenX = e.screenX;
        this.screenY = e.screenY;
        if (!this.dragging_) {
            var diffX = this.startX - this.clientX;
            var diffY = this.startY - this.clientY;
            var distance = diffX * diffX + diffY * diffY;
            if (distance > this.hysteresisDistanceSquared_) {
                if (this.fireDragStart_(e)) {
                    this.dragging_ = true;
                }
                else {
                    if (!this.isDisposed()) {
                        this.endDrag(e);
                    }
                    return;
                }
            }
        }
        var pos = this.calculatePosition_(dx, dy);
        var x = pos.x;
        var y = pos.y;
        if (this.dragging_) {
            var rv = this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.BEFOREDRAG, this, e.clientX, e.clientY, e, x, y));
            if (rv) {
                this.doDrag(e, x, y, false);
                e.preventDefault();
            }
        }
    }
};
goog.fx.Dragger.prototype.calculatePosition_ = function (dx, dy) {
    var pageScroll = goog.dom.getDomHelper(this.document_).getDocumentScroll();
    dx += pageScroll.x - this.pageScroll.x;
    dy += pageScroll.y - this.pageScroll.y;
    this.pageScroll = pageScroll;
    this.deltaX += dx;
    this.deltaY += dy;
    var x = this.limitX(this.deltaX);
    var y = this.limitY(this.deltaY);
    return new goog.math.Coordinate(x, y);
};
goog.fx.Dragger.prototype.onScroll_ = function (e) {
    var pos = this.calculatePosition_(0, 0);
    e.clientX = this.clientX;
    e.clientY = this.clientY;
    this.doDrag(e, pos.x, pos.y, true);
};
goog.fx.Dragger.prototype.doDrag = function (e, x, y, dragFromScroll) {
    this.defaultAction(x, y);
    this.dispatchEvent(new goog.fx.DragEvent(goog.fx.Dragger.EventType.DRAG, this, e.clientX, e.clientY, e, x, y));
};
goog.fx.Dragger.prototype.limitX = function (x) {
    var rect = this.limits;
    var left = !isNaN(rect.left) ? rect.left : null;
    var width = !isNaN(rect.width) ? rect.width : 0;
    var maxX = left != null ? left + width : Infinity;
    var minX = left != null ? left : -Infinity;
    return Math.min(maxX, Math.max(minX, x));
};
goog.fx.Dragger.prototype.limitY = function (y) {
    var rect = this.limits;
    var top = !isNaN(rect.top) ? rect.top : null;
    var height = !isNaN(rect.height) ? rect.height : 0;
    var maxY = top != null ? top + height : Infinity;
    var minY = top != null ? top : -Infinity;
    return Math.min(maxY, Math.max(minY, y));
};
goog.fx.Dragger.prototype.computeInitialPosition = function () {
    this.deltaX = this.useRightPositioningForRtl_ ?
        goog.style.bidi.getOffsetStart(this.target) :
        (this.target).offsetLeft;
    this.deltaY = (this.target).offsetTop;
};
goog.fx.Dragger.prototype.defaultAction = function (x, y) {
    if (this.useRightPositioningForRtl_ && this.isRightToLeft_()) {
        this.target.style.right = x + 'px';
    }
    else {
        this.target.style.left = x + 'px';
    }
    this.target.style.top = y + 'px';
};
goog.fx.Dragger.prototype.isDragging = function () {
    return this.dragging_;
};
goog.fx.DragEvent = function (type, dragobj, clientX, clientY, browserEvent, opt_actX, opt_actY, opt_dragCanceled) {
    goog.events.Event.call(this, type);
    this.clientX = clientX;
    this.clientY = clientY;
    this.browserEvent = browserEvent;
    this.left = goog.isDef(opt_actX) ? opt_actX : dragobj.deltaX;
    this.top = goog.isDef(opt_actY) ? opt_actY : dragobj.deltaY;
    this.dragger = dragobj;
    this.dragCanceled = !!opt_dragCanceled;
};
goog.inherits(goog.fx.DragEvent, goog.events.Event);
goog.provide('goog.html.SafeUrl');
goog.require('goog.asserts');
goog.require('goog.fs.url');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.html.SafeUrl = function () {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';
    this.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
        goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeUrl.INNOCUOUS_STRING = 'about:invalid#zClosurez';
goog.html.SafeUrl.prototype.implementsGoogStringTypedString = true;
goog.html.SafeUrl.prototype.getTypedStringValue = function () {
    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
goog.html.SafeUrl.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeUrl.prototype.getDirection = function () {
    return goog.i18n.bidi.Dir.LTR;
};
if (goog.DEBUG) {
    goog.html.SafeUrl.prototype.toString = function () {
        return 'SafeUrl{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +
            '}';
    };
}
goog.html.SafeUrl.unwrap = function (safeUrl) {
    if (safeUrl instanceof goog.html.SafeUrl &&
        safeUrl.constructor === goog.html.SafeUrl &&
        safeUrl.SAFE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
            goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
        return safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
    }
    else {
        goog.asserts.fail('expected object of type SafeUrl, got \'' +
            safeUrl + '\' of type ' + goog.typeOf(safeUrl));
        return 'type_error:SafeUrl';
    }
};
goog.html.SafeUrl.fromConstant = function (url) {
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.SAFE_MIME_TYPE_PATTERN_ = new RegExp('^(?:audio/(?:3gpp|3gpp2|aac|midi|mp4|mpeg|ogg|x-m4a|x-wav|webm)|' +
    'image/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|' +
    'text/csv|' +
    'video/(?:mpeg|mp4|ogg|webm|quicktime))$', 'i');
goog.html.SafeUrl.fromBlob = function (blob) {
    var url = goog.html.SAFE_MIME_TYPE_PATTERN_.test(blob.type) ?
        goog.fs.url.createObjectUrl(blob) :
        goog.html.SafeUrl.INNOCUOUS_STRING;
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.DATA_URL_PATTERN_ = /^data:([^;,]*);base64,[a-z0-9+\/]+=*$/i;
goog.html.SafeUrl.fromDataUrl = function (dataUrl) {
    var match = dataUrl.match(goog.html.DATA_URL_PATTERN_);
    var valid = match && goog.html.SAFE_MIME_TYPE_PATTERN_.test(match[1]);
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(valid ? dataUrl : goog.html.SafeUrl.INNOCUOUS_STRING);
};
goog.html.SafeUrl.fromTelUrl = function (telUrl) {
    if (!goog.string.caseInsensitiveStartsWith(telUrl, 'tel:')) {
        telUrl = goog.html.SafeUrl.INNOCUOUS_STRING;
    }
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(telUrl);
};
goog.html.SafeUrl.fromTrustedResourceUrl = function (trustedResourceUrl) {
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(goog.html.TrustedResourceUrl.unwrap(trustedResourceUrl));
};
goog.html.SAFE_URL_PATTERN_ =
    /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;
goog.html.SafeUrl.sanitize = function (url) {
    if (url instanceof goog.html.SafeUrl) {
        return url;
    }
    else if (url.implementsGoogStringTypedString) {
        url = (url).getTypedStringValue();
    }
    else {
        url = String(url);
    }
    if (!goog.html.SAFE_URL_PATTERN_.test(url)) {
        url = goog.html.SafeUrl.INNOCUOUS_STRING;
    }
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.sanitizeAssertUnchanged = function (url) {
    if (url instanceof goog.html.SafeUrl) {
        return url;
    }
    else if (url.implementsGoogStringTypedString) {
        url = (url).getTypedStringValue();
    }
    else {
        url = String(url);
    }
    if (!goog.asserts.assert(goog.html.SAFE_URL_PATTERN_.test(url))) {
        url = goog.html.SafeUrl.INNOCUOUS_STRING;
    }
    return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.html.SafeUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse = function (url) {
    var safeUrl = new goog.html.SafeUrl();
    safeUrl.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = url;
    return safeUrl;
};
goog.html.SafeUrl.ABOUT_BLANK =
    goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse('about:blank');
goog.provide('goog.html.SafeHtml');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom.TagName');
goog.require('goog.dom.tags');
goog.require('goog.html.SafeScript');
goog.require('goog.html.SafeStyle');
goog.require('goog.html.SafeStyleSheet');
goog.require('goog.html.SafeUrl');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.labs.userAgent.browser');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.html.SafeHtml = function () {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = '';
    this.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
        goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
    this.dir_ = null;
};
goog.html.SafeHtml.prototype.implementsGoogI18nBidiDirectionalString = true;
goog.html.SafeHtml.prototype.getDirection = function () {
    return this.dir_;
};
goog.html.SafeHtml.prototype.implementsGoogStringTypedString = true;
goog.html.SafeHtml.prototype.getTypedStringValue = function () {
    return this.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
};
if (goog.DEBUG) {
    goog.html.SafeHtml.prototype.toString = function () {
        return 'SafeHtml{' + this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ +
            '}';
    };
}
goog.html.SafeHtml.unwrap = function (safeHtml) {
    if (safeHtml instanceof goog.html.SafeHtml &&
        safeHtml.constructor === goog.html.SafeHtml &&
        safeHtml.SAFE_HTML_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
            goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
        return safeHtml.privateDoNotAccessOrElseSafeHtmlWrappedValue_;
    }
    else {
        goog.asserts.fail('expected object of type SafeHtml, got \'' +
            safeHtml + '\' of type ' + goog.typeOf(safeHtml));
        return 'type_error:SafeHtml';
    }
};
goog.html.SafeHtml.TextOrHtml_;
goog.html.SafeHtml.htmlEscape = function (textOrHtml) {
    if (textOrHtml instanceof goog.html.SafeHtml) {
        return textOrHtml;
    }
    var dir = null;
    if (textOrHtml.implementsGoogI18nBidiDirectionalString) {
        dir = (textOrHtml)
            .getDirection();
    }
    var textAsString;
    if (textOrHtml.implementsGoogStringTypedString) {
        textAsString = (textOrHtml)
            .getTypedStringValue();
    }
    else {
        textAsString = String(textOrHtml);
    }
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.htmlEscape(textAsString), dir);
};
goog.html.SafeHtml.htmlEscapePreservingNewlines = function (textOrHtml) {
    if (textOrHtml instanceof goog.html.SafeHtml) {
        return textOrHtml;
    }
    var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.newLineToBr(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.htmlEscapePreservingNewlinesAndSpaces = function (textOrHtml) {
    if (textOrHtml instanceof goog.html.SafeHtml) {
        return textOrHtml;
    }
    var html = goog.html.SafeHtml.htmlEscape(textOrHtml);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(goog.string.whitespaceEscape(goog.html.SafeHtml.unwrap(html)), html.getDirection());
};
goog.html.SafeHtml.from = goog.html.SafeHtml.htmlEscape;
goog.html.SafeHtml.VALID_NAMES_IN_TAG_ = /^[a-zA-Z0-9-]+$/;
goog.html.SafeHtml.URL_ATTRIBUTES_ = goog.object.createSet('action', 'cite', 'data', 'formaction', 'href', 'manifest', 'poster', 'src');
goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_ = goog.object.createSet(goog.dom.TagName.APPLET, goog.dom.TagName.BASE, goog.dom.TagName.EMBED, goog.dom.TagName.IFRAME, goog.dom.TagName.LINK, goog.dom.TagName.MATH, goog.dom.TagName.META, goog.dom.TagName.OBJECT, goog.dom.TagName.SCRIPT, goog.dom.TagName.STYLE, goog.dom.TagName.SVG, goog.dom.TagName.TEMPLATE);
goog.html.SafeHtml.AttributeValue;
goog.html.SafeHtml.create = function (tagName, opt_attributes, opt_content) {
    goog.html.SafeHtml.verifyTagName(String(tagName));
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse(String(tagName), opt_attributes, opt_content);
};
goog.html.SafeHtml.verifyTagName = function (tagName) {
    if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(tagName)) {
        throw new Error('Invalid tag name <' + tagName + '>.');
    }
    if (tagName.toUpperCase() in goog.html.SafeHtml.NOT_ALLOWED_TAG_NAMES_) {
        throw new Error('Tag name <' + tagName + '> is not allowed for SafeHtml.');
    }
};
goog.html.SafeHtml.createIframe = function (opt_src, opt_srcdoc, opt_attributes, opt_content) {
    if (opt_src) {
        goog.html.TrustedResourceUrl.unwrap(opt_src);
    }
    var fixedAttributes = {};
    fixedAttributes['src'] = opt_src || null;
    fixedAttributes['srcdoc'] =
        opt_srcdoc && goog.html.SafeHtml.unwrap(opt_srcdoc);
    var defaultAttributes = { 'sandbox': '' };
    var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse('iframe', attributes, opt_content);
};
goog.html.SafeHtml.createSandboxIframe = function (opt_src, opt_srcdoc, opt_attributes, opt_content) {
    if (!goog.html.SafeHtml.canUseSandboxIframe()) {
        throw new Error('The browser does not support sandboxed iframes.');
    }
    var fixedAttributes = {};
    if (opt_src) {
        fixedAttributes['src'] =
            goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(opt_src));
    }
    else {
        fixedAttributes['src'] = null;
    }
    fixedAttributes['srcdoc'] = opt_srcdoc || null;
    fixedAttributes['sandbox'] = '';
    var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, {}, opt_attributes);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse('iframe', attributes, opt_content);
};
goog.html.SafeHtml.canUseSandboxIframe = function () {
    return goog.global['HTMLIFrameElement'] &&
        ('sandbox' in goog.global['HTMLIFrameElement'].prototype);
};
goog.html.SafeHtml.createScriptSrc = function (src, opt_attributes) {
    goog.html.TrustedResourceUrl.unwrap(src);
    var fixedAttributes = { 'src': src };
    var defaultAttributes = {};
    var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse('script', attributes);
};
goog.html.SafeHtml.createScript = function (script, opt_attributes) {
    for (var attr in opt_attributes) {
        var attrLower = attr.toLowerCase();
        if (attrLower == 'language' || attrLower == 'src' || attrLower == 'text' ||
            attrLower == 'type') {
            throw new Error('Cannot set "' + attrLower + '" attribute');
        }
    }
    var content = '';
    script = goog.array.concat(script);
    for (var i = 0; i < script.length; i++) {
        content += goog.html.SafeScript.unwrap(script[i]);
    }
    var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse('script', opt_attributes, htmlContent);
};
goog.html.SafeHtml.createStyle = function (styleSheet, opt_attributes) {
    var fixedAttributes = { 'type': 'text/css' };
    var defaultAttributes = {};
    var attributes = goog.html.SafeHtml.combineAttributes(fixedAttributes, defaultAttributes, opt_attributes);
    var content = '';
    styleSheet = goog.array.concat(styleSheet);
    for (var i = 0; i < styleSheet.length; i++) {
        content += goog.html.SafeStyleSheet.unwrap(styleSheet[i]);
    }
    var htmlContent = goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, goog.i18n.bidi.Dir.NEUTRAL);
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse('style', attributes, htmlContent);
};
goog.html.SafeHtml.createMetaRefresh = function (url, opt_secs) {
    var unwrappedUrl = goog.html.SafeUrl.unwrap(goog.html.SafeUrl.sanitize(url));
    if (goog.labs.userAgent.browser.isIE() ||
        goog.labs.userAgent.browser.isEdge()) {
        if (goog.string.contains(unwrappedUrl, ';')) {
            unwrappedUrl = "'" + unwrappedUrl.replace(/'/g, '%27') + "'";
        }
    }
    var attributes = {
        'http-equiv': 'refresh',
        'content': (opt_secs || 0) + '; url=' + unwrappedUrl
    };
    return goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse('meta', attributes);
};
goog.html.SafeHtml.getAttrNameAndValue_ = function (tagName, name, value) {
    if (value instanceof goog.string.Const) {
        value = goog.string.Const.unwrap(value);
    }
    else if (name.toLowerCase() == 'style') {
        value = goog.html.SafeHtml.getStyleValue_(value);
    }
    else if (/^on/i.test(name)) {
        throw new Error('Attribute "' + name + '" requires goog.string.Const value, "' + value +
            '" given.');
    }
    else if (name.toLowerCase() in goog.html.SafeHtml.URL_ATTRIBUTES_) {
        if (value instanceof goog.html.TrustedResourceUrl) {
            value = goog.html.TrustedResourceUrl.unwrap(value);
        }
        else if (value instanceof goog.html.SafeUrl) {
            value = goog.html.SafeUrl.unwrap(value);
        }
        else if (goog.isString(value)) {
            value = goog.html.SafeUrl.sanitize(value).getTypedStringValue();
        }
        else {
            throw new Error('Attribute "' + name + '" on tag "' + tagName +
                '" requires goog.html.SafeUrl, goog.string.Const, or string,' +
                ' value "' + value + '" given.');
        }
    }
    if (value.implementsGoogStringTypedString) {
        value =
            (value).getTypedStringValue();
    }
    goog.asserts.assert(goog.isString(value) || goog.isNumber(value), 'String or number value expected, got ' + (typeof value) +
        ' with value: ' + value);
    return name + '="' + goog.string.htmlEscape(String(value)) + '"';
};
goog.html.SafeHtml.getStyleValue_ = function (value) {
    if (!goog.isObject(value)) {
        throw new Error('The "style" attribute requires goog.html.SafeStyle or map ' +
            'of style properties, ' + (typeof value) + ' given: ' + value);
    }
    if (!(value instanceof goog.html.SafeStyle)) {
        value = goog.html.SafeStyle.create(value);
    }
    return goog.html.SafeStyle.unwrap(value);
};
goog.html.SafeHtml.createWithDir = function (dir, tagName, opt_attributes, opt_content) {
    var html = goog.html.SafeHtml.create(tagName, opt_attributes, opt_content);
    html.dir_ = dir;
    return html;
};
goog.html.SafeHtml.concat = function (var_args) {
    var dir = goog.i18n.bidi.Dir.NEUTRAL;
    var content = '';
    var addArgument = function (argument) {
        if (goog.isArray(argument)) {
            goog.array.forEach(argument, addArgument);
        }
        else {
            var html = goog.html.SafeHtml.htmlEscape(argument);
            content += goog.html.SafeHtml.unwrap(html);
            var htmlDir = html.getDirection();
            if (dir == goog.i18n.bidi.Dir.NEUTRAL) {
                dir = htmlDir;
            }
            else if (htmlDir != goog.i18n.bidi.Dir.NEUTRAL && dir != htmlDir) {
                dir = null;
            }
        }
    };
    goog.array.forEach(arguments, addArgument);
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(content, dir);
};
goog.html.SafeHtml.concatWithDir = function (dir, var_args) {
    var html = goog.html.SafeHtml.concat(goog.array.slice(arguments, 1));
    html.dir_ = dir;
    return html;
};
goog.html.SafeHtml.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse = function (html, dir) {
    return new goog.html.SafeHtml().initSecurityPrivateDoNotAccessOrElse_(html, dir);
};
goog.html.SafeHtml.prototype.initSecurityPrivateDoNotAccessOrElse_ = function (html, dir) {
    this.privateDoNotAccessOrElseSafeHtmlWrappedValue_ = html;
    this.dir_ = dir;
    return this;
};
goog.html.SafeHtml.createSafeHtmlTagSecurityPrivateDoNotAccessOrElse = function (tagName, opt_attributes, opt_content) {
    var dir = null;
    var result = '<' + tagName;
    result += goog.html.SafeHtml.stringifyAttributes(tagName, opt_attributes);
    var content = opt_content;
    if (!goog.isDefAndNotNull(content)) {
        content = [];
    }
    else if (!goog.isArray(content)) {
        content = [content];
    }
    if (goog.dom.tags.isVoidTag(tagName.toLowerCase())) {
        goog.asserts.assert(!content.length, 'Void tag <' + tagName + '> does not allow content.');
        result += '>';
    }
    else {
        var html = goog.html.SafeHtml.concat(content);
        result += '>' + goog.html.SafeHtml.unwrap(html) + '</' + tagName + '>';
        dir = html.getDirection();
    }
    var dirAttribute = opt_attributes && opt_attributes['dir'];
    if (dirAttribute) {
        if (/^(ltr|rtl|auto)$/i.test(dirAttribute)) {
            dir = goog.i18n.bidi.Dir.NEUTRAL;
        }
        else {
            dir = null;
        }
    }
    return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(result, dir);
};
goog.html.SafeHtml.stringifyAttributes = function (tagName, opt_attributes) {
    var result = '';
    if (opt_attributes) {
        for (var name in opt_attributes) {
            if (!goog.html.SafeHtml.VALID_NAMES_IN_TAG_.test(name)) {
                throw new Error('Invalid attribute name "' + name + '".');
            }
            var value = opt_attributes[name];
            if (!goog.isDefAndNotNull(value)) {
                continue;
            }
            result +=
                ' ' + goog.html.SafeHtml.getAttrNameAndValue_(tagName, name, value);
        }
    }
    return result;
};
goog.html.SafeHtml.combineAttributes = function (fixedAttributes, defaultAttributes, opt_attributes) {
    var combinedAttributes = {};
    var name;
    for (name in fixedAttributes) {
        goog.asserts.assert(name.toLowerCase() == name, 'Must be lower case');
        combinedAttributes[name] = fixedAttributes[name];
    }
    for (name in defaultAttributes) {
        goog.asserts.assert(name.toLowerCase() == name, 'Must be lower case');
        combinedAttributes[name] = defaultAttributes[name];
    }
    for (name in opt_attributes) {
        var nameLower = name.toLowerCase();
        if (nameLower in fixedAttributes) {
            throw new Error('Cannot override "' + nameLower + '" attribute, got "' + name +
                '" with value "' + opt_attributes[name] + '"');
        }
        if (nameLower in defaultAttributes) {
            delete combinedAttributes[nameLower];
        }
        combinedAttributes[name] = opt_attributes[name];
    }
    return combinedAttributes;
};
goog.html.SafeHtml.DOCTYPE_HTML =
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse('<!DOCTYPE html>', goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.EMPTY =
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse('', goog.i18n.bidi.Dir.NEUTRAL);
goog.html.SafeHtml.BR =
    goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse('<br>', goog.i18n.bidi.Dir.NEUTRAL);
goog.provide('goog.html.SafeScript');
goog.require('goog.asserts');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.html.SafeScript = function () {
    this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = '';
    this.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
        goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeScript.prototype.implementsGoogStringTypedString = true;
goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeScript.fromConstant = function (script) {
    var scriptString = goog.string.Const.unwrap(script);
    if (scriptString.length === 0) {
        return goog.html.SafeScript.EMPTY;
    }
    return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(scriptString);
};
goog.html.SafeScript.fromConstantAndArgs = function (code, var_args) {
    var args = [];
    for (var i = 1; i < arguments.length; i++) {
        args.push(goog.html.SafeScript.stringify_(arguments[i]));
    }
    return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse('(' + goog.string.Const.unwrap(code) + ')(' + args.join(', ') + ');');
};
goog.html.SafeScript.prototype.getTypedStringValue = function () {
    return this.privateDoNotAccessOrElseSafeScriptWrappedValue_;
};
if (goog.DEBUG) {
    goog.html.SafeScript.prototype.toString = function () {
        return 'SafeScript{' +
            this.privateDoNotAccessOrElseSafeScriptWrappedValue_ + '}';
    };
}
goog.html.SafeScript.unwrap = function (safeScript) {
    if (safeScript instanceof goog.html.SafeScript &&
        safeScript.constructor === goog.html.SafeScript &&
        safeScript.SAFE_SCRIPT_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
            goog.html.SafeScript.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
        return safeScript.privateDoNotAccessOrElseSafeScriptWrappedValue_;
    }
    else {
        goog.asserts.fail('expected object of type SafeScript, got \'' +
            safeScript + '\' of type ' + goog.typeOf(safeScript));
        return 'type_error:SafeScript';
    }
};
goog.html.SafeScript.stringify_ = function (val) {
    var json = JSON.stringify(val);
    return json.replace(/</g, '\\x3c');
};
goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse =
    function (script) {
        return new goog.html.SafeScript().initSecurityPrivateDoNotAccessOrElse_(script);
    };
goog.html.SafeScript.prototype.initSecurityPrivateDoNotAccessOrElse_ = function (script) {
    this.privateDoNotAccessOrElseSafeScriptWrappedValue_ = script;
    return this;
};
goog.html.SafeScript.EMPTY =
    goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse('');
goog.provide('goog.html.SafeStyle');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.html.SafeUrl');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.html.SafeStyle = function () {
    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = '';
    this.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
        goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyle.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyle.fromConstant = function (style) {
    var styleString = goog.string.Const.unwrap(style);
    if (styleString.length === 0) {
        return goog.html.SafeStyle.EMPTY;
    }
    goog.html.SafeStyle.checkStyle_(styleString);
    goog.asserts.assert(goog.string.endsWith(styleString, ';'), 'Last character of style string is not \';\': ' + styleString);
    goog.asserts.assert(goog.string.contains(styleString, ':'), 'Style string must contain at least one \':\', to ' +
        'specify a "name: value" pair: ' + styleString);
    return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(styleString);
};
goog.html.SafeStyle.checkStyle_ = function (style) {
    goog.asserts.assert(!/[<>]/.test(style), 'Forbidden characters in style string: ' + style);
};
goog.html.SafeStyle.prototype.getTypedStringValue = function () {
    return this.privateDoNotAccessOrElseSafeStyleWrappedValue_;
};
if (goog.DEBUG) {
    goog.html.SafeStyle.prototype.toString = function () {
        return 'SafeStyle{' + this.privateDoNotAccessOrElseSafeStyleWrappedValue_ +
            '}';
    };
}
goog.html.SafeStyle.unwrap = function (safeStyle) {
    if (safeStyle instanceof goog.html.SafeStyle &&
        safeStyle.constructor === goog.html.SafeStyle &&
        safeStyle.SAFE_STYLE_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
            goog.html.SafeStyle.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
        return safeStyle.privateDoNotAccessOrElseSafeStyleWrappedValue_;
    }
    else {
        goog.asserts.fail('expected object of type SafeStyle, got \'' +
            safeStyle + '\' of type ' + goog.typeOf(safeStyle));
        return 'type_error:SafeStyle';
    }
};
goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse = function (style) {
    return new goog.html.SafeStyle().initSecurityPrivateDoNotAccessOrElse_(style);
};
goog.html.SafeStyle.prototype.initSecurityPrivateDoNotAccessOrElse_ = function (style) {
    this.privateDoNotAccessOrElseSafeStyleWrappedValue_ = style;
    return this;
};
goog.html.SafeStyle.EMPTY =
    goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse('');
goog.html.SafeStyle.INNOCUOUS_STRING = 'zClosurez';
goog.html.SafeStyle.PropertyValue;
goog.html.SafeStyle.PropertyMap;
goog.html.SafeStyle.create = function (map) {
    var style = '';
    for (var name in map) {
        if (!/^[-_a-zA-Z0-9]+$/.test(name)) {
            throw new Error('Name allows only [-_a-zA-Z0-9], got: ' + name);
        }
        var value = map[name];
        if (value == null) {
            continue;
        }
        if (goog.isArray(value)) {
            value = goog.array.map(value, goog.html.SafeStyle.sanitizePropertyValue_)
                .join(' ');
        }
        else {
            value = goog.html.SafeStyle.sanitizePropertyValue_(value);
        }
        style += name + ':' + value + ';';
    }
    if (!style) {
        return goog.html.SafeStyle.EMPTY;
    }
    goog.html.SafeStyle.checkStyle_(style);
    return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.html.SafeStyle.sanitizePropertyValue_ = function (value) {
    if (value instanceof goog.html.SafeUrl) {
        var url = goog.html.SafeUrl.unwrap(value);
        return 'url("' + url.replace(/</g, '%3c').replace(/[\\"]/g, '\\$&') + '")';
    }
    var result = value instanceof goog.string.Const ?
        goog.string.Const.unwrap(value) :
        goog.html.SafeStyle.sanitizePropertyValueString_(String(value));
    goog.asserts.assert(!/[{;}]/.test(result), 'Value does not allow [{;}].');
    return result;
};
goog.html.SafeStyle.sanitizePropertyValueString_ = function (value) {
    var valueWithoutFunctions = value.replace(goog.html.SafeUrl.FUNCTIONS_RE_, '$1')
        .replace(goog.html.SafeUrl.URL_RE_, 'url');
    if (!goog.html.SafeStyle.VALUE_RE_.test(valueWithoutFunctions)) {
        goog.asserts.fail('String value allows only ' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ +
            ' and simple functions, got: ' + value);
        return goog.html.SafeStyle.INNOCUOUS_STRING;
    }
    else if (!goog.html.SafeStyle.hasBalancedQuotes_(value)) {
        goog.asserts.fail('String value requires balanced quotes, got: ' + value);
        return goog.html.SafeStyle.INNOCUOUS_STRING;
    }
    return goog.html.SafeStyle.sanitizeUrl_(value);
};
goog.html.SafeStyle.hasBalancedQuotes_ = function (value) {
    var outsideSingle = true;
    var outsideDouble = true;
    for (var i = 0; i < value.length; i++) {
        var c = value.charAt(i);
        if (c == "'" && outsideDouble) {
            outsideSingle = !outsideSingle;
        }
        else if (c == '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
        }
    }
    return outsideSingle && outsideDouble;
};
goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ = '[-,."\'%_!# a-zA-Z0-9]';
goog.html.SafeStyle.VALUE_RE_ =
    new RegExp('^' + goog.html.SafeStyle.VALUE_ALLOWED_CHARS_ + '+$');
goog.html.SafeUrl.URL_RE_ = new RegExp('\\b(url\\([ \t\n]*)(' +
    '\'[ -&(-\\[\\]-~]*\'' +
    '|"[ !#-\\[\\]-~]*"' +
    '|[!#-&*-\\[\\]-~]*' +
    ')([ \t\n]*\\))', 'g');
goog.html.SafeUrl.FUNCTIONS_RE_ = new RegExp('\\b(hsl|hsla|rgb|rgba|(rotate|scale|translate)(X|Y|Z|3d)?)' +
    '\\([-0-9a-z.%, ]+\\)', 'g');
goog.html.SafeStyle.sanitizeUrl_ = function (value) {
    return value.replace(goog.html.SafeUrl.URL_RE_, function (match, before, url, after) {
        var quote = '';
        url = url.replace(/^(['"])(.*)\1$/, function (match, start, inside) {
            quote = start;
            return inside;
        });
        var sanitized = goog.html.SafeUrl.sanitize(url).getTypedStringValue();
        return before + quote + sanitized + quote + after;
    });
};
goog.html.SafeStyle.concat = function (var_args) {
    var style = '';
    var addArgument = function (argument) {
        if (goog.isArray(argument)) {
            goog.array.forEach(argument, addArgument);
        }
        else {
            style += goog.html.SafeStyle.unwrap(argument);
        }
    };
    goog.array.forEach(arguments, addArgument);
    if (!style) {
        return goog.html.SafeStyle.EMPTY;
    }
    return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
};
goog.provide('goog.html.SafeStyleSheet');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.html.SafeStyle');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.html.SafeStyleSheet = function () {
    this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = '';
    this.SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
        goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.SafeStyleSheet.prototype.implementsGoogStringTypedString = true;
goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.SafeStyleSheet.createRule = function (selector, style) {
    if (goog.string.contains(selector, '<')) {
        throw new Error('Selector does not allow \'<\', got: ' + selector);
    }
    var selectorToCheck = selector.replace(/('|")((?!\1)[^\r\n\f\\]|\\[\s\S])*\1/g, '');
    if (!/^[-_a-zA-Z0-9#.:* ,>+~[\]()=^$|]+$/.test(selectorToCheck)) {
        throw new Error('Selector allows only [-_a-zA-Z0-9#.:* ,>+~[\\]()=^$|] and ' +
            'strings, got: ' + selector);
    }
    if (!goog.html.SafeStyleSheet.hasBalancedBrackets_(selectorToCheck)) {
        throw new Error('() and [] in selector must be balanced, got: ' + selector);
    }
    if (!(style instanceof goog.html.SafeStyle)) {
        style = goog.html.SafeStyle.create(style);
    }
    var styleSheet = selector + '{' + goog.html.SafeStyle.unwrap(style) + '}';
    return goog.html.SafeStyleSheet
        .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.SafeStyleSheet.hasBalancedBrackets_ = function (s) {
    var brackets = { '(': ')', '[': ']' };
    var expectedBrackets = [];
    for (var i = 0; i < s.length; i++) {
        var ch = s[i];
        if (brackets[ch]) {
            expectedBrackets.push(brackets[ch]);
        }
        else if (goog.object.contains(brackets, ch)) {
            if (expectedBrackets.pop() != ch) {
                return false;
            }
        }
    }
    return expectedBrackets.length == 0;
};
goog.html.SafeStyleSheet.concat = function (var_args) {
    var result = '';
    var addArgument = function (argument) {
        if (goog.isArray(argument)) {
            goog.array.forEach(argument, addArgument);
        }
        else {
            result += goog.html.SafeStyleSheet.unwrap(argument);
        }
    };
    goog.array.forEach(arguments, addArgument);
    return goog.html.SafeStyleSheet
        .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.SafeStyleSheet.fromConstant = function (styleSheet) {
    var styleSheetString = goog.string.Const.unwrap(styleSheet);
    if (styleSheetString.length === 0) {
        return goog.html.SafeStyleSheet.EMPTY;
    }
    goog.asserts.assert(!goog.string.contains(styleSheetString, '<'), "Forbidden '<' character in style sheet string: " + styleSheetString);
    return goog.html.SafeStyleSheet
        .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheetString);
};
goog.html.SafeStyleSheet.prototype.getTypedStringValue = function () {
    return this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
};
if (goog.DEBUG) {
    goog.html.SafeStyleSheet.prototype.toString = function () {
        return 'SafeStyleSheet{' +
            this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ + '}';
    };
}
goog.html.SafeStyleSheet.unwrap = function (safeStyleSheet) {
    if (safeStyleSheet instanceof goog.html.SafeStyleSheet &&
        safeStyleSheet.constructor === goog.html.SafeStyleSheet &&
        safeStyleSheet
            .SAFE_STYLE_SHEET_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
            goog.html.SafeStyleSheet.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
        return safeStyleSheet.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_;
    }
    else {
        goog.asserts.fail('expected object of type SafeStyleSheet, got \'' +
            safeStyleSheet + '\' of type ' + goog.typeOf(safeStyleSheet));
        return 'type_error:SafeStyleSheet';
    }
};
goog.html.SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse =
    function (styleSheet) {
        return new goog.html.SafeStyleSheet().initSecurityPrivateDoNotAccessOrElse_(styleSheet);
    };
goog.html.SafeStyleSheet.prototype.initSecurityPrivateDoNotAccessOrElse_ =
    function (styleSheet) {
        this.privateDoNotAccessOrElseSafeStyleSheetWrappedValue_ = styleSheet;
        return this;
    };
goog.html.SafeStyleSheet.EMPTY =
    goog.html.SafeStyleSheet
        .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse('');
goog.provide('goog.html.TrustedResourceUrl');
goog.require('goog.asserts');
goog.require('goog.i18n.bidi.Dir');
goog.require('goog.i18n.bidi.DirectionalString');
goog.require('goog.string.Const');
goog.require('goog.string.TypedString');
goog.html.TrustedResourceUrl = function () {
    this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ = '';
    this.TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ =
        goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogStringTypedString = true;
goog.html.TrustedResourceUrl.prototype.getTypedStringValue = function () {
    return this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
};
goog.html.TrustedResourceUrl.prototype.implementsGoogI18nBidiDirectionalString =
    true;
goog.html.TrustedResourceUrl.prototype.getDirection = function () {
    return goog.i18n.bidi.Dir.LTR;
};
goog.html.TrustedResourceUrl.prototype.cloneWithParams = function (params) {
    var url = goog.html.TrustedResourceUrl.unwrap(this);
    var separator = /\?/.test(url) ? '&' : '?';
    for (var key in params) {
        var values = goog.isArray(params[key]) ?
            (params[key]) :
            [params[key]];
        for (var i = 0; i < values.length; i++) {
            if (values[i] == null) {
                continue;
            }
            url += separator + encodeURIComponent(key) + '=' +
                encodeURIComponent(String(values[i]));
            separator = '&';
        }
    }
    return goog.html.TrustedResourceUrl
        .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
if (goog.DEBUG) {
    goog.html.TrustedResourceUrl.prototype.toString = function () {
        return 'TrustedResourceUrl{' +
            this.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ + '}';
    };
}
goog.html.TrustedResourceUrl.unwrap = function (trustedResourceUrl) {
    if (trustedResourceUrl instanceof goog.html.TrustedResourceUrl &&
        trustedResourceUrl.constructor === goog.html.TrustedResourceUrl &&
        trustedResourceUrl
            .TRUSTED_RESOURCE_URL_TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ ===
            goog.html.TrustedResourceUrl
                .TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_) {
        return trustedResourceUrl
            .privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_;
    }
    else {
        goog.asserts.fail('expected object of type TrustedResourceUrl, got \'' +
            trustedResourceUrl + '\' of type ' + goog.typeOf(trustedResourceUrl));
        return 'type_error:TrustedResourceUrl';
    }
};
goog.html.TrustedResourceUrl.format = function (format, args) {
    var formatStr = goog.string.Const.unwrap(format);
    if (!goog.html.TrustedResourceUrl.BASE_URL_.test(formatStr)) {
        throw new Error('Invalid TrustedResourceUrl format: ' + formatStr);
    }
    var result = formatStr.replace(goog.html.TrustedResourceUrl.FORMAT_MARKER_, function (match, id) {
        if (!Object.prototype.hasOwnProperty.call(args, id)) {
            throw new Error('Found marker, "' + id + '", in format string, "' + formatStr +
                '", but no valid label mapping found ' +
                'in args: ' + JSON.stringify(args));
        }
        var arg = args[id];
        if (arg instanceof goog.string.Const) {
            return goog.string.Const.unwrap(arg);
        }
        else {
            return encodeURIComponent(String(arg));
        }
    });
    return goog.html.TrustedResourceUrl
        .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(result);
};
goog.html.TrustedResourceUrl.FORMAT_MARKER_ = /%{(\w+)}/g;
goog.html.TrustedResourceUrl.BASE_URL_ =
    /^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i;
goog.html.TrustedResourceUrl.formatWithParams = function (format, args, params) {
    var url = goog.html.TrustedResourceUrl.format(format, args);
    return url.cloneWithParams(params);
};
goog.html.TrustedResourceUrl.fromConstant = function (url) {
    return goog.html.TrustedResourceUrl
        .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(goog.string.Const.unwrap(url));
};
goog.html.TrustedResourceUrl.fromConstants = function (parts) {
    var unwrapped = '';
    for (var i = 0; i < parts.length; i++) {
        unwrapped += goog.string.Const.unwrap(parts[i]);
    }
    return goog.html.TrustedResourceUrl
        .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(unwrapped);
};
goog.html.TrustedResourceUrl.TYPE_MARKER_GOOG_HTML_SECURITY_PRIVATE_ = {};
goog.html.TrustedResourceUrl
    .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse = function (url) {
    var trustedResourceUrl = new goog.html.TrustedResourceUrl();
    trustedResourceUrl.privateDoNotAccessOrElseTrustedResourceUrlWrappedValue_ =
        url;
    return trustedResourceUrl;
};
goog.provide('goog.html.uncheckedconversions');
goog.require('goog.asserts');
goog.require('goog.html.SafeHtml');
goog.require('goog.html.SafeScript');
goog.require('goog.html.SafeStyle');
goog.require('goog.html.SafeStyleSheet');
goog.require('goog.html.SafeUrl');
goog.require('goog.html.TrustedResourceUrl');
goog.require('goog.string');
goog.require('goog.string.Const');
goog.html.uncheckedconversions.safeHtmlFromStringKnownToSatisfyTypeContract =
    function (justification, html, opt_dir) {
        goog.asserts.assertString(goog.string.Const.unwrap(justification), 'must provide justification');
        goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), 'must provide non-empty justification');
        return goog.html.SafeHtml.createSafeHtmlSecurityPrivateDoNotAccessOrElse(html, opt_dir || null);
    };
goog.html.uncheckedconversions.safeScriptFromStringKnownToSatisfyTypeContract =
    function (justification, script) {
        goog.asserts.assertString(goog.string.Const.unwrap(justification), 'must provide justification');
        goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), 'must provide non-empty justification');
        return goog.html.SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse(script);
    };
goog.html.uncheckedconversions.safeStyleFromStringKnownToSatisfyTypeContract =
    function (justification, style) {
        goog.asserts.assertString(goog.string.Const.unwrap(justification), 'must provide justification');
        goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), 'must provide non-empty justification');
        return goog.html.SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse(style);
    };
goog.html.uncheckedconversions
    .safeStyleSheetFromStringKnownToSatisfyTypeContract = function (justification, styleSheet) {
    goog.asserts.assertString(goog.string.Const.unwrap(justification), 'must provide justification');
    goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), 'must provide non-empty justification');
    return goog.html.SafeStyleSheet
        .createSafeStyleSheetSecurityPrivateDoNotAccessOrElse(styleSheet);
};
goog.html.uncheckedconversions.safeUrlFromStringKnownToSatisfyTypeContract =
    function (justification, url) {
        goog.asserts.assertString(goog.string.Const.unwrap(justification), 'must provide justification');
        goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), 'must provide non-empty justification');
        return goog.html.SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse(url);
    };
goog.html.uncheckedconversions
    .trustedResourceUrlFromStringKnownToSatisfyTypeContract = function (justification, url) {
    goog.asserts.assertString(goog.string.Const.unwrap(justification), 'must provide justification');
    goog.asserts.assert(!goog.string.isEmptyOrWhitespace(goog.string.Const.unwrap(justification)), 'must provide non-empty justification');
    return goog.html.TrustedResourceUrl
        .createTrustedResourceUrlSecurityPrivateDoNotAccessOrElse(url);
};
goog.provide('goog.log');
goog.provide('goog.log.Level');
goog.provide('goog.log.LogRecord');
goog.provide('goog.log.Logger');
goog.require('goog.debug');
goog.require('goog.debug.LogManager');
goog.require('goog.debug.LogRecord');
goog.require('goog.debug.Logger');
goog.define('goog.log.ENABLED', goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function (name, opt_level) {
    if (goog.log.ENABLED) {
        var logger = goog.debug.LogManager.getLogger(name);
        if (opt_level && logger) {
            logger.setLevel(opt_level);
        }
        return logger;
    }
    else {
        return null;
    }
};
goog.log.addHandler = function (logger, handler) {
    if (goog.log.ENABLED && logger) {
        logger.addHandler(handler);
    }
};
goog.log.removeHandler = function (logger, handler) {
    if (goog.log.ENABLED && logger) {
        return logger.removeHandler(handler);
    }
    else {
        return false;
    }
};
goog.log.log = function (logger, level, msg, opt_exception) {
    if (goog.log.ENABLED && logger) {
        logger.log(level, msg, opt_exception);
    }
};
goog.log.error = function (logger, msg, opt_exception) {
    if (goog.log.ENABLED && logger) {
        logger.severe(msg, opt_exception);
    }
};
goog.log.warning = function (logger, msg, opt_exception) {
    if (goog.log.ENABLED && logger) {
        logger.warning(msg, opt_exception);
    }
};
goog.log.info = function (logger, msg, opt_exception) {
    if (goog.log.ENABLED && logger) {
        logger.info(msg, opt_exception);
    }
};
goog.log.fine = function (logger, msg, opt_exception) {
    if (goog.log.ENABLED && logger) {
        logger.fine(msg, opt_exception);
    }
};
goog.provide('goog.math.Box');
goog.require('goog.asserts');
goog.require('goog.math.Coordinate');
goog.math.Box = function (top, right, bottom, left) {
    this.top = top;
    this.right = right;
    this.bottom = bottom;
    this.left = left;
};
goog.math.Box.boundingBox = function (var_args) {
    var box = new goog.math.Box(arguments[0].y, arguments[0].x, arguments[0].y, arguments[0].x);
    for (var i = 1; i < arguments.length; i++) {
        box.expandToIncludeCoordinate(arguments[i]);
    }
    return box;
};
goog.math.Box.prototype.getWidth = function () {
    return this.right - this.left;
};
goog.math.Box.prototype.getHeight = function () {
    return this.bottom - this.top;
};
goog.math.Box.prototype.clone = function () {
    return new goog.math.Box(this.top, this.right, this.bottom, this.left);
};
if (goog.DEBUG) {
    goog.math.Box.prototype.toString = function () {
        return '(' + this.top + 't, ' + this.right + 'r, ' + this.bottom + 'b, ' +
            this.left + 'l)';
    };
}
goog.math.Box.prototype.contains = function (other) {
    return goog.math.Box.contains(this, other);
};
goog.math.Box.prototype.expand = function (top, opt_right, opt_bottom, opt_left) {
    if (goog.isObject(top)) {
        this.top -= top.top;
        this.right += top.right;
        this.bottom += top.bottom;
        this.left -= top.left;
    }
    else {
        this.top -= (top);
        this.right += Number(opt_right);
        this.bottom += Number(opt_bottom);
        this.left -= Number(opt_left);
    }
    return this;
};
goog.math.Box.prototype.expandToInclude = function (box) {
    this.left = Math.min(this.left, box.left);
    this.top = Math.min(this.top, box.top);
    this.right = Math.max(this.right, box.right);
    this.bottom = Math.max(this.bottom, box.bottom);
};
goog.math.Box.prototype.expandToIncludeCoordinate = function (coord) {
    this.top = Math.min(this.top, coord.y);
    this.right = Math.max(this.right, coord.x);
    this.bottom = Math.max(this.bottom, coord.y);
    this.left = Math.min(this.left, coord.x);
};
goog.math.Box.equals = function (a, b) {
    if (a == b) {
        return true;
    }
    if (!a || !b) {
        return false;
    }
    return a.top == b.top && a.right == b.right && a.bottom == b.bottom &&
        a.left == b.left;
};
goog.math.Box.contains = function (box, other) {
    if (!box || !other) {
        return false;
    }
    if (other instanceof goog.math.Box) {
        return other.left >= box.left && other.right <= box.right &&
            other.top >= box.top && other.bottom <= box.bottom;
    }
    return other.x >= box.left && other.x <= box.right && other.y >= box.top &&
        other.y <= box.bottom;
};
goog.math.Box.relativePositionX = function (box, coord) {
    if (coord.x < box.left) {
        return coord.x - box.left;
    }
    else if (coord.x > box.right) {
        return coord.x - box.right;
    }
    return 0;
};
goog.math.Box.relativePositionY = function (box, coord) {
    if (coord.y < box.top) {
        return coord.y - box.top;
    }
    else if (coord.y > box.bottom) {
        return coord.y - box.bottom;
    }
    return 0;
};
goog.math.Box.distance = function (box, coord) {
    var x = goog.math.Box.relativePositionX(box, coord);
    var y = goog.math.Box.relativePositionY(box, coord);
    return Math.sqrt(x * x + y * y);
};
goog.math.Box.intersects = function (a, b) {
    return (a.left <= b.right && b.left <= a.right && a.top <= b.bottom &&
        b.top <= a.bottom);
};
goog.math.Box.intersectsWithPadding = function (a, b, padding) {
    return (a.left <= b.right + padding && b.left <= a.right + padding &&
        a.top <= b.bottom + padding && b.top <= a.bottom + padding);
};
goog.math.Box.prototype.ceil = function () {
    this.top = Math.ceil(this.top);
    this.right = Math.ceil(this.right);
    this.bottom = Math.ceil(this.bottom);
    this.left = Math.ceil(this.left);
    return this;
};
goog.math.Box.prototype.floor = function () {
    this.top = Math.floor(this.top);
    this.right = Math.floor(this.right);
    this.bottom = Math.floor(this.bottom);
    this.left = Math.floor(this.left);
    return this;
};
goog.math.Box.prototype.round = function () {
    this.top = Math.round(this.top);
    this.right = Math.round(this.right);
    this.bottom = Math.round(this.bottom);
    this.left = Math.round(this.left);
    return this;
};
goog.math.Box.prototype.translate = function (tx, opt_ty) {
    if (tx instanceof goog.math.Coordinate) {
        this.left += tx.x;
        this.right += tx.x;
        this.top += tx.y;
        this.bottom += tx.y;
    }
    else {
        goog.asserts.assertNumber(tx);
        this.left += tx;
        this.right += tx;
        if (goog.isNumber(opt_ty)) {
            this.top += opt_ty;
            this.bottom += opt_ty;
        }
    }
    return this;
};
goog.math.Box.prototype.scale = function (sx, opt_sy) {
    var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
    this.left *= sx;
    this.right *= sx;
    this.top *= sy;
    this.bottom *= sy;
    return this;
};
goog.provide('goog.math.Coordinate');
goog.require('goog.math');
goog.math.Coordinate = function (opt_x, opt_y) {
    this.x = goog.isDef(opt_x) ? opt_x : 0;
    this.y = goog.isDef(opt_y) ? opt_y : 0;
};
goog.math.Coordinate.prototype.clone = function () {
    return new goog.math.Coordinate(this.x, this.y);
};
if (goog.DEBUG) {
    goog.math.Coordinate.prototype.toString = function () {
        return '(' + this.x + ', ' + this.y + ')';
    };
}
goog.math.Coordinate.prototype.equals = function (other) {
    return other instanceof goog.math.Coordinate &&
        goog.math.Coordinate.equals(this, other);
};
goog.math.Coordinate.equals = function (a, b) {
    if (a == b) {
        return true;
    }
    if (!a || !b) {
        return false;
    }
    return a.x == b.x && a.y == b.y;
};
goog.math.Coordinate.distance = function (a, b) {
    var dx = a.x - b.x;
    var dy = a.y - b.y;
    return Math.sqrt(dx * dx + dy * dy);
};
goog.math.Coordinate.magnitude = function (a) {
    return Math.sqrt(a.x * a.x + a.y * a.y);
};
goog.math.Coordinate.azimuth = function (a) {
    return goog.math.angle(0, 0, a.x, a.y);
};
goog.math.Coordinate.squaredDistance = function (a, b) {
    var dx = a.x - b.x;
    var dy = a.y - b.y;
    return dx * dx + dy * dy;
};
goog.math.Coordinate.difference = function (a, b) {
    return new goog.math.Coordinate(a.x - b.x, a.y - b.y);
};
goog.math.Coordinate.sum = function (a, b) {
    return new goog.math.Coordinate(a.x + b.x, a.y + b.y);
};
goog.math.Coordinate.prototype.ceil = function () {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
};
goog.math.Coordinate.prototype.floor = function () {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
};
goog.math.Coordinate.prototype.round = function () {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
};
goog.math.Coordinate.prototype.translate = function (tx, opt_ty) {
    if (tx instanceof goog.math.Coordinate) {
        this.x += tx.x;
        this.y += tx.y;
    }
    else {
        this.x += Number(tx);
        if (goog.isNumber(opt_ty)) {
            this.y += opt_ty;
        }
    }
    return this;
};
goog.math.Coordinate.prototype.scale = function (sx, opt_sy) {
    var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
    this.x *= sx;
    this.y *= sy;
    return this;
};
goog.math.Coordinate.prototype.rotateRadians = function (radians, opt_center) {
    var center = opt_center || new goog.math.Coordinate(0, 0);
    var x = this.x;
    var y = this.y;
    var cos = Math.cos(radians);
    var sin = Math.sin(radians);
    this.x = (x - center.x) * cos - (y - center.y) * sin + center.x;
    this.y = (x - center.x) * sin + (y - center.y) * cos + center.y;
};
goog.math.Coordinate.prototype.rotateDegrees = function (degrees, opt_center) {
    this.rotateRadians(goog.math.toRadians(degrees), opt_center);
};
goog.provide('goog.math.IRect');
goog.math.IRect = function () { };
goog.math.IRect.prototype.left;
goog.math.IRect.prototype.top;
goog.math.IRect.prototype.width;
goog.math.IRect.prototype.height;
goog.provide('goog.math');
goog.require('goog.array');
goog.require('goog.asserts');
goog.math.randomInt = function (a) {
    return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function (a, b) {
    return a + Math.random() * (b - a);
};
goog.math.clamp = function (value, min, max) {
    return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function (a, b) {
    var r = a % b;
    return (r * b < 0) ? r + b : r;
};
goog.math.lerp = function (a, b, x) {
    return a + x * (b - a);
};
goog.math.nearlyEquals = function (a, b, opt_tolerance) {
    return Math.abs(a - b) <= (opt_tolerance || 0.000001);
};
goog.math.standardAngle = function (angle) {
    return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function (angle) {
    return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function (angleDegrees) {
    return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function (angleRadians) {
    return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function (degrees, radius) {
    return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function (degrees, radius) {
    return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function (x1, y1, x2, y2) {
    return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function (startAngle, endAngle) {
    var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
    if (d > 180) {
        d = d - 360;
    }
    else if (d <= -180) {
        d = 360 + d;
    }
    return d;
};
goog.math.sign = function (x) {
    if (x > 0) {
        return 1;
    }
    if (x < 0) {
        return -1;
    }
    return x;
};
goog.math.longestCommonSubsequence = function (array1, array2, opt_compareFn, opt_collectorFn) {
    var compare = opt_compareFn || function (a, b) { return a == b; };
    var collect = opt_collectorFn || function (i1, i2) { return array1[i1]; };
    var length1 = array1.length;
    var length2 = array2.length;
    var arr = [];
    for (var i = 0; i < length1 + 1; i++) {
        arr[i] = [];
        arr[i][0] = 0;
    }
    for (var j = 0; j < length2 + 1; j++) {
        arr[0][j] = 0;
    }
    for (i = 1; i <= length1; i++) {
        for (j = 1; j <= length2; j++) {
            if (compare(array1[i - 1], array2[j - 1])) {
                arr[i][j] = arr[i - 1][j - 1] + 1;
            }
            else {
                arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
            }
        }
    }
    var result = [];
    var i = length1, j = length2;
    while (i > 0 && j > 0) {
        if (compare(array1[i - 1], array2[j - 1])) {
            result.unshift(collect(i - 1, j - 1));
            i--;
            j--;
        }
        else {
            if (arr[i - 1][j] > arr[i][j - 1]) {
                i--;
            }
            else {
                j--;
            }
        }
    }
    return result;
};
goog.math.sum = function (var_args) {
    return (goog.array.reduce(arguments, function (sum, value) { return sum + value; }, 0));
};
goog.math.average = function (var_args) {
    return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function (var_args) {
    var sampleSize = arguments.length;
    if (sampleSize < 2) {
        return 0;
    }
    var mean = goog.math.average.apply(null, arguments);
    var variance = goog.math.sum.apply(null, goog.array.map(arguments, function (val) {
        return Math.pow(val - mean, 2);
    })) / (sampleSize - 1);
    return variance;
};
goog.math.standardDeviation = function (var_args) {
    return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function (num) {
    return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function (num) {
    return isFinite(num);
};
goog.math.isNegativeZero = function (num) {
    return num == 0 && 1 / num < 0;
};
goog.math.log10Floor = function (num) {
    if (num > 0) {
        var x = Math.round(Math.log(num) * Math.LOG10E);
        return x - (parseFloat('1e' + x) > num ? 1 : 0);
    }
    return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function (num, opt_epsilon) {
    goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
    return Math.floor(num + (opt_epsilon || 2e-15));
};
goog.math.safeCeil = function (num, opt_epsilon) {
    goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
    return Math.ceil(num - (opt_epsilon || 2e-15));
};
goog.provide('goog.math.Rect');
goog.require('goog.asserts');
goog.require('goog.math.Box');
goog.require('goog.math.Coordinate');
goog.require('goog.math.IRect');
goog.require('goog.math.Size');
goog.math.Rect = function (x, y, w, h) {
    this.left = x;
    this.top = y;
    this.width = w;
    this.height = h;
};
goog.math.Rect.prototype.clone = function () {
    return new goog.math.Rect(this.left, this.top, this.width, this.height);
};
goog.math.Rect.prototype.toBox = function () {
    var right = this.left + this.width;
    var bottom = this.top + this.height;
    return new goog.math.Box(this.top, right, bottom, this.left);
};
goog.math.Rect.createFromPositionAndSize = function (position, size) {
    return new goog.math.Rect(position.x, position.y, size.width, size.height);
};
goog.math.Rect.createFromBox = function (box) {
    return new goog.math.Rect(box.left, box.top, box.right - box.left, box.bottom - box.top);
};
if (goog.DEBUG) {
    goog.math.Rect.prototype.toString = function () {
        return '(' + this.left + ', ' + this.top + ' - ' + this.width + 'w x ' +
            this.height + 'h)';
    };
}
goog.math.Rect.equals = function (a, b) {
    if (a == b) {
        return true;
    }
    if (!a || !b) {
        return false;
    }
    return a.left == b.left && a.width == b.width && a.top == b.top &&
        a.height == b.height;
};
goog.math.Rect.prototype.intersection = function (rect) {
    var x0 = Math.max(this.left, rect.left);
    var x1 = Math.min(this.left + this.width, rect.left + rect.width);
    if (x0 <= x1) {
        var y0 = Math.max(this.top, rect.top);
        var y1 = Math.min(this.top + this.height, rect.top + rect.height);
        if (y0 <= y1) {
            this.left = x0;
            this.top = y0;
            this.width = x1 - x0;
            this.height = y1 - y0;
            return true;
        }
    }
    return false;
};
goog.math.Rect.intersection = function (a, b) {
    var x0 = Math.max(a.left, b.left);
    var x1 = Math.min(a.left + a.width, b.left + b.width);
    if (x0 <= x1) {
        var y0 = Math.max(a.top, b.top);
        var y1 = Math.min(a.top + a.height, b.top + b.height);
        if (y0 <= y1) {
            return new goog.math.Rect(x0, y0, x1 - x0, y1 - y0);
        }
    }
    return null;
};
goog.math.Rect.intersects = function (a, b) {
    return (a.left <= b.left + b.width && b.left <= a.left + a.width &&
        a.top <= b.top + b.height && b.top <= a.top + a.height);
};
goog.math.Rect.prototype.intersects = function (rect) {
    return goog.math.Rect.intersects(this, rect);
};
goog.math.Rect.difference = function (a, b) {
    var intersection = goog.math.Rect.intersection(a, b);
    if (!intersection || !intersection.height || !intersection.width) {
        return [a.clone()];
    }
    var result = [];
    var top = a.top;
    var height = a.height;
    var ar = a.left + a.width;
    var ab = a.top + a.height;
    var br = b.left + b.width;
    var bb = b.top + b.height;
    if (b.top > a.top) {
        result.push(new goog.math.Rect(a.left, a.top, a.width, b.top - a.top));
        top = b.top;
        height -= b.top - a.top;
    }
    if (bb < ab) {
        result.push(new goog.math.Rect(a.left, bb, a.width, ab - bb));
        height = bb - top;
    }
    if (b.left > a.left) {
        result.push(new goog.math.Rect(a.left, top, b.left - a.left, height));
    }
    if (br < ar) {
        result.push(new goog.math.Rect(br, top, ar - br, height));
    }
    return result;
};
goog.math.Rect.prototype.difference = function (rect) {
    return goog.math.Rect.difference(this, rect);
};
goog.math.Rect.prototype.boundingRect = function (rect) {
    var right = Math.max(this.left + this.width, rect.left + rect.width);
    var bottom = Math.max(this.top + this.height, rect.top + rect.height);
    this.left = Math.min(this.left, rect.left);
    this.top = Math.min(this.top, rect.top);
    this.width = right - this.left;
    this.height = bottom - this.top;
};
goog.math.Rect.boundingRect = function (a, b) {
    if (!a || !b) {
        return null;
    }
    var newRect = new goog.math.Rect(a.left, a.top, a.width, a.height);
    newRect.boundingRect(b);
    return newRect;
};
goog.math.Rect.prototype.contains = function (another) {
    if (another instanceof goog.math.Coordinate) {
        return another.x >= this.left && another.x <= this.left + this.width &&
            another.y >= this.top && another.y <= this.top + this.height;
    }
    else {
        return this.left <= another.left &&
            this.left + this.width >= another.left + another.width &&
            this.top <= another.top &&
            this.top + this.height >= another.top + another.height;
    }
};
goog.math.Rect.prototype.squaredDistance = function (point) {
    var dx = point.x < this.left ?
        this.left - point.x :
        Math.max(point.x - (this.left + this.width), 0);
    var dy = point.y < this.top ? this.top - point.y :
        Math.max(point.y - (this.top + this.height), 0);
    return dx * dx + dy * dy;
};
goog.math.Rect.prototype.distance = function (point) {
    return Math.sqrt(this.squaredDistance(point));
};
goog.math.Rect.prototype.getSize = function () {
    return new goog.math.Size(this.width, this.height);
};
goog.math.Rect.prototype.getTopLeft = function () {
    return new goog.math.Coordinate(this.left, this.top);
};
goog.math.Rect.prototype.getCenter = function () {
    return new goog.math.Coordinate(this.left + this.width / 2, this.top + this.height / 2);
};
goog.math.Rect.prototype.getBottomRight = function () {
    return new goog.math.Coordinate(this.left + this.width, this.top + this.height);
};
goog.math.Rect.prototype.ceil = function () {
    this.left = Math.ceil(this.left);
    this.top = Math.ceil(this.top);
    this.width = Math.ceil(this.width);
    this.height = Math.ceil(this.height);
    return this;
};
goog.math.Rect.prototype.floor = function () {
    this.left = Math.floor(this.left);
    this.top = Math.floor(this.top);
    this.width = Math.floor(this.width);
    this.height = Math.floor(this.height);
    return this;
};
goog.math.Rect.prototype.round = function () {
    this.left = Math.round(this.left);
    this.top = Math.round(this.top);
    this.width = Math.round(this.width);
    this.height = Math.round(this.height);
    return this;
};
goog.math.Rect.prototype.translate = function (tx, opt_ty) {
    if (tx instanceof goog.math.Coordinate) {
        this.left += tx.x;
        this.top += tx.y;
    }
    else {
        this.left += goog.asserts.assertNumber(tx);
        if (goog.isNumber(opt_ty)) {
            this.top += opt_ty;
        }
    }
    return this;
};
goog.math.Rect.prototype.scale = function (sx, opt_sy) {
    var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
    this.left *= sx;
    this.width *= sx;
    this.top *= sy;
    this.height *= sy;
    return this;
};
goog.provide('goog.math.Size');
goog.math.Size = function (width, height) {
    this.width = width;
    this.height = height;
};
goog.math.Size.equals = function (a, b) {
    if (a == b) {
        return true;
    }
    if (!a || !b) {
        return false;
    }
    return a.width == b.width && a.height == b.height;
};
goog.math.Size.prototype.clone = function () {
    return new goog.math.Size(this.width, this.height);
};
if (goog.DEBUG) {
    goog.math.Size.prototype.toString = function () {
        return '(' + this.width + ' x ' + this.height + ')';
    };
}
goog.math.Size.prototype.getLongest = function () {
    return Math.max(this.width, this.height);
};
goog.math.Size.prototype.getShortest = function () {
    return Math.min(this.width, this.height);
};
goog.math.Size.prototype.area = function () {
    return this.width * this.height;
};
goog.math.Size.prototype.perimeter = function () {
    return (this.width + this.height) * 2;
};
goog.math.Size.prototype.aspectRatio = function () {
    return this.width / this.height;
};
goog.math.Size.prototype.isEmpty = function () {
    return !this.area();
};
goog.math.Size.prototype.ceil = function () {
    this.width = Math.ceil(this.width);
    this.height = Math.ceil(this.height);
    return this;
};
goog.math.Size.prototype.fitsInside = function (target) {
    return this.width <= target.width && this.height <= target.height;
};
goog.math.Size.prototype.floor = function () {
    this.width = Math.floor(this.width);
    this.height = Math.floor(this.height);
    return this;
};
goog.math.Size.prototype.round = function () {
    this.width = Math.round(this.width);
    this.height = Math.round(this.height);
    return this;
};
goog.math.Size.prototype.scale = function (sx, opt_sy) {
    var sy = goog.isNumber(opt_sy) ? opt_sy : sx;
    this.width *= sx;
    this.height *= sy;
    return this;
};
goog.math.Size.prototype.scaleToCover = function (target) {
    var s = this.aspectRatio() <= target.aspectRatio() ?
        target.width / this.width :
        target.height / this.height;
    return this.scale(s);
};
goog.math.Size.prototype.scaleToFit = function (target) {
    var s = this.aspectRatio() > target.aspectRatio() ?
        target.width / this.width :
        target.height / this.height;
    return this.scale(s);
};
goog.provide('goog.Thenable');
goog.forwardDeclare('goog.Promise');
goog.Thenable = function () { };
goog.Thenable.prototype.then = function (opt_onFulfilled, opt_onRejected, opt_context) { };
goog.Thenable.IMPLEMENTED_BY_PROP = '$goog_Thenable';
goog.Thenable.addImplementation = function (ctor) {
    ctor.prototype['then'] = ctor.prototype.then;
    if (COMPILED) {
        ctor.prototype[goog.Thenable.IMPLEMENTED_BY_PROP] = true;
    }
    else {
        ctor.prototype.$goog_Thenable = true;
    }
};
goog.Thenable.isImplementedBy = function (object) {
    if (!object) {
        return false;
    }
    try {
        if (COMPILED) {
            return !!object[goog.Thenable.IMPLEMENTED_BY_PROP];
        }
        return !!object.$goog_Thenable;
    }
    catch (e) {
        return false;
    }
};
goog.provide('goog.Promise');
goog.require('goog.Thenable');
goog.require('goog.asserts');
goog.require('goog.async.FreeList');
goog.require('goog.async.run');
goog.require('goog.async.throwException');
goog.require('goog.debug.Error');
goog.require('goog.promise.Resolver');
goog.Promise = function (resolver, opt_context) {
    this.state_ = goog.Promise.State_.PENDING;
    this.result_ = undefined;
    this.parent_ = null;
    this.callbackEntries_ = null;
    this.callbackEntriesTail_ = null;
    this.executing_ = false;
    if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
        this.unhandledRejectionId_ = 0;
    }
    else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
        this.hadUnhandledRejection_ = false;
    }
    if (goog.Promise.LONG_STACK_TRACES) {
        this.stack_ = [];
        this.addStackTrace_(new Error('created'));
        this.currentStep_ = 0;
    }
    if (resolver != goog.nullFunction) {
        try {
            var self = this;
            resolver.call(opt_context, function (value) {
                self.resolve_(goog.Promise.State_.FULFILLED, value);
            }, function (reason) {
                if (goog.DEBUG &&
                    !(reason instanceof goog.Promise.CancellationError)) {
                    try {
                        if (reason instanceof Error) {
                            throw reason;
                        }
                        else {
                            throw new Error('Promise rejected.');
                        }
                    }
                    catch (e) {
                    }
                }
                self.resolve_(goog.Promise.State_.REJECTED, reason);
            });
        }
        catch (e) {
            this.resolve_(goog.Promise.State_.REJECTED, e);
        }
    }
};
goog.define('goog.Promise.LONG_STACK_TRACES', false);
goog.define('goog.Promise.UNHANDLED_REJECTION_DELAY', 0);
goog.Promise.State_ = {
    PENDING: 0,
    BLOCKED: 1,
    FULFILLED: 2,
    REJECTED: 3
};
goog.Promise.CallbackEntry_ = function () {
    this.child = null;
    this.onFulfilled = null;
    this.onRejected = null;
    this.context = null;
    this.next = null;
    this.always = false;
};
goog.Promise.CallbackEntry_.prototype.reset = function () {
    this.child = null;
    this.onFulfilled = null;
    this.onRejected = null;
    this.context = null;
    this.always = false;
};
goog.define('goog.Promise.DEFAULT_MAX_UNUSED', 100);
goog.Promise.freelist_ = new goog.async.FreeList(function () { return new goog.Promise.CallbackEntry_(); }, function (item) { item.reset(); }, goog.Promise.DEFAULT_MAX_UNUSED);
goog.Promise.getCallbackEntry_ = function (onFulfilled, onRejected, context) {
    var entry = goog.Promise.freelist_.get();
    entry.onFulfilled = onFulfilled;
    entry.onRejected = onRejected;
    entry.context = context;
    return entry;
};
goog.Promise.returnEntry_ = function (entry) {
    goog.Promise.freelist_.put(entry);
};
goog.Promise.resolve = function (opt_value) {
    if (opt_value instanceof goog.Promise) {
        return opt_value;
    }
    var promise = new goog.Promise(goog.nullFunction);
    promise.resolve_(goog.Promise.State_.FULFILLED, opt_value);
    return promise;
};
goog.Promise.reject = function (opt_reason) {
    return new goog.Promise(function (resolve, reject) { reject(opt_reason); });
};
goog.Promise.resolveThen_ = function (value, onFulfilled, onRejected) {
    var isThenable = goog.Promise.maybeThen_(value, onFulfilled, onRejected, null);
    if (!isThenable) {
        goog.async.run(goog.partial(onFulfilled, value));
    }
};
goog.Promise.race = function (promises) {
    return new goog.Promise(function (resolve, reject) {
        if (!promises.length) {
            resolve(undefined);
        }
        for (var i = 0, promise; i < promises.length; i++) {
            promise = promises[i];
            goog.Promise.resolveThen_(promise, resolve, reject);
        }
    });
};
goog.Promise.all = function (promises) {
    return new goog.Promise(function (resolve, reject) {
        var toFulfill = promises.length;
        var values = [];
        if (!toFulfill) {
            resolve(values);
            return;
        }
        var onFulfill = function (index, value) {
            toFulfill--;
            values[index] = value;
            if (toFulfill == 0) {
                resolve(values);
            }
        };
        var onReject = function (reason) { reject(reason); };
        for (var i = 0, promise; i < promises.length; i++) {
            promise = promises[i];
            goog.Promise.resolveThen_(promise, goog.partial(onFulfill, i), onReject);
        }
    });
};
goog.Promise.allSettled = function (promises) {
    return new goog.Promise(function (resolve, reject) {
        var toSettle = promises.length;
        var results = [];
        if (!toSettle) {
            resolve(results);
            return;
        }
        var onSettled = function (index, fulfilled, result) {
            toSettle--;
            results[index] = fulfilled ? { fulfilled: true, value: result } :
                { fulfilled: false, reason: result };
            if (toSettle == 0) {
                resolve(results);
            }
        };
        for (var i = 0, promise; i < promises.length; i++) {
            promise = promises[i];
            goog.Promise.resolveThen_(promise, goog.partial(onSettled, i, true), goog.partial(onSettled, i, false));
        }
    });
};
goog.Promise.firstFulfilled = function (promises) {
    return new goog.Promise(function (resolve, reject) {
        var toReject = promises.length;
        var reasons = [];
        if (!toReject) {
            resolve(undefined);
            return;
        }
        var onFulfill = function (value) { resolve(value); };
        var onReject = function (index, reason) {
            toReject--;
            reasons[index] = reason;
            if (toReject == 0) {
                reject(reasons);
            }
        };
        for (var i = 0, promise; i < promises.length; i++) {
            promise = promises[i];
            goog.Promise.resolveThen_(promise, onFulfill, goog.partial(onReject, i));
        }
    });
};
goog.Promise.withResolver = function () {
    var resolve, reject;
    var promise = new goog.Promise(function (rs, rj) {
        resolve = rs;
        reject = rj;
    });
    return new goog.Promise.Resolver_(promise, resolve, reject);
};
goog.Promise.prototype.then = function (opt_onFulfilled, opt_onRejected, opt_context) {
    if (opt_onFulfilled != null) {
        goog.asserts.assertFunction(opt_onFulfilled, 'opt_onFulfilled should be a function.');
    }
    if (opt_onRejected != null) {
        goog.asserts.assertFunction(opt_onRejected, 'opt_onRejected should be a function. Did you pass opt_context ' +
            'as the second argument instead of the third?');
    }
    if (goog.Promise.LONG_STACK_TRACES) {
        this.addStackTrace_(new Error('then'));
    }
    return this.addChildPromise_(goog.isFunction(opt_onFulfilled) ? opt_onFulfilled : null, goog.isFunction(opt_onRejected) ? opt_onRejected : null, opt_context);
};
goog.Thenable.addImplementation(goog.Promise);
goog.Promise.prototype.thenVoid = function (opt_onFulfilled, opt_onRejected, opt_context) {
    if (opt_onFulfilled != null) {
        goog.asserts.assertFunction(opt_onFulfilled, 'opt_onFulfilled should be a function.');
    }
    if (opt_onRejected != null) {
        goog.asserts.assertFunction(opt_onRejected, 'opt_onRejected should be a function. Did you pass opt_context ' +
            'as the second argument instead of the third?');
    }
    if (goog.Promise.LONG_STACK_TRACES) {
        this.addStackTrace_(new Error('then'));
    }
    this.addCallbackEntry_(goog.Promise.getCallbackEntry_(opt_onFulfilled || goog.nullFunction, opt_onRejected || null, opt_context));
};
goog.Promise.prototype.thenAlways = function (onSettled, opt_context) {
    if (goog.Promise.LONG_STACK_TRACES) {
        this.addStackTrace_(new Error('thenAlways'));
    }
    var entry = goog.Promise.getCallbackEntry_(onSettled, onSettled, opt_context);
    entry.always = true;
    this.addCallbackEntry_(entry);
    return this;
};
goog.Promise.prototype.thenCatch = function (onRejected, opt_context) {
    if (goog.Promise.LONG_STACK_TRACES) {
        this.addStackTrace_(new Error('thenCatch'));
    }
    return this.addChildPromise_(null, onRejected, opt_context);
};
goog.Promise.prototype.cancel = function (opt_message) {
    if (this.state_ == goog.Promise.State_.PENDING) {
        goog.async.run(function () {
            var err = new goog.Promise.CancellationError(opt_message);
            this.cancelInternal_(err);
        }, this);
    }
};
goog.Promise.prototype.cancelInternal_ = function (err) {
    if (this.state_ == goog.Promise.State_.PENDING) {
        if (this.parent_) {
            this.parent_.cancelChild_(this, err);
            this.parent_ = null;
        }
        else {
            this.resolve_(goog.Promise.State_.REJECTED, err);
        }
    }
};
goog.Promise.prototype.cancelChild_ = function (childPromise, err) {
    if (!this.callbackEntries_) {
        return;
    }
    var childCount = 0;
    var childEntry = null;
    var beforeChildEntry = null;
    for (var entry = this.callbackEntries_; entry; entry = entry.next) {
        if (!entry.always) {
            childCount++;
            if (entry.child == childPromise) {
                childEntry = entry;
            }
            if (childEntry && childCount > 1) {
                break;
            }
        }
        if (!childEntry) {
            beforeChildEntry = entry;
        }
    }
    if (childEntry) {
        if (this.state_ == goog.Promise.State_.PENDING && childCount == 1) {
            this.cancelInternal_(err);
        }
        else {
            if (beforeChildEntry) {
                this.removeEntryAfter_(beforeChildEntry);
            }
            else {
                this.popEntry_();
            }
            this.executeCallback_(childEntry, goog.Promise.State_.REJECTED, err);
        }
    }
};
goog.Promise.prototype.addCallbackEntry_ = function (callbackEntry) {
    if (!this.hasEntry_() && (this.state_ == goog.Promise.State_.FULFILLED ||
        this.state_ == goog.Promise.State_.REJECTED)) {
        this.scheduleCallbacks_();
    }
    this.queueEntry_(callbackEntry);
};
goog.Promise.prototype.addChildPromise_ = function (onFulfilled, onRejected, opt_context) {
    var callbackEntry = goog.Promise.getCallbackEntry_(null, null, null);
    callbackEntry.child = new goog.Promise(function (resolve, reject) {
        callbackEntry.onFulfilled = onFulfilled ? function (value) {
            try {
                var result = onFulfilled.call(opt_context, value);
                resolve(result);
            }
            catch (err) {
                reject(err);
            }
        } : resolve;
        callbackEntry.onRejected = onRejected ? function (reason) {
            try {
                var result = onRejected.call(opt_context, reason);
                if (!goog.isDef(result) &&
                    reason instanceof goog.Promise.CancellationError) {
                    reject(reason);
                }
                else {
                    resolve(result);
                }
            }
            catch (err) {
                reject(err);
            }
        } : reject;
    });
    callbackEntry.child.parent_ = this;
    this.addCallbackEntry_(callbackEntry);
    return callbackEntry.child;
};
goog.Promise.prototype.unblockAndFulfill_ = function (value) {
    goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
    this.state_ = goog.Promise.State_.PENDING;
    this.resolve_(goog.Promise.State_.FULFILLED, value);
};
goog.Promise.prototype.unblockAndReject_ = function (reason) {
    goog.asserts.assert(this.state_ == goog.Promise.State_.BLOCKED);
    this.state_ = goog.Promise.State_.PENDING;
    this.resolve_(goog.Promise.State_.REJECTED, reason);
};
goog.Promise.prototype.resolve_ = function (state, x) {
    if (this.state_ != goog.Promise.State_.PENDING) {
        return;
    }
    if (this === x) {
        state = goog.Promise.State_.REJECTED;
        x = new TypeError('Promise cannot resolve to itself');
    }
    this.state_ = goog.Promise.State_.BLOCKED;
    var isThenable = goog.Promise.maybeThen_(x, this.unblockAndFulfill_, this.unblockAndReject_, this);
    if (isThenable) {
        return;
    }
    this.result_ = x;
    this.state_ = state;
    this.parent_ = null;
    this.scheduleCallbacks_();
    if (state == goog.Promise.State_.REJECTED &&
        !(x instanceof goog.Promise.CancellationError)) {
        goog.Promise.addUnhandledRejection_(this, x);
    }
};
goog.Promise.maybeThen_ = function (value, onFulfilled, onRejected, context) {
    if (value instanceof goog.Promise) {
        value.thenVoid(onFulfilled, onRejected, context);
        return true;
    }
    else if (goog.Thenable.isImplementedBy(value)) {
        value = (value);
        value.then(onFulfilled, onRejected, context);
        return true;
    }
    else if (goog.isObject(value)) {
        try {
            var then = value['then'];
            if (goog.isFunction(then)) {
                goog.Promise.tryThen_(value, then, onFulfilled, onRejected, context);
                return true;
            }
        }
        catch (e) {
            onRejected.call(context, e);
            return true;
        }
    }
    return false;
};
goog.Promise.tryThen_ = function (thenable, then, onFulfilled, onRejected, context) {
    var called = false;
    var resolve = function (value) {
        if (!called) {
            called = true;
            onFulfilled.call(context, value);
        }
    };
    var reject = function (reason) {
        if (!called) {
            called = true;
            onRejected.call(context, reason);
        }
    };
    try {
        then.call(thenable, resolve, reject);
    }
    catch (e) {
        reject(e);
    }
};
goog.Promise.prototype.scheduleCallbacks_ = function () {
    if (!this.executing_) {
        this.executing_ = true;
        goog.async.run(this.executeCallbacks_, this);
    }
};
goog.Promise.prototype.hasEntry_ = function () {
    return !!this.callbackEntries_;
};
goog.Promise.prototype.queueEntry_ = function (entry) {
    goog.asserts.assert(entry.onFulfilled != null);
    if (this.callbackEntriesTail_) {
        this.callbackEntriesTail_.next = entry;
        this.callbackEntriesTail_ = entry;
    }
    else {
        this.callbackEntries_ = entry;
        this.callbackEntriesTail_ = entry;
    }
};
goog.Promise.prototype.popEntry_ = function () {
    var entry = null;
    if (this.callbackEntries_) {
        entry = this.callbackEntries_;
        this.callbackEntries_ = entry.next;
        entry.next = null;
    }
    if (!this.callbackEntries_) {
        this.callbackEntriesTail_ = null;
    }
    if (entry != null) {
        goog.asserts.assert(entry.onFulfilled != null);
    }
    return entry;
};
goog.Promise.prototype.removeEntryAfter_ = function (previous) {
    goog.asserts.assert(this.callbackEntries_);
    goog.asserts.assert(previous != null);
    if (previous.next == this.callbackEntriesTail_) {
        this.callbackEntriesTail_ = previous;
    }
    previous.next = previous.next.next;
};
goog.Promise.prototype.executeCallbacks_ = function () {
    var entry = null;
    while (entry = this.popEntry_()) {
        if (goog.Promise.LONG_STACK_TRACES) {
            this.currentStep_++;
        }
        this.executeCallback_(entry, this.state_, this.result_);
    }
    this.executing_ = false;
};
goog.Promise.prototype.executeCallback_ = function (callbackEntry, state, result) {
    if (state == goog.Promise.State_.REJECTED && callbackEntry.onRejected &&
        !callbackEntry.always) {
        this.removeUnhandledRejection_();
    }
    if (callbackEntry.child) {
        callbackEntry.child.parent_ = null;
        goog.Promise.invokeCallback_(callbackEntry, state, result);
    }
    else {
        try {
            callbackEntry.always ?
                callbackEntry.onFulfilled.call(callbackEntry.context) :
                goog.Promise.invokeCallback_(callbackEntry, state, result);
        }
        catch (err) {
            goog.Promise.handleRejection_.call(null, err);
        }
    }
    goog.Promise.returnEntry_(callbackEntry);
};
goog.Promise.invokeCallback_ = function (callbackEntry, state, result) {
    if (state == goog.Promise.State_.FULFILLED) {
        callbackEntry.onFulfilled.call(callbackEntry.context, result);
    }
    else if (callbackEntry.onRejected) {
        callbackEntry.onRejected.call(callbackEntry.context, result);
    }
};
goog.Promise.prototype.addStackTrace_ = function (err) {
    if (goog.Promise.LONG_STACK_TRACES && goog.isString(err.stack)) {
        var trace = err.stack.split('\n', 4)[3];
        var message = err.message;
        message += Array(11 - message.length).join(' ');
        this.stack_.push(message + trace);
    }
};
goog.Promise.prototype.appendLongStack_ = function (err) {
    if (goog.Promise.LONG_STACK_TRACES && err && goog.isString(err.stack) &&
        this.stack_.length) {
        var longTrace = ['Promise trace:'];
        for (var promise = this; promise; promise = promise.parent_) {
            for (var i = this.currentStep_; i >= 0; i--) {
                longTrace.push(promise.stack_[i]);
            }
            longTrace.push('Value: ' +
                '[' + (promise.state_ == goog.Promise.State_.REJECTED ? 'REJECTED' :
                'FULFILLED') +
                '] ' +
                '<' + String(promise.result_) + '>');
        }
        err.stack += '\n\n' + longTrace.join('\n');
    }
};
goog.Promise.prototype.removeUnhandledRejection_ = function () {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
        for (var p = this; p && p.unhandledRejectionId_; p = p.parent_) {
            goog.global.clearTimeout(p.unhandledRejectionId_);
            p.unhandledRejectionId_ = 0;
        }
    }
    else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
        for (var p = this; p && p.hadUnhandledRejection_; p = p.parent_) {
            p.hadUnhandledRejection_ = false;
        }
    }
};
goog.Promise.addUnhandledRejection_ = function (promise, reason) {
    if (goog.Promise.UNHANDLED_REJECTION_DELAY > 0) {
        promise.unhandledRejectionId_ = goog.global.setTimeout(function () {
            promise.appendLongStack_(reason);
            goog.Promise.handleRejection_.call(null, reason);
        }, goog.Promise.UNHANDLED_REJECTION_DELAY);
    }
    else if (goog.Promise.UNHANDLED_REJECTION_DELAY == 0) {
        promise.hadUnhandledRejection_ = true;
        goog.async.run(function () {
            if (promise.hadUnhandledRejection_) {
                promise.appendLongStack_(reason);
                goog.Promise.handleRejection_.call(null, reason);
            }
        });
    }
};
goog.Promise.handleRejection_ = goog.async.throwException;
goog.Promise.setUnhandledRejectionHandler = function (handler) {
    goog.Promise.handleRejection_ = handler;
};
goog.Promise.CancellationError = function (opt_message) {
    goog.Promise.CancellationError.base(this, 'constructor', opt_message);
};
goog.inherits(goog.Promise.CancellationError, goog.debug.Error);
goog.Promise.CancellationError.prototype.name = 'cancel';
goog.Promise.Resolver_ = function (promise, resolve, reject) {
    this.promise = promise;
    this.resolve = resolve;
    this.reject = reject;
};
goog.provide('goog.promise.Resolver');
goog.forwardDeclare('goog.Promise');
goog.promise.Resolver = function () { };
goog.promise.Resolver.prototype.promise;
goog.promise.Resolver.prototype.resolve;
goog.promise.Resolver.prototype.reject;
goog.provide('goog.structs');
goog.require('goog.array');
goog.require('goog.object');
goog.structs.getCount = function (col) {
    if (col.getCount && typeof col.getCount == 'function') {
        return col.getCount();
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return col.length;
    }
    return goog.object.getCount(col);
};
goog.structs.getValues = function (col) {
    if (col.getValues && typeof col.getValues == 'function') {
        return col.getValues();
    }
    if (goog.isString(col)) {
        return col.split('');
    }
    if (goog.isArrayLike(col)) {
        var rv = [];
        var l = col.length;
        for (var i = 0; i < l; i++) {
            rv.push(col[i]);
        }
        return rv;
    }
    return goog.object.getValues(col);
};
goog.structs.getKeys = function (col) {
    if (col.getKeys && typeof col.getKeys == 'function') {
        return col.getKeys();
    }
    if (col.getValues && typeof col.getValues == 'function') {
        return undefined;
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        var rv = [];
        var l = col.length;
        for (var i = 0; i < l; i++) {
            rv.push(i);
        }
        return rv;
    }
    return goog.object.getKeys(col);
};
goog.structs.contains = function (col, val) {
    if (col.contains && typeof col.contains == 'function') {
        return col.contains(val);
    }
    if (col.containsValue && typeof col.containsValue == 'function') {
        return col.containsValue(val);
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return goog.array.contains((col), val);
    }
    return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function (col) {
    if (col.isEmpty && typeof col.isEmpty == 'function') {
        return col.isEmpty();
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return goog.array.isEmpty((col));
    }
    return goog.object.isEmpty(col);
};
goog.structs.clear = function (col) {
    if (col.clear && typeof col.clear == 'function') {
        col.clear();
    }
    else if (goog.isArrayLike(col)) {
        goog.array.clear((col));
    }
    else {
        goog.object.clear(col);
    }
};
goog.structs.forEach = function (col, f, opt_obj) {
    if (col.forEach && typeof col.forEach == 'function') {
        col.forEach(f, opt_obj);
    }
    else if (goog.isArrayLike(col) || goog.isString(col)) {
        goog.array.forEach((col), f, opt_obj);
    }
    else {
        var keys = goog.structs.getKeys(col);
        var values = goog.structs.getValues(col);
        var l = values.length;
        for (var i = 0; i < l; i++) {
            f.call((opt_obj), values[i], keys && keys[i], col);
        }
    }
};
goog.structs.filter = function (col, f, opt_obj) {
    if (typeof col.filter == 'function') {
        return col.filter(f, opt_obj);
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return goog.array.filter((col), f, opt_obj);
    }
    var rv;
    var keys = goog.structs.getKeys(col);
    var values = goog.structs.getValues(col);
    var l = values.length;
    if (keys) {
        rv = {};
        for (var i = 0; i < l; i++) {
            if (f.call((opt_obj), values[i], keys[i], col)) {
                rv[keys[i]] = values[i];
            }
        }
    }
    else {
        rv = [];
        for (var i = 0; i < l; i++) {
            if (f.call(opt_obj, values[i], undefined, col)) {
                rv.push(values[i]);
            }
        }
    }
    return rv;
};
goog.structs.map = function (col, f, opt_obj) {
    if (typeof col.map == 'function') {
        return col.map(f, opt_obj);
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return goog.array.map((col), f, opt_obj);
    }
    var rv;
    var keys = goog.structs.getKeys(col);
    var values = goog.structs.getValues(col);
    var l = values.length;
    if (keys) {
        rv = {};
        for (var i = 0; i < l; i++) {
            rv[keys[i]] = f.call((opt_obj), values[i], keys[i], col);
        }
    }
    else {
        rv = [];
        for (var i = 0; i < l; i++) {
            rv[i] = f.call((opt_obj), values[i], undefined, col);
        }
    }
    return rv;
};
goog.structs.some = function (col, f, opt_obj) {
    if (typeof col.some == 'function') {
        return col.some(f, opt_obj);
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return goog.array.some((col), f, opt_obj);
    }
    var keys = goog.structs.getKeys(col);
    var values = goog.structs.getValues(col);
    var l = values.length;
    for (var i = 0; i < l; i++) {
        if (f.call((opt_obj), values[i], keys && keys[i], col)) {
            return true;
        }
    }
    return false;
};
goog.structs.every = function (col, f, opt_obj) {
    if (typeof col.every == 'function') {
        return col.every(f, opt_obj);
    }
    if (goog.isArrayLike(col) || goog.isString(col)) {
        return goog.array.every((col), f, opt_obj);
    }
    var keys = goog.structs.getKeys(col);
    var values = goog.structs.getValues(col);
    var l = values.length;
    for (var i = 0; i < l; i++) {
        if (!f.call((opt_obj), values[i], keys && keys[i], col)) {
            return false;
        }
    }
    return true;
};
goog.provide('goog.structs.Trie');
goog.require('goog.object');
goog.require('goog.structs');
goog.structs.Trie = function (opt_trie) {
    this.value_ = undefined;
    this.childNodes_ = {};
    if (opt_trie) {
        this.setAll(opt_trie);
    }
};
goog.structs.Trie.prototype.set = function (key, value) {
    this.setOrAdd_(key, value, false);
};
goog.structs.Trie.prototype.add = function (key, value) {
    this.setOrAdd_(key, value, true);
};
goog.structs.Trie.prototype.setOrAdd_ = function (key, value, opt_add) {
    var node = this;
    for (var characterPosition = 0; characterPosition < key.length; characterPosition++) {
        var currentCharacter = key.charAt(characterPosition);
        if (!node.childNodes_[currentCharacter]) {
            node.childNodes_[currentCharacter] = new goog.structs.Trie();
        }
        node = node.childNodes_[currentCharacter];
    }
    if (opt_add && node.value_ !== undefined) {
        throw new Error('The collection already contains the key "' + key + '"');
    }
    else {
        node.value_ = value;
    }
};
goog.structs.Trie.prototype.setAll = function (trie) {
    var keys = goog.structs.getKeys(trie);
    var values = goog.structs.getValues(trie);
    for (var i = 0; i < keys.length; i++) {
        this.set(keys[i], values[i]);
    }
};
goog.structs.Trie.prototype.getChildNode_ = function (path) {
    var node = this;
    for (var characterPosition = 0; characterPosition < path.length; characterPosition++) {
        var currentCharacter = path.charAt(characterPosition);
        node = node.childNodes_[currentCharacter];
        if (!node) {
            return undefined;
        }
    }
    return node;
};
goog.structs.Trie.prototype.get = function (key) {
    var node = this.getChildNode_(key);
    return node ? node.value_ : undefined;
};
goog.structs.Trie.prototype.getKeyAndPrefixes = function (key, opt_keyStartIndex) {
    var node = this;
    var matches = {};
    var characterPosition = opt_keyStartIndex || 0;
    if (node.value_ !== undefined) {
        matches[characterPosition] = node.value_;
    }
    for (; characterPosition < key.length; characterPosition++) {
        var currentCharacter = key.charAt(characterPosition);
        if (!(currentCharacter in node.childNodes_)) {
            break;
        }
        node = node.childNodes_[currentCharacter];
        if ((node.value_) !== undefined) {
            matches[characterPosition] = node.value_;
        }
    }
    return matches;
};
goog.structs.Trie.prototype.getValues = function () {
    var allValues = [];
    this.getValuesInternal_(allValues);
    return allValues;
};
goog.structs.Trie.prototype.getValuesInternal_ = function (allValues) {
    if (this.value_ !== undefined) {
        allValues.push(this.value_);
    }
    for (var childNode in this.childNodes_) {
        this.childNodes_[childNode].getValuesInternal_(allValues);
    }
};
goog.structs.Trie.prototype.getKeys = function (opt_prefix) {
    var allKeys = [];
    if (opt_prefix) {
        var node = this;
        for (var characterPosition = 0; characterPosition < opt_prefix.length; characterPosition++) {
            var currentCharacter = opt_prefix.charAt(characterPosition);
            if (!node.childNodes_[currentCharacter]) {
                return [];
            }
            node = node.childNodes_[currentCharacter];
        }
        node.getKeysInternal_(opt_prefix, allKeys);
    }
    else {
        this.getKeysInternal_('', allKeys);
    }
    return allKeys;
};
goog.structs.Trie.prototype.getKeysInternal_ = function (keySoFar, allKeys) {
    if (this.value_ !== undefined) {
        allKeys.push(keySoFar);
    }
    for (var childNode in this.childNodes_) {
        this.childNodes_[childNode].getKeysInternal_(keySoFar + childNode, allKeys);
    }
};
goog.structs.Trie.prototype.containsKey = function (key) {
    return this.get(key) !== undefined;
};
goog.structs.Trie.prototype.containsPrefix = function (prefix) {
    if (prefix.length == 0) {
        return !this.isEmpty();
    }
    return !!this.getChildNode_(prefix);
};
goog.structs.Trie.prototype.containsValue = function (value) {
    if (this.value_ === value) {
        return true;
    }
    for (var childNode in this.childNodes_) {
        if (this.childNodes_[childNode].containsValue(value)) {
            return true;
        }
    }
    return false;
};
goog.structs.Trie.prototype.clear = function () {
    this.childNodes_ = {};
    this.value_ = undefined;
};
goog.structs.Trie.prototype.remove = function (key) {
    var node = this;
    var parents = [];
    for (var characterPosition = 0; characterPosition < key.length; characterPosition++) {
        var currentCharacter = key.charAt(characterPosition);
        if (!node.childNodes_[currentCharacter]) {
            throw new Error('The collection does not have the key "' + key + '"');
        }
        parents.push([node, currentCharacter]);
        node = node.childNodes_[currentCharacter];
    }
    var oldValue = node.value_;
    delete node.value_;
    while (parents.length > 0) {
        var currentParentAndCharacter = parents.pop();
        var currentParent = currentParentAndCharacter[0];
        var currentCharacter = currentParentAndCharacter[1];
        if (currentParent.childNodes_[currentCharacter].isEmpty()) {
            delete currentParent.childNodes_[currentCharacter];
        }
        else {
            break;
        }
    }
    return oldValue;
};
goog.structs.Trie.prototype.clone = function () {
    return new goog.structs.Trie(this);
};
goog.structs.Trie.prototype.getCount = function () {
    return goog.structs.getCount(this.getValues());
};
goog.structs.Trie.prototype.isEmpty = function () {
    return this.value_ === undefined && goog.object.isEmpty(this.childNodes_);
};
goog.provide('goog.style.bidi');
goog.require('goog.dom');
goog.require('goog.style');
goog.require('goog.userAgent');
goog.require('goog.userAgent.platform');
goog.require('goog.userAgent.product');
goog.require('goog.userAgent.product.isVersion');
goog.style.bidi.getScrollLeft = function (element) {
    var isRtl = goog.style.isRightToLeft(element);
    if (isRtl && goog.style.bidi.usesNegativeScrollLeftInRtl_()) {
        return -element.scrollLeft;
    }
    else if (isRtl &&
        !(goog.userAgent.EDGE_OR_IE && goog.userAgent.isVersionOrHigher('8'))) {
        var overflowX = goog.style.getComputedOverflowX(element);
        if (overflowX == 'visible') {
            return element.scrollLeft;
        }
        else {
            return element.scrollWidth - element.clientWidth - element.scrollLeft;
        }
    }
    return element.scrollLeft;
};
goog.style.bidi.getOffsetStart = function (element) {
    element = (element);
    var offsetLeftForReal = element.offsetLeft;
    var bestParent = element.offsetParent;
    if (!bestParent && goog.style.getComputedPosition(element) == 'fixed') {
        bestParent = goog.dom.getOwnerDocument(element).documentElement;
    }
    if (!bestParent) {
        return offsetLeftForReal;
    }
    if (goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher(58)) {
        var borderWidths = goog.style.getBorderBox(bestParent);
        offsetLeftForReal += borderWidths.left;
    }
    else if (goog.userAgent.isDocumentModeOrHigher(8) &&
        !goog.userAgent.isDocumentModeOrHigher(9)) {
        var borderWidths = goog.style.getBorderBox(bestParent);
        offsetLeftForReal -= borderWidths.left;
    }
    if (goog.style.isRightToLeft(bestParent)) {
        var elementRightOffset = offsetLeftForReal + element.offsetWidth;
        return bestParent.clientWidth - elementRightOffset;
    }
    return offsetLeftForReal;
};
goog.style.bidi.setScrollOffset = function (element, offsetStart) {
    offsetStart = Math.max(offsetStart, 0);
    if (!goog.style.isRightToLeft(element)) {
        element.scrollLeft = offsetStart;
    }
    else if (goog.style.bidi.usesNegativeScrollLeftInRtl_()) {
        element.scrollLeft = -offsetStart;
    }
    else if (!(goog.userAgent.EDGE_OR_IE && goog.userAgent.isVersionOrHigher('8'))) {
        element.scrollLeft =
            element.scrollWidth - offsetStart - element.clientWidth;
    }
    else {
        element.scrollLeft = offsetStart;
    }
};
goog.style.bidi.usesNegativeScrollLeftInRtl_ = function () {
    var isSafari10Plus = goog.userAgent.product.SAFARI && goog.userAgent.product.isVersion(10);
    var isIOS10Plus = goog.userAgent.IOS && goog.userAgent.platform.isVersion(10);
    return goog.userAgent.GECKO || isSafari10Plus || isIOS10Plus;
};
goog.style.bidi.setPosition = function (elem, left, top, isRtl) {
    if (!goog.isNull(top)) {
        elem.style.top = top + 'px';
    }
    if (isRtl) {
        elem.style.right = left + 'px';
        elem.style.left = '';
    }
    else {
        elem.style.left = left + 'px';
        elem.style.right = '';
    }
};
goog.provide('goog.style');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.vendor');
goog.require('goog.html.SafeStyleSheet');
goog.require('goog.math.Box');
goog.require('goog.math.Coordinate');
goog.require('goog.math.Rect');
goog.require('goog.math.Size');
goog.require('goog.object');
goog.require('goog.reflect');
goog.require('goog.string');
goog.require('goog.userAgent');
goog.forwardDeclare('goog.events.Event');
goog.style.setStyle = function (element, style, opt_value) {
    if (goog.isString(style)) {
        goog.style.setStyle_(element, opt_value, style);
    }
    else {
        for (var key in style) {
            goog.style.setStyle_(element, style[key], key);
        }
    }
};
goog.style.setStyle_ = function (element, value, style) {
    var propertyName = goog.style.getVendorJsStyleName_(element, style);
    if (propertyName) {
        element.style[propertyName] = (value);
    }
};
goog.style.styleNameCache_ = {};
goog.style.getVendorJsStyleName_ = function (element, style) {
    var propertyName = goog.style.styleNameCache_[style];
    if (!propertyName) {
        var camelStyle = goog.string.toCamelCase(style);
        propertyName = camelStyle;
        if (element.style[camelStyle] === undefined) {
            var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() +
                goog.string.toTitleCase(camelStyle);
            if (element.style[prefixedStyle] !== undefined) {
                propertyName = prefixedStyle;
            }
        }
        goog.style.styleNameCache_[style] = propertyName;
    }
    return propertyName;
};
goog.style.getVendorStyleName_ = function (element, style) {
    var camelStyle = goog.string.toCamelCase(style);
    if (element.style[camelStyle] === undefined) {
        var prefixedStyle = goog.dom.vendor.getVendorJsPrefix() +
            goog.string.toTitleCase(camelStyle);
        if (element.style[prefixedStyle] !== undefined) {
            return goog.dom.vendor.getVendorPrefix() + '-' + style;
        }
    }
    return style;
};
goog.style.getStyle = function (element, property) {
    var styleValue = element.style[goog.string.toCamelCase(property)];
    if (typeof (styleValue) !== 'undefined') {
        return styleValue;
    }
    return element.style[goog.style.getVendorJsStyleName_(element, property)] ||
        '';
};
goog.style.getComputedStyle = function (element, property) {
    var doc = goog.dom.getOwnerDocument(element);
    if (doc.defaultView && doc.defaultView.getComputedStyle) {
        var styles = doc.defaultView.getComputedStyle(element, null);
        if (styles) {
            return styles[property] || styles.getPropertyValue(property) || '';
        }
    }
    return '';
};
goog.style.getCascadedStyle = function (element, style) {
    return (element.currentStyle ? element.currentStyle[style] : null);
};
goog.style.getStyle_ = function (element, style) {
    return goog.style.getComputedStyle(element, style) ||
        goog.style.getCascadedStyle(element, style) ||
        (element.style && element.style[style]);
};
goog.style.getComputedBoxSizing = function (element) {
    return goog.style.getStyle_(element, 'boxSizing') ||
        goog.style.getStyle_(element, 'MozBoxSizing') ||
        goog.style.getStyle_(element, 'WebkitBoxSizing') || null;
};
goog.style.getComputedPosition = function (element) {
    return goog.style.getStyle_(element, 'position');
};
goog.style.getBackgroundColor = function (element) {
    return goog.style.getStyle_(element, 'backgroundColor');
};
goog.style.getComputedOverflowX = function (element) {
    return goog.style.getStyle_(element, 'overflowX');
};
goog.style.getComputedOverflowY = function (element) {
    return goog.style.getStyle_(element, 'overflowY');
};
goog.style.getComputedZIndex = function (element) {
    return goog.style.getStyle_(element, 'zIndex');
};
goog.style.getComputedTextAlign = function (element) {
    return goog.style.getStyle_(element, 'textAlign');
};
goog.style.getComputedCursor = function (element) {
    return goog.style.getStyle_(element, 'cursor');
};
goog.style.getComputedTransform = function (element) {
    var property = goog.style.getVendorStyleName_(element, 'transform');
    return goog.style.getStyle_(element, property) ||
        goog.style.getStyle_(element, 'transform');
};
goog.style.setPosition = function (el, arg1, opt_arg2) {
    var x, y;
    if (arg1 instanceof goog.math.Coordinate) {
        x = arg1.x;
        y = arg1.y;
    }
    else {
        x = arg1;
        y = opt_arg2;
    }
    el.style.left = goog.style.getPixelStyleValue_((x), false);
    el.style.top = goog.style.getPixelStyleValue_((y), false);
};
goog.style.getPosition = function (element) {
    return new goog.math.Coordinate((element).offsetLeft, (element).offsetTop);
};
goog.style.getClientViewportElement = function (opt_node) {
    var doc;
    if (opt_node) {
        doc = goog.dom.getOwnerDocument(opt_node);
    }
    else {
        doc = goog.dom.getDocument();
    }
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) &&
        !goog.dom.getDomHelper(doc).isCss1CompatMode()) {
        return doc.body;
    }
    return doc.documentElement;
};
goog.style.getViewportPageOffset = function (doc) {
    var body = doc.body;
    var documentElement = doc.documentElement;
    var scrollLeft = body.scrollLeft || documentElement.scrollLeft;
    var scrollTop = body.scrollTop || documentElement.scrollTop;
    return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.getBoundingClientRect_ = function (el) {
    var rect;
    try {
        rect = el.getBoundingClientRect();
    }
    catch (e) {
        return { 'left': 0, 'top': 0, 'right': 0, 'bottom': 0 };
    }
    if (goog.userAgent.IE && el.ownerDocument.body) {
        var doc = el.ownerDocument;
        rect.left -= doc.documentElement.clientLeft + doc.body.clientLeft;
        rect.top -= doc.documentElement.clientTop + doc.body.clientTop;
    }
    return rect;
};
goog.style.getOffsetParent = function (element) {
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(8)) {
        goog.asserts.assert(element && 'offsetParent' in element);
        return element.offsetParent;
    }
    var doc = goog.dom.getOwnerDocument(element);
    var positionStyle = goog.style.getStyle_(element, 'position');
    var skipStatic = positionStyle == 'fixed' || positionStyle == 'absolute';
    for (var parent = element.parentNode; parent && parent != doc; parent = parent.parentNode) {
        if (parent.nodeType == goog.dom.NodeType.DOCUMENT_FRAGMENT && parent.host) {
            parent = (parent.host);
        }
        positionStyle =
            goog.style.getStyle_((parent), 'position');
        skipStatic = skipStatic && positionStyle == 'static' &&
            parent != doc.documentElement && parent != doc.body;
        if (!skipStatic &&
            (parent.scrollWidth > parent.clientWidth ||
                parent.scrollHeight > parent.clientHeight ||
                positionStyle == 'fixed' || positionStyle == 'absolute' ||
                positionStyle == 'relative')) {
            return (parent);
        }
    }
    return null;
};
goog.style.getVisibleRectForElement = function (element) {
    var visibleRect = new goog.math.Box(0, Infinity, Infinity, 0);
    var dom = goog.dom.getDomHelper(element);
    var body = dom.getDocument().body;
    var documentElement = dom.getDocument().documentElement;
    var scrollEl = dom.getDocumentScrollElement();
    for (var el = element; el = goog.style.getOffsetParent(el);) {
        if ((!goog.userAgent.IE || el.clientWidth != 0) &&
            (!goog.userAgent.WEBKIT || el.clientHeight != 0 || el != body) &&
            (el != body && el != documentElement &&
                goog.style.getStyle_(el, 'overflow') != 'visible')) {
            var pos = goog.style.getPageOffset(el);
            var client = goog.style.getClientLeftTop(el);
            pos.x += client.x;
            pos.y += client.y;
            visibleRect.top = Math.max(visibleRect.top, pos.y);
            visibleRect.right = Math.min(visibleRect.right, pos.x + el.clientWidth);
            visibleRect.bottom =
                Math.min(visibleRect.bottom, pos.y + el.clientHeight);
            visibleRect.left = Math.max(visibleRect.left, pos.x);
        }
    }
    var scrollX = scrollEl.scrollLeft, scrollY = scrollEl.scrollTop;
    visibleRect.left = Math.max(visibleRect.left, scrollX);
    visibleRect.top = Math.max(visibleRect.top, scrollY);
    var winSize = dom.getViewportSize();
    visibleRect.right = Math.min(visibleRect.right, scrollX + winSize.width);
    visibleRect.bottom = Math.min(visibleRect.bottom, scrollY + winSize.height);
    return visibleRect.top >= 0 && visibleRect.left >= 0 &&
        visibleRect.bottom > visibleRect.top &&
        visibleRect.right > visibleRect.left ?
        visibleRect :
        null;
};
goog.style.getContainerOffsetToScrollInto = function (element, opt_container, opt_center) {
    var container = opt_container || goog.dom.getDocumentScrollElement();
    var elementPos = goog.style.getPageOffset(element);
    var containerPos = goog.style.getPageOffset(container);
    var containerBorder = goog.style.getBorderBox(container);
    if (container == goog.dom.getDocumentScrollElement()) {
        var relX = elementPos.x - container.scrollLeft;
        var relY = elementPos.y - container.scrollTop;
        if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(10)) {
            relX += containerBorder.left;
            relY += containerBorder.top;
        }
    }
    else {
        var relX = elementPos.x - containerPos.x - containerBorder.left;
        var relY = elementPos.y - containerPos.y - containerBorder.top;
    }
    var elementSize = goog.style.getSizeWithDisplay_(element);
    var spaceX = container.clientWidth - elementSize.width;
    var spaceY = container.clientHeight - elementSize.height;
    var scrollLeft = container.scrollLeft;
    var scrollTop = container.scrollTop;
    if (opt_center) {
        scrollLeft += relX - spaceX / 2;
        scrollTop += relY - spaceY / 2;
    }
    else {
        scrollLeft += Math.min(relX, Math.max(relX - spaceX, 0));
        scrollTop += Math.min(relY, Math.max(relY - spaceY, 0));
    }
    return new goog.math.Coordinate(scrollLeft, scrollTop);
};
goog.style.scrollIntoContainerView = function (element, opt_container, opt_center) {
    var container = opt_container || goog.dom.getDocumentScrollElement();
    var offset = goog.style.getContainerOffsetToScrollInto(element, container, opt_center);
    container.scrollLeft = offset.x;
    container.scrollTop = offset.y;
};
goog.style.getClientLeftTop = function (el) {
    return new goog.math.Coordinate(el.clientLeft, el.clientTop);
};
goog.style.getPageOffset = function (el) {
    var doc = goog.dom.getOwnerDocument(el);
    goog.asserts.assertObject(el, 'Parameter is required');
    var pos = new goog.math.Coordinate(0, 0);
    var viewportElement = goog.style.getClientViewportElement(doc);
    if (el == viewportElement) {
        return pos;
    }
    var box = goog.style.getBoundingClientRect_(el);
    var scrollCoord = goog.dom.getDomHelper(doc).getDocumentScroll();
    pos.x = box.left + scrollCoord.x;
    pos.y = box.top + scrollCoord.y;
    return pos;
};
goog.style.getPageOffsetLeft = function (el) {
    return goog.style.getPageOffset(el).x;
};
goog.style.getPageOffsetTop = function (el) {
    return goog.style.getPageOffset(el).y;
};
goog.style.getFramedPageOffset = function (el, relativeWin) {
    var position = new goog.math.Coordinate(0, 0);
    var currentWin = goog.dom.getWindow(goog.dom.getOwnerDocument(el));
    if (!goog.reflect.canAccessProperty(currentWin, 'parent')) {
        return position;
    }
    var currentEl = el;
    do {
        var offset = currentWin == relativeWin ?
            goog.style.getPageOffset(currentEl) :
            goog.style.getClientPositionForElement_(goog.asserts.assert(currentEl));
        position.x += offset.x;
        position.y += offset.y;
    } while (currentWin && currentWin != relativeWin &&
        currentWin != currentWin.parent &&
        (currentEl = currentWin.frameElement) &&
        (currentWin = currentWin.parent));
    return position;
};
goog.style.translateRectForAnotherFrame = function (rect, origBase, newBase) {
    if (origBase.getDocument() != newBase.getDocument()) {
        var body = origBase.getDocument().body;
        var pos = goog.style.getFramedPageOffset(body, newBase.getWindow());
        pos = goog.math.Coordinate.difference(pos, goog.style.getPageOffset(body));
        if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9) &&
            !origBase.isCss1CompatMode()) {
            pos = goog.math.Coordinate.difference(pos, origBase.getDocumentScroll());
        }
        rect.left += pos.x;
        rect.top += pos.y;
    }
};
goog.style.getRelativePosition = function (a, b) {
    var ap = goog.style.getClientPosition(a);
    var bp = goog.style.getClientPosition(b);
    return new goog.math.Coordinate(ap.x - bp.x, ap.y - bp.y);
};
goog.style.getClientPositionForElement_ = function (el) {
    var box = goog.style.getBoundingClientRect_(el);
    return new goog.math.Coordinate(box.left, box.top);
};
goog.style.getClientPosition = function (el) {
    goog.asserts.assert(el);
    if (el.nodeType == goog.dom.NodeType.ELEMENT) {
        return goog.style.getClientPositionForElement_((el));
    }
    else {
        var targetEvent = el.changedTouches ? el.changedTouches[0] : el;
        return new goog.math.Coordinate(targetEvent.clientX, targetEvent.clientY);
    }
};
goog.style.setPageOffset = function (el, x, opt_y) {
    var cur = goog.style.getPageOffset(el);
    if (x instanceof goog.math.Coordinate) {
        opt_y = x.y;
        x = x.x;
    }
    var dx = goog.asserts.assertNumber(x) - cur.x;
    var dy = Number(opt_y) - cur.y;
    goog.style.setPosition(el, (el).offsetLeft + dx, (el).offsetTop + dy);
};
goog.style.setSize = function (element, w, opt_h) {
    var h;
    if (w instanceof goog.math.Size) {
        h = w.height;
        w = w.width;
    }
    else {
        if (opt_h == undefined) {
            throw new Error('missing height argument');
        }
        h = opt_h;
    }
    goog.style.setWidth(element, (w));
    goog.style.setHeight(element, h);
};
goog.style.getPixelStyleValue_ = function (value, round) {
    if (typeof value == 'number') {
        value = (round ? Math.round(value) : value) + 'px';
    }
    return value;
};
goog.style.setHeight = function (element, height) {
    element.style.height = goog.style.getPixelStyleValue_(height, true);
};
goog.style.setWidth = function (element, width) {
    element.style.width = goog.style.getPixelStyleValue_(width, true);
};
goog.style.getSize = function (element) {
    return goog.style.evaluateWithTemporaryDisplay_(goog.style.getSizeWithDisplay_, (element));
};
goog.style.evaluateWithTemporaryDisplay_ = function (fn, element) {
    if (goog.style.getStyle_(element, 'display') != 'none') {
        return fn(element);
    }
    var style = element.style;
    var originalDisplay = style.display;
    var originalVisibility = style.visibility;
    var originalPosition = style.position;
    style.visibility = 'hidden';
    style.position = 'absolute';
    style.display = 'inline';
    var retVal = fn(element);
    style.display = originalDisplay;
    style.position = originalPosition;
    style.visibility = originalVisibility;
    return retVal;
};
goog.style.getSizeWithDisplay_ = function (element) {
    var offsetWidth = (element).offsetWidth;
    var offsetHeight = (element).offsetHeight;
    var webkitOffsetsZero = goog.userAgent.WEBKIT && !offsetWidth && !offsetHeight;
    if ((!goog.isDef(offsetWidth) || webkitOffsetsZero) &&
        element.getBoundingClientRect) {
        var clientRect = goog.style.getBoundingClientRect_(element);
        return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
    }
    return new goog.math.Size(offsetWidth, offsetHeight);
};
goog.style.getTransformedSize = function (element) {
    if (!element.getBoundingClientRect) {
        return null;
    }
    var clientRect = goog.style.evaluateWithTemporaryDisplay_(goog.style.getBoundingClientRect_, element);
    return new goog.math.Size(clientRect.right - clientRect.left, clientRect.bottom - clientRect.top);
};
goog.style.getBounds = function (element) {
    var o = goog.style.getPageOffset(element);
    var s = goog.style.getSize(element);
    return new goog.math.Rect(o.x, o.y, s.width, s.height);
};
goog.style.toCamelCase = function (selector) {
    return goog.string.toCamelCase(String(selector));
};
goog.style.toSelectorCase = function (selector) {
    return goog.string.toSelectorCase(selector);
};
goog.style.getOpacity = function (el) {
    goog.asserts.assert(el);
    var style = el.style;
    var result = '';
    if ('opacity' in style) {
        result = style.opacity;
    }
    else if ('MozOpacity' in style) {
        result = style.MozOpacity;
    }
    else if ('filter' in style) {
        var match = style.filter.match(/alpha\(opacity=([\d.]+)\)/);
        if (match) {
            result = String(match[1] / 100);
        }
    }
    return result == '' ? result : Number(result);
};
goog.style.setOpacity = function (el, alpha) {
    goog.asserts.assert(el);
    var style = el.style;
    if ('opacity' in style) {
        style.opacity = alpha;
    }
    else if ('MozOpacity' in style) {
        style.MozOpacity = alpha;
    }
    else if ('filter' in style) {
        if (alpha === '') {
            style.filter = '';
        }
        else {
            style.filter = 'alpha(opacity=' + (Number(alpha) * 100) + ')';
        }
    }
};
goog.style.setTransparentBackgroundImage = function (el, src) {
    var style = el.style;
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('8')) {
        style.filter = 'progid:DXImageTransform.Microsoft.AlphaImageLoader(' +
            'src="' + src + '", sizingMethod="crop")';
    }
    else {
        style.backgroundImage = 'url(' + src + ')';
        style.backgroundPosition = 'top left';
        style.backgroundRepeat = 'no-repeat';
    }
};
goog.style.clearTransparentBackgroundImage = function (el) {
    var style = el.style;
    if ('filter' in style) {
        style.filter = '';
    }
    else {
        style.backgroundImage = 'none';
    }
};
goog.style.showElement = function (el, display) {
    goog.style.setElementShown(el, display);
};
goog.style.setElementShown = function (el, isShown) {
    el.style.display = isShown ? '' : 'none';
};
goog.style.isElementShown = function (el) {
    return el.style.display != 'none';
};
goog.style.installSafeStyleSheet = function (safeStyleSheet, opt_node) {
    var dh = goog.dom.getDomHelper(opt_node);
    var doc = dh.getDocument();
    if (goog.userAgent.IE && doc.createStyleSheet) {
        var styleSheet = doc.createStyleSheet();
        goog.style.setSafeStyleSheet(styleSheet, safeStyleSheet);
        return styleSheet;
    }
    else {
        var head = dh.getElementsByTagNameAndClass(goog.dom.TagName.HEAD)[0];
        if (!head) {
            var body = dh.getElementsByTagNameAndClass(goog.dom.TagName.BODY)[0];
            head = dh.createDom(goog.dom.TagName.HEAD);
            body.parentNode.insertBefore(head, body);
        }
        var el = dh.createDom(goog.dom.TagName.STYLE);
        goog.style.setSafeStyleSheet(el, safeStyleSheet);
        dh.appendChild(head, el);
        return el;
    }
};
goog.style.uninstallStyles = function (styleSheet) {
    var node = styleSheet.ownerNode || styleSheet.owningElement ||
        (styleSheet);
    goog.dom.removeNode(node);
};
goog.style.setSafeStyleSheet = function (element, safeStyleSheet) {
    var stylesString = goog.html.SafeStyleSheet.unwrap(safeStyleSheet);
    if (goog.userAgent.IE && goog.isDef(element.cssText)) {
        element.cssText = stylesString;
    }
    else {
        element.innerHTML = stylesString;
    }
};
goog.style.setPreWrap = function (el) {
    var style = el.style;
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('8')) {
        style.whiteSpace = 'pre';
        style.wordWrap = 'break-word';
    }
    else if (goog.userAgent.GECKO) {
        style.whiteSpace = '-moz-pre-wrap';
    }
    else {
        style.whiteSpace = 'pre-wrap';
    }
};
goog.style.setInlineBlock = function (el) {
    var style = el.style;
    style.position = 'relative';
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('8')) {
        style.zoom = '1';
        style.display = 'inline';
    }
    else {
        style.display = 'inline-block';
    }
};
goog.style.isRightToLeft = function (el) {
    return 'rtl' == goog.style.getStyle_(el, 'direction');
};
goog.style.unselectableStyle_ = goog.userAgent.GECKO ?
    'MozUserSelect' :
    goog.userAgent.WEBKIT || goog.userAgent.EDGE ? 'WebkitUserSelect' : null;
goog.style.isUnselectable = function (el) {
    if (goog.style.unselectableStyle_) {
        return el.style[goog.style.unselectableStyle_].toLowerCase() == 'none';
    }
    else if (goog.userAgent.IE || goog.userAgent.OPERA) {
        return el.getAttribute('unselectable') == 'on';
    }
    return false;
};
goog.style.setUnselectable = function (el, unselectable, opt_noRecurse) {
    var descendants = !opt_noRecurse ? el.getElementsByTagName('*') : null;
    var name = goog.style.unselectableStyle_;
    if (name) {
        var value = unselectable ? 'none' : '';
        if (el.style) {
            el.style[name] = value;
        }
        if (descendants) {
            for (var i = 0, descendant; descendant = descendants[i]; i++) {
                if (descendant.style) {
                    descendant.style[name] = value;
                }
            }
        }
    }
    else if (goog.userAgent.IE || goog.userAgent.OPERA) {
        var value = unselectable ? 'on' : '';
        el.setAttribute('unselectable', value);
        if (descendants) {
            for (var i = 0, descendant; descendant = descendants[i]; i++) {
                descendant.setAttribute('unselectable', value);
            }
        }
    }
};
goog.style.getBorderBoxSize = function (element) {
    return new goog.math.Size((element).offsetWidth, (element).offsetHeight);
};
goog.style.setBorderBoxSize = function (element, size) {
    var doc = goog.dom.getOwnerDocument(element);
    var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('10') &&
        (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher('8'))) {
        var style = element.style;
        if (isCss1CompatMode) {
            var paddingBox = goog.style.getPaddingBox(element);
            var borderBox = goog.style.getBorderBox(element);
            style.pixelWidth = size.width - borderBox.left - paddingBox.left -
                paddingBox.right - borderBox.right;
            style.pixelHeight = size.height - borderBox.top - paddingBox.top -
                paddingBox.bottom - borderBox.bottom;
        }
        else {
            style.pixelWidth = size.width;
            style.pixelHeight = size.height;
        }
    }
    else {
        goog.style.setBoxSizingSize_(element, size, 'border-box');
    }
};
goog.style.getContentBoxSize = function (element) {
    var doc = goog.dom.getOwnerDocument(element);
    var ieCurrentStyle = goog.userAgent.IE && element.currentStyle;
    if (ieCurrentStyle && goog.dom.getDomHelper(doc).isCss1CompatMode() &&
        ieCurrentStyle.width != 'auto' && ieCurrentStyle.height != 'auto' &&
        !ieCurrentStyle.boxSizing) {
        var width = goog.style.getIePixelValue_(element, (ieCurrentStyle.width), 'width', 'pixelWidth');
        var height = goog.style.getIePixelValue_(element, (ieCurrentStyle.height), 'height', 'pixelHeight');
        return new goog.math.Size(width, height);
    }
    else {
        var borderBoxSize = goog.style.getBorderBoxSize(element);
        var paddingBox = goog.style.getPaddingBox(element);
        var borderBox = goog.style.getBorderBox(element);
        return new goog.math.Size(borderBoxSize.width - borderBox.left - paddingBox.left -
            paddingBox.right - borderBox.right, borderBoxSize.height - borderBox.top - paddingBox.top -
            paddingBox.bottom - borderBox.bottom);
    }
};
goog.style.setContentBoxSize = function (element, size) {
    var doc = goog.dom.getOwnerDocument(element);
    var isCss1CompatMode = goog.dom.getDomHelper(doc).isCss1CompatMode();
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('10') &&
        (!isCss1CompatMode || !goog.userAgent.isVersionOrHigher('8'))) {
        var style = element.style;
        if (isCss1CompatMode) {
            style.pixelWidth = size.width;
            style.pixelHeight = size.height;
        }
        else {
            var paddingBox = goog.style.getPaddingBox(element);
            var borderBox = goog.style.getBorderBox(element);
            style.pixelWidth = size.width + borderBox.left + paddingBox.left +
                paddingBox.right + borderBox.right;
            style.pixelHeight = size.height + borderBox.top + paddingBox.top +
                paddingBox.bottom + borderBox.bottom;
        }
    }
    else {
        goog.style.setBoxSizingSize_(element, size, 'content-box');
    }
};
goog.style.setBoxSizingSize_ = function (element, size, boxSizing) {
    var style = element.style;
    if (goog.userAgent.GECKO) {
        style.MozBoxSizing = boxSizing;
    }
    else if (goog.userAgent.WEBKIT) {
        style.WebkitBoxSizing = boxSizing;
    }
    else {
        style.boxSizing = boxSizing;
    }
    style.width = Math.max(size.width, 0) + 'px';
    style.height = Math.max(size.height, 0) + 'px';
};
goog.style.getIePixelValue_ = function (element, value, name, pixelName) {
    if (/^\d+px?$/.test(value)) {
        return parseInt(value, 10);
    }
    else {
        var oldStyleValue = element.style[name];
        var oldRuntimeValue = element.runtimeStyle[name];
        element.runtimeStyle[name] = element.currentStyle[name];
        element.style[name] = value;
        var pixelValue = element.style[pixelName];
        element.style[name] = oldStyleValue;
        element.runtimeStyle[name] = oldRuntimeValue;
        return +pixelValue;
    }
};
goog.style.getIePixelDistance_ = function (element, propName) {
    var value = goog.style.getCascadedStyle(element, propName);
    return value ?
        goog.style.getIePixelValue_(element, value, 'left', 'pixelLeft') :
        0;
};
goog.style.getBox_ = function (element, stylePrefix) {
    if (goog.userAgent.IE) {
        var left = goog.style.getIePixelDistance_(element, stylePrefix + 'Left');
        var right = goog.style.getIePixelDistance_(element, stylePrefix + 'Right');
        var top = goog.style.getIePixelDistance_(element, stylePrefix + 'Top');
        var bottom = goog.style.getIePixelDistance_(element, stylePrefix + 'Bottom');
        return new goog.math.Box(top, right, bottom, left);
    }
    else {
        var left = goog.style.getComputedStyle(element, stylePrefix + 'Left');
        var right = goog.style.getComputedStyle(element, stylePrefix + 'Right');
        var top = goog.style.getComputedStyle(element, stylePrefix + 'Top');
        var bottom = goog.style.getComputedStyle(element, stylePrefix + 'Bottom');
        return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
    }
};
goog.style.getPaddingBox = function (element) {
    return goog.style.getBox_(element, 'padding');
};
goog.style.getMarginBox = function (element) {
    return goog.style.getBox_(element, 'margin');
};
goog.style.ieBorderWidthKeywords_ = {
    'thin': 2,
    'medium': 4,
    'thick': 6
};
goog.style.getIePixelBorder_ = function (element, prop) {
    if (goog.style.getCascadedStyle(element, prop + 'Style') == 'none') {
        return 0;
    }
    var width = goog.style.getCascadedStyle(element, prop + 'Width');
    if (width in goog.style.ieBorderWidthKeywords_) {
        return goog.style.ieBorderWidthKeywords_[width];
    }
    return goog.style.getIePixelValue_(element, width, 'left', 'pixelLeft');
};
goog.style.getBorderBox = function (element) {
    if (goog.userAgent.IE && !goog.userAgent.isDocumentModeOrHigher(9)) {
        var left = goog.style.getIePixelBorder_(element, 'borderLeft');
        var right = goog.style.getIePixelBorder_(element, 'borderRight');
        var top = goog.style.getIePixelBorder_(element, 'borderTop');
        var bottom = goog.style.getIePixelBorder_(element, 'borderBottom');
        return new goog.math.Box(top, right, bottom, left);
    }
    else {
        var left = goog.style.getComputedStyle(element, 'borderLeftWidth');
        var right = goog.style.getComputedStyle(element, 'borderRightWidth');
        var top = goog.style.getComputedStyle(element, 'borderTopWidth');
        var bottom = goog.style.getComputedStyle(element, 'borderBottomWidth');
        return new goog.math.Box(parseFloat(top), parseFloat(right), parseFloat(bottom), parseFloat(left));
    }
};
goog.style.getFontFamily = function (el) {
    var doc = goog.dom.getOwnerDocument(el);
    var font = '';
    if (doc.body.createTextRange && goog.dom.contains(doc, el)) {
        var range = doc.body.createTextRange();
        range.moveToElementText(el);
        try {
            font = range.queryCommandValue('FontName');
        }
        catch (e) {
            font = '';
        }
    }
    if (!font) {
        font = goog.style.getStyle_(el, 'fontFamily');
    }
    var fontsArray = font.split(',');
    if (fontsArray.length > 1)
        font = fontsArray[0];
    return goog.string.stripQuotes(font, '"\'');
};
goog.style.lengthUnitRegex_ = /[^\d]+$/;
goog.style.getLengthUnits = function (value) {
    var units = value.match(goog.style.lengthUnitRegex_);
    return units && units[0] || null;
};
goog.style.ABSOLUTE_CSS_LENGTH_UNITS_ = {
    'cm': 1,
    'in': 1,
    'mm': 1,
    'pc': 1,
    'pt': 1
};
goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_ = {
    'em': 1,
    'ex': 1
};
goog.style.getFontSize = function (el) {
    var fontSize = goog.style.getStyle_(el, 'fontSize');
    var sizeUnits = goog.style.getLengthUnits(fontSize);
    if (fontSize && 'px' == sizeUnits) {
        return parseInt(fontSize, 10);
    }
    if (goog.userAgent.IE) {
        if (String(sizeUnits) in goog.style.ABSOLUTE_CSS_LENGTH_UNITS_) {
            return goog.style.getIePixelValue_(el, fontSize, 'left', 'pixelLeft');
        }
        else if (el.parentNode && el.parentNode.nodeType == goog.dom.NodeType.ELEMENT &&
            String(sizeUnits) in goog.style.CONVERTIBLE_RELATIVE_CSS_UNITS_) {
            var parentElement = (el.parentNode);
            var parentSize = goog.style.getStyle_(parentElement, 'fontSize');
            return goog.style.getIePixelValue_(parentElement, fontSize == parentSize ? '1em' : fontSize, 'left', 'pixelLeft');
        }
    }
    var sizeElement = goog.dom.createDom(goog.dom.TagName.SPAN, {
        'style': 'visibility:hidden;position:absolute;' +
            'line-height:0;padding:0;margin:0;border:0;height:1em;'
    });
    goog.dom.appendChild(el, sizeElement);
    fontSize = sizeElement.offsetHeight;
    goog.dom.removeNode(sizeElement);
    return fontSize;
};
goog.style.parseStyleAttribute = function (value) {
    var result = {};
    goog.array.forEach(value.split(/\s*;\s*/), function (pair) {
        var keyValue = pair.match(/\s*([\w-]+)\s*\:(.+)/);
        if (keyValue) {
            var styleName = keyValue[1];
            var styleValue = goog.string.trim(keyValue[2]);
            result[goog.string.toCamelCase(styleName.toLowerCase())] = styleValue;
        }
    });
    return result;
};
goog.style.toStyleAttribute = function (obj) {
    var buffer = [];
    goog.object.forEach(obj, function (value, key) {
        buffer.push(goog.string.toSelectorCase(key), ':', value, ';');
    });
    return buffer.join('');
};
goog.style.setFloat = function (el, value) {
    el.style[goog.userAgent.IE ? 'styleFloat' : 'cssFloat'] = value;
};
goog.style.getFloat = function (el) {
    return el.style[goog.userAgent.IE ? 'styleFloat' : 'cssFloat'] || '';
};
goog.style.getScrollbarWidth = function (opt_className) {
    var outerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
    if (opt_className) {
        outerDiv.className = opt_className;
    }
    outerDiv.style.cssText = 'overflow:auto;' +
        'position:absolute;top:0;width:100px;height:100px';
    var innerDiv = goog.dom.createElement(goog.dom.TagName.DIV);
    goog.style.setSize(innerDiv, '200px', '200px');
    outerDiv.appendChild(innerDiv);
    goog.dom.appendChild(goog.dom.getDocument().body, outerDiv);
    var width = outerDiv.offsetWidth - outerDiv.clientWidth;
    goog.dom.removeNode(outerDiv);
    return width;
};
goog.style.MATRIX_TRANSLATION_REGEX_ = new RegExp('matrix\\([0-9\\.\\-]+, [0-9\\.\\-]+, ' +
    '[0-9\\.\\-]+, [0-9\\.\\-]+, ' +
    '([0-9\\.\\-]+)p?x?, ([0-9\\.\\-]+)p?x?\\)');
goog.style.getCssTranslation = function (element) {
    var transform = goog.style.getComputedTransform(element);
    if (!transform) {
        return new goog.math.Coordinate(0, 0);
    }
    var matches = transform.match(goog.style.MATRIX_TRANSLATION_REGEX_);
    if (!matches) {
        return new goog.math.Coordinate(0, 0);
    }
    return new goog.math.Coordinate(parseFloat(matches[1]), parseFloat(matches[2]));
};
goog.provide('goog.Timer');
goog.require('goog.Promise');
goog.require('goog.events.EventTarget');
goog.Timer = function (opt_interval, opt_timerObject) {
    goog.events.EventTarget.call(this);
    this.interval_ = opt_interval || 1;
    this.timerObject_ = (opt_timerObject || goog.Timer.defaultTimerObject);
    this.boundTick_ = goog.bind(this.tick_, this);
    this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.INVALID_TIMEOUT_ID_ = -1;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = 0.8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function () {
    return this.interval_;
};
goog.Timer.prototype.setInterval = function (interval) {
    this.interval_ = interval;
    if (this.timer_ && this.enabled) {
        this.stop();
        this.start();
    }
    else if (this.timer_) {
        this.stop();
    }
};
goog.Timer.prototype.tick_ = function () {
    if (this.enabled) {
        var elapsed = goog.now() - this.last_;
        if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
            this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
            return;
        }
        if (this.timer_) {
            this.timerObject_.clearTimeout(this.timer_);
            this.timer_ = null;
        }
        this.dispatchTick();
        if (this.enabled) {
            this.timer_ =
                this.timerObject_.setTimeout(this.boundTick_, this.interval_);
            this.last_ = goog.now();
        }
    }
};
goog.Timer.prototype.dispatchTick = function () {
    this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function () {
    this.enabled = true;
    if (!this.timer_) {
        this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
        this.last_ = goog.now();
    }
};
goog.Timer.prototype.stop = function () {
    this.enabled = false;
    if (this.timer_) {
        this.timerObject_.clearTimeout(this.timer_);
        this.timer_ = null;
    }
};
goog.Timer.prototype.disposeInternal = function () {
    goog.Timer.superClass_.disposeInternal.call(this);
    this.stop();
    delete this.timerObject_;
};
goog.Timer.TICK = 'tick';
goog.Timer.callOnce = function (listener, opt_delay, opt_handler) {
    if (goog.isFunction(listener)) {
        if (opt_handler) {
            listener = goog.bind(listener, opt_handler);
        }
    }
    else if (listener && typeof listener.handleEvent == 'function') {
        listener = goog.bind(listener.handleEvent, listener);
    }
    else {
        throw new Error('Invalid listener argument');
    }
    if (Number(opt_delay) > goog.Timer.MAX_TIMEOUT_) {
        return goog.Timer.INVALID_TIMEOUT_ID_;
    }
    else {
        return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
    }
};
goog.Timer.clear = function (timerId) {
    goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.Timer.promise = function (delay, opt_result) {
    var timerKey = null;
    return new goog
        .Promise(function (resolve, reject) {
        timerKey =
            goog.Timer.callOnce(function () { resolve(opt_result); }, delay);
        if (timerKey == goog.Timer.INVALID_TIMEOUT_ID_) {
            reject(new Error('Failed to schedule timer.'));
        }
    })
        .thenCatch(function (error) {
        goog.Timer.clear(timerKey);
        throw error;
    });
};
goog.provide('goog.a11y.aria.Role');
goog.a11y.aria.Role = {
    ALERT: 'alert',
    ALERTDIALOG: 'alertdialog',
    APPLICATION: 'application',
    ARTICLE: 'article',
    BANNER: 'banner',
    BUTTON: 'button',
    CHECKBOX: 'checkbox',
    COLUMNHEADER: 'columnheader',
    COMBOBOX: 'combobox',
    COMPLEMENTARY: 'complementary',
    CONTENTINFO: 'contentinfo',
    DEFINITION: 'definition',
    DIALOG: 'dialog',
    DIRECTORY: 'directory',
    DOCUMENT: 'document',
    FORM: 'form',
    GRID: 'grid',
    GRIDCELL: 'gridcell',
    GROUP: 'group',
    HEADING: 'heading',
    IMG: 'img',
    LINK: 'link',
    LIST: 'list',
    LISTBOX: 'listbox',
    LISTITEM: 'listitem',
    LOG: 'log',
    MAIN: 'main',
    MARQUEE: 'marquee',
    MATH: 'math',
    MENU: 'menu',
    MENUBAR: 'menubar',
    MENU_ITEM: 'menuitem',
    MENU_ITEM_CHECKBOX: 'menuitemcheckbox',
    MENU_ITEM_RADIO: 'menuitemradio',
    NAVIGATION: 'navigation',
    NOTE: 'note',
    OPTION: 'option',
    PRESENTATION: 'presentation',
    PROGRESSBAR: 'progressbar',
    RADIO: 'radio',
    RADIOGROUP: 'radiogroup',
    REGION: 'region',
    ROW: 'row',
    ROWGROUP: 'rowgroup',
    ROWHEADER: 'rowheader',
    SCROLLBAR: 'scrollbar',
    SEARCH: 'search',
    SEPARATOR: 'separator',
    SLIDER: 'slider',
    SPINBUTTON: 'spinbutton',
    STATUS: 'status',
    TAB: 'tab',
    TAB_LIST: 'tablist',
    TAB_PANEL: 'tabpanel',
    TEXTBOX: 'textbox',
    TEXTINFO: 'textinfo',
    TIMER: 'timer',
    TOOLBAR: 'toolbar',
    TOOLTIP: 'tooltip',
    TREE: 'tree',
    TREEGRID: 'treegrid',
    TREEITEM: 'treeitem'
};
goog.provide('goog.a11y.aria');
goog.require('goog.a11y.aria.Role');
goog.require('goog.a11y.aria.State');
goog.require('goog.a11y.aria.datatables');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.object');
goog.require('goog.string');
goog.a11y.aria.ARIA_PREFIX_ = 'aria-';
goog.a11y.aria.ROLE_ATTRIBUTE_ = 'role';
goog.a11y.aria.TAGS_WITH_ASSUMED_ROLES_ = goog.object.createSet([
    goog.dom.TagName.A, goog.dom.TagName.AREA, goog.dom.TagName.BUTTON,
    goog.dom.TagName.HEAD, goog.dom.TagName.INPUT, goog.dom.TagName.LINK,
    goog.dom.TagName.MENU, goog.dom.TagName.META, goog.dom.TagName.OPTGROUP,
    goog.dom.TagName.OPTION, goog.dom.TagName.PROGRESS, goog.dom.TagName.STYLE,
    goog.dom.TagName.SELECT, goog.dom.TagName.SOURCE, goog.dom.TagName.TEXTAREA,
    goog.dom.TagName.TITLE, goog.dom.TagName.TRACK
]);
goog.a11y.aria.CONTAINER_ROLES_ = [
    goog.a11y.aria.Role.COMBOBOX, goog.a11y.aria.Role.GRID,
    goog.a11y.aria.Role.GROUP, goog.a11y.aria.Role.LISTBOX,
    goog.a11y.aria.Role.MENU, goog.a11y.aria.Role.MENUBAR,
    goog.a11y.aria.Role.RADIOGROUP, goog.a11y.aria.Role.ROW,
    goog.a11y.aria.Role.ROWGROUP, goog.a11y.aria.Role.TAB_LIST,
    goog.a11y.aria.Role.TEXTBOX, goog.a11y.aria.Role.TOOLBAR,
    goog.a11y.aria.Role.TREE, goog.a11y.aria.Role.TREEGRID
];
goog.a11y.aria.setRole = function (element, roleName) {
    if (!roleName) {
        goog.a11y.aria.removeRole(element);
    }
    else {
        if (goog.asserts.ENABLE_ASSERTS) {
            goog.asserts.assert(goog.object.containsValue(goog.a11y.aria.Role, roleName), 'No such ARIA role ' + roleName);
        }
        element.setAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_, roleName);
    }
};
goog.a11y.aria.getRole = function (element) {
    var role = element.getAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_);
    return (role) || null;
};
goog.a11y.aria.removeRole = function (element) {
    element.removeAttribute(goog.a11y.aria.ROLE_ATTRIBUTE_);
};
goog.a11y.aria.setState = function (element, stateName, value) {
    if (goog.isArray(value)) {
        value = value.join(' ');
    }
    var attrStateName = goog.a11y.aria.getAriaAttributeName_(stateName);
    if (value === '' || value == undefined) {
        var defaultValueMap = goog.a11y.aria.datatables.getDefaultValuesMap();
        if (stateName in defaultValueMap) {
            element.setAttribute(attrStateName, defaultValueMap[stateName]);
        }
        else {
            element.removeAttribute(attrStateName);
        }
    }
    else {
        element.setAttribute(attrStateName, value);
    }
};
goog.a11y.aria.toggleState = function (el, attr) {
    var val = goog.a11y.aria.getState(el, attr);
    if (!goog.string.isEmptyOrWhitespace(goog.string.makeSafe(val)) &&
        !(val == 'true' || val == 'false')) {
        goog.a11y.aria.removeState(el, (attr));
        return;
    }
    goog.a11y.aria.setState(el, attr, val == 'true' ? 'false' : 'true');
};
goog.a11y.aria.removeState = function (element, stateName) {
    element.removeAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
};
goog.a11y.aria.getState = function (element, stateName) {
    var attr = (element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName)));
    var isNullOrUndefined = attr == null || attr == undefined;
    return isNullOrUndefined ? '' : String(attr);
};
goog.a11y.aria.getActiveDescendant = function (element) {
    var id = goog.a11y.aria.getState(element, goog.a11y.aria.State.ACTIVEDESCENDANT);
    return goog.dom.getOwnerDocument(element).getElementById(id);
};
goog.a11y.aria.setActiveDescendant = function (element, activeElement) {
    var id = '';
    if (activeElement) {
        id = activeElement.id;
        goog.asserts.assert(id, 'The active element should have an id.');
    }
    goog.a11y.aria.setState(element, goog.a11y.aria.State.ACTIVEDESCENDANT, id);
};
goog.a11y.aria.getLabel = function (element) {
    return goog.a11y.aria.getState(element, goog.a11y.aria.State.LABEL);
};
goog.a11y.aria.setLabel = function (element, label) {
    goog.a11y.aria.setState(element, goog.a11y.aria.State.LABEL, label);
};
goog.a11y.aria.assertRoleIsSetInternalUtil = function (element, allowedRoles) {
    if (goog.a11y.aria.TAGS_WITH_ASSUMED_ROLES_[element.tagName]) {
        return;
    }
    var elementRole = (goog.a11y.aria.getRole(element));
    goog.asserts.assert(elementRole != null, 'The element ARIA role cannot be null.');
    goog.asserts.assert(goog.array.contains(allowedRoles, elementRole), 'Non existing or incorrect role set for element.' +
        'The role set is "' + elementRole + '". The role should be any of "' +
        allowedRoles + '". Check the ARIA specification for more details ' +
        'http://www.w3.org/TR/wai-aria/roles.');
};
goog.a11y.aria.getStateBoolean = function (element, stateName) {
    var attr = (element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName)));
    goog.asserts.assert(goog.isBoolean(attr) || attr == null || attr == 'true' ||
        attr == 'false');
    if (attr == null) {
        return attr;
    }
    return goog.isBoolean(attr) ? attr : attr == 'true';
};
goog.a11y.aria.getStateNumber = function (element, stateName) {
    var attr = (element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName)));
    goog.asserts.assert((attr == null || !isNaN(Number(attr))) && !goog.isBoolean(attr));
    return attr == null ? null : Number(attr);
};
goog.a11y.aria.getStateString = function (element, stateName) {
    var attr = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
    goog.asserts.assert((attr == null || goog.isString(attr)) &&
        (attr == '' || isNaN(Number(attr))) && attr != 'true' && attr != 'false');
    return (attr == null || attr == '') ? null : attr;
};
goog.a11y.aria.getStringArrayStateInternalUtil = function (element, stateName) {
    var attrValue = element.getAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
    return goog.a11y.aria.splitStringOnWhitespace_(attrValue);
};
goog.a11y.aria.hasState = function (element, stateName) {
    return element.hasAttribute(goog.a11y.aria.getAriaAttributeName_(stateName));
};
goog.a11y.aria.isContainerRole = function (element) {
    var role = goog.a11y.aria.getRole(element);
    return goog.array.contains(goog.a11y.aria.CONTAINER_ROLES_, role);
};
goog.a11y.aria.splitStringOnWhitespace_ = function (stringValue) {
    return stringValue ? stringValue.split(/\s+/) : [];
};
goog.a11y.aria.getAriaAttributeName_ = function (ariaName) {
    if (goog.asserts.ENABLE_ASSERTS) {
        goog.asserts.assert(ariaName, 'ARIA attribute cannot be empty.');
        goog.asserts.assert(goog.object.containsValue(goog.a11y.aria.State, ariaName), 'No such ARIA attribute ' + ariaName);
    }
    return goog.a11y.aria.ARIA_PREFIX_ + ariaName;
};
goog.provide('goog.a11y.aria.AutoCompleteValues');
goog.provide('goog.a11y.aria.CheckedValues');
goog.provide('goog.a11y.aria.DropEffectValues');
goog.provide('goog.a11y.aria.ExpandedValues');
goog.provide('goog.a11y.aria.GrabbedValues');
goog.provide('goog.a11y.aria.InvalidValues');
goog.provide('goog.a11y.aria.LivePriority');
goog.provide('goog.a11y.aria.OrientationValues');
goog.provide('goog.a11y.aria.PressedValues');
goog.provide('goog.a11y.aria.RelevantValues');
goog.provide('goog.a11y.aria.SelectedValues');
goog.provide('goog.a11y.aria.SortValues');
goog.provide('goog.a11y.aria.State');
goog.a11y.aria.State = {
    ACTIVEDESCENDANT: 'activedescendant',
    ATOMIC: 'atomic',
    AUTOCOMPLETE: 'autocomplete',
    BUSY: 'busy',
    CHECKED: 'checked',
    COLINDEX: 'colindex',
    CONTROLS: 'controls',
    DESCRIBEDBY: 'describedby',
    DISABLED: 'disabled',
    DROPEFFECT: 'dropeffect',
    EXPANDED: 'expanded',
    FLOWTO: 'flowto',
    GRABBED: 'grabbed',
    HASPOPUP: 'haspopup',
    HIDDEN: 'hidden',
    INVALID: 'invalid',
    LABEL: 'label',
    LABELLEDBY: 'labelledby',
    LEVEL: 'level',
    LIVE: 'live',
    MULTILINE: 'multiline',
    MULTISELECTABLE: 'multiselectable',
    ORIENTATION: 'orientation',
    OWNS: 'owns',
    POSINSET: 'posinset',
    PRESSED: 'pressed',
    READONLY: 'readonly',
    RELEVANT: 'relevant',
    REQUIRED: 'required',
    ROWINDEX: 'rowindex',
    SELECTED: 'selected',
    SETSIZE: 'setsize',
    SORT: 'sort',
    VALUEMAX: 'valuemax',
    VALUEMIN: 'valuemin',
    VALUENOW: 'valuenow',
    VALUETEXT: 'valuetext'
};
goog.a11y.aria.AutoCompleteValues = {
    INLINE: 'inline',
    LIST: 'list',
    BOTH: 'both',
    NONE: 'none'
};
goog.a11y.aria.DropEffectValues = {
    COPY: 'copy',
    MOVE: 'move',
    LINK: 'link',
    EXECUTE: 'execute',
    POPUP: 'popup',
    NONE: 'none'
};
goog.a11y.aria.LivePriority = {
    OFF: 'off',
    POLITE: 'polite',
    ASSERTIVE: 'assertive'
};
goog.a11y.aria.OrientationValues = {
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal'
};
goog.a11y.aria.RelevantValues = {
    ADDITIONS: 'additions',
    REMOVALS: 'removals',
    TEXT: 'text',
    ALL: 'all'
};
goog.a11y.aria.SortValues = {
    ASCENDING: 'ascending',
    DESCENDING: 'descending',
    NONE: 'none',
    OTHER: 'other'
};
goog.a11y.aria.CheckedValues = {
    TRUE: 'true',
    FALSE: 'false',
    MIXED: 'mixed',
    UNDEFINED: 'undefined'
};
goog.a11y.aria.ExpandedValues = {
    TRUE: 'true',
    FALSE: 'false',
    UNDEFINED: 'undefined'
};
goog.a11y.aria.GrabbedValues = {
    TRUE: 'true',
    FALSE: 'false',
    UNDEFINED: 'undefined'
};
goog.a11y.aria.InvalidValues = {
    FALSE: 'false',
    TRUE: 'true',
    GRAMMAR: 'grammar',
    SPELLING: 'spelling'
};
goog.a11y.aria.PressedValues = {
    TRUE: 'true',
    FALSE: 'false',
    MIXED: 'mixed',
    UNDEFINED: 'undefined'
};
goog.a11y.aria.SelectedValues = {
    TRUE: 'true',
    FALSE: 'false',
    UNDEFINED: 'undefined'
};
goog.provide('goog.a11y.aria.datatables');
goog.require('goog.a11y.aria.State');
goog.require('goog.object');
goog.a11y.aria.DefaultStateValueMap_;
goog.a11y.aria.datatables.getDefaultValuesMap = function () {
    if (!goog.a11y.aria.DefaultStateValueMap_) {
        goog.a11y.aria.DefaultStateValueMap_ = goog.object.create(goog.a11y.aria.State.ATOMIC, false, goog.a11y.aria.State.AUTOCOMPLETE, 'none', goog.a11y.aria.State.DROPEFFECT, 'none', goog.a11y.aria.State.HASPOPUP, false, goog.a11y.aria.State.LIVE, 'off', goog.a11y.aria.State.MULTILINE, false, goog.a11y.aria.State.MULTISELECTABLE, false, goog.a11y.aria.State.ORIENTATION, 'vertical', goog.a11y.aria.State.READONLY, false, goog.a11y.aria.State.RELEVANT, 'additions text', goog.a11y.aria.State.REQUIRED, false, goog.a11y.aria.State.SORT, 'none', goog.a11y.aria.State.BUSY, false, goog.a11y.aria.State.DISABLED, false, goog.a11y.aria.State.HIDDEN, false, goog.a11y.aria.State.INVALID, 'false');
    }
    return goog.a11y.aria.DefaultStateValueMap_;
};
goog.provide('goog.ui.IdGenerator');
goog.ui.IdGenerator = function () { };
goog.addSingletonGetter(goog.ui.IdGenerator);
goog.ui.IdGenerator.prototype.nextId_ = 0;
goog.ui.IdGenerator.prototype.getNextUniqueId = function () {
    return ':' + (this.nextId_++).toString(36);
};
goog.provide('goog.ui.ControlRenderer');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.Role');
goog.require('goog.a11y.aria.State');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.object');
goog.require('goog.string');
goog.require('goog.style');
goog.require('goog.ui.Component');
goog.require('goog.ui.ControlContent');
goog.require('goog.userAgent');
goog.forwardDeclare('goog.ui.Control');
goog.ui.ControlRenderer = function () { };
goog.addSingletonGetter(goog.ui.ControlRenderer);
goog.tagUnsealableClass(goog.ui.ControlRenderer);
goog.ui.ControlRenderer.getCustomRenderer = function (ctor, cssClassName) {
    var renderer = new ctor();
    renderer.getCssClass = function () { return cssClassName; };
    return renderer;
};
goog.ui.ControlRenderer.CSS_CLASS = goog.getCssName('goog-control');
goog.ui.ControlRenderer.IE6_CLASS_COMBINATIONS = [];
goog.ui.ControlRenderer.ariaAttributeMap_;
goog.ui.ControlRenderer.TOGGLE_ARIA_STATE_MAP_ = goog.object.create(goog.a11y.aria.Role.BUTTON, goog.a11y.aria.State.PRESSED, goog.a11y.aria.Role.CHECKBOX, goog.a11y.aria.State.CHECKED, goog.a11y.aria.Role.MENU_ITEM, goog.a11y.aria.State.SELECTED, goog.a11y.aria.Role.MENU_ITEM_CHECKBOX, goog.a11y.aria.State.CHECKED, goog.a11y.aria.Role.MENU_ITEM_RADIO, goog.a11y.aria.State.CHECKED, goog.a11y.aria.Role.RADIO, goog.a11y.aria.State.CHECKED, goog.a11y.aria.Role.TAB, goog.a11y.aria.State.SELECTED, goog.a11y.aria.Role.TREEITEM, goog.a11y.aria.State.SELECTED);
goog.ui.ControlRenderer.prototype.getAriaRole = function () {
    return undefined;
};
goog.ui.ControlRenderer.prototype.createDom = function (control) {
    var element = control.getDomHelper().createDom(goog.dom.TagName.DIV, this.getClassNames(control).join(' '), control.getContent());
    return element;
};
goog.ui.ControlRenderer.prototype.getContentElement = function (element) {
    return element;
};
goog.ui.ControlRenderer.prototype.enableClassName = function (control, className, enable) {
    var element = (control.getElement ? control.getElement() : control);
    if (element) {
        var classNames = [className];
        if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('7')) {
            classNames = this.getAppliedCombinedClassNames_(goog.dom.classlist.get(element), className);
            classNames.push(className);
        }
        goog.dom.classlist.enableAll(element, classNames, enable);
    }
};
goog.ui.ControlRenderer.prototype.enableExtraClassName = function (control, className, enable) {
    this.enableClassName(control, className, enable);
};
goog.ui.ControlRenderer.prototype.canDecorate = function (element) {
    return true;
};
goog.ui.ControlRenderer.prototype.decorate = function (control, element) {
    if (element.id) {
        control.setId(element.id);
    }
    var contentElem = this.getContentElement(element);
    if (contentElem && contentElem.firstChild) {
        control.setContentInternal(contentElem.firstChild.nextSibling ?
            goog.array.clone(contentElem.childNodes) :
            contentElem.firstChild);
    }
    else {
        control.setContentInternal(null);
    }
    var state = 0x00;
    var rendererClassName = this.getCssClass();
    var structuralClassName = this.getStructuralCssClass();
    var hasRendererClassName = false;
    var hasStructuralClassName = false;
    var hasCombinedClassName = false;
    var classNames = goog.array.toArray(goog.dom.classlist.get(element));
    goog.array.forEach(classNames, function (className) {
        if (!hasRendererClassName && className == rendererClassName) {
            hasRendererClassName = true;
            if (structuralClassName == rendererClassName) {
                hasStructuralClassName = true;
            }
        }
        else if (!hasStructuralClassName && className == structuralClassName) {
            hasStructuralClassName = true;
        }
        else {
            state |= this.getStateFromClass(className);
        }
        if (this.getStateFromClass(className) == goog.ui.Component.State.DISABLED) {
            goog.asserts.assertElement(contentElem);
            if (goog.dom.isFocusableTabIndex(contentElem)) {
                goog.dom.setFocusableTabIndex(contentElem, false);
            }
        }
    }, this);
    control.setStateInternal(state);
    if (!hasRendererClassName) {
        classNames.push(rendererClassName);
        if (structuralClassName == rendererClassName) {
            hasStructuralClassName = true;
        }
    }
    if (!hasStructuralClassName) {
        classNames.push(structuralClassName);
    }
    var extraClassNames = control.getExtraClassNames();
    if (extraClassNames) {
        classNames.push.apply(classNames, extraClassNames);
    }
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('7')) {
        var combinedClasses = this.getAppliedCombinedClassNames_(classNames);
        if (combinedClasses.length > 0) {
            classNames.push.apply(classNames, combinedClasses);
            hasCombinedClassName = true;
        }
    }
    if (!hasRendererClassName || !hasStructuralClassName || extraClassNames ||
        hasCombinedClassName) {
        goog.dom.classlist.set(element, classNames.join(' '));
    }
    return element;
};
goog.ui.ControlRenderer.prototype.initializeDom = function (control) {
    if (control.isRightToLeft()) {
        this.setRightToLeft(control.getElement(), true);
    }
    if (control.isEnabled()) {
        this.setFocusable(control, control.isVisible());
    }
};
goog.ui.ControlRenderer.prototype.setAriaRole = function (element, opt_preferredRole) {
    var ariaRole = opt_preferredRole || this.getAriaRole();
    if (ariaRole) {
        goog.asserts.assert(element, 'The element passed as a first parameter cannot be null.');
        var currentRole = goog.a11y.aria.getRole(element);
        if (ariaRole == currentRole) {
            return;
        }
        goog.a11y.aria.setRole(element, ariaRole);
    }
};
goog.ui.ControlRenderer.prototype.setAriaStates = function (control, element) {
    goog.asserts.assert(control);
    goog.asserts.assert(element);
    var ariaLabel = control.getAriaLabel();
    if (goog.isDefAndNotNull(ariaLabel)) {
        this.setAriaLabel(element, ariaLabel);
    }
    if (!control.isVisible()) {
        goog.a11y.aria.setState(element, goog.a11y.aria.State.HIDDEN, !control.isVisible());
    }
    if (!control.isEnabled()) {
        this.updateAriaState(element, goog.ui.Component.State.DISABLED, !control.isEnabled());
    }
    if (control.isSupportedState(goog.ui.Component.State.SELECTED)) {
        this.updateAriaState(element, goog.ui.Component.State.SELECTED, control.isSelected());
    }
    if (control.isSupportedState(goog.ui.Component.State.CHECKED)) {
        this.updateAriaState(element, goog.ui.Component.State.CHECKED, control.isChecked());
    }
    if (control.isSupportedState(goog.ui.Component.State.OPENED)) {
        this.updateAriaState(element, goog.ui.Component.State.OPENED, control.isOpen());
    }
};
goog.ui.ControlRenderer.prototype.setAriaLabel = function (element, ariaLabel) {
    goog.a11y.aria.setLabel(element, ariaLabel);
};
goog.ui.ControlRenderer.prototype.setAllowTextSelection = function (element, allow) {
    goog.style.setUnselectable(element, !allow, !goog.userAgent.IE && !goog.userAgent.OPERA);
};
goog.ui.ControlRenderer.prototype.setRightToLeft = function (element, rightToLeft) {
    this.enableClassName(element, goog.getCssName(this.getStructuralCssClass(), 'rtl'), rightToLeft);
};
goog.ui.ControlRenderer.prototype.isFocusable = function (control) {
    var keyTarget;
    if (control.isSupportedState(goog.ui.Component.State.FOCUSED) &&
        (keyTarget = control.getKeyEventTarget())) {
        return goog.dom.isFocusableTabIndex(keyTarget);
    }
    return false;
};
goog.ui.ControlRenderer.prototype.setFocusable = function (control, focusable) {
    var keyTarget;
    if (control.isSupportedState(goog.ui.Component.State.FOCUSED) &&
        (keyTarget = control.getKeyEventTarget())) {
        if (!focusable && control.isFocused()) {
            try {
                keyTarget.blur();
            }
            catch (e) {
            }
            if (control.isFocused()) {
                control.handleBlur(null);
            }
        }
        if (goog.dom.isFocusableTabIndex(keyTarget) != focusable) {
            goog.dom.setFocusableTabIndex(keyTarget, focusable);
        }
    }
};
goog.ui.ControlRenderer.prototype.setVisible = function (element, visible) {
    goog.style.setElementShown(element, visible);
    if (element) {
        goog.a11y.aria.setState(element, goog.a11y.aria.State.HIDDEN, !visible);
    }
};
goog.ui.ControlRenderer.prototype.setState = function (control, state, enable) {
    var element = control.getElement();
    if (element) {
        var className = this.getClassForState(state);
        if (className) {
            this.enableClassName(control, className, enable);
        }
        this.updateAriaState(element, state, enable);
    }
};
goog.ui.ControlRenderer.prototype.updateAriaState = function (element, state, enable) {
    if (!goog.ui.ControlRenderer.ariaAttributeMap_) {
        goog.ui.ControlRenderer.ariaAttributeMap_ = goog.object.create(goog.ui.Component.State.DISABLED, goog.a11y.aria.State.DISABLED, goog.ui.Component.State.SELECTED, goog.a11y.aria.State.SELECTED, goog.ui.Component.State.CHECKED, goog.a11y.aria.State.CHECKED, goog.ui.Component.State.OPENED, goog.a11y.aria.State.EXPANDED);
    }
    goog.asserts.assert(element, 'The element passed as a first parameter cannot be null.');
    var ariaAttr = goog.ui.ControlRenderer.getAriaStateForAriaRole_(element, goog.ui.ControlRenderer.ariaAttributeMap_[state]);
    if (ariaAttr) {
        goog.a11y.aria.setState(element, ariaAttr, enable);
    }
};
goog.ui.ControlRenderer.getAriaStateForAriaRole_ = function (element, attr) {
    var role = goog.a11y.aria.getRole(element);
    if (!role) {
        return attr;
    }
    role = (role);
    var matchAttr = goog.ui.ControlRenderer.TOGGLE_ARIA_STATE_MAP_[role] || attr;
    return goog.ui.ControlRenderer.isAriaState_(attr) ? matchAttr : attr;
};
goog.ui.ControlRenderer.isAriaState_ = function (attr) {
    return attr == goog.a11y.aria.State.CHECKED ||
        attr == goog.a11y.aria.State.SELECTED;
};
goog.ui.ControlRenderer.prototype.setContent = function (element, content) {
    var contentElem = this.getContentElement(element);
    if (contentElem) {
        goog.dom.removeChildren(contentElem);
        if (content) {
            if (goog.isString(content)) {
                goog.dom.setTextContent(contentElem, content);
            }
            else {
                var childHandler = function (child) {
                    if (child) {
                        var doc = goog.dom.getOwnerDocument(contentElem);
                        contentElem.appendChild(goog.isString(child) ? doc.createTextNode(child) : child);
                    }
                };
                if (goog.isArray(content)) {
                    goog.array.forEach(content, childHandler);
                }
                else if (goog.isArrayLike(content) && !('nodeType' in content)) {
                    goog.array.forEach(goog.array.clone((content)), childHandler);
                }
                else {
                    childHandler(content);
                }
            }
        }
    }
};
goog.ui.ControlRenderer.prototype.getKeyEventTarget = function (control) {
    return control.getElement();
};
goog.ui.ControlRenderer.prototype.getCssClass = function () {
    return goog.ui.ControlRenderer.CSS_CLASS;
};
goog.ui.ControlRenderer.prototype.getIe6ClassCombinations = function () {
    return [];
};
goog.ui.ControlRenderer.prototype.getStructuralCssClass = function () {
    return this.getCssClass();
};
goog.ui.ControlRenderer.prototype.getClassNames = function (control) {
    var cssClass = this.getCssClass();
    var classNames = [cssClass];
    var structuralCssClass = this.getStructuralCssClass();
    if (structuralCssClass != cssClass) {
        classNames.push(structuralCssClass);
    }
    var classNamesForState = this.getClassNamesForState(control.getState());
    classNames.push.apply(classNames, classNamesForState);
    var extraClassNames = control.getExtraClassNames();
    if (extraClassNames) {
        classNames.push.apply(classNames, extraClassNames);
    }
    if (goog.userAgent.IE && !goog.userAgent.isVersionOrHigher('7')) {
        classNames.push.apply(classNames, this.getAppliedCombinedClassNames_(classNames));
    }
    return classNames;
};
goog.ui.ControlRenderer.prototype.getAppliedCombinedClassNames_ = function (classes, opt_includedClass) {
    var toAdd = [];
    if (opt_includedClass) {
        classes = goog.array.concat(classes, [opt_includedClass]);
    }
    goog.array.forEach(this.getIe6ClassCombinations(), function (combo) {
        if (goog.array.every(combo, goog.partial(goog.array.contains, classes)) &&
            (!opt_includedClass || goog.array.contains(combo, opt_includedClass))) {
            toAdd.push(combo.join('_'));
        }
    });
    return toAdd;
};
goog.ui.ControlRenderer.prototype.getClassNamesForState = function (state) {
    var classNames = [];
    while (state) {
        var mask = state & -state;
        classNames.push(this.getClassForState((mask)));
        state &= ~mask;
    }
    return classNames;
};
goog.ui.ControlRenderer.prototype.getClassForState = function (state) {
    if (!this.classByState_) {
        this.createClassByStateMap_();
    }
    return this.classByState_[state];
};
goog.ui.ControlRenderer.prototype.getStateFromClass = function (className) {
    if (!this.stateByClass_) {
        this.createStateByClassMap_();
    }
    var state = parseInt(this.stateByClass_[className], 10);
    return (isNaN(state) ? 0x00 : state);
};
goog.ui.ControlRenderer.prototype.createClassByStateMap_ = function () {
    var baseClass = this.getStructuralCssClass();
    var isValidClassName = !goog.string.contains(goog.string.normalizeWhitespace(baseClass), ' ');
    goog.asserts.assert(isValidClassName, 'ControlRenderer has an invalid css class: \'' + baseClass + '\'');
    this.classByState_ = goog.object.create(goog.ui.Component.State.DISABLED, goog.getCssName(baseClass, 'disabled'), goog.ui.Component.State.HOVER, goog.getCssName(baseClass, 'hover'), goog.ui.Component.State.ACTIVE, goog.getCssName(baseClass, 'active'), goog.ui.Component.State.SELECTED, goog.getCssName(baseClass, 'selected'), goog.ui.Component.State.CHECKED, goog.getCssName(baseClass, 'checked'), goog.ui.Component.State.FOCUSED, goog.getCssName(baseClass, 'focused'), goog.ui.Component.State.OPENED, goog.getCssName(baseClass, 'open'));
};
goog.ui.ControlRenderer.prototype.createStateByClassMap_ = function () {
    if (!this.classByState_) {
        this.createClassByStateMap_();
    }
    this.stateByClass_ = goog.object.transpose(this.classByState_);
};
goog.provide('goog.ui.MenuHeaderRenderer');
goog.require('goog.ui.ControlRenderer');
goog.ui.MenuHeaderRenderer = function () {
    goog.ui.ControlRenderer.call(this);
};
goog.inherits(goog.ui.MenuHeaderRenderer, goog.ui.ControlRenderer);
goog.addSingletonGetter(goog.ui.MenuHeaderRenderer);
goog.ui.MenuHeaderRenderer.CSS_CLASS = goog.getCssName('goog-menuheader');
goog.ui.MenuHeaderRenderer.prototype.getCssClass = function () {
    return goog.ui.MenuHeaderRenderer.CSS_CLASS;
};
goog.provide('goog.ui.MenuItemRenderer');
goog.require('goog.a11y.aria.Role');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.ui.Component');
goog.require('goog.ui.ControlRenderer');
goog.ui.MenuItemRenderer = function () {
    goog.ui.ControlRenderer.call(this);
    this.classNameCache_ = [];
};
goog.inherits(goog.ui.MenuItemRenderer, goog.ui.ControlRenderer);
goog.addSingletonGetter(goog.ui.MenuItemRenderer);
goog.ui.MenuItemRenderer.CSS_CLASS = goog.getCssName('goog-menuitem');
goog.ui.MenuItemRenderer.CompositeCssClassIndex_ = {
    HOVER: 0,
    CHECKBOX: 1,
    CONTENT: 2
};
goog.ui.MenuItemRenderer.prototype.getCompositeCssClass_ = function (index) {
    var result = this.classNameCache_[index];
    if (!result) {
        switch (index) {
            case goog.ui.MenuItemRenderer.CompositeCssClassIndex_.HOVER:
                result = goog.getCssName(this.getStructuralCssClass(), 'highlight');
                break;
            case goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CHECKBOX:
                result = goog.getCssName(this.getStructuralCssClass(), 'checkbox');
                break;
            case goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CONTENT:
                result = goog.getCssName(this.getStructuralCssClass(), 'content');
                break;
        }
        this.classNameCache_[index] = result;
    }
    return result;
};
goog.ui.MenuItemRenderer.prototype.getAriaRole = function () {
    return goog.a11y.aria.Role.MENU_ITEM;
};
goog.ui.MenuItemRenderer.prototype.createDom = function (item) {
    var element = item.getDomHelper().createDom(goog.dom.TagName.DIV, this.getClassNames(item).join(' '), this.createContent(item.getContent(), item.getDomHelper()));
    this.setEnableCheckBoxStructure(item, element, item.isSupportedState(goog.ui.Component.State.SELECTED) ||
        item.isSupportedState(goog.ui.Component.State.CHECKED));
    return element;
};
goog.ui.MenuItemRenderer.prototype.getContentElement = function (element) {
    return (element && element.firstChild);
};
goog.ui.MenuItemRenderer.prototype.decorate = function (item, element) {
    goog.asserts.assert(element);
    if (!this.hasContentStructure(element)) {
        element.appendChild(this.createContent(element.childNodes, item.getDomHelper()));
    }
    if (goog.dom.classlist.contains(element, goog.getCssName('goog-option'))) {
        ((item)).setCheckable(true);
        this.setCheckable(item, element, true);
    }
    return goog.ui.MenuItemRenderer.superClass_.decorate.call(this, item, element);
};
goog.ui.MenuItemRenderer.prototype.setContent = function (element, content) {
    var contentElement = this.getContentElement(element);
    var checkBoxElement = this.hasCheckBoxStructure(element) ? contentElement.firstChild : null;
    goog.ui.MenuItemRenderer.superClass_.setContent.call(this, element, content);
    if (checkBoxElement && !this.hasCheckBoxStructure(element)) {
        contentElement.insertBefore(checkBoxElement, contentElement.firstChild || null);
    }
};
goog.ui.MenuItemRenderer.prototype.hasContentStructure = function (element) {
    var child = goog.dom.getFirstElementChild(element);
    var contentClassName = this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CONTENT);
    return !!child && goog.dom.classlist.contains(child, contentClassName);
};
goog.ui.MenuItemRenderer.prototype.createContent = function (content, dom) {
    var contentClassName = this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CONTENT);
    return dom.createDom(goog.dom.TagName.DIV, contentClassName, content);
};
goog.ui.MenuItemRenderer.prototype.setSelectable = function (item, element, selectable) {
    if (item && element) {
        this.setEnableCheckBoxStructure(item, element, selectable);
    }
};
goog.ui.MenuItemRenderer.prototype.setCheckable = function (item, element, checkable) {
    if (item && element) {
        this.setEnableCheckBoxStructure(item, element, checkable);
    }
};
goog.ui.MenuItemRenderer.prototype.hasCheckBoxStructure = function (element) {
    var contentElement = this.getContentElement(element);
    if (contentElement) {
        var child = contentElement.firstChild;
        var checkboxClassName = this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CHECKBOX);
        return !!child && goog.dom.isElement(child) &&
            goog.dom.classlist.contains((child), checkboxClassName);
    }
    return false;
};
goog.ui.MenuItemRenderer.prototype.setEnableCheckBoxStructure = function (item, element, enable) {
    this.setAriaRole(element, item.getPreferredAriaRole());
    this.setAriaStates(item, element);
    if (enable != this.hasCheckBoxStructure(element)) {
        goog.dom.classlist.enable(element, goog.getCssName('goog-option'), enable);
        var contentElement = this.getContentElement(element);
        if (enable) {
            var checkboxClassName = this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.CHECKBOX);
            contentElement.insertBefore(item.getDomHelper().createDom(goog.dom.TagName.DIV, checkboxClassName), contentElement.firstChild || null);
        }
        else {
            contentElement.removeChild(contentElement.firstChild);
        }
    }
};
goog.ui.MenuItemRenderer.prototype.getClassForState = function (state) {
    switch (state) {
        case goog.ui.Component.State.HOVER:
            return this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.HOVER);
        case goog.ui.Component.State.CHECKED:
        case goog.ui.Component.State.SELECTED:
            return goog.getCssName('goog-option-selected');
        default:
            return goog.ui.MenuItemRenderer.superClass_.getClassForState.call(this, state);
    }
};
goog.ui.MenuItemRenderer.prototype.getStateFromClass = function (className) {
    var hoverClassName = this.getCompositeCssClass_(goog.ui.MenuItemRenderer.CompositeCssClassIndex_.HOVER);
    switch (className) {
        case goog.getCssName('goog-option-selected'):
            return goog.ui.Component.State.CHECKED;
        case hoverClassName:
            return goog.ui.Component.State.HOVER;
        default:
            return goog.ui.MenuItemRenderer.superClass_.getStateFromClass.call(this, className);
    }
};
goog.ui.MenuItemRenderer.prototype.getCssClass = function () {
    return goog.ui.MenuItemRenderer.CSS_CLASS;
};
goog.provide('goog.ui.MenuSeparatorRenderer');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.ui.ControlRenderer');
goog.ui.MenuSeparatorRenderer = function () {
    goog.ui.ControlRenderer.call(this);
};
goog.inherits(goog.ui.MenuSeparatorRenderer, goog.ui.ControlRenderer);
goog.addSingletonGetter(goog.ui.MenuSeparatorRenderer);
goog.ui.MenuSeparatorRenderer.CSS_CLASS = goog.getCssName('goog-menuseparator');
goog.ui.MenuSeparatorRenderer.prototype.createDom = function (separator) {
    return separator.getDomHelper().createDom(goog.dom.TagName.DIV, this.getCssClass());
};
goog.ui.MenuSeparatorRenderer.prototype.decorate = function (separator, element) {
    if (element.id) {
        separator.setId(element.id);
    }
    if (element.tagName == goog.dom.TagName.HR) {
        var hr = element;
        element = this.createDom(separator);
        goog.dom.insertSiblingBefore(element, hr);
        goog.dom.removeNode(hr);
    }
    else {
        goog.dom.classlist.add(element, this.getCssClass());
    }
    return element;
};
goog.ui.MenuSeparatorRenderer.prototype.setContent = function (separator, content) {
};
goog.ui.MenuSeparatorRenderer.prototype.getCssClass = function () {
    return goog.ui.MenuSeparatorRenderer.CSS_CLASS;
};
goog.provide('goog.ui.registry');
goog.require('goog.asserts');
goog.require('goog.dom.classlist');
goog.forwardDeclare('goog.ui.Component');
goog.forwardDeclare('goog.ui.ControlRenderer');
goog.ui.registry.getDefaultRenderer = function (componentCtor) {
    var key;
    var rendererCtor;
    while (componentCtor) {
        key = goog.getUid(componentCtor);
        if ((rendererCtor = goog.ui.registry.defaultRenderers_[key])) {
            break;
        }
        componentCtor = componentCtor.superClass_ ?
            componentCtor.superClass_.constructor :
            null;
    }
    if (rendererCtor) {
        return goog.isFunction(rendererCtor.getInstance) ?
            rendererCtor.getInstance() :
            new rendererCtor();
    }
    return null;
};
goog.ui.registry.setDefaultRenderer = function (componentCtor, rendererCtor) {
    if (!goog.isFunction(componentCtor)) {
        throw new Error('Invalid component class ' + componentCtor);
    }
    if (!goog.isFunction(rendererCtor)) {
        throw new Error('Invalid renderer class ' + rendererCtor);
    }
    var key = goog.getUid(componentCtor);
    goog.ui.registry.defaultRenderers_[key] = rendererCtor;
};
goog.ui.registry.getDecoratorByClassName = function (className) {
    return className in goog.ui.registry.decoratorFunctions_ ?
        goog.ui.registry.decoratorFunctions_[className]() :
        null;
};
goog.ui.registry.setDecoratorByClassName = function (className, decoratorFn) {
    if (!className) {
        throw new Error('Invalid class name ' + className);
    }
    if (!goog.isFunction(decoratorFn)) {
        throw new Error('Invalid decorator function ' + decoratorFn);
    }
    goog.ui.registry.decoratorFunctions_[className] = decoratorFn;
};
goog.ui.registry.getDecorator = function (element) {
    var decorator;
    goog.asserts.assert(element);
    var classNames = goog.dom.classlist.get(element);
    for (var i = 0, len = classNames.length; i < len; i++) {
        if ((decorator = goog.ui.registry.getDecoratorByClassName(classNames[i]))) {
            return decorator;
        }
    }
    return null;
};
goog.ui.registry.reset = function () {
    goog.ui.registry.defaultRenderers_ = {};
    goog.ui.registry.decoratorFunctions_ = {};
};
goog.ui.registry.defaultRenderers_ = {};
goog.ui.registry.decoratorFunctions_ = {};
goog.provide('goog.ui.Component');
goog.provide('goog.ui.Component.Error');
goog.provide('goog.ui.Component.EventType');
goog.provide('goog.ui.Component.State');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.events.EventHandler');
goog.require('goog.events.EventTarget');
goog.require('goog.object');
goog.require('goog.style');
goog.require('goog.ui.IdGenerator');
goog.ui.Component = function (opt_domHelper) {
    goog.events.EventTarget.call(this);
    this.dom_ = opt_domHelper || goog.dom.getDomHelper();
    this.rightToLeft_ = goog.ui.Component.defaultRightToLeft_;
    this.id_ = null;
    this.inDocument_ = false;
    this.element_ = null;
    this.googUiComponentHandler_ = void 0;
    this.model_ = null;
    this.parent_ = null;
    this.children_ = null;
    this.childIndex_ = null;
    this.wasDecorated_ = false;
};
goog.inherits(goog.ui.Component, goog.events.EventTarget);
goog.define('goog.ui.Component.ALLOW_DETACHED_DECORATION', false);
goog.ui.Component.prototype.idGenerator_ = goog.ui.IdGenerator.getInstance();
goog.define('goog.ui.Component.DEFAULT_BIDI_DIR', 0);
goog.ui.Component.defaultRightToLeft_ =
    (goog.ui.Component.DEFAULT_BIDI_DIR == 1) ?
        false :
        (goog.ui.Component.DEFAULT_BIDI_DIR == -1) ? true : null;
goog.ui.Component.EventType = {
    BEFORE_SHOW: 'beforeshow',
    SHOW: 'show',
    HIDE: 'hide',
    DISABLE: 'disable',
    ENABLE: 'enable',
    HIGHLIGHT: 'highlight',
    UNHIGHLIGHT: 'unhighlight',
    ACTIVATE: 'activate',
    DEACTIVATE: 'deactivate',
    SELECT: 'select',
    UNSELECT: 'unselect',
    CHECK: 'check',
    UNCHECK: 'uncheck',
    FOCUS: 'focus',
    BLUR: 'blur',
    OPEN: 'open',
    CLOSE: 'close',
    ENTER: 'enter',
    LEAVE: 'leave',
    ACTION: 'action',
    CHANGE: 'change'
};
goog.ui.Component.Error = {
    NOT_SUPPORTED: 'Method not supported',
    DECORATE_INVALID: 'Invalid element to decorate',
    ALREADY_RENDERED: 'Component already rendered',
    PARENT_UNABLE_TO_BE_SET: 'Unable to set parent component',
    CHILD_INDEX_OUT_OF_BOUNDS: 'Child component index out of bounds',
    NOT_OUR_CHILD: 'Child is not in parent component',
    NOT_IN_DOCUMENT: 'Operation not supported while component is not in document',
    STATE_INVALID: 'Invalid component state'
};
goog.ui.Component.State = {
    ALL: 0xFF,
    DISABLED: 0x01,
    HOVER: 0x02,
    ACTIVE: 0x04,
    SELECTED: 0x08,
    CHECKED: 0x10,
    FOCUSED: 0x20,
    OPENED: 0x40
};
goog.ui.Component.getStateTransitionEvent = function (state, isEntering) {
    switch (state) {
        case goog.ui.Component.State.DISABLED:
            return isEntering ? goog.ui.Component.EventType.DISABLE :
                goog.ui.Component.EventType.ENABLE;
        case goog.ui.Component.State.HOVER:
            return isEntering ? goog.ui.Component.EventType.HIGHLIGHT :
                goog.ui.Component.EventType.UNHIGHLIGHT;
        case goog.ui.Component.State.ACTIVE:
            return isEntering ? goog.ui.Component.EventType.ACTIVATE :
                goog.ui.Component.EventType.DEACTIVATE;
        case goog.ui.Component.State.SELECTED:
            return isEntering ? goog.ui.Component.EventType.SELECT :
                goog.ui.Component.EventType.UNSELECT;
        case goog.ui.Component.State.CHECKED:
            return isEntering ? goog.ui.Component.EventType.CHECK :
                goog.ui.Component.EventType.UNCHECK;
        case goog.ui.Component.State.FOCUSED:
            return isEntering ? goog.ui.Component.EventType.FOCUS :
                goog.ui.Component.EventType.BLUR;
        case goog.ui.Component.State.OPENED:
            return isEntering ? goog.ui.Component.EventType.OPEN :
                goog.ui.Component.EventType.CLOSE;
        default:
    }
    throw new Error(goog.ui.Component.Error.STATE_INVALID);
};
goog.ui.Component.setDefaultRightToLeft = function (rightToLeft) {
    goog.ui.Component.defaultRightToLeft_ = rightToLeft;
};
goog.ui.Component.prototype.getId = function () {
    return this.id_ || (this.id_ = this.idGenerator_.getNextUniqueId());
};
goog.ui.Component.prototype.setId = function (id) {
    if (this.parent_ && this.parent_.childIndex_) {
        goog.object.remove(this.parent_.childIndex_, this.id_);
        goog.object.add(this.parent_.childIndex_, id, this);
    }
    this.id_ = id;
};
goog.ui.Component.prototype.getElement = function () {
    return this.element_;
};
goog.ui.Component.prototype.getElementStrict = function () {
    var el = this.element_;
    goog.asserts.assert(el, 'Can not call getElementStrict before rendering/decorating.');
    return el;
};
goog.ui.Component.prototype.setElementInternal = function (element) {
    this.element_ = element;
};
goog.ui.Component.prototype.getElementsByClass = function (className) {
    return this.element_ ?
        this.dom_.getElementsByClass(className, this.element_) :
        [];
};
goog.ui.Component.prototype.getElementByClass = function (className) {
    return this.element_ ? this.dom_.getElementByClass(className, this.element_) :
        null;
};
goog.ui.Component.prototype.getRequiredElementByClass = function (className) {
    var el = this.getElementByClass(className);
    goog.asserts.assert(el, 'Expected element in component with class: %s', className);
    return el;
};
goog.ui.Component.prototype.getHandler = function () {
    var self = (this);
    if (!self.googUiComponentHandler_) {
        self.googUiComponentHandler_ = new goog.events.EventHandler(self);
    }
    return goog.asserts.assert(self.googUiComponentHandler_);
};
goog.ui.Component.prototype.setParent = function (parent) {
    if (this == parent) {
        throw new Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);
    }
    if (parent && this.parent_ && this.id_ && this.parent_.getChild(this.id_) &&
        this.parent_ != parent) {
        throw new Error(goog.ui.Component.Error.PARENT_UNABLE_TO_BE_SET);
    }
    this.parent_ = parent;
    goog.ui.Component.superClass_.setParentEventTarget.call(this, parent);
};
goog.ui.Component.prototype.getParent = function () {
    return this.parent_;
};
goog.ui.Component.prototype.setParentEventTarget = function (parent) {
    if (this.parent_ && this.parent_ != parent) {
        throw new Error(goog.ui.Component.Error.NOT_SUPPORTED);
    }
    goog.ui.Component.superClass_.setParentEventTarget.call(this, parent);
};
goog.ui.Component.prototype.getDomHelper = function () {
    return this.dom_;
};
goog.ui.Component.prototype.isInDocument = function () {
    return this.inDocument_;
};
goog.ui.Component.prototype.createDom = function () {
    this.element_ = this.dom_.createElement(goog.dom.TagName.DIV);
};
goog.ui.Component.prototype.render = function (opt_parentElement) {
    this.render_(opt_parentElement);
};
goog.ui.Component.prototype.renderBefore = function (sibling) {
    this.render_((sibling.parentNode), sibling);
};
goog.ui.Component.prototype.render_ = function (opt_parentElement, opt_beforeNode) {
    if (this.inDocument_) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    if (!this.element_) {
        this.createDom();
    }
    if (opt_parentElement) {
        opt_parentElement.insertBefore(this.element_, opt_beforeNode || null);
    }
    else {
        this.dom_.getDocument().body.appendChild(this.element_);
    }
    if (!this.parent_ || this.parent_.isInDocument()) {
        this.enterDocument();
    }
};
goog.ui.Component.prototype.decorate = function (element) {
    if (this.inDocument_) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    else if (element && this.canDecorate(element)) {
        this.wasDecorated_ = true;
        var doc = goog.dom.getOwnerDocument(element);
        if (!this.dom_ || this.dom_.getDocument() != doc) {
            this.dom_ = goog.dom.getDomHelper(element);
        }
        this.decorateInternal(element);
        if (!goog.ui.Component.ALLOW_DETACHED_DECORATION ||
            goog.dom.contains(doc, element)) {
            this.enterDocument();
        }
    }
    else {
        throw new Error(goog.ui.Component.Error.DECORATE_INVALID);
    }
};
goog.ui.Component.prototype.canDecorate = function (element) {
    return true;
};
goog.ui.Component.prototype.wasDecorated = function () {
    return this.wasDecorated_;
};
goog.ui.Component.prototype.decorateInternal = function (element) {
    this.element_ = element;
};
goog.ui.Component.prototype.enterDocument = function () {
    this.inDocument_ = true;
    this.forEachChild(function (child) {
        if (!child.isInDocument() && child.getElement()) {
            child.enterDocument();
        }
    });
};
goog.ui.Component.prototype.exitDocument = function () {
    this.forEachChild(function (child) {
        if (child.isInDocument()) {
            child.exitDocument();
        }
    });
    if (this.googUiComponentHandler_) {
        this.googUiComponentHandler_.removeAll();
    }
    this.inDocument_ = false;
};
goog.ui.Component.prototype.disposeInternal = function () {
    if (this.inDocument_) {
        this.exitDocument();
    }
    if (this.googUiComponentHandler_) {
        this.googUiComponentHandler_.dispose();
        delete this.googUiComponentHandler_;
    }
    this.forEachChild(function (child) { child.dispose(); });
    if (!this.wasDecorated_ && this.element_) {
        goog.dom.removeNode(this.element_);
    }
    this.children_ = null;
    this.childIndex_ = null;
    this.element_ = null;
    this.model_ = null;
    this.parent_ = null;
    goog.ui.Component.superClass_.disposeInternal.call(this);
};
goog.ui.Component.prototype.makeId = function (idFragment) {
    return this.getId() + '.' + idFragment;
};
goog.ui.Component.prototype.makeIds = function (object) {
    var ids = {};
    for (var key in object) {
        ids[key] = this.makeId(object[key]);
    }
    return ids;
};
goog.ui.Component.prototype.getModel = function () {
    return this.model_;
};
goog.ui.Component.prototype.setModel = function (obj) {
    this.model_ = obj;
};
goog.ui.Component.prototype.getFragmentFromId = function (id) {
    return id.substring(this.getId().length + 1);
};
goog.ui.Component.prototype.getElementByFragment = function (idFragment) {
    if (!this.inDocument_) {
        throw new Error(goog.ui.Component.Error.NOT_IN_DOCUMENT);
    }
    return this.dom_.getElement(this.makeId(idFragment));
};
goog.ui.Component.prototype.addChild = function (child, opt_render) {
    this.addChildAt(child, this.getChildCount(), opt_render);
};
goog.ui.Component.prototype.addChildAt = function (child, index, opt_render) {
    goog.asserts.assert(!!child, 'Provided element must not be null.');
    if (child.inDocument_ && (opt_render || !this.inDocument_)) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    if (index < 0 || index > this.getChildCount()) {
        throw new Error(goog.ui.Component.Error.CHILD_INDEX_OUT_OF_BOUNDS);
    }
    if (!this.childIndex_ || !this.children_) {
        this.childIndex_ = {};
        this.children_ = [];
    }
    if (child.getParent() == this) {
        goog.object.set(this.childIndex_, child.getId(), child);
        goog.array.remove(this.children_, child);
    }
    else {
        goog.object.add(this.childIndex_, child.getId(), child);
    }
    child.setParent(this);
    goog.array.insertAt(this.children_, child, index);
    if (child.inDocument_ && this.inDocument_ && child.getParent() == this) {
        var contentElement = this.getContentElement();
        var insertBeforeElement = contentElement.childNodes[index] || null;
        if (insertBeforeElement != child.getElement()) {
            contentElement.insertBefore(child.getElement(), insertBeforeElement);
        }
    }
    else if (opt_render) {
        if (!this.element_) {
            this.createDom();
        }
        var sibling = this.getChildAt(index + 1);
        child.render_(this.getContentElement(), sibling ? sibling.element_ : null);
    }
    else if (this.inDocument_ && !child.inDocument_ && child.element_ &&
        child.element_.parentNode &&
        child.element_.parentNode.nodeType == goog.dom.NodeType.ELEMENT) {
        child.enterDocument();
    }
};
goog.ui.Component.prototype.getContentElement = function () {
    return this.element_;
};
goog.ui.Component.prototype.isRightToLeft = function () {
    if (this.rightToLeft_ == null) {
        this.rightToLeft_ = goog.style.isRightToLeft(this.inDocument_ ? this.element_ : this.dom_.getDocument().body);
    }
    return this.rightToLeft_;
};
goog.ui.Component.prototype.setRightToLeft = function (rightToLeft) {
    if (this.inDocument_) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    this.rightToLeft_ = rightToLeft;
};
goog.ui.Component.prototype.hasChildren = function () {
    return !!this.children_ && this.children_.length != 0;
};
goog.ui.Component.prototype.getChildCount = function () {
    return this.children_ ? this.children_.length : 0;
};
goog.ui.Component.prototype.getChildIds = function () {
    var ids = [];
    this.forEachChild(function (child) {
        ids.push(child.getId());
    });
    return ids;
};
goog.ui.Component.prototype.getChild = function (id) {
    return (this.childIndex_ && id) ?
        (goog.object.get(this.childIndex_, id)) ||
            null :
        null;
};
goog.ui.Component.prototype.getChildAt = function (index) {
    return this.children_ ? this.children_[index] || null : null;
};
goog.ui.Component.prototype.forEachChild = function (f, opt_obj) {
    if (this.children_) {
        goog.array.forEach(this.children_, f, opt_obj);
    }
};
goog.ui.Component.prototype.indexOfChild = function (child) {
    return (this.children_ && child) ? goog.array.indexOf(this.children_, child) :
        -1;
};
goog.ui.Component.prototype.removeChild = function (child, opt_unrender) {
    if (child) {
        var id = goog.isString(child) ? child : child.getId();
        child = this.getChild(id);
        if (id && child) {
            goog.object.remove(this.childIndex_, id);
            goog.array.remove(this.children_, child);
            if (opt_unrender) {
                child.exitDocument();
                if (child.element_) {
                    goog.dom.removeNode(child.element_);
                }
            }
            child.setParent(null);
        }
    }
    if (!child) {
        throw new Error(goog.ui.Component.Error.NOT_OUR_CHILD);
    }
    return (child);
};
goog.ui.Component.prototype.removeChildAt = function (index, opt_unrender) {
    return this.removeChild(this.getChildAt(index), opt_unrender);
};
goog.ui.Component.prototype.removeChildren = function (opt_unrender) {
    var removedChildren = [];
    while (this.hasChildren()) {
        removedChildren.push(this.removeChildAt(0, opt_unrender));
    }
    return removedChildren;
};
goog.provide('goog.ui.Control');
goog.require('goog.Disposable');
goog.require('goog.array');
goog.require('goog.dom');
goog.require('goog.events.BrowserEvent');
goog.require('goog.events.Event');
goog.require('goog.events.EventHandler');
goog.require('goog.events.EventType');
goog.require('goog.events.KeyCodes');
goog.require('goog.events.KeyHandler');
goog.require('goog.string');
goog.require('goog.ui.Component');
goog.require('goog.ui.ControlContent');
goog.require('goog.ui.ControlRenderer');
goog.require('goog.ui.registry');
goog.require('goog.userAgent');
goog.ui.Control = function (opt_content, opt_renderer, opt_domHelper) {
    goog.ui.Component.call(this, opt_domHelper);
    this.renderer_ =
        opt_renderer || goog.ui.registry.getDefaultRenderer(this.constructor);
    this.setContentInternal(goog.isDef(opt_content) ? opt_content : null);
    this.ariaLabel_ = null;
    this.ieMouseEventSequenceSimulator_;
};
goog.inherits(goog.ui.Control, goog.ui.Component);
goog.tagUnsealableClass(goog.ui.Control);
goog.ui.Control.registerDecorator = goog.ui.registry.setDecoratorByClassName;
goog.ui.Control.getDecorator =
    (goog.ui.registry.getDecorator);
goog.ui.Control.prototype.renderer_;
goog.ui.Control.prototype.content_ = null;
goog.ui.Control.prototype.state_ = 0x00;
goog.ui.Control.prototype.supportedStates_ = goog.ui.Component.State.DISABLED |
    goog.ui.Component.State.HOVER | goog.ui.Component.State.ACTIVE |
    goog.ui.Component.State.FOCUSED;
goog.ui.Control.prototype.autoStates_ = goog.ui.Component.State.ALL;
goog.ui.Control.prototype.statesWithTransitionEvents_ = 0x00;
goog.ui.Control.prototype.visible_ = true;
goog.ui.Control.prototype.keyHandler_;
goog.ui.Control.prototype.extraClassNames_ = null;
goog.ui.Control.prototype.handleMouseEvents_ = true;
goog.ui.Control.prototype.allowTextSelection_ = false;
goog.ui.Control.prototype.preferredAriaRole_ = null;
goog.ui.Control.prototype.isHandleMouseEvents = function () {
    return this.handleMouseEvents_;
};
goog.ui.Control.prototype.setHandleMouseEvents = function (enable) {
    if (this.isInDocument() && enable != this.handleMouseEvents_) {
        this.enableMouseEventHandling_(enable);
    }
    this.handleMouseEvents_ = enable;
};
goog.ui.Control.prototype.getKeyEventTarget = function () {
    return this.renderer_.getKeyEventTarget(this);
};
goog.ui.Control.prototype.getKeyHandler = function () {
    return this.keyHandler_ || (this.keyHandler_ = new goog.events.KeyHandler());
};
goog.ui.Control.prototype.getRenderer = function () {
    return this.renderer_;
};
goog.ui.Control.prototype.setRenderer = function (renderer) {
    if (this.isInDocument()) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    if (this.getElement()) {
        this.setElementInternal(null);
    }
    this.renderer_ = renderer;
};
goog.ui.Control.prototype.getExtraClassNames = function () {
    return this.extraClassNames_;
};
goog.ui.Control.prototype.addClassName = function (className) {
    if (className) {
        if (this.extraClassNames_) {
            if (!goog.array.contains(this.extraClassNames_, className)) {
                this.extraClassNames_.push(className);
            }
        }
        else {
            this.extraClassNames_ = [className];
        }
        this.renderer_.enableExtraClassName(this, className, true);
    }
};
goog.ui.Control.prototype.removeClassName = function (className) {
    if (className && this.extraClassNames_ &&
        goog.array.remove(this.extraClassNames_, className)) {
        if (this.extraClassNames_.length == 0) {
            this.extraClassNames_ = null;
        }
        this.renderer_.enableExtraClassName(this, className, false);
    }
};
goog.ui.Control.prototype.enableClassName = function (className, enable) {
    if (enable) {
        this.addClassName(className);
    }
    else {
        this.removeClassName(className);
    }
};
goog.ui.Control.prototype.createDom = function () {
    var element = this.renderer_.createDom(this);
    this.setElementInternal(element);
    this.renderer_.setAriaRole(element, this.getPreferredAriaRole());
    if (!this.isAllowTextSelection()) {
        this.renderer_.setAllowTextSelection(element, false);
    }
    if (!this.isVisible()) {
        this.renderer_.setVisible(element, false);
    }
};
goog.ui.Control.prototype.getPreferredAriaRole = function () {
    return this.preferredAriaRole_;
};
goog.ui.Control.prototype.setPreferredAriaRole = function (role) {
    this.preferredAriaRole_ = role;
};
goog.ui.Control.prototype.getAriaLabel = function () {
    return this.ariaLabel_;
};
goog.ui.Control.prototype.setAriaLabel = function (label) {
    this.ariaLabel_ = label;
    var element = this.getElement();
    if (element) {
        this.renderer_.setAriaLabel(element, label);
    }
};
goog.ui.Control.prototype.getContentElement = function () {
    return this.renderer_.getContentElement(this.getElement());
};
goog.ui.Control.prototype.canDecorate = function (element) {
    return this.renderer_.canDecorate(element);
};
goog.ui.Control.prototype.decorateInternal = function (element) {
    element = this.renderer_.decorate(this, element);
    this.setElementInternal(element);
    this.renderer_.setAriaRole(element, this.getPreferredAriaRole());
    if (!this.isAllowTextSelection()) {
        this.renderer_.setAllowTextSelection(element, false);
    }
    this.visible_ = element.style.display != 'none';
};
goog.ui.Control.prototype.enterDocument = function () {
    goog.ui.Control.superClass_.enterDocument.call(this);
    this.renderer_.setAriaStates(this, this.getElementStrict());
    this.renderer_.initializeDom(this);
    if (this.supportedStates_ & ~goog.ui.Component.State.DISABLED) {
        if (this.isHandleMouseEvents()) {
            this.enableMouseEventHandling_(true);
        }
        if (this.isSupportedState(goog.ui.Component.State.FOCUSED)) {
            var keyTarget = this.getKeyEventTarget();
            if (keyTarget) {
                var keyHandler = this.getKeyHandler();
                keyHandler.attach(keyTarget);
                this.getHandler()
                    .listen(keyHandler, goog.events.KeyHandler.EventType.KEY, this.handleKeyEvent)
                    .listen(keyTarget, goog.events.EventType.FOCUS, this.handleFocus)
                    .listen(keyTarget, goog.events.EventType.BLUR, this.handleBlur);
            }
        }
    }
};
goog.ui.Control.prototype.enableMouseEventHandling_ = function (enable) {
    var handler = this.getHandler();
    var element = this.getElement();
    if (enable) {
        handler
            .listen(element, goog.events.EventType.MOUSEOVER, this.handleMouseOver)
            .listen(element, goog.events.EventType.MOUSEDOWN, this.handleMouseDown)
            .listen(element, goog.events.EventType.MOUSEUP, this.handleMouseUp)
            .listen(element, goog.events.EventType.MOUSEOUT, this.handleMouseOut);
        if (this.handleContextMenu != goog.nullFunction) {
            handler.listen(element, goog.events.EventType.CONTEXTMENU, this.handleContextMenu);
        }
        if (goog.userAgent.IE) {
            if (!goog.userAgent.isVersionOrHigher(9)) {
                handler.listen(element, goog.events.EventType.DBLCLICK, this.handleDblClick);
            }
            if (!this.ieMouseEventSequenceSimulator_) {
                this.ieMouseEventSequenceSimulator_ =
                    new goog.ui.Control.IeMouseEventSequenceSimulator_(this);
                this.registerDisposable(this.ieMouseEventSequenceSimulator_);
            }
        }
    }
    else {
        handler
            .unlisten(element, goog.events.EventType.MOUSEOVER, this.handleMouseOver)
            .unlisten(element, goog.events.EventType.MOUSEDOWN, this.handleMouseDown)
            .unlisten(element, goog.events.EventType.MOUSEUP, this.handleMouseUp)
            .unlisten(element, goog.events.EventType.MOUSEOUT, this.handleMouseOut);
        if (this.handleContextMenu != goog.nullFunction) {
            handler.unlisten(element, goog.events.EventType.CONTEXTMENU, this.handleContextMenu);
        }
        if (goog.userAgent.IE) {
            if (!goog.userAgent.isVersionOrHigher(9)) {
                handler.unlisten(element, goog.events.EventType.DBLCLICK, this.handleDblClick);
            }
            goog.dispose(this.ieMouseEventSequenceSimulator_);
            this.ieMouseEventSequenceSimulator_ = null;
        }
    }
};
goog.ui.Control.prototype.exitDocument = function () {
    goog.ui.Control.superClass_.exitDocument.call(this);
    if (this.keyHandler_) {
        this.keyHandler_.detach();
    }
    if (this.isVisible() && this.isEnabled()) {
        this.renderer_.setFocusable(this, false);
    }
};
goog.ui.Control.prototype.disposeInternal = function () {
    goog.ui.Control.superClass_.disposeInternal.call(this);
    if (this.keyHandler_) {
        this.keyHandler_.dispose();
        delete this.keyHandler_;
    }
    delete this.renderer_;
    this.content_ = null;
    this.extraClassNames_ = null;
    this.ieMouseEventSequenceSimulator_ = null;
};
goog.ui.Control.prototype.getContent = function () {
    return this.content_;
};
goog.ui.Control.prototype.setContent = function (content) {
    this.renderer_.setContent(this.getElement(), content);
    this.setContentInternal(content);
};
goog.ui.Control.prototype.setContentInternal = function (content) {
    this.content_ = content;
};
goog.ui.Control.prototype.getCaption = function () {
    var content = this.getContent();
    if (!content) {
        return '';
    }
    var caption = goog.isString(content) ?
        content :
        goog.isArray(content) ?
            goog.array.map(content, goog.dom.getRawTextContent).join('') :
            goog.dom.getTextContent((content));
    return goog.string.collapseBreakingSpaces(caption);
};
goog.ui.Control.prototype.setCaption = function (caption) {
    this.setContent(caption);
};
goog.ui.Control.prototype.setRightToLeft = function (rightToLeft) {
    goog.ui.Control.superClass_.setRightToLeft.call(this, rightToLeft);
    var element = this.getElement();
    if (element) {
        this.renderer_.setRightToLeft(element, rightToLeft);
    }
};
goog.ui.Control.prototype.isAllowTextSelection = function () {
    return this.allowTextSelection_;
};
goog.ui.Control.prototype.setAllowTextSelection = function (allow) {
    this.allowTextSelection_ = allow;
    var element = this.getElement();
    if (element) {
        this.renderer_.setAllowTextSelection(element, allow);
    }
};
goog.ui.Control.prototype.isVisible = function () {
    return this.visible_;
};
goog.ui.Control.prototype.setVisible = function (visible, opt_force) {
    if (opt_force || (this.visible_ != visible &&
        this.dispatchEvent(visible ? goog.ui.Component.EventType.SHOW :
            goog.ui.Component.EventType.HIDE))) {
        var element = this.getElement();
        if (element) {
            this.renderer_.setVisible(element, visible);
        }
        if (this.isEnabled()) {
            this.renderer_.setFocusable(this, visible);
        }
        this.visible_ = visible;
        return true;
    }
    return false;
};
goog.ui.Control.prototype.isEnabled = function () {
    return !this.hasState(goog.ui.Component.State.DISABLED);
};
goog.ui.Control.prototype.isParentDisabled_ = function () {
    var parent = this.getParent();
    return !!parent && typeof parent.isEnabled == 'function' &&
        !parent.isEnabled();
};
goog.ui.Control.prototype.setEnabled = function (enable) {
    if (!this.isParentDisabled_() &&
        this.isTransitionAllowed(goog.ui.Component.State.DISABLED, !enable)) {
        if (!enable) {
            this.setActive(false);
            this.setHighlighted(false);
        }
        if (this.isVisible()) {
            this.renderer_.setFocusable(this, enable);
        }
        this.setState(goog.ui.Component.State.DISABLED, !enable, true);
    }
};
goog.ui.Control.prototype.isHighlighted = function () {
    return this.hasState(goog.ui.Component.State.HOVER);
};
goog.ui.Control.prototype.setHighlighted = function (highlight) {
    if (this.isTransitionAllowed(goog.ui.Component.State.HOVER, highlight)) {
        this.setState(goog.ui.Component.State.HOVER, highlight);
    }
};
goog.ui.Control.prototype.isActive = function () {
    return this.hasState(goog.ui.Component.State.ACTIVE);
};
goog.ui.Control.prototype.setActive = function (active) {
    if (this.isTransitionAllowed(goog.ui.Component.State.ACTIVE, active)) {
        this.setState(goog.ui.Component.State.ACTIVE, active);
    }
};
goog.ui.Control.prototype.isSelected = function () {
    return this.hasState(goog.ui.Component.State.SELECTED);
};
goog.ui.Control.prototype.setSelected = function (select) {
    if (this.isTransitionAllowed(goog.ui.Component.State.SELECTED, select)) {
        this.setState(goog.ui.Component.State.SELECTED, select);
    }
};
goog.ui.Control.prototype.isChecked = function () {
    return this.hasState(goog.ui.Component.State.CHECKED);
};
goog.ui.Control.prototype.setChecked = function (check) {
    if (this.isTransitionAllowed(goog.ui.Component.State.CHECKED, check)) {
        this.setState(goog.ui.Component.State.CHECKED, check);
    }
};
goog.ui.Control.prototype.isFocused = function () {
    return this.hasState(goog.ui.Component.State.FOCUSED);
};
goog.ui.Control.prototype.setFocused = function (focused) {
    if (this.isTransitionAllowed(goog.ui.Component.State.FOCUSED, focused)) {
        this.setState(goog.ui.Component.State.FOCUSED, focused);
    }
};
goog.ui.Control.prototype.isOpen = function () {
    return this.hasState(goog.ui.Component.State.OPENED);
};
goog.ui.Control.prototype.setOpen = function (open) {
    if (this.isTransitionAllowed(goog.ui.Component.State.OPENED, open)) {
        this.setState(goog.ui.Component.State.OPENED, open);
    }
};
goog.ui.Control.prototype.getState = function () {
    return this.state_;
};
goog.ui.Control.prototype.hasState = function (state) {
    return !!(this.state_ & state);
};
goog.ui.Control.prototype.setState = function (state, enable, opt_calledFrom) {
    if (!opt_calledFrom && state == goog.ui.Component.State.DISABLED) {
        this.setEnabled(!enable);
        return;
    }
    if (this.isSupportedState(state) && enable != this.hasState(state)) {
        this.renderer_.setState(this, state, enable);
        this.state_ = enable ? this.state_ | state : this.state_ & ~state;
    }
};
goog.ui.Control.prototype.setStateInternal = function (state) {
    this.state_ = state;
};
goog.ui.Control.prototype.isSupportedState = function (state) {
    return !!(this.supportedStates_ & state);
};
goog.ui.Control.prototype.setSupportedState = function (state, support) {
    if (this.isInDocument() && this.hasState(state) && !support) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    if (!support && this.hasState(state)) {
        this.setState(state, false);
    }
    this.supportedStates_ =
        support ? this.supportedStates_ | state : this.supportedStates_ & ~state;
};
goog.ui.Control.prototype.isAutoState = function (state) {
    return !!(this.autoStates_ & state) && this.isSupportedState(state);
};
goog.ui.Control.prototype.setAutoStates = function (states, enable) {
    this.autoStates_ =
        enable ? this.autoStates_ | states : this.autoStates_ & ~states;
};
goog.ui.Control.prototype.isDispatchTransitionEvents = function (state) {
    return !!(this.statesWithTransitionEvents_ & state) &&
        this.isSupportedState(state);
};
goog.ui.Control.prototype.setDispatchTransitionEvents = function (states, enable) {
    this.statesWithTransitionEvents_ = enable ?
        this.statesWithTransitionEvents_ | states :
        this.statesWithTransitionEvents_ & ~states;
};
goog.ui.Control.prototype.isTransitionAllowed = function (state, enable) {
    return this.isSupportedState(state) && this.hasState(state) != enable &&
        (!(this.statesWithTransitionEvents_ & state) ||
            this.dispatchEvent(goog.ui.Component.getStateTransitionEvent(state, enable))) &&
        !this.isDisposed();
};
goog.ui.Control.prototype.handleMouseOver = function (e) {
    if (!goog.ui.Control.isMouseEventWithinElement_(e, this.getElement()) &&
        this.dispatchEvent(goog.ui.Component.EventType.ENTER) &&
        this.isEnabled() && this.isAutoState(goog.ui.Component.State.HOVER)) {
        this.setHighlighted(true);
    }
};
goog.ui.Control.prototype.handleMouseOut = function (e) {
    if (!goog.ui.Control.isMouseEventWithinElement_(e, this.getElement()) &&
        this.dispatchEvent(goog.ui.Component.EventType.LEAVE)) {
        if (this.isAutoState(goog.ui.Component.State.ACTIVE)) {
            this.setActive(false);
        }
        if (this.isAutoState(goog.ui.Component.State.HOVER)) {
            this.setHighlighted(false);
        }
    }
};
goog.ui.Control.prototype.handleContextMenu = goog.nullFunction;
goog.ui.Control.isMouseEventWithinElement_ = function (e, elem) {
    return !!e.relatedTarget && goog.dom.contains(elem, e.relatedTarget);
};
goog.ui.Control.prototype.handleMouseDown = function (e) {
    if (this.isEnabled()) {
        if (this.isAutoState(goog.ui.Component.State.HOVER)) {
            this.setHighlighted(true);
        }
        if (e.isMouseActionButton()) {
            if (this.isAutoState(goog.ui.Component.State.ACTIVE)) {
                this.setActive(true);
            }
            if (this.renderer_ && this.renderer_.isFocusable(this)) {
                this.getKeyEventTarget().focus();
            }
        }
    }
    if (!this.isAllowTextSelection() && e.isMouseActionButton()) {
        e.preventDefault();
    }
};
goog.ui.Control.prototype.handleMouseUp = function (e) {
    if (this.isEnabled()) {
        if (this.isAutoState(goog.ui.Component.State.HOVER)) {
            this.setHighlighted(true);
        }
        if (this.isActive() && this.performActionInternal(e) &&
            this.isAutoState(goog.ui.Component.State.ACTIVE)) {
            this.setActive(false);
        }
    }
};
goog.ui.Control.prototype.handleDblClick = function (e) {
    if (this.isEnabled()) {
        this.performActionInternal(e);
    }
};
goog.ui.Control.prototype.performActionInternal = function (e) {
    if (this.isAutoState(goog.ui.Component.State.CHECKED)) {
        this.setChecked(!this.isChecked());
    }
    if (this.isAutoState(goog.ui.Component.State.SELECTED)) {
        this.setSelected(true);
    }
    if (this.isAutoState(goog.ui.Component.State.OPENED)) {
        this.setOpen(!this.isOpen());
    }
    var actionEvent = new goog.events.Event(goog.ui.Component.EventType.ACTION, this);
    if (e) {
        actionEvent.altKey = e.altKey;
        actionEvent.ctrlKey = e.ctrlKey;
        actionEvent.metaKey = e.metaKey;
        actionEvent.shiftKey = e.shiftKey;
        actionEvent.platformModifierKey = e.platformModifierKey;
    }
    return this.dispatchEvent(actionEvent);
};
goog.ui.Control.prototype.handleFocus = function (e) {
    if (this.isAutoState(goog.ui.Component.State.FOCUSED)) {
        this.setFocused(true);
    }
};
goog.ui.Control.prototype.handleBlur = function (e) {
    if (this.isAutoState(goog.ui.Component.State.ACTIVE)) {
        this.setActive(false);
    }
    if (this.isAutoState(goog.ui.Component.State.FOCUSED)) {
        this.setFocused(false);
    }
};
goog.ui.Control.prototype.handleKeyEvent = function (e) {
    if (this.isVisible() && this.isEnabled() && this.handleKeyEventInternal(e)) {
        e.preventDefault();
        e.stopPropagation();
        return true;
    }
    return false;
};
goog.ui.Control.prototype.handleKeyEventInternal = function (e) {
    return e.keyCode == goog.events.KeyCodes.ENTER &&
        this.performActionInternal(e);
};
goog.ui.registry.setDefaultRenderer(goog.ui.Control, goog.ui.ControlRenderer);
goog.ui.registry.setDecoratorByClassName(goog.ui.ControlRenderer.CSS_CLASS, function () { return new goog.ui.Control(null); });
goog.ui.Control.IeMouseEventSequenceSimulator_ = function (control) {
    goog.ui.Control.IeMouseEventSequenceSimulator_.base(this, 'constructor');
    this.control_ = control;
    this.clickExpected_ = false;
    this.handler_ = new goog.events.EventHandler(this);
    this.registerDisposable(this.handler_);
    var element = this.control_.getElementStrict();
    this.handler_
        .listen(element, goog.events.EventType.MOUSEDOWN, this.handleMouseDown_)
        .listen(element, goog.events.EventType.MOUSEUP, this.handleMouseUp_)
        .listen(element, goog.events.EventType.CLICK, this.handleClick_);
};
goog.inherits(goog.ui.Control.IeMouseEventSequenceSimulator_, goog.Disposable);
goog.ui.Control.IeMouseEventSequenceSimulator_.SYNTHETIC_EVENTS_ =
    !goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9);
goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.handleMouseDown_ =
    function () {
        this.clickExpected_ = false;
    };
goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.handleMouseUp_ =
    function () {
        this.clickExpected_ = true;
    };
goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_ = function (e, typeArg) {
    'use strict';
    if (!goog.ui.Control.IeMouseEventSequenceSimulator_.SYNTHETIC_EVENTS_) {
        e.button = goog.events.BrowserEvent.MouseButton.LEFT;
        e.type = typeArg;
        return e;
    }
    var event = (document.createEvent('MouseEvents'));
    event.initMouseEvent(typeArg, e.bubbles, e.cancelable, e.view || null, e.detail, e.screenX, e.screenY, e.clientX, e.clientY, e.ctrlKey, e.altKey, e.shiftKey, e.metaKey, goog.events.BrowserEvent.MouseButton.LEFT, e.relatedTarget || null);
    return event;
};
goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.handleClick_ =
    function (e) {
        if (this.clickExpected_) {
            this.clickExpected_ = false;
            return;
        }
        var browserEvent = (e);
        var event = (browserEvent.getBrowserEvent());
        var origEventButton = event.button;
        var origEventType = event.type;
        var down = goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_(event, goog.events.EventType.MOUSEDOWN);
        this.control_.handleMouseDown(new goog.events.BrowserEvent(down, browserEvent.currentTarget));
        var up = goog.ui.Control.IeMouseEventSequenceSimulator_.makeLeftMouseEvent_(event, goog.events.EventType.MOUSEUP);
        this.control_.handleMouseUp(new goog.events.BrowserEvent(up, browserEvent.currentTarget));
        if (goog.ui.Control.IeMouseEventSequenceSimulator_.SYNTHETIC_EVENTS_) {
            return;
        }
        event.button = origEventButton;
        event.type = origEventType;
    };
goog.ui.Control.IeMouseEventSequenceSimulator_.prototype.disposeInternal =
    function () {
        this.control_ = null;
        goog.ui.Control.IeMouseEventSequenceSimulator_.base(this, 'disposeInternal');
    };
goog.provide('goog.ui.Palette');
goog.require('goog.array');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.events.EventType');
goog.require('goog.events.KeyCodes');
goog.require('goog.math.Size');
goog.require('goog.ui.Component');
goog.require('goog.ui.Control');
goog.require('goog.ui.PaletteRenderer');
goog.require('goog.ui.SelectionModel');
goog.ui.Palette = function (items, opt_renderer, opt_domHelper) {
    goog.ui.Palette.base(this, 'constructor', items, opt_renderer || goog.ui.PaletteRenderer.getInstance(), opt_domHelper);
    this.setAutoStates(goog.ui.Component.State.CHECKED | goog.ui.Component.State.SELECTED |
        goog.ui.Component.State.OPENED, false);
    this.currentCellControl_ = new goog.ui.Palette.CurrentCell_();
    this.currentCellControl_.setParentEventTarget(this);
    this.lastHighlightedIndex_ = -1;
};
goog.inherits(goog.ui.Palette, goog.ui.Control);
goog.tagUnsealableClass(goog.ui.Palette);
goog.ui.Palette.EventType = {
    AFTER_HIGHLIGHT: goog.events.getUniqueId('afterhighlight')
};
goog.ui.Palette.prototype.size_ = null;
goog.ui.Palette.prototype.highlightedIndex_ = -1;
goog.ui.Palette.prototype.selectionModel_ = null;
goog.ui.Palette.prototype.disposeInternal = function () {
    goog.ui.Palette.superClass_.disposeInternal.call(this);
    if (this.selectionModel_) {
        this.selectionModel_.dispose();
        this.selectionModel_ = null;
    }
    this.size_ = null;
    this.currentCellControl_.dispose();
};
goog.ui.Palette.prototype.setContentInternal = function (content) {
    var items = (content);
    goog.ui.Palette.superClass_.setContentInternal.call(this, items);
    this.adjustSize_();
    if (this.selectionModel_) {
        this.selectionModel_.clear();
        this.selectionModel_.addItems(items);
    }
    else {
        this.selectionModel_ = new goog.ui.SelectionModel(items);
        this.selectionModel_.setSelectionHandler(goog.bind(this.selectItem_, this));
        this.getHandler().listen(this.selectionModel_, goog.events.EventType.SELECT, this.handleSelectionChange);
    }
    this.highlightedIndex_ = -1;
};
goog.ui.Palette.prototype.getCaption = function () {
    return '';
};
goog.ui.Palette.prototype.setCaption = function (caption) {
};
goog.ui.Palette.prototype.handleMouseOver = function (e) {
    goog.ui.Palette.superClass_.handleMouseOver.call(this, e);
    var item = this.getRenderer().getContainingItem(this, e.target);
    if (item && e.relatedTarget && goog.dom.contains(item, e.relatedTarget)) {
        return;
    }
    if (item != this.getHighlightedItem()) {
        this.setHighlightedItem(item);
    }
};
goog.ui.Palette.prototype.handleMouseDown = function (e) {
    goog.ui.Palette.superClass_.handleMouseDown.call(this, e);
    if (this.isActive()) {
        var item = this.getRenderer().getContainingItem(this, e.target);
        if (item != this.getHighlightedItem()) {
            this.setHighlightedItem(item);
        }
    }
};
goog.ui.Palette.prototype.performActionInternal = function (e) {
    var highlightedItem = this.getHighlightedItem();
    if (highlightedItem) {
        if (e && this.shouldSelectHighlightedItem_(e)) {
            this.setSelectedItem(highlightedItem);
        }
        return goog.ui.Palette.base(this, 'performActionInternal', e);
    }
    return false;
};
goog.ui.Palette.prototype.shouldSelectHighlightedItem_ = function (e) {
    if (!this.getSelectedItem()) {
        return true;
    }
    else if (e.type != 'mouseup') {
        return true;
    }
    else {
        return !!this.getRenderer().getContainingItem(this, e.target);
    }
};
goog.ui.Palette.prototype.handleKeyEvent = function (e) {
    var items = this.getContent();
    var numItems = items ? items.length : 0;
    var numColumns = this.size_.width;
    if (numItems == 0 || !this.isEnabled()) {
        return false;
    }
    if (e.keyCode == goog.events.KeyCodes.ENTER ||
        e.keyCode == goog.events.KeyCodes.SPACE) {
        return this.performActionInternal(e);
    }
    if (e.keyCode == goog.events.KeyCodes.HOME) {
        this.setHighlightedIndex(0);
        return true;
    }
    else if (e.keyCode == goog.events.KeyCodes.END) {
        this.setHighlightedIndex(numItems - 1);
        return true;
    }
    var highlightedIndex = this.highlightedIndex_ < 0 ? this.getSelectedIndex() :
        this.highlightedIndex_;
    switch (e.keyCode) {
        case goog.events.KeyCodes.LEFT:
            if (highlightedIndex == -1 || highlightedIndex == 0) {
                highlightedIndex = numItems;
            }
            this.setHighlightedIndex(highlightedIndex - 1);
            e.preventDefault();
            return true;
            break;
        case goog.events.KeyCodes.RIGHT:
            if (highlightedIndex == numItems - 1) {
                highlightedIndex = -1;
            }
            this.setHighlightedIndex(highlightedIndex + 1);
            e.preventDefault();
            return true;
            break;
        case goog.events.KeyCodes.UP:
            if (highlightedIndex == -1) {
                highlightedIndex = numItems + numColumns - 1;
            }
            if (highlightedIndex >= numColumns) {
                this.setHighlightedIndex(highlightedIndex - numColumns);
                e.preventDefault();
                return true;
            }
            break;
        case goog.events.KeyCodes.DOWN:
            if (highlightedIndex == -1) {
                highlightedIndex = -numColumns;
            }
            if (highlightedIndex < numItems - numColumns) {
                this.setHighlightedIndex(highlightedIndex + numColumns);
                e.preventDefault();
                return true;
            }
            break;
    }
    return false;
};
goog.ui.Palette.prototype.handleSelectionChange = function (e) {
};
goog.ui.Palette.prototype.getSize = function () {
    return this.size_;
};
goog.ui.Palette.prototype.setSize = function (size, opt_rows) {
    if (this.getElement()) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    this.size_ = goog.isNumber(size) ?
        new goog.math.Size(size, (opt_rows)) :
        size;
    this.adjustSize_();
};
goog.ui.Palette.prototype.getHighlightedIndex = function () {
    return this.highlightedIndex_;
};
goog.ui.Palette.prototype.getHighlightedItem = function () {
    var items = this.getContent();
    return items && items[this.highlightedIndex_];
};
goog.ui.Palette.prototype.getHighlightedCellElement_ = function () {
    return this.getRenderer().getCellForItem(this.getHighlightedItem());
};
goog.ui.Palette.prototype.setHighlightedIndex = function (index) {
    if (index != this.highlightedIndex_) {
        this.highlightIndex_(this.highlightedIndex_, false);
        this.lastHighlightedIndex_ = this.highlightedIndex_;
        this.highlightedIndex_ = index;
        this.highlightIndex_(index, true);
        this.dispatchEvent(goog.ui.Palette.EventType.AFTER_HIGHLIGHT);
    }
};
goog.ui.Palette.prototype.setHighlightedItem = function (item) {
    var items = (this.getContent());
    this.setHighlightedIndex((items && item) ? goog.array.indexOf(items, item) : -1);
};
goog.ui.Palette.prototype.getSelectedIndex = function () {
    return this.selectionModel_ ? this.selectionModel_.getSelectedIndex() : -1;
};
goog.ui.Palette.prototype.getSelectedItem = function () {
    return this.selectionModel_ ?
        (this.selectionModel_.getSelectedItem()) :
        null;
};
goog.ui.Palette.prototype.setSelectedIndex = function (index) {
    if (this.selectionModel_) {
        this.selectionModel_.setSelectedIndex(index);
    }
};
goog.ui.Palette.prototype.setSelectedItem = function (item) {
    if (this.selectionModel_) {
        this.selectionModel_.setSelectedItem(item);
    }
};
goog.ui.Palette.prototype.highlightIndex_ = function (index, highlight) {
    if (this.getElement()) {
        var items = this.getContent();
        if (items && index >= 0 && index < items.length) {
            var cellEl = this.getHighlightedCellElement_();
            if (this.currentCellControl_.getElement() != cellEl) {
                this.currentCellControl_.setElementInternal(cellEl);
            }
            if (this.currentCellControl_.tryHighlight(highlight)) {
                this.getRenderer().highlightCell(this, items[index], highlight);
            }
        }
    }
};
goog.ui.Palette.prototype.setHighlighted = function (highlight) {
    if (highlight && this.highlightedIndex_ == -1) {
        this.setHighlightedIndex(this.lastHighlightedIndex_ > -1 ? this.lastHighlightedIndex_ : 0);
    }
    else if (!highlight) {
        this.setHighlightedIndex(-1);
    }
    goog.ui.Palette.base(this, 'setHighlighted', highlight);
};
goog.ui.Palette.prototype.selectItem_ = function (item, select) {
    if (this.getElement()) {
        this.getRenderer().selectCell(this, item, select);
    }
};
goog.ui.Palette.prototype.adjustSize_ = function () {
    var items = this.getContent();
    if (items) {
        if (this.size_ && this.size_.width) {
            var minRows = Math.ceil(items.length / this.size_.width);
            if (!goog.isNumber(this.size_.height) || this.size_.height < minRows) {
                this.size_.height = minRows;
            }
        }
        else {
            var length = Math.ceil(Math.sqrt(items.length));
            this.size_ = new goog.math.Size(length, length);
        }
    }
    else {
        this.size_ = new goog.math.Size(0, 0);
    }
};
goog.ui.Palette.CurrentCell_ = function () {
    goog.ui.Palette.CurrentCell_.base(this, 'constructor', null);
    this.setDispatchTransitionEvents(goog.ui.Component.State.HOVER, true);
};
goog.inherits(goog.ui.Palette.CurrentCell_, goog.ui.Control);
goog.ui.Palette.CurrentCell_.prototype.tryHighlight = function (highlight) {
    this.setHighlighted(highlight);
    return this.isHighlighted() == highlight;
};
goog.provide('goog.ui.ColorPalette');
goog.require('goog.array');
goog.require('goog.color');
goog.require('goog.dom.TagName');
goog.require('goog.style');
goog.require('goog.ui.Palette');
goog.require('goog.ui.PaletteRenderer');
goog.ui.ColorPalette = function (opt_colors, opt_renderer, opt_domHelper) {
    this.colors_ = opt_colors || [];
    goog.ui.Palette.call(this, null, opt_renderer || goog.ui.PaletteRenderer.getInstance(), opt_domHelper);
    this.setColors(this.colors_);
};
goog.inherits(goog.ui.ColorPalette, goog.ui.Palette);
goog.tagUnsealableClass(goog.ui.ColorPalette);
goog.ui.ColorPalette.prototype.normalizedColors_ = null;
goog.ui.ColorPalette.prototype.labels_ = null;
goog.ui.ColorPalette.prototype.getColors = function () {
    return this.colors_;
};
goog.ui.ColorPalette.prototype.setColors = function (colors, opt_labels) {
    this.colors_ = colors;
    this.labels_ = opt_labels || null;
    this.normalizedColors_ = null;
    this.setContent(this.createColorNodes());
};
goog.ui.ColorPalette.prototype.getSelectedColor = function () {
    var selectedItem = (this.getSelectedItem());
    if (selectedItem) {
        var color = goog.style.getStyle(selectedItem, 'background-color');
        return goog.ui.ColorPalette.parseColor_(color);
    }
    else {
        return null;
    }
};
goog.ui.ColorPalette.prototype.setSelectedColor = function (color) {
    var hexColor = goog.ui.ColorPalette.parseColor_(color);
    if (!this.normalizedColors_) {
        this.normalizedColors_ = goog.array.map(this.colors_, function (color) {
            return goog.ui.ColorPalette.parseColor_(color);
        });
    }
    this.setSelectedIndex(hexColor ? goog.array.indexOf(this.normalizedColors_, hexColor) : -1);
};
goog.ui.ColorPalette.prototype.createColorNodes = function () {
    return goog.array.map(this.colors_, function (color, index) {
        var swatch = this.getDomHelper().createDom(goog.dom.TagName.DIV, {
            'class': goog.getCssName(this.getRenderer().getCssClass(), 'colorswatch'),
            'style': 'background-color:' + color
        });
        if (this.labels_ && this.labels_[index]) {
            swatch.title = this.labels_[index];
        }
        else {
            swatch.title = color.charAt(0) == '#' ?
                'RGB (' + goog.color.hexToRgb(color).join(', ') + ')' :
                color;
        }
        return swatch;
    }, this);
};
goog.ui.ColorPalette.parseColor_ = function (color) {
    if (color) {
        try {
            return goog.color.parse(color).hex;
        }
        catch (ex) {
        }
    }
    return null;
};
goog.provide('goog.ui.ColorPicker');
goog.provide('goog.ui.ColorPicker.EventType');
goog.require('goog.ui.ColorPalette');
goog.require('goog.ui.Component');
goog.ui.ColorPicker = function (opt_domHelper, opt_colorPalette) {
    goog.ui.Component.call(this, opt_domHelper);
    this.colorPalette_ = opt_colorPalette || null;
    this.getHandler().listen(this, goog.ui.Component.EventType.ACTION, this.onColorPaletteAction_);
};
goog.inherits(goog.ui.ColorPicker, goog.ui.Component);
goog.ui.ColorPicker.DEFAULT_NUM_COLS = 5;
goog.ui.ColorPicker.EventType = {
    CHANGE: 'change'
};
goog.ui.ColorPicker.prototype.focusable_ = true;
goog.ui.ColorPicker.prototype.getColors = function () {
    return this.colorPalette_ ? this.colorPalette_.getColors() : null;
};
goog.ui.ColorPicker.prototype.setColors = function (colors) {
    if (!this.colorPalette_) {
        this.createColorPalette_(colors);
    }
    else {
        this.colorPalette_.setColors(colors);
    }
};
goog.ui.ColorPicker.prototype.addColors = function (colors) {
    this.setColors(colors);
};
goog.ui.ColorPicker.prototype.setSize = function (size) {
    if (!this.colorPalette_) {
        this.createColorPalette_([]);
    }
    this.colorPalette_.setSize(size);
};
goog.ui.ColorPicker.prototype.getSize = function () {
    return this.colorPalette_ ? this.colorPalette_.getSize() : null;
};
goog.ui.ColorPicker.prototype.setColumnCount = function (n) {
    this.setSize(n);
};
goog.ui.ColorPicker.prototype.getSelectedIndex = function () {
    return this.colorPalette_ ? this.colorPalette_.getSelectedIndex() : -1;
};
goog.ui.ColorPicker.prototype.setSelectedIndex = function (ind) {
    if (this.colorPalette_) {
        this.colorPalette_.setSelectedIndex(ind);
    }
};
goog.ui.ColorPicker.prototype.getSelectedColor = function () {
    return this.colorPalette_ ? this.colorPalette_.getSelectedColor() : null;
};
goog.ui.ColorPicker.prototype.setSelectedColor = function (color) {
    if (this.colorPalette_) {
        this.colorPalette_.setSelectedColor(color);
    }
};
goog.ui.ColorPicker.prototype.isFocusable = function () {
    return this.focusable_;
};
goog.ui.ColorPicker.prototype.setFocusable = function (focusable) {
    this.focusable_ = focusable;
    if (this.colorPalette_) {
        this.colorPalette_.setSupportedState(goog.ui.Component.State.FOCUSED, focusable);
    }
};
goog.ui.ColorPicker.prototype.canDecorate = function (element) {
    return false;
};
goog.ui.ColorPicker.prototype.enterDocument = function () {
    goog.ui.ColorPicker.superClass_.enterDocument.call(this);
    if (this.colorPalette_) {
        this.colorPalette_.render(this.getElement());
    }
    this.getElement().unselectable = 'on';
};
goog.ui.ColorPicker.prototype.disposeInternal = function () {
    goog.ui.ColorPicker.superClass_.disposeInternal.call(this);
    if (this.colorPalette_) {
        this.colorPalette_.dispose();
        this.colorPalette_ = null;
    }
};
goog.ui.ColorPicker.prototype.focus = function () {
    if (this.colorPalette_) {
        this.colorPalette_.getElement().focus();
    }
};
goog.ui.ColorPicker.prototype.onColorPaletteAction_ = function (e) {
    e.stopPropagation();
    this.dispatchEvent(goog.ui.ColorPicker.EventType.CHANGE);
};
goog.ui.ColorPicker.prototype.createColorPalette_ = function (colors) {
    var cp = new goog.ui.ColorPalette(colors, null, this.getDomHelper());
    cp.setSize(goog.ui.ColorPicker.DEFAULT_NUM_COLS);
    cp.setSupportedState(goog.ui.Component.State.FOCUSED, this.focusable_);
    this.addChild(cp);
    this.colorPalette_ = cp;
    if (this.isInDocument()) {
        this.colorPalette_.render(this.getElement());
    }
};
goog.ui.ColorPicker.createSimpleColorGrid = function (opt_domHelper) {
    var cp = new goog.ui.ColorPicker(opt_domHelper);
    cp.setSize(7);
    cp.setColors(goog.ui.ColorPicker.SIMPLE_GRID_COLORS);
    return cp;
};
goog.ui.ColorPicker.SIMPLE_GRID_COLORS = [
    '#ffffff', '#cccccc', '#c0c0c0', '#999999', '#666666', '#333333', '#000000',
    '#ffcccc', '#ff6666', '#ff0000', '#cc0000', '#990000', '#660000', '#330000',
    '#ffcc99', '#ff9966', '#ff9900', '#ff6600', '#cc6600', '#993300', '#663300',
    '#ffff99', '#ffff66', '#ffcc66', '#ffcc33', '#cc9933', '#996633', '#663333',
    '#ffffcc', '#ffff33', '#ffff00', '#ffcc00', '#999900', '#666600', '#333300',
    '#99ff99', '#66ff99', '#33ff33', '#33cc00', '#009900', '#006600', '#003300',
    '#99ffff', '#33ffff', '#66cccc', '#00cccc', '#339999', '#336666', '#003333',
    '#ccffff', '#66ffff', '#33ccff', '#3366ff', '#3333ff', '#000099', '#000066',
    '#ccccff', '#9999ff', '#6666cc', '#6633ff', '#6600cc', '#333399', '#330099',
    '#ffccff', '#ff99ff', '#cc66cc', '#cc33cc', '#993399', '#663366', '#330033'
];
goog.provide('goog.ui.Container');
goog.provide('goog.ui.Container.EventType');
goog.provide('goog.ui.Container.Orientation');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.State');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.events.EventType');
goog.require('goog.events.KeyCodes');
goog.require('goog.events.KeyHandler');
goog.require('goog.object');
goog.require('goog.style');
goog.require('goog.ui.Component');
goog.require('goog.ui.ContainerRenderer');
goog.require('goog.ui.Control');
goog.ui.Container = function (opt_orientation, opt_renderer, opt_domHelper) {
    goog.ui.Component.call(this, opt_domHelper);
    this.renderer_ = opt_renderer || goog.ui.ContainerRenderer.getInstance();
    this.orientation_ = opt_orientation || this.renderer_.getDefaultOrientation();
};
goog.inherits(goog.ui.Container, goog.ui.Component);
goog.tagUnsealableClass(goog.ui.Container);
goog.ui.Container.EventType = {
    AFTER_SHOW: 'aftershow',
    AFTER_HIDE: 'afterhide'
};
goog.ui.Container.Orientation = {
    HORIZONTAL: 'horizontal',
    VERTICAL: 'vertical'
};
goog.ui.Container.prototype.keyEventTarget_ = null;
goog.ui.Container.prototype.keyHandler_ = null;
goog.ui.Container.prototype.renderer_ = null;
goog.ui.Container.prototype.orientation_ = null;
goog.ui.Container.prototype.visible_ = true;
goog.ui.Container.prototype.enabled_ = true;
goog.ui.Container.prototype.focusable_ = true;
goog.ui.Container.prototype.highlightedIndex_ = -1;
goog.ui.Container.prototype.openItem_ = null;
goog.ui.Container.prototype.mouseButtonPressed_ = false;
goog.ui.Container.prototype.allowFocusableChildren_ = false;
goog.ui.Container.prototype.openFollowsHighlight_ = true;
goog.ui.Container.prototype.childElementIdMap_ = null;
goog.ui.Container.prototype.getKeyEventTarget = function () {
    return this.keyEventTarget_ || this.renderer_.getKeyEventTarget(this);
};
goog.ui.Container.prototype.setKeyEventTarget = function (element) {
    if (this.focusable_) {
        var oldTarget = this.getKeyEventTarget();
        var inDocument = this.isInDocument();
        this.keyEventTarget_ = element;
        var newTarget = this.getKeyEventTarget();
        if (inDocument) {
            this.keyEventTarget_ = oldTarget;
            this.enableFocusHandling_(false);
            this.keyEventTarget_ = element;
            this.getKeyHandler().attach(newTarget);
            this.enableFocusHandling_(true);
        }
    }
    else {
        throw new Error('Can\'t set key event target for container ' +
            'that doesn\'t support keyboard focus!');
    }
};
goog.ui.Container.prototype.getKeyHandler = function () {
    return this.keyHandler_ ||
        (this.keyHandler_ = new goog.events.KeyHandler(this.getKeyEventTarget()));
};
goog.ui.Container.prototype.getRenderer = function () {
    return this.renderer_;
};
goog.ui.Container.prototype.setRenderer = function (renderer) {
    if (this.getElement()) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    this.renderer_ = renderer;
};
goog.ui.Container.prototype.createDom = function () {
    this.setElementInternal(this.renderer_.createDom(this));
};
goog.ui.Container.prototype.getContentElement = function () {
    return this.renderer_.getContentElement(this.getElement());
};
goog.ui.Container.prototype.canDecorate = function (element) {
    return this.renderer_.canDecorate(element);
};
goog.ui.Container.prototype.decorateInternal = function (element) {
    this.setElementInternal(this.renderer_.decorate(this, element));
    if (element.style.display == 'none') {
        this.visible_ = false;
    }
};
goog.ui.Container.prototype.enterDocument = function () {
    goog.ui.Container.superClass_.enterDocument.call(this);
    this.forEachChild(function (child) {
        if (child.isInDocument()) {
            this.registerChildId_(child);
        }
    }, this);
    var elem = this.getElement();
    this.renderer_.initializeDom(this);
    this.setVisible(this.visible_, true);
    this.getHandler()
        .listen(this, goog.ui.Component.EventType.ENTER, this.handleEnterItem)
        .listen(this, goog.ui.Component.EventType.HIGHLIGHT, this.handleHighlightItem)
        .listen(this, goog.ui.Component.EventType.UNHIGHLIGHT, this.handleUnHighlightItem)
        .listen(this, goog.ui.Component.EventType.OPEN, this.handleOpenItem)
        .listen(this, goog.ui.Component.EventType.CLOSE, this.handleCloseItem)
        .
            listen(elem, goog.events.EventType.MOUSEDOWN, this.handleMouseDown)
        .listen(goog.dom.getOwnerDocument(elem), goog.events.EventType.MOUSEUP, this.handleDocumentMouseUp)
        .
            listen(elem, [
        goog.events.EventType.MOUSEDOWN, goog.events.EventType.MOUSEUP,
        goog.events.EventType.MOUSEOVER, goog.events.EventType.MOUSEOUT,
        goog.events.EventType.CONTEXTMENU
    ], this.handleChildMouseEvents);
    if (this.isFocusable()) {
        this.enableFocusHandling_(true);
    }
};
goog.ui.Container.prototype.enableFocusHandling_ = function (enable) {
    var handler = this.getHandler();
    var keyTarget = this.getKeyEventTarget();
    if (enable) {
        handler.listen(keyTarget, goog.events.EventType.FOCUS, this.handleFocus)
            .listen(keyTarget, goog.events.EventType.BLUR, this.handleBlur)
            .listen(this.getKeyHandler(), goog.events.KeyHandler.EventType.KEY, this.handleKeyEvent);
    }
    else {
        handler.unlisten(keyTarget, goog.events.EventType.FOCUS, this.handleFocus)
            .unlisten(keyTarget, goog.events.EventType.BLUR, this.handleBlur)
            .unlisten(this.getKeyHandler(), goog.events.KeyHandler.EventType.KEY, this.handleKeyEvent);
    }
};
goog.ui.Container.prototype.exitDocument = function () {
    this.setHighlightedIndex(-1);
    if (this.openItem_) {
        this.openItem_.setOpen(false);
    }
    this.mouseButtonPressed_ = false;
    goog.ui.Container.superClass_.exitDocument.call(this);
};
goog.ui.Container.prototype.disposeInternal = function () {
    goog.ui.Container.superClass_.disposeInternal.call(this);
    if (this.keyHandler_) {
        this.keyHandler_.dispose();
        this.keyHandler_ = null;
    }
    this.keyEventTarget_ = null;
    this.childElementIdMap_ = null;
    this.openItem_ = null;
    this.renderer_ = null;
};
goog.ui.Container.prototype.handleEnterItem = function (e) {
    return true;
};
goog.ui.Container.prototype.handleHighlightItem = function (e) {
    var index = this.indexOfChild((e.target));
    if (index > -1 && index != this.highlightedIndex_) {
        var item = this.getHighlighted();
        if (item) {
            item.setHighlighted(false);
        }
        this.highlightedIndex_ = index;
        item = this.getHighlighted();
        if (this.isMouseButtonPressed()) {
            item.setActive(true);
        }
        if (this.openFollowsHighlight_ && this.openItem_ &&
            item != this.openItem_) {
            if (item.isSupportedState(goog.ui.Component.State.OPENED)) {
                item.setOpen(true);
            }
            else {
                this.openItem_.setOpen(false);
            }
        }
    }
    var element = this.getElement();
    goog.asserts.assert(element, 'The DOM element for the container cannot be null.');
    if (e.target.getElement() != null) {
        goog.a11y.aria.setState(element, goog.a11y.aria.State.ACTIVEDESCENDANT, e.target.getElement().id);
    }
};
goog.ui.Container.prototype.handleUnHighlightItem = function (e) {
    if (e.target == this.getHighlighted()) {
        this.highlightedIndex_ = -1;
    }
    var element = this.getElement();
    goog.asserts.assert(element, 'The DOM element for the container cannot be null.');
    goog.a11y.aria.removeState(element, goog.a11y.aria.State.ACTIVEDESCENDANT);
};
goog.ui.Container.prototype.handleOpenItem = function (e) {
    var item = (e.target);
    if (item && item != this.openItem_ && item.getParent() == this) {
        if (this.openItem_) {
            this.openItem_.setOpen(false);
        }
        this.openItem_ = item;
    }
};
goog.ui.Container.prototype.handleCloseItem = function (e) {
    if (e.target == this.openItem_) {
        this.openItem_ = null;
    }
    var element = this.getElement();
    var targetEl = e.target.getElement();
    if (element && e.target.isHighlighted() && targetEl) {
        goog.a11y.aria.setActiveDescendant(element, targetEl);
    }
};
goog.ui.Container.prototype.handleMouseDown = function (e) {
    if (this.enabled_) {
        this.setMouseButtonPressed(true);
    }
    var keyTarget = this.getKeyEventTarget();
    if (keyTarget && goog.dom.isFocusableTabIndex(keyTarget)) {
        keyTarget.focus();
    }
    else {
        e.preventDefault();
    }
};
goog.ui.Container.prototype.handleDocumentMouseUp = function (e) {
    this.setMouseButtonPressed(false);
};
goog.ui.Container.prototype.handleChildMouseEvents = function (e) {
    var control = this.getOwnerControl((e.target));
    if (control) {
        switch (e.type) {
            case goog.events.EventType.MOUSEDOWN:
                control.handleMouseDown(e);
                break;
            case goog.events.EventType.MOUSEUP:
                control.handleMouseUp(e);
                break;
            case goog.events.EventType.MOUSEOVER:
                control.handleMouseOver(e);
                break;
            case goog.events.EventType.MOUSEOUT:
                control.handleMouseOut(e);
                break;
            case goog.events.EventType.CONTEXTMENU:
                control.handleContextMenu(e);
                break;
        }
    }
};
goog.ui.Container.prototype.getOwnerControl = function (node) {
    if (this.childElementIdMap_) {
        var elem = this.getElement();
        while (node && node !== elem) {
            var id = node.id;
            if (id in this.childElementIdMap_) {
                return this.childElementIdMap_[id];
            }
            node = node.parentNode;
        }
    }
    return null;
};
goog.ui.Container.prototype.handleFocus = function (e) {
};
goog.ui.Container.prototype.handleBlur = function (e) {
    this.setHighlightedIndex(-1);
    this.setMouseButtonPressed(false);
    if (this.openItem_) {
        this.openItem_.setOpen(false);
    }
};
goog.ui.Container.prototype.handleKeyEvent = function (e) {
    if (this.isEnabled() && this.isVisible() &&
        (this.getChildCount() != 0 || this.keyEventTarget_) &&
        this.handleKeyEventInternal(e)) {
        e.preventDefault();
        e.stopPropagation();
        return true;
    }
    return false;
};
goog.ui.Container.prototype.handleKeyEventInternal = function (e) {
    var highlighted = this.getHighlighted();
    if (highlighted && typeof highlighted.handleKeyEvent == 'function' &&
        highlighted.handleKeyEvent(e)) {
        return true;
    }
    if (this.openItem_ && this.openItem_ != highlighted &&
        typeof this.openItem_.handleKeyEvent == 'function' &&
        this.openItem_.handleKeyEvent(e)) {
        return true;
    }
    if (e.shiftKey || e.ctrlKey || e.metaKey || e.altKey) {
        return false;
    }
    switch (e.keyCode) {
        case goog.events.KeyCodes.ESC:
            if (this.isFocusable()) {
                this.getKeyEventTarget().blur();
            }
            else {
                return false;
            }
            break;
        case goog.events.KeyCodes.HOME:
            this.highlightFirst();
            break;
        case goog.events.KeyCodes.END:
            this.highlightLast();
            break;
        case goog.events.KeyCodes.UP:
            if (this.orientation_ == goog.ui.Container.Orientation.VERTICAL) {
                this.highlightPrevious();
            }
            else {
                return false;
            }
            break;
        case goog.events.KeyCodes.LEFT:
            if (this.orientation_ == goog.ui.Container.Orientation.HORIZONTAL) {
                if (this.isRightToLeft()) {
                    this.highlightNext();
                }
                else {
                    this.highlightPrevious();
                }
            }
            else {
                return false;
            }
            break;
        case goog.events.KeyCodes.DOWN:
            if (this.orientation_ == goog.ui.Container.Orientation.VERTICAL) {
                this.highlightNext();
            }
            else {
                return false;
            }
            break;
        case goog.events.KeyCodes.RIGHT:
            if (this.orientation_ == goog.ui.Container.Orientation.HORIZONTAL) {
                if (this.isRightToLeft()) {
                    this.highlightPrevious();
                }
                else {
                    this.highlightNext();
                }
            }
            else {
                return false;
            }
            break;
        default:
            return false;
    }
    return true;
};
goog.ui.Container.prototype.registerChildId_ = function (child) {
    var childElem = child.getElement();
    var id = childElem.id || (childElem.id = child.getId());
    if (!this.childElementIdMap_) {
        this.childElementIdMap_ = {};
    }
    this.childElementIdMap_[id] = child;
};
goog.ui.Container.prototype.addChild = function (child, opt_render) {
    goog.asserts.assertInstanceof(child, goog.ui.Control, 'The child of a container must be a control');
    goog.ui.Container.superClass_.addChild.call(this, child, opt_render);
};
goog.ui.Container.prototype.getChild;
goog.ui.Container.prototype.getChildAt;
goog.ui.Container.prototype.addChildAt = function (control, index, opt_render) {
    goog.asserts.assertInstanceof(control, goog.ui.Control);
    control.setDispatchTransitionEvents(goog.ui.Component.State.HOVER, true);
    control.setDispatchTransitionEvents(goog.ui.Component.State.OPENED, true);
    if (this.isFocusable() || !this.isFocusableChildrenAllowed()) {
        control.setSupportedState(goog.ui.Component.State.FOCUSED, false);
    }
    control.setHandleMouseEvents(false);
    var srcIndex = (control.getParent() == this) ? this.indexOfChild(control) : -1;
    goog.ui.Container.superClass_.addChildAt.call(this, control, index, opt_render);
    if (control.isInDocument() && this.isInDocument()) {
        this.registerChildId_(control);
    }
    this.updateHighlightedIndex_(srcIndex, index);
};
goog.ui.Container.prototype.updateHighlightedIndex_ = function (fromIndex, toIndex) {
    if (fromIndex == -1) {
        fromIndex = this.getChildCount();
    }
    if (fromIndex == this.highlightedIndex_) {
        this.highlightedIndex_ = Math.min(this.getChildCount() - 1, toIndex);
    }
    else if (fromIndex > this.highlightedIndex_ && toIndex <= this.highlightedIndex_) {
        this.highlightedIndex_++;
    }
    else if (fromIndex < this.highlightedIndex_ && toIndex > this.highlightedIndex_) {
        this.highlightedIndex_--;
    }
};
goog.ui.Container.prototype.removeChild = function (control, opt_unrender) {
    control = goog.isString(control) ? this.getChild(control) : control;
    goog.asserts.assertInstanceof(control, goog.ui.Control);
    if (control) {
        var index = this.indexOfChild(control);
        if (index != -1) {
            if (index == this.highlightedIndex_) {
                control.setHighlighted(false);
                this.highlightedIndex_ = -1;
            }
            else if (index < this.highlightedIndex_) {
                this.highlightedIndex_--;
            }
        }
        var childElem = control.getElement();
        if (childElem && childElem.id && this.childElementIdMap_) {
            goog.object.remove(this.childElementIdMap_, childElem.id);
        }
    }
    control = (goog.ui.Container.superClass_.removeChild.call(this, control, opt_unrender));
    control.setHandleMouseEvents(true);
    return control;
};
goog.ui.Container.prototype.getOrientation = function () {
    return this.orientation_;
};
goog.ui.Container.prototype.setOrientation = function (orientation) {
    if (this.getElement()) {
        throw new Error(goog.ui.Component.Error.ALREADY_RENDERED);
    }
    this.orientation_ = orientation;
};
goog.ui.Container.prototype.isVisible = function () {
    return this.visible_;
};
goog.ui.Container.prototype.setVisible = function (visible, opt_force) {
    if (opt_force || (this.visible_ != visible &&
        this.dispatchEvent(visible ? goog.ui.Component.EventType.SHOW :
            goog.ui.Component.EventType.HIDE))) {
        this.visible_ = visible;
        var elem = this.getElement();
        if (elem) {
            goog.style.setElementShown(elem, visible);
            if (this.isFocusable()) {
                this.renderer_.enableTabIndex(this.getKeyEventTarget(), this.enabled_ && this.visible_);
            }
            if (!opt_force) {
                this.dispatchEvent(this.visible_ ? goog.ui.Container.EventType.AFTER_SHOW :
                    goog.ui.Container.EventType.AFTER_HIDE);
            }
        }
        return true;
    }
    return false;
};
goog.ui.Container.prototype.isEnabled = function () {
    return this.enabled_;
};
goog.ui.Container.prototype.setEnabled = function (enable) {
    if (this.enabled_ != enable &&
        this.dispatchEvent(enable ? goog.ui.Component.EventType.ENABLE :
            goog.ui.Component.EventType.DISABLE)) {
        if (enable) {
            this.enabled_ = true;
            this.forEachChild(function (child) {
                if (child.wasDisabled) {
                    delete child.wasDisabled;
                }
                else {
                    child.setEnabled(true);
                }
            });
        }
        else {
            this.forEachChild(function (child) {
                if (child.isEnabled()) {
                    child.setEnabled(false);
                }
                else {
                    child.wasDisabled = true;
                }
            });
            this.enabled_ = false;
            this.setMouseButtonPressed(false);
        }
        if (this.isFocusable()) {
            this.renderer_.enableTabIndex(this.getKeyEventTarget(), enable && this.visible_);
        }
    }
};
goog.ui.Container.prototype.isFocusable = function () {
    return this.focusable_;
};
goog.ui.Container.prototype.setFocusable = function (focusable) {
    if (focusable != this.focusable_ && this.isInDocument()) {
        this.enableFocusHandling_(focusable);
    }
    this.focusable_ = focusable;
    if (this.enabled_ && this.visible_) {
        this.renderer_.enableTabIndex(this.getKeyEventTarget(), focusable);
    }
};
goog.ui.Container.prototype.isFocusableChildrenAllowed = function () {
    return this.allowFocusableChildren_;
};
goog.ui.Container.prototype.setFocusableChildrenAllowed = function (focusable) {
    this.allowFocusableChildren_ = focusable;
};
goog.ui.Container.prototype.isOpenFollowsHighlight = function () {
    return this.openFollowsHighlight_;
};
goog.ui.Container.prototype.setOpenFollowsHighlight = function (follow) {
    this.openFollowsHighlight_ = follow;
};
goog.ui.Container.prototype.getHighlightedIndex = function () {
    return this.highlightedIndex_;
};
goog.ui.Container.prototype.setHighlightedIndex = function (index) {
    var child = this.getChildAt(index);
    if (child) {
        child.setHighlighted(true);
    }
    else if (this.highlightedIndex_ > -1) {
        this.getHighlighted().setHighlighted(false);
    }
};
goog.ui.Container.prototype.setHighlighted = function (item) {
    this.setHighlightedIndex(this.indexOfChild(item));
};
goog.ui.Container.prototype.getHighlighted = function () {
    return this.getChildAt(this.highlightedIndex_);
};
goog.ui.Container.prototype.highlightFirst = function () {
    this.highlightHelper(function (index, max) {
        return (index + 1) % max;
    }, this.getChildCount() - 1);
};
goog.ui.Container.prototype.highlightLast = function () {
    this.highlightHelper(function (index, max) {
        index--;
        return index < 0 ? max - 1 : index;
    }, 0);
};
goog.ui.Container.prototype.highlightNext = function () {
    this.highlightHelper(function (index, max) {
        return (index + 1) % max;
    }, this.highlightedIndex_);
};
goog.ui.Container.prototype.highlightPrevious = function () {
    this.highlightHelper(function (index, max) {
        index--;
        return index < 0 ? max - 1 : index;
    }, this.highlightedIndex_);
};
goog.ui.Container.prototype.highlightHelper = function (fn, startIndex) {
    var curIndex = startIndex < 0 ? this.indexOfChild(this.openItem_) : startIndex;
    var numItems = this.getChildCount();
    curIndex = fn.call(this, curIndex, numItems);
    var visited = 0;
    while (visited <= numItems) {
        var control = this.getChildAt(curIndex);
        if (control && this.canHighlightItem(control)) {
            this.setHighlightedIndexFromKeyEvent(curIndex);
            return true;
        }
        visited++;
        curIndex = fn.call(this, curIndex, numItems);
    }
    return false;
};
goog.ui.Container.prototype.canHighlightItem = function (item) {
    return item.isVisible() && item.isEnabled() &&
        item.isSupportedState(goog.ui.Component.State.HOVER);
};
goog.ui.Container.prototype.setHighlightedIndexFromKeyEvent = function (index) {
    this.setHighlightedIndex(index);
};
goog.ui.Container.prototype.getOpenItem = function () {
    return this.openItem_;
};
goog.ui.Container.prototype.isMouseButtonPressed = function () {
    return this.mouseButtonPressed_;
};
goog.ui.Container.prototype.setMouseButtonPressed = function (pressed) {
    this.mouseButtonPressed_ = pressed;
};
goog.provide('goog.ui.ContainerRenderer');
goog.require('goog.a11y.aria');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.string');
goog.require('goog.style');
goog.require('goog.ui.registry');
goog.require('goog.userAgent');
goog.forwardDeclare('goog.ui.Container');
goog.forwardDeclare('goog.ui.Container.Orientation');
goog.forwardDeclare('goog.ui.Control');
goog.ui.ContainerRenderer = function (opt_ariaRole) {
    this.ariaRole_ = opt_ariaRole;
};
goog.addSingletonGetter(goog.ui.ContainerRenderer);
goog.ui.ContainerRenderer.getCustomRenderer = function (ctor, cssClassName) {
    var renderer = new ctor();
    renderer.getCssClass = function () { return cssClassName; };
    return renderer;
};
goog.ui.ContainerRenderer.CSS_CLASS = goog.getCssName('goog-container');
goog.ui.ContainerRenderer.prototype.getAriaRole = function () {
    return this.ariaRole_;
};
goog.ui.ContainerRenderer.prototype.enableTabIndex = function (element, enable) {
    if (element) {
        element.tabIndex = enable ? 0 : -1;
    }
};
goog.ui.ContainerRenderer.prototype.createDom = function (container) {
    return container.getDomHelper().createDom(goog.dom.TagName.DIV, this.getClassNames(container).join(' '));
};
goog.ui.ContainerRenderer.prototype.getContentElement = function (element) {
    return element;
};
goog.ui.ContainerRenderer.prototype.canDecorate = function (element) {
    return element.tagName == 'DIV';
};
goog.ui.ContainerRenderer.prototype.decorate = function (container, element) {
    if (element.id) {
        container.setId(element.id);
    }
    var baseClass = this.getCssClass();
    var hasBaseClass = false;
    var classNames = goog.dom.classlist.get(element);
    if (classNames) {
        goog.array.forEach(classNames, function (className) {
            if (className == baseClass) {
                hasBaseClass = true;
            }
            else if (className) {
                this.setStateFromClassName(container, className, baseClass);
            }
        }, this);
    }
    if (!hasBaseClass) {
        goog.dom.classlist.add(element, baseClass);
    }
    this.decorateChildren(container, this.getContentElement(element));
    return element;
};
goog.ui.ContainerRenderer.prototype.setStateFromClassName = function (container, className, baseClass) {
    if (className == goog.getCssName(baseClass, 'disabled')) {
        container.setEnabled(false);
    }
    else if (className == goog.getCssName(baseClass, 'horizontal')) {
        container.setOrientation(goog.ui.Container.Orientation.HORIZONTAL);
    }
    else if (className == goog.getCssName(baseClass, 'vertical')) {
        container.setOrientation(goog.ui.Container.Orientation.VERTICAL);
    }
};
goog.ui.ContainerRenderer.prototype.decorateChildren = function (container, element, opt_firstChild) {
    if (element) {
        var node = opt_firstChild || element.firstChild, next;
        while (node && node.parentNode == element) {
            next = node.nextSibling;
            if (node.nodeType == goog.dom.NodeType.ELEMENT) {
                var child = this.getDecoratorForChild((node));
                if (child) {
                    child.setElementInternal((node));
                    if (!container.isEnabled()) {
                        child.setEnabled(false);
                    }
                    container.addChild(child);
                    child.decorate((node));
                }
            }
            else if (!node.nodeValue || goog.string.trim(node.nodeValue) == '') {
                element.removeChild(node);
            }
            node = next;
        }
    }
};
goog.ui.ContainerRenderer.prototype.getDecoratorForChild = function (element) {
    return (goog.ui.registry.getDecorator(element));
};
goog.ui.ContainerRenderer.prototype.initializeDom = function (container) {
    var elem = container.getElement();
    goog.asserts.assert(elem, 'The container DOM element cannot be null.');
    goog.style.setUnselectable(elem, true, goog.userAgent.GECKO);
    if (goog.userAgent.IE) {
        elem.hideFocus = true;
    }
    var ariaRole = this.getAriaRole();
    if (ariaRole) {
        goog.a11y.aria.setRole(elem, ariaRole);
    }
};
goog.ui.ContainerRenderer.prototype.getKeyEventTarget = function (container) {
    return container.getElement();
};
goog.ui.ContainerRenderer.prototype.getCssClass = function () {
    return goog.ui.ContainerRenderer.CSS_CLASS;
};
goog.ui.ContainerRenderer.prototype.getClassNames = function (container) {
    var baseClass = this.getCssClass();
    var isHorizontal = container.getOrientation() == goog.ui.Container.Orientation.HORIZONTAL;
    var classNames = [
        baseClass, (isHorizontal ? goog.getCssName(baseClass, 'horizontal') :
            goog.getCssName(baseClass, 'vertical'))
    ];
    if (!container.isEnabled()) {
        classNames.push(goog.getCssName(baseClass, 'disabled'));
    }
    return classNames;
};
goog.ui.ContainerRenderer.prototype.getDefaultOrientation = function () {
    return goog.ui.Container.Orientation.VERTICAL;
};
goog.provide('goog.ui.ControlContent');
goog.ui.ControlContent;
goog.provide('goog.ui.DatePicker');
goog.provide('goog.ui.DatePicker.Events');
goog.provide('goog.ui.DatePickerEvent');
goog.require('goog.a11y.aria');
goog.require('goog.asserts');
goog.require('goog.date.Date');
goog.require('goog.date.DateRange');
goog.require('goog.date.Interval');
goog.require('goog.dom');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.events.Event');
goog.require('goog.events.EventType');
goog.require('goog.events.KeyHandler');
goog.require('goog.i18n.DateTimeFormat');
goog.require('goog.i18n.DateTimePatterns');
goog.require('goog.i18n.DateTimeSymbols');
goog.require('goog.style');
goog.require('goog.ui.Component');
goog.require('goog.ui.DefaultDatePickerRenderer');
goog.require('goog.ui.IdGenerator');
goog.ui.DatePicker = function (opt_date, opt_dateTimeSymbols, opt_domHelper, opt_renderer) {
    goog.ui.Component.call(this, opt_domHelper);
    this.symbols_ = (opt_dateTimeSymbols || goog.i18n.DateTimeSymbols);
    this.wdayNames_ = this.symbols_.STANDALONESHORTWEEKDAYS;
    this.i18nDateFormatterDay_ = new goog.i18n.DateTimeFormat('d', this.symbols_);
    this.i18nDateFormatterDay2_ =
        new goog.i18n.DateTimeFormat('dd', this.symbols_);
    this.i18nDateFormatterWeek_ =
        new goog.i18n.DateTimeFormat('w', this.symbols_);
    this.i18nDateFormatterDayAriaLabel_ =
        new goog.i18n.DateTimeFormat('d MMM', this.symbols_);
    var patYear = goog.i18n.DateTimePatterns.YEAR_FULL || 'y';
    this.i18nDateFormatterYear_ =
        new goog.i18n.DateTimeFormat(patYear, this.symbols_);
    var patMMMMy = goog.i18n.DateTimePatterns.YEAR_MONTH_FULL || 'MMMM y';
    this.i18nDateFormatterMonthYear_ =
        new goog.i18n.DateTimeFormat(patMMMMy, this.symbols_);
    this.renderer_ = opt_renderer ||
        new goog.ui.DefaultDatePickerRenderer(this.getBaseCssClass(), this.getDomHelper());
    this.date_ = new goog.date.Date(opt_date);
    this.date_.setFirstWeekCutOffDay(this.symbols_.FIRSTWEEKCUTOFFDAY);
    this.date_.setFirstDayOfWeek(this.symbols_.FIRSTDAYOFWEEK);
    this.activeMonth_ = this.date_.clone();
    this.activeMonth_.setDate(1);
    this.wdayStyles_ = ['', '', '', '', '', '', ''];
    this.wdayStyles_[this.symbols_.WEEKENDRANGE[0]] =
        goog.getCssName(this.getBaseCssClass(), 'wkend-start');
    this.wdayStyles_[this.symbols_.WEEKENDRANGE[1]] =
        goog.getCssName(this.getBaseCssClass(), 'wkend-end');
    this.keyHandlers_ = {};
    this.grid_ = [];
    this.elTable_;
    this.tableBody_;
    this.tableFoot_;
    this.elYear_;
    this.elMonth_;
    this.elToday_;
    this.elNone_;
    this.menu_;
    this.menuSelected_;
    this.selectedCell_;
    this.menuCallback_;
};
goog.inherits(goog.ui.DatePicker, goog.ui.Component);
goog.tagUnsealableClass(goog.ui.DatePicker);
goog.ui.DatePicker.prototype.showFixedNumWeeks_ = true;
goog.ui.DatePicker.prototype.showOtherMonths_ = true;
goog.ui.DatePicker.prototype.userSelectableDateRange_ =
    goog.date.DateRange.allTime();
goog.ui.DatePicker.prototype.extraWeekAtEnd_ = true;
goog.ui.DatePicker.prototype.showWeekNum_ = true;
goog.ui.DatePicker.prototype.showWeekdays_ = true;
goog.ui.DatePicker.prototype.allowNone_ = true;
goog.ui.DatePicker.prototype.showToday_ = true;
goog.ui.DatePicker.prototype.simpleNavigation_ = false;
goog.ui.DatePicker.prototype.decoratorFunction_ = null;
goog.ui.DatePicker.prototype.longDateFormat_ = false;
goog.ui.DatePicker.prototype.elNavRow_ = null;
goog.ui.DatePicker.prototype.elMonthYear_ = null;
goog.ui.DatePicker.prototype.elFootRow_ = null;
goog.ui.DatePicker.prototype.cellIdGenerator_ =
    goog.ui.IdGenerator.getInstance();
goog.ui.DatePicker.BASE_CSS_CLASS_ = goog.getCssName('goog-date-picker');
goog.ui.DatePicker.YEAR_MENU_RANGE_ = 5;
goog.ui.DatePicker.Events = {
    CHANGE: 'change',
    CHANGE_ACTIVE_MONTH: 'changeActiveMonth',
    SELECT: 'select'
};
goog.ui.DatePicker.prototype.isCreated =
    goog.ui.DatePicker.prototype.isInDocument;
goog.ui.DatePicker.prototype.getFirstWeekday = function () {
    return this.activeMonth_.getFirstDayOfWeek();
};
goog.ui.DatePicker.prototype.getWeekdayClass = function (wday) {
    return this.wdayStyles_[wday];
};
goog.ui.DatePicker.prototype.getShowFixedNumWeeks = function () {
    return this.showFixedNumWeeks_;
};
goog.ui.DatePicker.prototype.getShowOtherMonths = function () {
    return this.showOtherMonths_;
};
goog.ui.DatePicker.prototype.getExtraWeekAtEnd = function () {
    return this.extraWeekAtEnd_;
};
goog.ui.DatePicker.prototype.getShowWeekNum = function () {
    return this.showWeekNum_;
};
goog.ui.DatePicker.prototype.getShowWeekdayNames = function () {
    return this.showWeekdays_;
};
goog.ui.DatePicker.prototype.getAllowNone = function () {
    return this.allowNone_;
};
goog.ui.DatePicker.prototype.getShowToday = function () {
    return this.showToday_;
};
goog.ui.DatePicker.prototype.getBaseCssClass = function () {
    return goog.ui.DatePicker.BASE_CSS_CLASS_;
};
goog.ui.DatePicker.prototype.setFirstWeekday = function (wday) {
    this.activeMonth_.setFirstDayOfWeek(wday);
    this.updateCalendarGrid_();
    this.redrawWeekdays_();
};
goog.ui.DatePicker.prototype.setWeekdayClass = function (wday, className) {
    this.wdayStyles_[wday] = className;
    this.redrawCalendarGrid_();
};
goog.ui.DatePicker.prototype.setShowFixedNumWeeks = function (b) {
    this.showFixedNumWeeks_ = b;
    this.updateCalendarGrid_();
};
goog.ui.DatePicker.prototype.setShowOtherMonths = function (b) {
    this.showOtherMonths_ = b;
    this.redrawCalendarGrid_();
};
goog.ui.DatePicker.prototype.setUserSelectableDateRange = function (dateRange) {
    this.userSelectableDateRange_ = dateRange;
};
goog.ui.DatePicker.prototype.getUserSelectableDateRange = function () {
    return this.userSelectableDateRange_;
};
goog.ui.DatePicker.prototype.isUserSelectableDate_ = function (date) {
    return this.userSelectableDateRange_.contains(date);
};
goog.ui.DatePicker.prototype.setUseSimpleNavigationMenu = function (b) {
    this.simpleNavigation_ = b;
    this.updateNavigationRow_();
    this.updateCalendarGrid_();
};
goog.ui.DatePicker.prototype.setExtraWeekAtEnd = function (b) {
    this.extraWeekAtEnd_ = b;
    this.updateCalendarGrid_();
};
goog.ui.DatePicker.prototype.setShowWeekNum = function (b) {
    this.showWeekNum_ = b;
    this.updateNavigationRow_();
    this.updateFooterRow_();
    this.updateCalendarGrid_();
};
goog.ui.DatePicker.prototype.setShowWeekdayNames = function (b) {
    this.showWeekdays_ = b;
    this.redrawWeekdays_();
    this.redrawCalendarGrid_();
};
goog.ui.DatePicker.prototype.setUseNarrowWeekdayNames = function (b) {
    this.wdayNames_ = b ? this.symbols_.STANDALONENARROWWEEKDAYS :
        this.symbols_.STANDALONESHORTWEEKDAYS;
    this.redrawWeekdays_();
};
goog.ui.DatePicker.prototype.setAllowNone = function (b) {
    this.allowNone_ = b;
    if (this.elNone_) {
        this.updateTodayAndNone_();
    }
};
goog.ui.DatePicker.prototype.setShowToday = function (b) {
    this.showToday_ = b;
    if (this.elToday_) {
        this.updateTodayAndNone_();
    }
};
goog.ui.DatePicker.prototype.updateTodayAndNone_ = function () {
    goog.style.setElementShown(this.elToday_, this.showToday_);
    goog.style.setElementShown(this.elNone_, this.allowNone_);
    goog.style.setElementShown(this.tableFoot_, this.showToday_ || this.allowNone_);
};
goog.ui.DatePicker.prototype.setDecorator = function (f) {
    this.decoratorFunction_ = f;
};
goog.ui.DatePicker.prototype.setLongDateFormat = function (b) {
    this.longDateFormat_ = b;
    this.redrawCalendarGrid_();
};
goog.ui.DatePicker.prototype.previousMonth = function () {
    this.activeMonth_.add(new goog.date.Interval(goog.date.Interval.MONTHS, -1));
    this.updateCalendarGrid_();
    this.fireChangeActiveMonthEvent_();
};
goog.ui.DatePicker.prototype.nextMonth = function () {
    this.activeMonth_.add(new goog.date.Interval(goog.date.Interval.MONTHS, 1));
    this.updateCalendarGrid_();
    this.fireChangeActiveMonthEvent_();
};
goog.ui.DatePicker.prototype.previousYear = function () {
    this.activeMonth_.add(new goog.date.Interval(goog.date.Interval.YEARS, -1));
    this.updateCalendarGrid_();
    this.fireChangeActiveMonthEvent_();
};
goog.ui.DatePicker.prototype.nextYear = function () {
    this.activeMonth_.add(new goog.date.Interval(goog.date.Interval.YEARS, 1));
    this.updateCalendarGrid_();
    this.fireChangeActiveMonthEvent_();
};
goog.ui.DatePicker.prototype.selectToday = function () {
    this.setDate(new goog.date.Date());
};
goog.ui.DatePicker.prototype.selectNone = function () {
    if (this.allowNone_) {
        this.setDate(null);
    }
};
goog.ui.DatePicker.prototype.getActiveMonth = function () {
    return this.activeMonth_.clone();
};
goog.ui.DatePicker.prototype.getDate = function () {
    return this.date_ && this.date_.clone();
};
goog.ui.DatePicker.prototype.getDateAt = function (row, col) {
    return this.grid_[row] ?
        this.grid_[row][col] ? this.grid_[row][col].clone() : null :
        null;
};
goog.ui.DatePicker.prototype.getDateElementAt = function (row, col) {
    if (row < 0 || col < 0) {
        return null;
    }
    var adjustedRow = row + 1;
    return this.elTable_[adjustedRow] ?
        this.elTable_[adjustedRow][col + 1] || null :
        null;
};
goog.ui.DatePicker.prototype.setDate = function (date) {
    this.setDate_(date, true);
};
goog.ui.DatePicker.prototype.setDate_ = function (date, fireSelection) {
    var sameMonth = date == this.date_ ||
        date && this.date_ && date.getFullYear() == this.date_.getFullYear() &&
            date.getMonth() == this.date_.getMonth();
    var sameDate = date == this.date_ || sameMonth && date.getDate() == this.date_.getDate();
    this.date_ = date && new goog.date.Date(date);
    if (date) {
        this.activeMonth_.set(this.date_);
        this.activeMonth_.setFullYear(this.date_.getFullYear());
        this.activeMonth_.setDate(1);
    }
    this.updateCalendarGrid_();
    if (fireSelection) {
        var selectEvent = new goog.ui.DatePickerEvent(goog.ui.DatePicker.Events.SELECT, this, this.date_);
        this.dispatchEvent(selectEvent);
    }
    if (!sameDate) {
        var changeEvent = new goog.ui.DatePickerEvent(goog.ui.DatePicker.Events.CHANGE, this, this.date_);
        this.dispatchEvent(changeEvent);
    }
    if (!sameMonth) {
        this.fireChangeActiveMonthEvent_();
    }
};
goog.ui.DatePicker.prototype.updateNavigationRow_ = function () {
    if (!this.elNavRow_) {
        return;
    }
    var row = this.elNavRow_;
    while (row.firstChild) {
        row.removeChild(row.firstChild);
    }
    var fullDateFormat = this.symbols_.DATEFORMATS[goog.i18n.DateTimeFormat.Format.FULL_DATE]
        .toLowerCase();
    this.renderer_.renderNavigationRow(row, this.simpleNavigation_, this.showWeekNum_, fullDateFormat);
    if (this.simpleNavigation_) {
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'previousMonth'), this.previousMonth);
        var previousMonthElement = goog.dom.getElementByClass(goog.getCssName(this.getBaseCssClass(), 'previousMonth'), row);
        if (previousMonthElement) {
            goog.a11y.aria.setState(previousMonthElement, goog.a11y.aria.State.HIDDEN, true);
            previousMonthElement.tabIndex = -1;
        }
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'nextMonth'), this.nextMonth);
        var nextMonthElement = goog.dom.getElementByClass(goog.getCssName(this.getBaseCssClass(), 'nextMonth'), row);
        if (nextMonthElement) {
            goog.a11y.aria.setState(nextMonthElement, goog.a11y.aria.State.HIDDEN, true);
            nextMonthElement.tabIndex = -1;
        }
        this.elMonthYear_ = goog.dom.getElementByClass(goog.getCssName(this.getBaseCssClass(), 'monthyear'), row);
    }
    else {
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'previousMonth'), this.previousMonth);
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'nextMonth'), this.nextMonth);
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'month'), this.showMonthMenu_);
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'previousYear'), this.previousYear);
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'nextYear'), this.nextYear);
        this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'year'), this.showYearMenu_);
        this.elMonth_ = goog.dom.getElementByClass(goog.getCssName(this.getBaseCssClass(), 'month'), row);
        this.elYear_ = goog.dom.getDomHelper().getElementByClass(goog.getCssName(this.getBaseCssClass(), 'year'), row);
    }
};
goog.ui.DatePicker.prototype.addPreventDefaultClickHandler_ = function (parentElement, cssName, handlerFunction) {
    var element = goog.dom.getElementByClass(cssName, parentElement);
    this.getHandler().listen(element, goog.events.EventType.CLICK, function (e) {
        e.preventDefault();
        handlerFunction.call(this, e);
    });
};
goog.ui.DatePicker.prototype.updateFooterRow_ = function () {
    if (!this.elFootRow_) {
        return;
    }
    var row = this.elFootRow_;
    goog.dom.removeChildren(row);
    this.renderer_.renderFooterRow(row, this.showWeekNum_);
    this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'today-btn'), this.selectToday);
    this.addPreventDefaultClickHandler_(row, goog.getCssName(this.getBaseCssClass(), 'none-btn'), this.selectNone);
    this.elToday_ = goog.dom.getElementByClass(goog.getCssName(this.getBaseCssClass(), 'today-btn'), row);
    this.elNone_ = goog.dom.getElementByClass(goog.getCssName(this.getBaseCssClass(), 'none-btn'), row);
    this.updateTodayAndNone_();
};
goog.ui.DatePicker.prototype.decorateInternal = function (el) {
    goog.ui.DatePicker.superClass_.decorateInternal.call(this, el);
    goog.asserts.assert(el);
    goog.dom.classlist.add(el, this.getBaseCssClass());
    var table = this.dom_.createDom(goog.dom.TagName.TABLE, { 'role': 'presentation' });
    var thead = this.dom_.createDom(goog.dom.TagName.THEAD);
    var tbody = this.dom_.createDom(goog.dom.TagName.TBODY, { 'role': 'grid' });
    var tfoot = this.dom_.createDom(goog.dom.TagName.TFOOT);
    tbody.tabIndex = 0;
    this.tableBody_ = tbody;
    this.tableFoot_ = tfoot;
    var row = this.dom_.createDom(goog.dom.TagName.TR, { 'role': 'row' });
    row.className = goog.getCssName(this.getBaseCssClass(), 'head');
    this.elNavRow_ = row;
    this.updateNavigationRow_();
    thead.appendChild(row);
    var cell;
    this.elTable_ = [];
    for (var i = 0; i < 7; i++) {
        row = this.dom_.createElement(goog.dom.TagName.TR);
        this.elTable_[i] = [];
        for (var j = 0; j < 8; j++) {
            cell = this.dom_.createElement(j == 0 || i == 0 ? 'th' : 'td');
            if ((j == 0 || i == 0) && j != i) {
                cell.className = (j == 0) ?
                    goog.getCssName(this.getBaseCssClass(), 'week') :
                    goog.getCssName(this.getBaseCssClass(), 'wday');
                goog.a11y.aria.setRole(cell, j == 0 ? 'rowheader' : 'columnheader');
            }
            else if (i !== 0 && j !== 0) {
                goog.a11y.aria.setRole(cell, 'gridcell');
                cell.setAttribute('tabindex', '-1');
            }
            row.appendChild(cell);
            this.elTable_[i][j] = cell;
        }
        tbody.appendChild(row);
    }
    row = this.dom_.createElement(goog.dom.TagName.TR);
    row.className = goog.getCssName(this.getBaseCssClass(), 'foot');
    this.elFootRow_ = row;
    this.updateFooterRow_();
    tfoot.appendChild(row);
    table.cellSpacing = '0';
    table.cellPadding = '0';
    table.appendChild(thead);
    table.appendChild(tbody);
    table.appendChild(tfoot);
    el.appendChild(table);
    this.redrawWeekdays_();
    this.updateCalendarGrid_();
    el.tabIndex = 0;
};
goog.ui.DatePicker.prototype.createDom = function () {
    goog.ui.DatePicker.superClass_.createDom.call(this);
    this.decorateInternal(this.getElement());
};
goog.ui.DatePicker.prototype.enterDocument = function () {
    goog.ui.DatePicker.superClass_.enterDocument.call(this);
    var eh = this.getHandler();
    eh.listen(this.tableBody_, goog.events.EventType.CLICK, this.handleGridClick_);
    eh.listen(this.getKeyHandlerForElement_(this.getElement()), goog.events.KeyHandler.EventType.KEY, this.handleGridKeyPress_);
};
goog.ui.DatePicker.prototype.exitDocument = function () {
    goog.ui.DatePicker.superClass_.exitDocument.call(this);
    this.destroyMenu_();
    for (var uid in this.keyHandlers_) {
        this.keyHandlers_[uid].dispose();
    }
    this.keyHandlers_ = {};
};
goog.ui.DatePicker.prototype.create = goog.ui.DatePicker.prototype.decorate;
goog.ui.DatePicker.prototype.disposeInternal = function () {
    goog.ui.DatePicker.superClass_.disposeInternal.call(this);
    this.elTable_ = null;
    this.tableBody_ = null;
    this.tableFoot_ = null;
    this.elNavRow_ = null;
    this.elFootRow_ = null;
    this.elMonth_ = null;
    this.elMonthYear_ = null;
    this.elYear_ = null;
    this.elToday_ = null;
    this.elNone_ = null;
};
goog.ui.DatePicker.prototype.handleGridClick_ = function (event) {
    if (event.target.tagName == goog.dom.TagName.TD) {
        var el, x = -2, y = -2;
        for (el = event.target; el; el = el.previousSibling, x++) {
        }
        for (el = event.target.parentNode; el; el = el.previousSibling, y++) {
        }
        var obj = this.grid_[y][x];
        if (this.isUserSelectableDate_(obj)) {
            this.setDate(obj.clone());
        }
    }
};
goog.ui.DatePicker.prototype.handleGridKeyPress_ = function (event) {
    var months, days;
    switch (event.keyCode) {
        case 33:
            event.preventDefault();
            months = -1;
            break;
        case 34:
            event.preventDefault();
            months = 1;
            break;
        case 37:
            event.preventDefault();
            days = -1;
            break;
        case 39:
            event.preventDefault();
            days = 1;
            break;
        case 38:
            event.preventDefault();
            days = -7;
            break;
        case 40:
            event.preventDefault();
            days = 7;
            break;
        case 36:
            event.preventDefault();
            this.selectToday();
        case 46:
            event.preventDefault();
            this.selectNone();
            break;
        case 13:
        case 32:
            event.preventDefault();
            this.setDate_(this.date_, true);
        default:
            return;
    }
    var date;
    if (this.date_) {
        date = this.date_.clone();
        date.add(new goog.date.Interval(0, months, days));
    }
    else {
        date = this.activeMonth_.clone();
        date.setDate(1);
    }
    if (this.isUserSelectableDate_(date)) {
        this.setDate_(date, false);
        this.selectedCell_.focus();
    }
};
goog.ui.DatePicker.prototype.showMonthMenu_ = function (event) {
    event.stopPropagation();
    var list = [];
    for (var i = 0; i < 12; i++) {
        list.push(this.symbols_.STANDALONEMONTHS[i]);
    }
    this.createMenu_(this.elMonth_, list, this.handleMonthMenuClick_, this.symbols_.STANDALONEMONTHS[this.activeMonth_.getMonth()]);
};
goog.ui.DatePicker.prototype.showYearMenu_ = function (event) {
    event.stopPropagation();
    var list = [];
    var year = this.activeMonth_.getFullYear();
    var loopDate = this.activeMonth_.clone();
    for (var i = -goog.ui.DatePicker.YEAR_MENU_RANGE_; i <= goog.ui.DatePicker.YEAR_MENU_RANGE_; i++) {
        loopDate.setFullYear(year + i);
        list.push(this.i18nDateFormatterYear_.format(loopDate));
    }
    this.createMenu_(this.elYear_, list, this.handleYearMenuClick_, this.i18nDateFormatterYear_.format(this.activeMonth_));
};
goog.ui.DatePicker.prototype.handleMonthMenuClick_ = function (target) {
    var itemIndex = Number(target.getAttribute('itemIndex'));
    this.activeMonth_.setMonth(itemIndex);
    this.updateCalendarGrid_();
    if (this.elMonth_.focus) {
        this.elMonth_.focus();
    }
};
goog.ui.DatePicker.prototype.handleYearMenuClick_ = function (target) {
    if (target.firstChild.nodeType == goog.dom.NodeType.TEXT) {
        var itemIndex = Number(target.getAttribute('itemIndex'));
        var year = this.activeMonth_.getFullYear();
        this.activeMonth_.setFullYear(year + itemIndex - goog.ui.DatePicker.YEAR_MENU_RANGE_);
        this.updateCalendarGrid_();
    }
    this.elYear_.focus();
};
goog.ui.DatePicker.prototype.createMenu_ = function (srcEl, items, method, selected) {
    this.destroyMenu_();
    var el = this.dom_.createElement(goog.dom.TagName.DIV);
    el.className = goog.getCssName(this.getBaseCssClass(), 'menu');
    this.menuSelected_ = null;
    var ul = this.dom_.createElement(goog.dom.TagName.UL);
    for (var i = 0; i < items.length; i++) {
        var li = this.dom_.createDom(goog.dom.TagName.LI, null, items[i]);
        li.setAttribute('itemIndex', i);
        if (items[i] == selected) {
            this.menuSelected_ = li;
        }
        ul.appendChild(li);
    }
    el.appendChild(ul);
    srcEl = (srcEl);
    el.style.left = srcEl.offsetLeft + srcEl.parentNode.offsetLeft + 'px';
    el.style.top = srcEl.offsetTop + 'px';
    el.style.width = srcEl.clientWidth + 'px';
    this.elMonth_.parentNode.appendChild(el);
    this.menu_ = el;
    if (!this.menuSelected_) {
        this.menuSelected_ = (ul.firstChild);
    }
    this.menuSelected_.className =
        goog.getCssName(this.getBaseCssClass(), 'menu-selected');
    this.menuCallback_ = method;
    var eh = this.getHandler();
    eh.listen(this.menu_, goog.events.EventType.CLICK, this.handleMenuClick_);
    eh.listen(this.getKeyHandlerForElement_(this.menu_), goog.events.KeyHandler.EventType.KEY, this.handleMenuKeyPress_);
    eh.listen(this.dom_.getDocument(), goog.events.EventType.CLICK, this.destroyMenu_);
    el.tabIndex = 0;
    el.focus();
};
goog.ui.DatePicker.prototype.handleMenuClick_ = function (event) {
    event.stopPropagation();
    this.destroyMenu_();
    if (this.menuCallback_) {
        this.menuCallback_((event.target));
    }
};
goog.ui.DatePicker.prototype.handleMenuKeyPress_ = function (event) {
    event.stopPropagation();
    var el;
    var menuSelected = this.menuSelected_;
    switch (event.keyCode) {
        case 35:
            event.preventDefault();
            el = menuSelected.parentNode.lastChild;
            break;
        case 36:
            event.preventDefault();
            el = menuSelected.parentNode.firstChild;
            break;
        case 38:
            event.preventDefault();
            el = menuSelected.previousSibling;
            break;
        case 40:
            event.preventDefault();
            el = menuSelected.nextSibling;
            break;
        case 13:
        case 9:
        case 0:
            event.preventDefault();
            this.destroyMenu_();
            this.menuCallback_(menuSelected);
            break;
    }
    if (el && el != menuSelected) {
        menuSelected.className = '';
        el.className = goog.getCssName(this.getBaseCssClass(), 'menu-selected');
        this.menuSelected_ = (el);
    }
};
goog.ui.DatePicker.prototype.destroyMenu_ = function () {
    if (this.menu_) {
        var eh = this.getHandler();
        eh.unlisten(this.menu_, goog.events.EventType.CLICK, this.handleMenuClick_);
        eh.unlisten(this.getKeyHandlerForElement_(this.menu_), goog.events.KeyHandler.EventType.KEY, this.handleMenuKeyPress_);
        eh.unlisten(this.dom_.getDocument(), goog.events.EventType.CLICK, this.destroyMenu_);
        goog.dom.removeNode(this.menu_);
        delete this.menu_;
    }
};
goog.ui.DatePicker.prototype.updateCalendarGrid_ = function () {
    if (!this.getElement()) {
        return;
    }
    var date = this.activeMonth_.clone();
    date.setDate(1);
    if (this.elMonthYear_) {
        goog.dom.setTextContent(this.elMonthYear_, this.i18nDateFormatterMonthYear_.format(date));
    }
    if (this.elMonth_) {
        goog.dom.setTextContent(this.elMonth_, this.symbols_.STANDALONEMONTHS[date.getMonth()]);
    }
    if (this.elYear_) {
        goog.dom.setTextContent(this.elYear_, this.i18nDateFormatterYear_.format(date));
    }
    var wday = date.getWeekday();
    var days = date.getNumberOfDaysInMonth();
    date.add(new goog.date.Interval(goog.date.Interval.MONTHS, -1));
    date.setDate(date.getNumberOfDaysInMonth() - (wday - 1));
    if (this.showFixedNumWeeks_ && !this.extraWeekAtEnd_ && days + wday < 33) {
        date.add(new goog.date.Interval(goog.date.Interval.DAYS, -7));
    }
    var dayInterval = new goog.date.Interval(goog.date.Interval.DAYS, 1);
    this.grid_ = [];
    for (var y = 0; y < 6; y++) {
        this.grid_[y] = [];
        for (var x = 0; x < 7; x++) {
            this.grid_[y][x] = date.clone();
            var year = date.getFullYear();
            date.add(dayInterval);
            if (date.getMonth() == 0 && date.getDate() == 1) {
                year++;
            }
            date.setFullYear(year);
        }
    }
    this.redrawCalendarGrid_();
};
goog.ui.DatePicker.prototype.redrawCalendarGrid_ = function () {
    if (!this.getElement()) {
        return;
    }
    var month = this.activeMonth_.getMonth();
    var today = new goog.date.Date();
    var todayYear = today.getFullYear();
    var todayMonth = today.getMonth();
    var todayDate = today.getDate();
    for (var y = 0; y < 6; y++) {
        if (this.showWeekNum_) {
            goog.dom.setTextContent(this.elTable_[y + 1][0], this.i18nDateFormatterWeek_.format(this.grid_[y][0]));
            goog.dom.classlist.set(this.elTable_[y + 1][0], goog.getCssName(this.getBaseCssClass(), 'week'));
        }
        else {
            goog.dom.setTextContent(this.elTable_[y + 1][0], '');
            goog.dom.classlist.set(this.elTable_[y + 1][0], '');
        }
        for (var x = 0; x < 7; x++) {
            var o = this.grid_[y][x];
            var el = this.elTable_[y + 1][x + 1];
            if (!el.id) {
                el.id = this.cellIdGenerator_.getNextUniqueId();
            }
            goog.asserts.assert(el, 'The table DOM element cannot be null.');
            goog.a11y.aria.setRole(el, 'gridcell');
            goog.a11y.aria.setLabel(el, this.i18nDateFormatterDayAriaLabel_.format(o));
            var classes = [goog.getCssName(this.getBaseCssClass(), 'date')];
            if (!this.isUserSelectableDate_(o)) {
                classes.push(goog.getCssName(this.getBaseCssClass(), 'unavailable-date'));
            }
            if (this.showOtherMonths_ || o.getMonth() == month) {
                if (o.getMonth() != month) {
                    classes.push(goog.getCssName(this.getBaseCssClass(), 'other-month'));
                }
                var wday = (x + this.activeMonth_.getFirstDayOfWeek() + 7) % 7;
                if (this.wdayStyles_[wday]) {
                    classes.push(this.wdayStyles_[wday]);
                }
                if (o.getDate() == todayDate && o.getMonth() == todayMonth &&
                    o.getFullYear() == todayYear) {
                    classes.push(goog.getCssName(this.getBaseCssClass(), 'today'));
                }
                if (this.date_ && o.getDate() == this.date_.getDate() &&
                    o.getMonth() == this.date_.getMonth() &&
                    o.getFullYear() == this.date_.getFullYear()) {
                    classes.push(goog.getCssName(this.getBaseCssClass(), 'selected'));
                    goog.asserts.assert(this.tableBody_, 'The table body DOM element cannot be null');
                    this.selectedCell_ = el;
                }
                if (this.decoratorFunction_) {
                    var customClass = this.decoratorFunction_(o);
                    if (customClass) {
                        classes.push(customClass);
                    }
                }
                var formattedDate = this.longDateFormat_ ?
                    this.i18nDateFormatterDay2_.format(o) :
                    this.i18nDateFormatterDay_.format(o);
                goog.dom.setTextContent(el, formattedDate);
            }
            else {
                goog.dom.setTextContent(el, '');
            }
            goog.dom.classlist.set(el, classes.join(' '));
        }
        if (y >= 4) {
            var parentEl = (this.elTable_[y + 1][0].parentElement ||
                this.elTable_[y + 1][0].parentNode);
            goog.style.setElementShown(parentEl, this.grid_[y][0].getMonth() == month || this.showFixedNumWeeks_);
        }
    }
};
goog.ui.DatePicker.prototype.fireChangeActiveMonthEvent_ = function () {
    var changeMonthEvent = new goog.ui.DatePickerEvent(goog.ui.DatePicker.Events.CHANGE_ACTIVE_MONTH, this, this.getActiveMonth());
    this.dispatchEvent(changeMonthEvent);
};
goog.ui.DatePicker.prototype.redrawWeekdays_ = function () {
    if (!this.getElement()) {
        return;
    }
    if (this.showWeekdays_) {
        for (var x = 0; x < 7; x++) {
            var el = this.elTable_[0][x + 1];
            var wday = (x + this.activeMonth_.getFirstDayOfWeek() + 7) % 7;
            goog.dom.setTextContent(el, this.wdayNames_[(wday + 1) % 7]);
        }
    }
    var parentEl = (this.elTable_[0][0].parentElement || this.elTable_[0][0].parentNode);
    goog.style.setElementShown(parentEl, this.showWeekdays_);
};
goog.ui.DatePicker.prototype.getKeyHandlerForElement_ = function (el) {
    var uid = goog.getUid(el);
    if (!(uid in this.keyHandlers_)) {
        this.keyHandlers_[uid] = new goog.events.KeyHandler(el);
    }
    return this.keyHandlers_[uid];
};
goog.ui.DatePickerEvent = function (type, target, date) {
    goog.events.Event.call(this, type, target);
    this.date = date;
};
goog.inherits(goog.ui.DatePickerEvent, goog.events.Event);
goog.provide('goog.ui.DatePickerRenderer');
goog.ui.DatePickerRenderer = function () { };
goog.ui.DatePickerRenderer.prototype.renderNavigationRow = goog.abstractMethod;
goog.ui.DatePickerRenderer.prototype.renderFooterRow = goog.abstractMethod;
goog.provide('goog.ui.DefaultDatePickerRenderer');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.ui.DatePickerRenderer');
goog.ui.DefaultDatePickerRenderer = function (baseCssClass, opt_domHelper) {
    this.baseCssClass_ = baseCssClass;
    this.dom_ = opt_domHelper || goog.dom.getDomHelper();
};
goog.ui.DefaultDatePickerRenderer.prototype.getDomHelper = function () {
    return this.dom_;
};
goog.ui.DefaultDatePickerRenderer.prototype.getBaseCssClass = function () {
    return this.baseCssClass_;
};
goog.ui.DefaultDatePickerRenderer.prototype.renderNavigationRow = function (row, simpleNavigation, showWeekNum, fullDateFormat) {
    var cell, monthCell, yearCell;
    if (simpleNavigation) {
        cell = this.getDomHelper().createElement(goog.dom.TagName.TD);
        cell.colSpan = showWeekNum ? 1 : 2;
        this.createButton_(cell, '\u00AB', goog.getCssName(this.getBaseCssClass(), 'previousMonth'));
        row.appendChild(cell);
        cell = this.getDomHelper().createElement(goog.dom.TagName.TD);
        cell.colSpan = showWeekNum ? 6 : 5;
        cell.className = goog.getCssName(this.getBaseCssClass(), 'monthyear');
        row.appendChild(cell);
        cell = this.getDomHelper().createElement(goog.dom.TagName.TD);
        this.createButton_(cell, '\u00BB', goog.getCssName(this.getBaseCssClass(), 'nextMonth'));
        row.appendChild(cell);
    }
    else {
        monthCell = this.getDomHelper().createElement(goog.dom.TagName.TD);
        monthCell.colSpan = 5;
        this.createButton_(monthCell, '\u00AB', goog.getCssName(this.getBaseCssClass(), 'previousMonth'));
        this.createButton_(monthCell, '', goog.getCssName(this.getBaseCssClass(), 'month'));
        this.createButton_(monthCell, '\u00BB', goog.getCssName(this.getBaseCssClass(), 'nextMonth'));
        yearCell = this.getDomHelper().createElement(goog.dom.TagName.TD);
        yearCell.colSpan = 3;
        this.createButton_(yearCell, '\u00AB', goog.getCssName(this.getBaseCssClass(), 'previousYear'));
        this.createButton_(yearCell, '', goog.getCssName(this.getBaseCssClass(), 'year'));
        this.createButton_(yearCell, '\u00BB', goog.getCssName(this.getBaseCssClass(), 'nextYear'));
        if (fullDateFormat.indexOf('y') < fullDateFormat.indexOf('m')) {
            row.appendChild(yearCell);
            row.appendChild(monthCell);
        }
        else {
            row.appendChild(monthCell);
            row.appendChild(yearCell);
        }
    }
};
goog.ui.DefaultDatePickerRenderer.prototype.renderFooterRow = function (row, showWeekNum) {
    var cell = this.getDomHelper().createElement(goog.dom.TagName.TD);
    cell.colSpan = showWeekNum ? 2 : 3;
    cell.className = goog.getCssName(this.getBaseCssClass(), 'today-cont');
    var MSG_DATEPICKER_TODAY_BUTTON_LABEL = goog.getMsg('Today');
    this.createButton_(cell, MSG_DATEPICKER_TODAY_BUTTON_LABEL, goog.getCssName(this.getBaseCssClass(), 'today-btn'));
    row.appendChild(cell);
    cell = this.getDomHelper().createElement(goog.dom.TagName.TD);
    cell.colSpan = showWeekNum ? 4 : 3;
    row.appendChild(cell);
    cell = this.getDomHelper().createElement(goog.dom.TagName.TD);
    cell.colSpan = 2;
    cell.className = goog.getCssName(this.getBaseCssClass(), 'none-cont');
    var MSG_DATEPICKER_NONE = goog.getMsg('None');
    this.createButton_(cell, MSG_DATEPICKER_NONE, goog.getCssName(this.getBaseCssClass(), 'none-btn'));
    row.appendChild(cell);
};
goog.ui.DefaultDatePickerRenderer.prototype.createButton_ = function (parentNode, label, opt_className) {
    var classes = [goog.getCssName(this.getBaseCssClass(), 'btn')];
    if (opt_className) {
        classes.push(opt_className);
    }
    var el = this.getDomHelper().createElement(goog.dom.TagName.BUTTON);
    el.className = classes.join(' ');
    el.appendChild(this.getDomHelper().createTextNode(label));
    parentNode.appendChild(el);
    return el;
};
goog.provide('goog.ui.MenuRenderer');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.Role');
goog.require('goog.a11y.aria.State');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.ui.ContainerRenderer');
goog.require('goog.ui.Separator');
goog.forwardDeclare('goog.ui.Menu');
goog.ui.MenuRenderer = function (opt_ariaRole) {
    goog.ui.ContainerRenderer.call(this, opt_ariaRole || goog.a11y.aria.Role.MENU);
};
goog.inherits(goog.ui.MenuRenderer, goog.ui.ContainerRenderer);
goog.addSingletonGetter(goog.ui.MenuRenderer);
goog.ui.MenuRenderer.CSS_CLASS = goog.getCssName('goog-menu');
goog.ui.MenuRenderer.prototype.canDecorate = function (element) {
    return element.tagName == goog.dom.TagName.UL ||
        goog.ui.MenuRenderer.superClass_.canDecorate.call(this, element);
};
goog.ui.MenuRenderer.prototype.getDecoratorForChild = function (element) {
    return element.tagName == goog.dom.TagName.HR ?
        new goog.ui.Separator() :
        goog.ui.MenuRenderer.superClass_.getDecoratorForChild.call(this, element);
};
goog.ui.MenuRenderer.prototype.containsElement = function (menu, element) {
    return goog.dom.contains(menu.getElement(), element);
};
goog.ui.MenuRenderer.prototype.getCssClass = function () {
    return goog.ui.MenuRenderer.CSS_CLASS;
};
goog.ui.MenuRenderer.prototype.initializeDom = function (container) {
    goog.ui.MenuRenderer.superClass_.initializeDom.call(this, container);
    var element = container.getElement();
    goog.asserts.assert(element, 'The menu DOM element cannot be null.');
    goog.a11y.aria.setState(element, goog.a11y.aria.State.HASPOPUP, 'true');
};
goog.provide('goog.ui.Menu');
goog.provide('goog.ui.Menu.EventType');
goog.require('goog.dom.TagName');
goog.require('goog.math.Coordinate');
goog.require('goog.string');
goog.require('goog.style');
goog.require('goog.ui.Component.EventType');
goog.require('goog.ui.Component.State');
goog.require('goog.ui.Container');
goog.require('goog.ui.Container.Orientation');
goog.require('goog.ui.MenuHeader');
goog.require('goog.ui.MenuItem');
goog.require('goog.ui.MenuRenderer');
goog.require('goog.ui.MenuSeparator');
goog.ui.Menu = function (opt_domHelper, opt_renderer) {
    goog.ui.Container.call(this, goog.ui.Container.Orientation.VERTICAL, opt_renderer || goog.ui.MenuRenderer.getInstance(), opt_domHelper);
    this.setFocusable(false);
};
goog.inherits(goog.ui.Menu, goog.ui.Container);
goog.tagUnsealableClass(goog.ui.Menu);
goog.ui.Menu.EventType = {
    BEFORE_SHOW: goog.ui.Component.EventType.BEFORE_SHOW,
    SHOW: goog.ui.Component.EventType.SHOW,
    BEFORE_HIDE: goog.ui.Component.EventType.HIDE,
    HIDE: goog.ui.Component.EventType.HIDE
};
goog.ui.Menu.CSS_CLASS = goog.ui.MenuRenderer.CSS_CLASS;
goog.ui.Menu.prototype.openingCoords;
goog.ui.Menu.prototype.allowAutoFocus_ = true;
goog.ui.Menu.prototype.allowHighlightDisabled_ = false;
goog.ui.Menu.prototype.getCssClass = function () {
    return this.getRenderer().getCssClass();
};
goog.ui.Menu.prototype.containsElement = function (element) {
    if (this.getRenderer().containsElement(this, element)) {
        return true;
    }
    for (var i = 0, count = this.getChildCount(); i < count; i++) {
        var child = this.getChildAt(i);
        if (typeof child.containsElement == 'function' &&
            child.containsElement(element)) {
            return true;
        }
    }
    return false;
};
goog.ui.Menu.prototype.addItem = function (item) {
    this.addChild(item, true);
};
goog.ui.Menu.prototype.addItemAt = function (item, n) {
    this.addChildAt(item, n, true);
};
goog.ui.Menu.prototype.removeItem = function (item) {
    var removedChild = this.removeChild(item, true);
    if (removedChild) {
        removedChild.dispose();
    }
};
goog.ui.Menu.prototype.removeItemAt = function (n) {
    var removedChild = this.removeChildAt(n, true);
    if (removedChild) {
        removedChild.dispose();
    }
};
goog.ui.Menu.prototype.getItemAt = function (n) {
    return (this.getChildAt(n));
};
goog.ui.Menu.prototype.getItemCount = function () {
    return this.getChildCount();
};
goog.ui.Menu.prototype.getItems = function () {
    var children = [];
    this.forEachChild(function (child) { children.push(child); });
    return children;
};
goog.ui.Menu.prototype.setPosition = function (x, opt_y) {
    var visible = this.isVisible();
    if (!visible) {
        goog.style.setElementShown(this.getElement(), true);
    }
    goog.style.setPageOffset(this.getElement(), x, opt_y);
    if (!visible) {
        goog.style.setElementShown(this.getElement(), false);
    }
};
goog.ui.Menu.prototype.getPosition = function () {
    return this.isVisible() ? goog.style.getPageOffset(this.getElement()) : null;
};
goog.ui.Menu.prototype.setAllowAutoFocus = function (allow) {
    this.allowAutoFocus_ = allow;
    if (allow) {
        this.setFocusable(true);
    }
};
goog.ui.Menu.prototype.getAllowAutoFocus = function () {
    return this.allowAutoFocus_;
};
goog.ui.Menu.prototype.setAllowHighlightDisabled = function (allow) {
    this.allowHighlightDisabled_ = allow;
};
goog.ui.Menu.prototype.getAllowHighlightDisabled = function () {
    return this.allowHighlightDisabled_;
};
goog.ui.Menu.prototype.setVisible = function (show, opt_force, opt_e) {
    var visibilityChanged = goog.ui.Menu.superClass_.setVisible.call(this, show, opt_force);
    if (visibilityChanged && show && this.isInDocument() &&
        this.allowAutoFocus_) {
        this.getKeyEventTarget().focus();
    }
    if (show && opt_e && goog.isNumber(opt_e.clientX)) {
        this.openingCoords = new goog.math.Coordinate(opt_e.clientX, opt_e.clientY);
    }
    else {
        this.openingCoords = null;
    }
    return visibilityChanged;
};
goog.ui.Menu.prototype.handleEnterItem = function (e) {
    if (this.allowAutoFocus_) {
        this.getKeyEventTarget().focus();
    }
    return goog.ui.Menu.superClass_.handleEnterItem.call(this, e);
};
goog.ui.Menu.prototype.highlightNextPrefix = function (charStr) {
    var re = new RegExp('^' + goog.string.regExpEscape(charStr), 'i');
    return this.highlightHelper(function (index, max) {
        var start = index < 0 ? 0 : index;
        var wrapped = false;
        do {
            ++index;
            if (index == max) {
                index = 0;
                wrapped = true;
            }
            var name = this.getChildAt(index).getCaption();
            if (name && name.match(re)) {
                return index;
            }
        } while (!wrapped || index != start);
        return this.getHighlightedIndex();
    }, this.getHighlightedIndex());
};
goog.ui.Menu.prototype.canHighlightItem = function (item) {
    return (this.allowHighlightDisabled_ || item.isEnabled()) &&
        item.isVisible() && item.isSupportedState(goog.ui.Component.State.HOVER);
};
goog.ui.Menu.prototype.decorateInternal = function (element) {
    this.decorateContent(element);
    goog.ui.Menu.superClass_.decorateInternal.call(this, element);
};
goog.ui.Menu.prototype.handleKeyEventInternal = function (e) {
    var handled = goog.ui.Menu.base(this, 'handleKeyEventInternal', e);
    if (!handled) {
        this.forEachChild(function (menuItem) {
            if (!handled && menuItem.getMnemonic &&
                menuItem.getMnemonic() == e.keyCode) {
                if (this.isEnabled()) {
                    this.setHighlighted(menuItem);
                }
                handled = menuItem.handleKeyEvent(e);
            }
        }, this);
    }
    return handled;
};
goog.ui.Menu.prototype.setHighlightedIndex = function (index) {
    goog.ui.Menu.base(this, 'setHighlightedIndex', index);
    var child = this.getChildAt(index);
    if (child) {
        goog.style.scrollIntoContainerView(child.getElement(), this.getElement());
    }
};
goog.ui.Menu.prototype.decorateContent = function (element) {
    var renderer = this.getRenderer();
    var contentElements = this.getDomHelper().getElementsByTagNameAndClass(goog.dom.TagName.DIV, goog.getCssName(renderer.getCssClass(), 'content'), element);
    var length = contentElements.length;
    for (var i = 0; i < length; i++) {
        renderer.decorateChildren(this, contentElements[i]);
    }
};
goog.provide('goog.ui.MenuHeader');
goog.require('goog.ui.Component');
goog.require('goog.ui.Control');
goog.require('goog.ui.MenuHeaderRenderer');
goog.require('goog.ui.registry');
goog.ui.MenuHeader = function (content, opt_domHelper, opt_renderer) {
    goog.ui.Control.call(this, content, opt_renderer || goog.ui.MenuHeaderRenderer.getInstance(), opt_domHelper);
    this.setSupportedState(goog.ui.Component.State.DISABLED, false);
    this.setSupportedState(goog.ui.Component.State.HOVER, false);
    this.setSupportedState(goog.ui.Component.State.ACTIVE, false);
    this.setSupportedState(goog.ui.Component.State.FOCUSED, false);
    this.setStateInternal(goog.ui.Component.State.DISABLED);
};
goog.inherits(goog.ui.MenuHeader, goog.ui.Control);
goog.ui.registry.setDecoratorByClassName(goog.ui.MenuHeaderRenderer.CSS_CLASS, function () {
    return new goog.ui.MenuHeader(null);
});
goog.provide('goog.ui.MenuItem');
goog.require('goog.a11y.aria.Role');
goog.require('goog.array');
goog.require('goog.dom');
goog.require('goog.dom.classlist');
goog.require('goog.math.Coordinate');
goog.require('goog.string');
goog.require('goog.ui.Component');
goog.require('goog.ui.Control');
goog.require('goog.ui.MenuItemRenderer');
goog.require('goog.ui.registry');
goog.forwardDeclare('goog.ui.Menu');
goog.ui.MenuItem = function (content, opt_model, opt_domHelper, opt_renderer) {
    goog.ui.Control.call(this, content, opt_renderer || goog.ui.MenuItemRenderer.getInstance(), opt_domHelper);
    this.setValue(opt_model);
};
goog.inherits(goog.ui.MenuItem, goog.ui.Control);
goog.tagUnsealableClass(goog.ui.MenuItem);
goog.ui.MenuItem.prototype.mnemonicKey_;
goog.ui.MenuItem.MNEMONIC_WRAPPER_CLASS_ =
    goog.getCssName('goog-menuitem-mnemonic-separator');
goog.ui.MenuItem.ACCELERATOR_CLASS = goog.getCssName('goog-menuitem-accel');
goog.ui.MenuItem.prototype.getValue = function () {
    var model = this.getModel();
    return model != null ? model : this.getCaption();
};
goog.ui.MenuItem.prototype.setValue = function (value) {
    this.setModel(value);
};
goog.ui.MenuItem.prototype.setSupportedState = function (state, support) {
    goog.ui.MenuItem.base(this, 'setSupportedState', state, support);
    switch (state) {
        case goog.ui.Component.State.SELECTED:
            this.setSelectableInternal_(support);
            break;
        case goog.ui.Component.State.CHECKED:
            this.setCheckableInternal_(support);
            break;
    }
};
goog.ui.MenuItem.prototype.setSelectable = function (selectable) {
    this.setSupportedState(goog.ui.Component.State.SELECTED, selectable);
};
goog.ui.MenuItem.prototype.setSelectableInternal_ = function (selectable) {
    if (this.isChecked() && !selectable) {
        this.setChecked(false);
    }
    var element = this.getElement();
    if (element) {
        this.getRenderer().setSelectable(this, element, selectable);
    }
};
goog.ui.MenuItem.prototype.setCheckable = function (checkable) {
    this.setSupportedState(goog.ui.Component.State.CHECKED, checkable);
};
goog.ui.MenuItem.prototype.setCheckableInternal_ = function (checkable) {
    var element = this.getElement();
    if (element) {
        this.getRenderer().setCheckable(this, element, checkable);
    }
};
goog.ui.MenuItem.prototype.getCaption = function () {
    var content = this.getContent();
    if (goog.isArray(content)) {
        var acceleratorClass = goog.ui.MenuItem.ACCELERATOR_CLASS;
        var mnemonicWrapClass = goog.ui.MenuItem.MNEMONIC_WRAPPER_CLASS_;
        var caption = goog.array
            .map(content, function (node) {
            if (goog.dom.isElement(node) &&
                (goog.dom.classlist.contains((node), acceleratorClass) ||
                    goog.dom.classlist.contains((node), mnemonicWrapClass))) {
                return '';
            }
            else {
                return goog.dom.getRawTextContent(node);
            }
        })
            .join('');
        return goog.string.collapseBreakingSpaces(caption);
    }
    return goog.ui.MenuItem.superClass_.getCaption.call(this);
};
goog.ui.MenuItem.prototype.getAccelerator = function () {
    var dom = this.getDomHelper();
    var content = this.getContent();
    if (goog.isArray(content)) {
        var acceleratorEl = goog.array.find(content, function (e) {
            return goog.dom.classlist.contains((e), goog.ui.MenuItem.ACCELERATOR_CLASS);
        });
        if (acceleratorEl) {
            return dom.getTextContent(acceleratorEl);
        }
    }
    return null;
};
goog.ui.MenuItem.prototype.handleMouseUp = function (e) {
    var parentMenu = (this.getParent());
    if (parentMenu) {
        var oldCoords = parentMenu.openingCoords;
        parentMenu.openingCoords = null;
        if (oldCoords && goog.isNumber(e.clientX)) {
            var newCoords = new goog.math.Coordinate(e.clientX, e.clientY);
            if (goog.math.Coordinate.equals(oldCoords, newCoords)) {
                return;
            }
        }
    }
    goog.ui.MenuItem.base(this, 'handleMouseUp', e);
};
goog.ui.MenuItem.prototype.handleKeyEventInternal = function (e) {
    if (e.keyCode == this.getMnemonic() && this.performActionInternal(e)) {
        return true;
    }
    else {
        return goog.ui.MenuItem.base(this, 'handleKeyEventInternal', e);
    }
};
goog.ui.MenuItem.prototype.setMnemonic = function (key) {
    this.mnemonicKey_ = key;
};
goog.ui.MenuItem.prototype.getMnemonic = function () {
    return this.mnemonicKey_;
};
goog.ui.registry.setDecoratorByClassName(goog.ui.MenuItemRenderer.CSS_CLASS, function () {
    return new goog.ui.MenuItem(null);
});
goog.ui.MenuItem.prototype.getPreferredAriaRole = function () {
    if (this.isSupportedState(goog.ui.Component.State.CHECKED)) {
        return goog.a11y.aria.Role.MENU_ITEM_CHECKBOX;
    }
    if (this.isSupportedState(goog.ui.Component.State.SELECTED)) {
        return goog.a11y.aria.Role.MENU_ITEM_RADIO;
    }
    return goog.ui.MenuItem.base(this, 'getPreferredAriaRole');
};
goog.ui.MenuItem.prototype.getParent = function () {
    return (goog.ui.Control.prototype.getParent.call(this));
};
goog.ui.MenuItem.prototype.getParentEventTarget = function () {
    return (goog.ui.Control.prototype.getParentEventTarget.call(this));
};
goog.provide('goog.ui.Separator');
goog.require('goog.a11y.aria');
goog.require('goog.asserts');
goog.require('goog.ui.Component');
goog.require('goog.ui.Control');
goog.require('goog.ui.MenuSeparatorRenderer');
goog.require('goog.ui.registry');
goog.ui.Separator = function (opt_renderer, opt_domHelper) {
    goog.ui.Control.call(this, null, opt_renderer || goog.ui.MenuSeparatorRenderer.getInstance(), opt_domHelper);
    this.setSupportedState(goog.ui.Component.State.DISABLED, false);
    this.setSupportedState(goog.ui.Component.State.HOVER, false);
    this.setSupportedState(goog.ui.Component.State.ACTIVE, false);
    this.setSupportedState(goog.ui.Component.State.FOCUSED, false);
    this.setStateInternal(goog.ui.Component.State.DISABLED);
};
goog.inherits(goog.ui.Separator, goog.ui.Control);
goog.ui.Separator.prototype.enterDocument = function () {
    goog.ui.Separator.superClass_.enterDocument.call(this);
    var element = this.getElement();
    goog.asserts.assert(element, 'The DOM element for the separator cannot be null.');
    goog.a11y.aria.setRole(element, 'separator');
};
goog.ui.registry.setDecoratorByClassName(goog.ui.MenuSeparatorRenderer.CSS_CLASS, function () {
    return new goog.ui.Separator();
});
goog.provide('goog.ui.MenuSeparator');
goog.require('goog.ui.MenuSeparatorRenderer');
goog.require('goog.ui.Separator');
goog.require('goog.ui.registry');
goog.ui.MenuSeparator = function (opt_domHelper) {
    goog.ui.Separator.call(this, goog.ui.MenuSeparatorRenderer.getInstance(), opt_domHelper);
};
goog.inherits(goog.ui.MenuSeparator, goog.ui.Separator);
goog.ui.registry.setDecoratorByClassName(goog.ui.MenuSeparatorRenderer.CSS_CLASS, function () {
    return new goog.ui.Separator();
});
goog.provide('goog.ui.PaletteRenderer');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.Role');
goog.require('goog.a11y.aria.State');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.NodeIterator');
goog.require('goog.dom.NodeType');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.iter');
goog.require('goog.style');
goog.require('goog.ui.ControlRenderer');
goog.require('goog.userAgent');
goog.forwardDeclare('goog.ui.Palette');
goog.ui.PaletteRenderer = function () {
    goog.ui.ControlRenderer.call(this);
};
goog.inherits(goog.ui.PaletteRenderer, goog.ui.ControlRenderer);
goog.addSingletonGetter(goog.ui.PaletteRenderer);
goog.ui.PaletteRenderer.cellId_ = 0;
goog.ui.PaletteRenderer.CSS_CLASS = goog.getCssName('goog-palette');
goog.ui.PaletteRenderer.prototype.createDom = function (palette) {
    var classNames = this.getClassNames(palette);
    var element = palette.getDomHelper().createDom(goog.dom.TagName.DIV, classNames, this.createGrid((palette.getContent()), palette.getSize(), palette.getDomHelper()));
    goog.a11y.aria.setRole(element, goog.a11y.aria.Role.GRID);
    return element;
};
goog.ui.PaletteRenderer.prototype.createGrid = function (items, size, dom) {
    var rows = [];
    for (var row = 0, index = 0; row < size.height; row++) {
        var cells = [];
        for (var column = 0; column < size.width; column++) {
            var item = items && items[index++];
            cells.push(this.createCell(item, dom));
        }
        rows.push(this.createRow(cells, dom));
    }
    return this.createTable(rows, dom);
};
goog.ui.PaletteRenderer.prototype.createTable = function (rows, dom) {
    var table = dom.createDom(goog.dom.TagName.TABLE, goog.getCssName(this.getCssClass(), 'table'), dom.createDom(goog.dom.TagName.TBODY, goog.getCssName(this.getCssClass(), 'body'), rows));
    table.cellSpacing = '0';
    table.cellPadding = '0';
    return table;
};
goog.ui.PaletteRenderer.prototype.createRow = function (cells, dom) {
    var row = dom.createDom(goog.dom.TagName.TR, goog.getCssName(this.getCssClass(), 'row'), cells);
    goog.a11y.aria.setRole(row, goog.a11y.aria.Role.ROW);
    return row;
};
goog.ui.PaletteRenderer.prototype.createCell = function (node, dom) {
    var cell = dom.createDom(goog.dom.TagName.TD, {
        'class': goog.getCssName(this.getCssClass(), 'cell'),
        'id': goog.getCssName(this.getCssClass(), 'cell-') +
            goog.ui.PaletteRenderer.cellId_++
    }, node);
    goog.a11y.aria.setRole(cell, goog.a11y.aria.Role.GRIDCELL);
    goog.a11y.aria.setState(cell, goog.a11y.aria.State.SELECTED, false);
    if (!goog.dom.getTextContent(cell) && !goog.a11y.aria.getLabel(cell)) {
        var ariaLabelForCell = this.findAriaLabelForCell_(cell);
        if (ariaLabelForCell) {
            goog.a11y.aria.setLabel(cell, ariaLabelForCell);
        }
    }
    return cell;
};
goog.ui.PaletteRenderer.prototype.findAriaLabelForCell_ = function (cell) {
    var iter = new goog.dom.NodeIterator(cell);
    var label = '';
    var node;
    while (!label && (node = goog.iter.nextOrValue(iter, null))) {
        if (node.nodeType == goog.dom.NodeType.ELEMENT) {
            label =
                goog.a11y.aria.getLabel((node)) || node.title;
        }
    }
    return label;
};
goog.ui.PaletteRenderer.prototype.canDecorate = function (element) {
    return false;
};
goog.ui.PaletteRenderer.prototype.decorate = function (palette, element) {
    return null;
};
goog.ui.PaletteRenderer.prototype.setContent = function (element, content) {
    var items = (content);
    if (element) {
        var tbody = goog.dom.getElementsByTagNameAndClass(goog.dom.TagName.TBODY, goog.getCssName(this.getCssClass(), 'body'), element)[0];
        if (tbody) {
            var index = 0;
            goog.array.forEach(tbody.rows, function (row) {
                goog.array.forEach(row.cells, function (cell) {
                    goog.dom.removeChildren(cell);
                    if (items) {
                        var item = items[index++];
                        if (item) {
                            goog.dom.appendChild(cell, item);
                        }
                    }
                });
            });
            if (index < items.length) {
                var cells = [];
                var dom = goog.dom.getDomHelper(element);
                var width = tbody.rows[0].cells.length;
                while (index < items.length) {
                    var item = items[index++];
                    cells.push(this.createCell(item, dom));
                    if (cells.length == width) {
                        var row = this.createRow(cells, dom);
                        goog.dom.appendChild(tbody, row);
                        cells.length = 0;
                    }
                }
                if (cells.length > 0) {
                    while (cells.length < width) {
                        cells.push(this.createCell('', dom));
                    }
                    var row = this.createRow(cells, dom);
                    goog.dom.appendChild(tbody, row);
                }
            }
        }
        goog.style.setUnselectable(element, true, goog.userAgent.GECKO);
    }
};
goog.ui.PaletteRenderer.prototype.getContainingItem = function (palette, node) {
    var root = palette.getElement();
    while (node && node.nodeType == goog.dom.NodeType.ELEMENT && node != root) {
        if (node.tagName == goog.dom.TagName.TD &&
            goog.dom.classlist.contains((node), goog.getCssName(this.getCssClass(), 'cell'))) {
            return node.firstChild;
        }
        node = node.parentNode;
    }
    return null;
};
goog.ui.PaletteRenderer.prototype.highlightCell = function (palette, node, highlight) {
    if (node) {
        var cell = this.getCellForItem(node);
        goog.asserts.assert(cell);
        goog.dom.classlist.enable(cell, goog.getCssName(this.getCssClass(), 'cell-hover'), highlight);
        if (highlight) {
            goog.a11y.aria.setState(palette.getElementStrict(), goog.a11y.aria.State.ACTIVEDESCENDANT, cell.id);
        }
        else if (cell.id ==
            goog.a11y.aria.getState(palette.getElementStrict(), goog.a11y.aria.State.ACTIVEDESCENDANT)) {
            goog.a11y.aria.removeState(palette.getElementStrict(), goog.a11y.aria.State.ACTIVEDESCENDANT);
        }
    }
};
goog.ui.PaletteRenderer.prototype.getCellForItem = function (node) {
    return (node ? node.parentNode : null);
};
goog.ui.PaletteRenderer.prototype.selectCell = function (palette, node, select) {
    if (node) {
        var cell = (node.parentNode);
        goog.dom.classlist.enable(cell, goog.getCssName(this.getCssClass(), 'cell-selected'), select);
        goog.a11y.aria.setState(cell, goog.a11y.aria.State.SELECTED, select);
    }
};
goog.ui.PaletteRenderer.prototype.getCssClass = function () {
    return goog.ui.PaletteRenderer.CSS_CLASS;
};
goog.provide('goog.ui.RangeModel');
goog.require('goog.events.EventTarget');
goog.require('goog.ui.Component');
goog.ui.RangeModel = function () {
    goog.events.EventTarget.call(this);
};
goog.inherits(goog.ui.RangeModel, goog.events.EventTarget);
goog.tagUnsealableClass(goog.ui.RangeModel);
goog.ui.RangeModel.prototype.value_ = 0;
goog.ui.RangeModel.prototype.minimum_ = 0;
goog.ui.RangeModel.prototype.maximum_ = 100;
goog.ui.RangeModel.prototype.extent_ = 0;
goog.ui.RangeModel.prototype.step_ = 1;
goog.ui.RangeModel.prototype.isChanging_ = false;
goog.ui.RangeModel.prototype.mute_ = false;
goog.ui.RangeModel.prototype.setMute = function (muteValue) {
    this.mute_ = muteValue;
};
goog.ui.RangeModel.prototype.setValue = function (value) {
    value = this.roundToStepWithMin(value);
    if (this.value_ != value) {
        if (value + this.extent_ > this.maximum_) {
            this.value_ = this.maximum_ - this.extent_;
        }
        else if (value < this.minimum_) {
            this.value_ = this.minimum_;
        }
        else {
            this.value_ = value;
        }
        if (!this.isChanging_ && !this.mute_) {
            this.dispatchEvent(goog.ui.Component.EventType.CHANGE);
        }
    }
};
goog.ui.RangeModel.prototype.getValue = function () {
    return this.roundToStepWithMin(this.value_);
};
goog.ui.RangeModel.prototype.setExtent = function (extent) {
    extent = this.roundToStepWithMin(extent);
    if (this.extent_ != extent) {
        if (extent < 0) {
            this.extent_ = 0;
        }
        else if (this.value_ + extent > this.maximum_) {
            this.extent_ = this.maximum_ - this.value_;
        }
        else {
            this.extent_ = extent;
        }
        if (!this.isChanging_ && !this.mute_) {
            this.dispatchEvent(goog.ui.Component.EventType.CHANGE);
        }
    }
};
goog.ui.RangeModel.prototype.getExtent = function () {
    return this.roundToStep(this.extent_);
};
goog.ui.RangeModel.prototype.setMinimum = function (minimum) {
    if (this.minimum_ != minimum) {
        var oldIsChanging = this.isChanging_;
        this.isChanging_ = true;
        this.minimum_ = minimum;
        if (minimum + this.extent_ > this.maximum_) {
            this.extent_ = this.maximum_ - this.minimum_;
        }
        if (minimum > this.value_) {
            this.setValue(minimum);
        }
        if (minimum > this.maximum_) {
            this.extent_ = 0;
            this.setMaximum(minimum);
            this.setValue(minimum);
        }
        this.isChanging_ = oldIsChanging;
        if (!this.isChanging_ && !this.mute_) {
            this.dispatchEvent(goog.ui.Component.EventType.CHANGE);
        }
    }
};
goog.ui.RangeModel.prototype.getMinimum = function () {
    return this.roundToStepWithMin(this.minimum_);
};
goog.ui.RangeModel.prototype.setMaximum = function (maximum) {
    maximum = this.roundToStepWithMin(maximum);
    if (this.maximum_ != maximum) {
        var oldIsChanging = this.isChanging_;
        this.isChanging_ = true;
        this.maximum_ = maximum;
        if (maximum < this.value_ + this.extent_) {
            this.setValue(maximum - this.extent_);
        }
        if (maximum < this.minimum_) {
            this.extent_ = 0;
            this.setMinimum(maximum);
            this.setValue(this.maximum_);
        }
        if (maximum < this.minimum_ + this.extent_) {
            this.extent_ = this.maximum_ - this.minimum_;
        }
        this.isChanging_ = oldIsChanging;
        if (!this.isChanging_ && !this.mute_) {
            this.dispatchEvent(goog.ui.Component.EventType.CHANGE);
        }
    }
};
goog.ui.RangeModel.prototype.getMaximum = function () {
    return this.roundToStepWithMin(this.maximum_);
};
goog.ui.RangeModel.prototype.getStep = function () {
    return this.step_;
};
goog.ui.RangeModel.prototype.setStep = function (step) {
    if (this.step_ != step) {
        this.step_ = step;
        var oldIsChanging = this.isChanging_;
        this.isChanging_ = true;
        this.setMaximum(this.getMaximum());
        this.setExtent(this.getExtent());
        this.setValue(this.getValue());
        this.isChanging_ = oldIsChanging;
        if (!this.isChanging_ && !this.mute_) {
            this.dispatchEvent(goog.ui.Component.EventType.CHANGE);
        }
    }
};
goog.ui.RangeModel.prototype.roundToStepWithMin = function (value) {
    if (this.step_ == null)
        return value;
    return this.minimum_ +
        Math.round((value - this.minimum_) / this.step_) * this.step_;
};
goog.ui.RangeModel.prototype.roundToStep = function (value) {
    if (this.step_ == null)
        return value;
    return Math.round(value / this.step_) * this.step_;
};
goog.provide('goog.ui.SelectionModel');
goog.require('goog.array');
goog.require('goog.events.EventTarget');
goog.require('goog.events.EventType');
goog.ui.SelectionModel = function (opt_items) {
    goog.events.EventTarget.call(this);
    this.items_ = [];
    this.addItems(opt_items);
};
goog.inherits(goog.ui.SelectionModel, goog.events.EventTarget);
goog.tagUnsealableClass(goog.ui.SelectionModel);
goog.ui.SelectionModel.prototype.selectedItem_ = null;
goog.ui.SelectionModel.prototype.selectionHandler_ = null;
goog.ui.SelectionModel.prototype.getSelectionHandler = function () {
    return this.selectionHandler_;
};
goog.ui.SelectionModel.prototype.setSelectionHandler = function (handler) {
    this.selectionHandler_ = handler;
};
goog.ui.SelectionModel.prototype.getItemCount = function () {
    return this.items_.length;
};
goog.ui.SelectionModel.prototype.indexOfItem = function (item) {
    return item ? goog.array.indexOf(this.items_, item) : -1;
};
goog.ui.SelectionModel.prototype.getFirst = function () {
    return this.items_[0];
};
goog.ui.SelectionModel.prototype.getLast = function () {
    return this.items_[this.items_.length - 1];
};
goog.ui.SelectionModel.prototype.getItemAt = function (index) {
    return this.items_[index] || null;
};
goog.ui.SelectionModel.prototype.addItems = function (items) {
    if (items) {
        goog.array.forEach(items, function (item) { this.selectItem_(item, false); }, this);
        goog.array.extend(this.items_, items);
    }
};
goog.ui.SelectionModel.prototype.addItem = function (item) {
    this.addItemAt(item, this.getItemCount());
};
goog.ui.SelectionModel.prototype.addItemAt = function (item, index) {
    if (item) {
        this.selectItem_(item, false);
        goog.array.insertAt(this.items_, item, index);
    }
};
goog.ui.SelectionModel.prototype.removeItem = function (item) {
    if (item && goog.array.remove(this.items_, item)) {
        if (item == this.selectedItem_) {
            this.selectedItem_ = null;
            this.dispatchEvent(goog.events.EventType.SELECT);
        }
    }
};
goog.ui.SelectionModel.prototype.removeItemAt = function (index) {
    this.removeItem(this.getItemAt(index));
};
goog.ui.SelectionModel.prototype.getSelectedItem = function () {
    return this.selectedItem_;
};
goog.ui.SelectionModel.prototype.getItems = function () {
    return goog.array.clone(this.items_);
};
goog.ui.SelectionModel.prototype.setSelectedItem = function (item) {
    if (item != this.selectedItem_) {
        this.selectItem_(this.selectedItem_, false);
        this.selectedItem_ = item;
        this.selectItem_(item, true);
    }
    this.dispatchEvent(goog.events.EventType.SELECT);
};
goog.ui.SelectionModel.prototype.getSelectedIndex = function () {
    return this.indexOfItem(this.selectedItem_);
};
goog.ui.SelectionModel.prototype.setSelectedIndex = function (index) {
    this.setSelectedItem(this.getItemAt(index));
};
goog.ui.SelectionModel.prototype.clear = function () {
    goog.array.clear(this.items_);
    this.selectedItem_ = null;
};
goog.ui.SelectionModel.prototype.disposeInternal = function () {
    goog.ui.SelectionModel.superClass_.disposeInternal.call(this);
    delete this.items_;
    this.selectedItem_ = null;
};
goog.ui.SelectionModel.prototype.selectItem_ = function (item, select) {
    if (item) {
        if (typeof this.selectionHandler_ == 'function') {
            this.selectionHandler_(item, select);
        }
        else if (typeof item.setSelected == 'function') {
            item.setSelected(select);
        }
    }
};
goog.provide('goog.ui.SliderBase');
goog.provide('goog.ui.SliderBase.AnimationFactory');
goog.provide('goog.ui.SliderBase.Orientation');
goog.require('goog.Timer');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.Role');
goog.require('goog.a11y.aria.State');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.dom.classlist');
goog.require('goog.events');
goog.require('goog.events.EventType');
goog.require('goog.events.KeyCodes');
goog.require('goog.events.KeyHandler');
goog.require('goog.events.MouseWheelHandler');
goog.require('goog.functions');
goog.require('goog.fx.AnimationParallelQueue');
goog.require('goog.fx.Dragger');
goog.require('goog.fx.Transition');
goog.require('goog.fx.dom.ResizeHeight');
goog.require('goog.fx.dom.ResizeWidth');
goog.require('goog.fx.dom.Slide');
goog.require('goog.math');
goog.require('goog.math.Coordinate');
goog.require('goog.style');
goog.require('goog.style.bidi');
goog.require('goog.ui.Component');
goog.require('goog.ui.RangeModel');
goog.ui.SliderBase = function (opt_domHelper, opt_labelFn) {
    goog.ui.Component.call(this, opt_domHelper);
    this.additionalAnimations_ = null;
    this.rangeModel = new goog.ui.RangeModel();
    this.labelFn_ = opt_labelFn || goog.functions.NULL;
    goog.events.listen(this.rangeModel, goog.ui.Component.EventType.CHANGE, this.handleRangeModelChange, false, this);
};
goog.inherits(goog.ui.SliderBase, goog.ui.Component);
goog.tagUnsealableClass(goog.ui.SliderBase);
goog.ui.SliderBase.EventType = {
    DRAG_VALUE_START: goog.events.getUniqueId('dragvaluestart'),
    DRAG_VALUE_END: goog.events.getUniqueId('dragvalueend'),
    DRAG_EXTENT_START: goog.events.getUniqueId('dragextentstart'),
    DRAG_EXTENT_END: goog.events.getUniqueId('dragextentend'),
    DRAG_START: goog.events.getUniqueId('dragstart'),
    DRAG_END: goog.events.getUniqueId('dragend'),
    ANIMATION_END: goog.events.getUniqueId('animationend')
};
goog.ui.SliderBase.Orientation = {
    VERTICAL: 'vertical',
    HORIZONTAL: 'horizontal'
};
goog.ui.SliderBase.prototype.orientation_ =
    goog.ui.SliderBase.Orientation.HORIZONTAL;
goog.ui.SliderBase.prototype.currentAnimation_;
goog.ui.SliderBase.prototype.incTimer_;
goog.ui.SliderBase.prototype.incrementing_;
goog.ui.SliderBase.prototype.lastMousePosition_;
goog.ui.SliderBase.MOUSE_DOWN_INCREMENT_INTERVAL_ = 200;
goog.ui.SliderBase.ANIMATION_INTERVAL_ = 100;
goog.ui.SliderBase.prototype.valueThumb;
goog.ui.SliderBase.prototype.extentThumb;
goog.ui.SliderBase.prototype.rangeHighlight;
goog.ui.SliderBase.prototype.thumbToMove_;
goog.ui.SliderBase.prototype.keyHandler_;
goog.ui.SliderBase.prototype.mouseWheelHandler_;
goog.ui.SliderBase.prototype.valueDragger_;
goog.ui.SliderBase.prototype.extentDragger_;
goog.ui.SliderBase.prototype.isAnimating_ = false;
goog.ui.SliderBase.prototype.moveToPointEnabled_ = false;
goog.ui.SliderBase.prototype.blockIncrement_ = 10;
goog.ui.SliderBase.prototype.minExtent_ = 0;
goog.ui.SliderBase.prototype.isHandleMouseWheel_ = true;
goog.ui.SliderBase.prototype.mouseDownTime_ = 0;
goog.ui.SliderBase.prototype.MOUSE_DOWN_DELAY_ = 1000;
goog.ui.SliderBase.prototype.enabled_ = true;
goog.ui.SliderBase.prototype.flipForRtl_ = false;
goog.ui.SliderBase.prototype.enableFlipForRtl = function (flipForRtl) {
    this.flipForRtl_ = flipForRtl;
};
goog.ui.SliderBase.prototype.getCssClass = goog.abstractMethod;
goog.ui.SliderBase.prototype.createDom = function () {
    goog.ui.SliderBase.superClass_.createDom.call(this);
    var element = this.getDomHelper().createDom(goog.dom.TagName.DIV, this.getCssClass(this.orientation_));
    this.decorateInternal(element);
};
goog.ui.SliderBase.prototype.createThumbs = goog.abstractMethod;
goog.ui.SliderBase.SLIDER_DRAGGING_CSS_CLASS_ =
    goog.getCssName('goog-slider-dragging');
goog.ui.SliderBase.THUMB_DRAGGING_CSS_CLASS_ =
    goog.getCssName('goog-slider-thumb-dragging');
goog.ui.SliderBase.DISABLED_CSS_CLASS_ =
    goog.getCssName('goog-slider-disabled');
goog.ui.SliderBase.prototype.decorateInternal = function (element) {
    goog.ui.SliderBase.superClass_.decorateInternal.call(this, element);
    goog.asserts.assert(element);
    goog.dom.classlist.add(element, this.getCssClass(this.orientation_));
    this.createThumbs();
    this.setAriaRoles();
};
goog.ui.SliderBase.prototype.enterDocument = function () {
    goog.ui.SliderBase.superClass_.enterDocument.call(this);
    this.valueDragger_ = new goog.fx.Dragger(this.valueThumb);
    this.extentDragger_ = new goog.fx.Dragger(this.extentThumb);
    this.valueDragger_.enableRightPositioningForRtl(this.flipForRtl_);
    this.extentDragger_.enableRightPositioningForRtl(this.flipForRtl_);
    this.valueDragger_.defaultAction = this.extentDragger_.defaultAction =
        goog.nullFunction;
    this.keyHandler_ = new goog.events.KeyHandler(this.getElement());
    this.enableEventHandlers_(true);
    this.getElement().tabIndex = 0;
    this.updateUi_();
};
goog.ui.SliderBase.prototype.enableEventHandlers_ = function (enable) {
    if (enable) {
        this.getHandler()
            .listen(this.valueDragger_, goog.fx.Dragger.EventType.BEFOREDRAG, this.handleBeforeDrag_)
            .listen(this.extentDragger_, goog.fx.Dragger.EventType.BEFOREDRAG, this.handleBeforeDrag_)
            .listen(this.valueDragger_, [goog.fx.Dragger.EventType.START, goog.fx.Dragger.EventType.END], this.handleThumbDragStartEnd_)
            .listen(this.extentDragger_, [goog.fx.Dragger.EventType.START, goog.fx.Dragger.EventType.END], this.handleThumbDragStartEnd_)
            .listen(this.keyHandler_, goog.events.KeyHandler.EventType.KEY, this.handleKeyDown_)
            .listen(this.getElement(), goog.events.EventType.CLICK, this.handleMouseDownAndClick_)
            .listen(this.getElement(), goog.events.EventType.MOUSEDOWN, this.handleMouseDownAndClick_);
        if (this.isHandleMouseWheel()) {
            this.enableMouseWheelHandling_(true);
        }
    }
    else {
        this.getHandler()
            .unlisten(this.valueDragger_, goog.fx.Dragger.EventType.BEFOREDRAG, this.handleBeforeDrag_)
            .unlisten(this.extentDragger_, goog.fx.Dragger.EventType.BEFOREDRAG, this.handleBeforeDrag_)
            .unlisten(this.valueDragger_, [goog.fx.Dragger.EventType.START, goog.fx.Dragger.EventType.END], this.handleThumbDragStartEnd_)
            .unlisten(this.extentDragger_, [goog.fx.Dragger.EventType.START, goog.fx.Dragger.EventType.END], this.handleThumbDragStartEnd_)
            .unlisten(this.keyHandler_, goog.events.KeyHandler.EventType.KEY, this.handleKeyDown_)
            .unlisten(this.getElement(), goog.events.EventType.CLICK, this.handleMouseDownAndClick_)
            .unlisten(this.getElement(), goog.events.EventType.MOUSEDOWN, this.handleMouseDownAndClick_);
        if (this.isHandleMouseWheel()) {
            this.enableMouseWheelHandling_(false);
        }
    }
};
goog.ui.SliderBase.prototype.exitDocument = function () {
    goog.ui.SliderBase.base(this, 'exitDocument');
    goog.disposeAll(this.valueDragger_, this.extentDragger_, this.keyHandler_, this.mouseWheelHandler_);
};
goog.ui.SliderBase.prototype.handleBeforeDrag_ = function (e) {
    var thumbToDrag = e.dragger == this.valueDragger_ ? this.valueThumb : this.extentThumb;
    var value;
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        var availHeight = this.getElement().clientHeight - thumbToDrag.offsetHeight;
        value = (availHeight - e.top) / availHeight *
            (this.getMaximum() - this.getMinimum()) +
            this.getMinimum();
    }
    else {
        var availWidth = this.getElement().clientWidth - thumbToDrag.offsetWidth;
        value = (e.left / availWidth) * (this.getMaximum() - this.getMinimum()) +
            this.getMinimum();
    }
    if (e.dragger == this.valueDragger_) {
        value = Math.min(Math.max(value, this.getMinimum()), this.getValue() + this.getExtent());
    }
    else {
        value = Math.min(Math.max(value, this.getValue()), this.getMaximum());
    }
    this.setThumbPosition_(thumbToDrag, value);
};
goog.ui.SliderBase.prototype.handleThumbDragStartEnd_ = function (e) {
    var isDragStart = e.type == goog.fx.Dragger.EventType.START;
    goog.dom.classlist.enable(goog.asserts.assertElement(this.getElement()), goog.ui.SliderBase.SLIDER_DRAGGING_CSS_CLASS_, isDragStart);
    goog.dom.classlist.enable(goog.asserts.assertElement(e.target.handle), goog.ui.SliderBase.THUMB_DRAGGING_CSS_CLASS_, isDragStart);
    var isValueDragger = e.dragger == this.valueDragger_;
    if (isDragStart) {
        this.dispatchEvent(goog.ui.SliderBase.EventType.DRAG_START);
        this.dispatchEvent(isValueDragger ? goog.ui.SliderBase.EventType.DRAG_VALUE_START :
            goog.ui.SliderBase.EventType.DRAG_EXTENT_START);
    }
    else {
        this.dispatchEvent(goog.ui.SliderBase.EventType.DRAG_END);
        this.dispatchEvent(isValueDragger ? goog.ui.SliderBase.EventType.DRAG_VALUE_END :
            goog.ui.SliderBase.EventType.DRAG_EXTENT_END);
    }
};
goog.ui.SliderBase.prototype.handleKeyDown_ = function (e) {
    var handled = true;
    switch (e.keyCode) {
        case goog.events.KeyCodes.HOME:
            this.animatedSetValue(this.getMinimum());
            break;
        case goog.events.KeyCodes.END:
            this.animatedSetValue(this.getMaximum());
            break;
        case goog.events.KeyCodes.PAGE_UP:
            this.moveThumbs(this.getBlockIncrement());
            break;
        case goog.events.KeyCodes.PAGE_DOWN:
            this.moveThumbs(-this.getBlockIncrement());
            break;
        case goog.events.KeyCodes.LEFT:
            var sign = this.flipForRtl_ && this.isRightToLeft() ? 1 : -1;
            this.moveThumbs(e.shiftKey ? sign * this.getBlockIncrement() :
                sign * this.getUnitIncrement());
            break;
        case goog.events.KeyCodes.DOWN:
            this.moveThumbs(e.shiftKey ? -this.getBlockIncrement() : -this.getUnitIncrement());
            break;
        case goog.events.KeyCodes.RIGHT:
            var sign = this.flipForRtl_ && this.isRightToLeft() ? -1 : 1;
            this.moveThumbs(e.shiftKey ? sign * this.getBlockIncrement() :
                sign * this.getUnitIncrement());
            break;
        case goog.events.KeyCodes.UP:
            this.moveThumbs(e.shiftKey ? this.getBlockIncrement() : this.getUnitIncrement());
            break;
        default:
            handled = false;
    }
    if (handled) {
        e.preventDefault();
    }
};
goog.ui.SliderBase.prototype.handleMouseDownAndClick_ = function (e) {
    if (this.getElement().focus) {
        this.getElement().focus();
    }
    var target = (e.target);
    if (!goog.dom.contains(this.valueThumb, target) &&
        !goog.dom.contains(this.extentThumb, target)) {
        var isClick = e.type == goog.events.EventType.CLICK;
        if (isClick && goog.now() < this.mouseDownTime_ + this.MOUSE_DOWN_DELAY_) {
            return;
        }
        if (!isClick) {
            this.mouseDownTime_ = goog.now();
        }
        if (this.moveToPointEnabled_) {
            this.animatedSetValue(this.getValueFromMousePosition(e));
        }
        else {
            this.startBlockIncrementing_(e);
        }
    }
};
goog.ui.SliderBase.prototype.handleMouseWheel_ = function (e) {
    var direction = e.detail > 0 ? -1 : 1;
    this.moveThumbs(direction * this.getUnitIncrement());
    e.preventDefault();
};
goog.ui.SliderBase.prototype.startBlockIncrementing_ = function (e) {
    this.storeMousePos_(e);
    this.thumbToMove_ = this.getClosestThumb_(this.getValueFromMousePosition(e));
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        this.incrementing_ = this.lastMousePosition_ < this.thumbToMove_.offsetTop;
    }
    else {
        this.incrementing_ = this.lastMousePosition_ >
            this.getOffsetStart_(this.thumbToMove_) + this.thumbToMove_.offsetWidth;
    }
    var doc = goog.dom.getOwnerDocument(this.getElement());
    this.getHandler()
        .listen(doc, goog.events.EventType.MOUSEUP, this.stopBlockIncrementing_, true)
        .listen(this.getElement(), goog.events.EventType.MOUSEMOVE, this.storeMousePos_);
    if (!this.incTimer_) {
        this.incTimer_ =
            new goog.Timer(goog.ui.SliderBase.MOUSE_DOWN_INCREMENT_INTERVAL_);
        this.getHandler().listen(this.incTimer_, goog.Timer.TICK, this.handleTimerTick_);
    }
    this.handleTimerTick_();
    this.incTimer_.start();
};
goog.ui.SliderBase.prototype.handleTimerTick_ = function () {
    var value;
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        var mouseY = this.lastMousePosition_;
        var thumbY = this.thumbToMove_.offsetTop;
        if (this.incrementing_) {
            if (mouseY < thumbY) {
                value = this.getThumbPosition_(this.thumbToMove_) +
                    this.getBlockIncrement();
            }
        }
        else {
            var thumbH = this.thumbToMove_.offsetHeight;
            if (mouseY > thumbY + thumbH) {
                value = this.getThumbPosition_(this.thumbToMove_) -
                    this.getBlockIncrement();
            }
        }
    }
    else {
        var mouseX = this.lastMousePosition_;
        var thumbX = this.getOffsetStart_(this.thumbToMove_);
        if (this.incrementing_) {
            var thumbW = this.thumbToMove_.offsetWidth;
            if (mouseX > thumbX + thumbW) {
                value = this.getThumbPosition_(this.thumbToMove_) +
                    this.getBlockIncrement();
            }
        }
        else {
            if (mouseX < thumbX) {
                value = this.getThumbPosition_(this.thumbToMove_) -
                    this.getBlockIncrement();
            }
        }
    }
    if (goog.isDef(value)) {
        this.setThumbPosition_(this.thumbToMove_, value);
    }
};
goog.ui.SliderBase.prototype.stopBlockIncrementing_ = function () {
    if (this.incTimer_) {
        this.incTimer_.stop();
    }
    var doc = goog.dom.getOwnerDocument(this.getElement());
    this.getHandler()
        .unlisten(doc, goog.events.EventType.MOUSEUP, this.stopBlockIncrementing_, true)
        .unlisten(this.getElement(), goog.events.EventType.MOUSEMOVE, this.storeMousePos_);
};
goog.ui.SliderBase.prototype.getRelativeMousePos_ = function (e) {
    var coord = goog.style.getRelativePosition(e, this.getElement());
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        return coord.y;
    }
    else {
        if (this.flipForRtl_ && this.isRightToLeft()) {
            return this.getElement().clientWidth - coord.x;
        }
        else {
            return coord.x;
        }
    }
};
goog.ui.SliderBase.prototype.storeMousePos_ = function (e) {
    this.lastMousePosition_ = this.getRelativeMousePos_(e);
};
goog.ui.SliderBase.prototype.getValueFromMousePosition = function (e) {
    var min = this.getMinimum();
    var max = this.getMaximum();
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        var thumbH = this.valueThumb.offsetHeight;
        var availH = this.getElement().clientHeight - thumbH;
        var y = this.getRelativeMousePos_(e) - thumbH / 2;
        return (max - min) * (availH - y) / availH + min;
    }
    else {
        var thumbW = this.valueThumb.offsetWidth;
        var availW = this.getElement().clientWidth - thumbW;
        var x = this.getRelativeMousePos_(e) - thumbW / 2;
        return (max - min) * x / availW + min;
    }
};
goog.ui.SliderBase.prototype.getThumbPosition_ = function (thumb) {
    if (thumb == this.valueThumb) {
        return this.rangeModel.getValue();
    }
    else if (thumb == this.extentThumb) {
        return this.rangeModel.getValue() + this.rangeModel.getExtent();
    }
    else {
        throw new Error('Illegal thumb element. Neither minThumb nor maxThumb');
    }
};
goog.ui.SliderBase.prototype.isDragging = function () {
    return this.valueDragger_.isDragging() || this.extentDragger_.isDragging();
};
goog.ui.SliderBase.prototype.moveThumbs = function (delta) {
    if (Math.abs(delta) < this.getStep()) {
        delta = goog.math.sign(delta) * this.getStep();
    }
    var newMinPos = this.getThumbPosition_(this.valueThumb) + delta;
    var newMaxPos = this.getThumbPosition_(this.extentThumb) + delta;
    newMinPos = goog.math.clamp(newMinPos, this.getMinimum(), this.getMaximum() - this.minExtent_);
    newMaxPos = goog.math.clamp(newMaxPos, this.getMinimum() + this.minExtent_, this.getMaximum());
    this.setValueAndExtent(newMinPos, newMaxPos - newMinPos);
};
goog.ui.SliderBase.prototype.setThumbPosition_ = function (thumb, position) {
    var roundedPosition = this.rangeModel.roundToStepWithMin(position);
    var value = thumb == this.valueThumb ? roundedPosition : this.rangeModel.getValue();
    var end = thumb == this.extentThumb ?
        roundedPosition :
        this.rangeModel.getValue() + this.rangeModel.getExtent();
    if (value >= this.getMinimum() && end >= value + this.minExtent_ &&
        this.getMaximum() >= end) {
        this.setValueAndExtent(value, end - value);
    }
};
goog.ui.SliderBase.prototype.setValueAndExtent = function (value, extent) {
    if (this.getMinimum() <= value && value <= this.getMaximum() - extent &&
        this.minExtent_ <= extent && extent <= this.getMaximum() - value) {
        if (value == this.getValue() && extent == this.getExtent()) {
            return;
        }
        this.rangeModel.setMute(true);
        this.rangeModel.setExtent(0);
        this.rangeModel.setValue(value);
        this.rangeModel.setExtent(extent);
        this.rangeModel.setMute(false);
        this.handleRangeModelChange(null);
    }
};
goog.ui.SliderBase.prototype.getMinimum = function () {
    return this.rangeModel.getMinimum();
};
goog.ui.SliderBase.prototype.setMinimum = function (min) {
    this.rangeModel.setMinimum(min);
};
goog.ui.SliderBase.prototype.getMaximum = function () {
    return this.rangeModel.getMaximum();
};
goog.ui.SliderBase.prototype.setMaximum = function (max) {
    this.rangeModel.setMaximum(max);
};
goog.ui.SliderBase.prototype.getValueThumb = function () {
    return this.valueThumb;
};
goog.ui.SliderBase.prototype.getExtentThumb = function () {
    return this.extentThumb;
};
goog.ui.SliderBase.prototype.getClosestThumb_ = function (position) {
    if (position <=
        (this.rangeModel.getValue() + this.rangeModel.getExtent() / 2)) {
        return this.valueThumb;
    }
    else {
        return this.extentThumb;
    }
};
goog.ui.SliderBase.prototype.handleRangeModelChange = function (e) {
    this.updateUi_();
    this.updateAriaStates();
    this.dispatchEvent(goog.ui.Component.EventType.CHANGE);
};
goog.ui.SliderBase.prototype.updateUi_ = function () {
    if (this.valueThumb && !this.isAnimating_) {
        var minCoord = this.getThumbCoordinateForValue(this.getThumbPosition_(this.valueThumb));
        var maxCoord = this.getThumbCoordinateForValue(this.getThumbPosition_(this.extentThumb));
        if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
            this.valueThumb.style.top = minCoord.y + 'px';
            this.extentThumb.style.top = maxCoord.y + 'px';
            if (this.rangeHighlight) {
                var highlightPositioning = this.calculateRangeHighlightPositioning_(maxCoord.y, minCoord.y, this.valueThumb.offsetHeight);
                this.rangeHighlight.style.top = highlightPositioning.offset + 'px';
                this.rangeHighlight.style.height = highlightPositioning.size + 'px';
            }
        }
        else {
            var pos = (this.flipForRtl_ && this.isRightToLeft()) ? 'right' : 'left';
            this.valueThumb.style[pos] = minCoord.x + 'px';
            this.extentThumb.style[pos] = maxCoord.x + 'px';
            if (this.rangeHighlight) {
                var highlightPositioning = this.calculateRangeHighlightPositioning_(minCoord.x, maxCoord.x, this.valueThumb.offsetWidth);
                this.rangeHighlight.style[pos] = highlightPositioning.offset + 'px';
                this.rangeHighlight.style.width = highlightPositioning.size + 'px';
            }
        }
    }
};
goog.ui.SliderBase.prototype.calculateRangeHighlightPositioning_ = function (firstThumbPos, secondThumbPos, thumbSize) {
    var highlightInset = Math.ceil(thumbSize / 2);
    var size = secondThumbPos - firstThumbPos + thumbSize - 2 * highlightInset;
    return { offset: firstThumbPos + highlightInset, size: Math.max(size, 0) };
};
goog.ui.SliderBase.prototype.getThumbCoordinateForValue = function (val) {
    var coord = new goog.math.Coordinate;
    if (this.valueThumb) {
        var min = this.getMinimum();
        var max = this.getMaximum();
        var ratio = (val == min && min == max) ? 0 : (val - min) / (max - min);
        if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
            var thumbHeight = this.valueThumb.offsetHeight;
            var h = this.getElement().clientHeight - thumbHeight;
            var bottom = Math.round(ratio * h);
            coord.x = this.getOffsetStart_(this.valueThumb);
            coord.y = h - bottom;
        }
        else {
            var w = this.getElement().clientWidth - this.valueThumb.offsetWidth;
            var left = Math.round(ratio * w);
            coord.x = left;
            coord.y = this.valueThumb.offsetTop;
        }
    }
    return coord;
};
goog.ui.SliderBase.prototype.animatedSetValue = function (v) {
    v = goog.math.clamp(v, this.getMinimum(), this.getMaximum());
    if (this.isAnimating_) {
        this.currentAnimation_.stop(true);
        this.currentAnimation_.dispose();
    }
    var animations = new goog.fx.AnimationParallelQueue();
    var end;
    var thumb = this.getClosestThumb_(v);
    var previousValue = this.getValue();
    var previousExtent = this.getExtent();
    var previousThumbValue = this.getThumbPosition_(thumb);
    var previousCoord = this.getThumbCoordinateForValue(previousThumbValue);
    var stepSize = this.getStep();
    if (Math.abs(v - previousThumbValue) < stepSize) {
        var delta = v > previousThumbValue ? stepSize : -stepSize;
        v = previousThumbValue + delta;
        v = goog.math.clamp(v, this.getMinimum(), this.getMaximum());
    }
    this.setThumbPosition_(thumb, v);
    var coord = this.getThumbCoordinateForValue(this.getThumbPosition_(thumb));
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        end = [this.getOffsetStart_(thumb), coord.y];
    }
    else {
        end = [coord.x, thumb.offsetTop];
    }
    var slide = new goog.fx.dom.Slide(thumb, [previousCoord.x, previousCoord.y], end, goog.ui.SliderBase.ANIMATION_INTERVAL_);
    slide.enableRightPositioningForRtl(this.flipForRtl_);
    animations.add(slide);
    if (this.rangeHighlight) {
        this.addRangeHighlightAnimations_(thumb, previousValue, previousExtent, coord, animations);
    }
    if (this.additionalAnimations_) {
        var additionalAnimations = this.additionalAnimations_.createAnimations(previousValue, v, goog.ui.SliderBase.ANIMATION_INTERVAL_);
        goog.array.forEach(additionalAnimations, function (animation) {
            animations.add(animation);
        });
    }
    this.currentAnimation_ = animations;
    this.getHandler().listen(animations, goog.fx.Transition.EventType.END, this.endAnimation_);
    this.isAnimating_ = true;
    animations.play(false);
};
goog.ui.SliderBase.prototype.isAnimating = function () {
    return this.isAnimating_;
};
goog.ui.SliderBase.prototype.setAdditionalAnimations = function (factory) {
    this.additionalAnimations_ = factory;
};
goog.ui.SliderBase.prototype.addRangeHighlightAnimations_ = function (thumb, previousValue, previousExtent, newCoord, animations) {
    var previousMinCoord = this.getThumbCoordinateForValue(previousValue);
    var previousMaxCoord = this.getThumbCoordinateForValue(previousValue + previousExtent);
    var minCoord = previousMinCoord;
    var maxCoord = previousMaxCoord;
    if (thumb == this.valueThumb) {
        minCoord = newCoord;
    }
    else {
        maxCoord = newCoord;
    }
    if (this.orientation_ == goog.ui.SliderBase.Orientation.VERTICAL) {
        var previousHighlightPositioning = this.calculateRangeHighlightPositioning_(previousMaxCoord.y, previousMinCoord.y, this.valueThumb.offsetHeight);
        var highlightPositioning = this.calculateRangeHighlightPositioning_(maxCoord.y, minCoord.y, this.valueThumb.offsetHeight);
        var slide = new goog.fx.dom.Slide(this.rangeHighlight, [
            this.getOffsetStart_(this.rangeHighlight),
            previousHighlightPositioning.offset
        ], [
            this.getOffsetStart_(this.rangeHighlight), highlightPositioning.offset
        ], goog.ui.SliderBase.ANIMATION_INTERVAL_);
        var resizeHeight = new goog.fx.dom.ResizeHeight(this.rangeHighlight, previousHighlightPositioning.size, highlightPositioning.size, goog.ui.SliderBase.ANIMATION_INTERVAL_);
        slide.enableRightPositioningForRtl(this.flipForRtl_);
        resizeHeight.enableRightPositioningForRtl(this.flipForRtl_);
        animations.add(slide);
        animations.add(resizeHeight);
    }
    else {
        var previousHighlightPositioning = this.calculateRangeHighlightPositioning_(previousMinCoord.x, previousMaxCoord.x, this.valueThumb.offsetWidth);
        var highlightPositioning = this.calculateRangeHighlightPositioning_(minCoord.x, maxCoord.x, this.valueThumb.offsetWidth);
        var slide = new goog.fx.dom.Slide(this.rangeHighlight, [previousHighlightPositioning.offset, this.rangeHighlight.offsetTop], [highlightPositioning.offset, this.rangeHighlight.offsetTop], goog.ui.SliderBase.ANIMATION_INTERVAL_);
        var resizeWidth = new goog.fx.dom.ResizeWidth(this.rangeHighlight, previousHighlightPositioning.size, highlightPositioning.size, goog.ui.SliderBase.ANIMATION_INTERVAL_);
        slide.enableRightPositioningForRtl(this.flipForRtl_);
        resizeWidth.enableRightPositioningForRtl(this.flipForRtl_);
        animations.add(slide);
        animations.add(resizeWidth);
    }
};
goog.ui.SliderBase.prototype.endAnimation_ = function (e) {
    this.isAnimating_ = false;
    this.dispatchEvent(goog.ui.SliderBase.EventType.ANIMATION_END);
};
goog.ui.SliderBase.prototype.setOrientation = function (orient) {
    if (this.orientation_ != orient) {
        var oldCss = this.getCssClass(this.orientation_);
        var newCss = this.getCssClass(orient);
        this.orientation_ = orient;
        if (this.getElement()) {
            goog.dom.classlist.swap(goog.asserts.assert(this.getElement()), oldCss, newCss);
            var pos = (this.flipForRtl_ && this.isRightToLeft()) ? 'right' : 'left';
            this.valueThumb.style[pos] = this.valueThumb.style.top = '';
            this.extentThumb.style[pos] = this.extentThumb.style.top = '';
            if (this.rangeHighlight) {
                this.rangeHighlight.style[pos] = this.rangeHighlight.style.top = '';
                this.rangeHighlight.style.width = this.rangeHighlight.style.height = '';
            }
            this.updateUi_();
        }
    }
};
goog.ui.SliderBase.prototype.getOrientation = function () {
    return this.orientation_;
};
goog.ui.SliderBase.prototype.disposeInternal = function () {
    goog.ui.SliderBase.superClass_.disposeInternal.call(this);
    if (this.incTimer_) {
        this.incTimer_.dispose();
    }
    delete this.incTimer_;
    if (this.currentAnimation_) {
        this.currentAnimation_.dispose();
    }
    delete this.currentAnimation_;
    delete this.valueThumb;
    delete this.extentThumb;
    if (this.rangeHighlight) {
        delete this.rangeHighlight;
    }
    this.rangeModel.dispose();
    delete this.rangeModel;
    if (this.keyHandler_) {
        this.keyHandler_.dispose();
        delete this.keyHandler_;
    }
    if (this.mouseWheelHandler_) {
        this.mouseWheelHandler_.dispose();
        delete this.mouseWheelHandler_;
    }
    if (this.valueDragger_) {
        this.valueDragger_.dispose();
        delete this.valueDragger_;
    }
    if (this.extentDragger_) {
        this.extentDragger_.dispose();
        delete this.extentDragger_;
    }
};
goog.ui.SliderBase.prototype.getBlockIncrement = function () {
    return this.blockIncrement_;
};
goog.ui.SliderBase.prototype.setBlockIncrement = function (value) {
    this.blockIncrement_ = value;
};
goog.ui.SliderBase.prototype.setMinExtent = function (value) {
    this.minExtent_ = value;
};
goog.ui.SliderBase.prototype.unitIncrement_ = 1;
goog.ui.SliderBase.prototype.getUnitIncrement = function () {
    return this.unitIncrement_;
};
goog.ui.SliderBase.prototype.setUnitIncrement = function (value) {
    this.unitIncrement_ = value;
};
goog.ui.SliderBase.prototype.getStep = function () {
    return this.rangeModel.getStep();
};
goog.ui.SliderBase.prototype.setStep = function (step) {
    this.rangeModel.setStep(step);
};
goog.ui.SliderBase.prototype.getMoveToPointEnabled = function () {
    return this.moveToPointEnabled_;
};
goog.ui.SliderBase.prototype.setMoveToPointEnabled = function (val) {
    this.moveToPointEnabled_ = val;
};
goog.ui.SliderBase.prototype.getValue = function () {
    return this.rangeModel.getValue();
};
goog.ui.SliderBase.prototype.setValue = function (value) {
    this.setThumbPosition_(this.valueThumb, value);
};
goog.ui.SliderBase.prototype.getExtent = function () {
    return this.rangeModel.getExtent();
};
goog.ui.SliderBase.prototype.setExtent = function (extent) {
    this.setThumbPosition_(this.extentThumb, (this.rangeModel.getValue() + extent));
};
goog.ui.SliderBase.prototype.setVisible = function (visible) {
    goog.style.setElementShown(this.getElement(), visible);
    if (visible) {
        this.updateUi_();
    }
};
goog.ui.SliderBase.prototype.setAriaRoles = function () {
    var el = this.getElement();
    goog.asserts.assert(el, 'The DOM element for the slider base cannot be null.');
    goog.a11y.aria.setRole(el, goog.a11y.aria.Role.SLIDER);
    this.updateAriaStates();
};
goog.ui.SliderBase.prototype.updateAriaStates = function () {
    var element = this.getElement();
    if (element) {
        goog.a11y.aria.setState(element, goog.a11y.aria.State.VALUEMIN, this.getMinimum());
        goog.a11y.aria.setState(element, goog.a11y.aria.State.VALUEMAX, this.getMaximum());
        goog.a11y.aria.setState(element, goog.a11y.aria.State.VALUENOW, this.getValue());
        goog.a11y.aria.setState(element, goog.a11y.aria.State.VALUETEXT, this.getTextValue() || '');
    }
};
goog.ui.SliderBase.prototype.setHandleMouseWheel = function (enable) {
    if (this.isInDocument() && enable != this.isHandleMouseWheel()) {
        this.enableMouseWheelHandling_(enable);
    }
    this.isHandleMouseWheel_ = enable;
};
goog.ui.SliderBase.prototype.isHandleMouseWheel = function () {
    return this.isHandleMouseWheel_;
};
goog.ui.SliderBase.prototype.enableMouseWheelHandling_ = function (enable) {
    if (enable) {
        if (!this.mouseWheelHandler_) {
            this.mouseWheelHandler_ =
                new goog.events.MouseWheelHandler(this.getElement());
        }
        this.getHandler().listen(this.mouseWheelHandler_, goog.events.MouseWheelHandler.EventType.MOUSEWHEEL, this.handleMouseWheel_);
    }
    else {
        this.getHandler().unlisten(this.mouseWheelHandler_, goog.events.MouseWheelHandler.EventType.MOUSEWHEEL, this.handleMouseWheel_);
    }
};
goog.ui.SliderBase.prototype.setEnabled = function (enable) {
    if (this.enabled_ == enable) {
        return;
    }
    var eventType = enable ? goog.ui.Component.EventType.ENABLE :
        goog.ui.Component.EventType.DISABLE;
    if (this.dispatchEvent(eventType)) {
        this.enabled_ = enable;
        this.enableEventHandlers_(enable);
        if (!enable) {
            this.stopBlockIncrementing_();
        }
        goog.dom.classlist.enable(goog.asserts.assert(this.getElement()), goog.ui.SliderBase.DISABLED_CSS_CLASS_, !enable);
    }
};
goog.ui.SliderBase.prototype.isEnabled = function () {
    return this.enabled_;
};
goog.ui.SliderBase.prototype.getOffsetStart_ = function (element) {
    return this.flipForRtl_ ? goog.style.bidi.getOffsetStart(element) :
        element.offsetLeft;
};
goog.ui.SliderBase.prototype.getTextValue = function () {
    return this.labelFn_(this.getValue());
};
goog.ui.SliderBase.AnimationFactory = function () { };
goog.ui.SliderBase.AnimationFactory.prototype.createAnimations;
goog.provide('goog.ui.Slider');
goog.provide('goog.ui.Slider.Orientation');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.Role');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.ui.SliderBase');
goog.ui.Slider = function (opt_domHelper, opt_labelFn) {
    goog.ui.SliderBase.call(this, opt_domHelper, opt_labelFn);
    this.rangeModel.setExtent(0);
};
goog.inherits(goog.ui.Slider, goog.ui.SliderBase);
goog.tagUnsealableClass(goog.ui.Slider);
goog.ui.Slider.Orientation = goog.ui.SliderBase.Orientation;
goog.ui.Slider.CSS_CLASS_PREFIX = goog.getCssName('goog-slider');
goog.ui.Slider.THUMB_CSS_CLASS =
    goog.getCssName(goog.ui.Slider.CSS_CLASS_PREFIX, 'thumb');
goog.ui.Slider.prototype.getCssClass = function (orient) {
    return orient == goog.ui.SliderBase.Orientation.VERTICAL ?
        goog.getCssName(goog.ui.Slider.CSS_CLASS_PREFIX, 'vertical') :
        goog.getCssName(goog.ui.Slider.CSS_CLASS_PREFIX, 'horizontal');
};
goog.ui.Slider.prototype.getThumbCssClass = function () {
    return goog.ui.Slider.THUMB_CSS_CLASS;
};
goog.ui.Slider.prototype.createThumbs = function () {
    var element = this.getElement();
    var thumb = goog.dom.getElementsByTagNameAndClass(null, this.getThumbCssClass(), element)[0];
    if (!thumb) {
        thumb = this.createThumb_();
        element.appendChild(thumb);
    }
    this.valueThumb = this.extentThumb = (thumb);
};
goog.ui.Slider.prototype.createThumb_ = function () {
    var thumb = this.getDomHelper().createDom(goog.dom.TagName.DIV, this.getThumbCssClass());
    goog.a11y.aria.setRole(thumb, goog.a11y.aria.Role.BUTTON);
    return (thumb);
};
goog.provide('goog.ui.tree.BaseNode');
goog.provide('goog.ui.tree.BaseNode.EventType');
goog.require('goog.Timer');
goog.require('goog.a11y.aria');
goog.require('goog.a11y.aria.State');
goog.require('goog.asserts');
goog.require('goog.dom.safe');
goog.require('goog.events.Event');
goog.require('goog.events.KeyCodes');
goog.require('goog.html.SafeHtml');
goog.require('goog.html.SafeStyle');
goog.require('goog.string');
goog.require('goog.string.StringBuffer');
goog.require('goog.style');
goog.require('goog.ui.Component');
goog.forwardDeclare('goog.ui.tree.TreeControl');
goog.ui.tree.BaseNode = function (content, opt_config, opt_domHelper) {
    goog.ui.Component.call(this, opt_domHelper);
    this.config_ = opt_config || goog.ui.tree.BaseNode.defaultConfig;
    this.html_ = goog.html.SafeHtml.htmlEscapePreservingNewlines(content);
    this.iconClass_;
    this.expandedIconClass_;
    this.tree;
    this.previousSibling_;
    this.nextSibling_;
    this.firstChild_;
    this.lastChild_;
    this.selected_ = false;
    this.expanded_ = false;
    this.toolTip_ = null;
    this.afterLabelHtml_ = goog.html.SafeHtml.EMPTY;
    this.isUserCollapsible_ = true;
    this.depth_ = -1;
};
goog.inherits(goog.ui.tree.BaseNode, goog.ui.Component);
goog.ui.tree.BaseNode.EventType = {
    BEFORE_EXPAND: 'beforeexpand',
    EXPAND: 'expand',
    BEFORE_COLLAPSE: 'beforecollapse',
    COLLAPSE: 'collapse'
};
goog.ui.tree.BaseNode.allNodes = {};
goog.ui.tree.BaseNode.prototype.disposeInternal = function () {
    goog.ui.tree.BaseNode.superClass_.disposeInternal.call(this);
    if (this.tree) {
        this.tree.removeNode(this);
        this.tree = null;
    }
    this.setElementInternal(null);
};
goog.ui.tree.BaseNode.prototype.initAccessibility = function () {
    var el = this.getElement();
    if (el) {
        var label = this.getLabelElement();
        if (label && !label.id) {
            label.id = this.getId() + '.label';
        }
        goog.a11y.aria.setRole(el, 'treeitem');
        goog.a11y.aria.setState(el, 'selected', false);
        goog.a11y.aria.setState(el, 'level', this.getDepth());
        if (label) {
            goog.a11y.aria.setState(el, 'labelledby', label.id);
        }
        var img = this.getIconElement();
        if (img) {
            goog.a11y.aria.setRole(img, 'presentation');
        }
        var ei = this.getExpandIconElement();
        if (ei) {
            goog.a11y.aria.setRole(ei, 'presentation');
        }
        var ce = this.getChildrenElement();
        if (ce) {
            goog.a11y.aria.setRole(ce, 'group');
            if (ce.hasChildNodes()) {
                goog.a11y.aria.setState(el, goog.a11y.aria.State.EXPANDED, false);
                var count = this.getChildCount();
                for (var i = 1; i <= count; i++) {
                    var child = this.getChildAt(i - 1).getElement();
                    goog.asserts.assert(child, 'The child element cannot be null');
                    goog.a11y.aria.setState(child, 'setsize', count);
                    goog.a11y.aria.setState(child, 'posinset', i);
                }
            }
        }
    }
};
goog.ui.tree.BaseNode.prototype.createDom = function () {
    var element = this.getDomHelper().safeHtmlToNode(this.toSafeHtml());
    this.setElementInternal((element));
};
goog.ui.tree.BaseNode.prototype.enterDocument = function () {
    goog.ui.tree.BaseNode.superClass_.enterDocument.call(this);
    goog.ui.tree.BaseNode.allNodes[this.getId()] = this;
    this.initAccessibility();
};
goog.ui.tree.BaseNode.prototype.exitDocument = function () {
    goog.ui.tree.BaseNode.superClass_.exitDocument.call(this);
    delete goog.ui.tree.BaseNode.allNodes[this.getId()];
};
goog.ui.tree.BaseNode.prototype.addChildAt = function (child, index, opt_render) {
    goog.asserts.assert(!child.getParent());
    goog.asserts.assertInstanceof(child, goog.ui.tree.BaseNode);
    var prevNode = this.getChildAt(index - 1);
    var nextNode = this.getChildAt(index);
    goog.ui.tree.BaseNode.superClass_.addChildAt.call(this, child, index);
    child.previousSibling_ = prevNode;
    child.nextSibling_ = nextNode;
    if (prevNode) {
        prevNode.nextSibling_ = child;
    }
    else {
        this.firstChild_ = child;
    }
    if (nextNode) {
        nextNode.previousSibling_ = child;
    }
    else {
        this.lastChild_ = child;
    }
    var tree = this.getTree();
    if (tree) {
        child.setTreeInternal(tree);
    }
    child.setDepth_(this.getDepth() + 1);
    var el = this.getElement();
    if (el) {
        this.updateExpandIcon();
        goog.a11y.aria.setState(el, goog.a11y.aria.State.EXPANDED, this.getExpanded());
        if (this.getExpanded()) {
            var childrenEl = this.getChildrenElement();
            if (!child.getElement()) {
                child.createDom();
            }
            var childElement = child.getElement();
            var nextElement = nextNode && nextNode.getElement();
            childrenEl.insertBefore(childElement, nextElement);
            if (this.isInDocument()) {
                child.enterDocument();
            }
            if (!nextNode) {
                if (prevNode) {
                    prevNode.updateExpandIcon();
                }
                else {
                    goog.style.setElementShown(childrenEl, true);
                    this.setExpanded(this.getExpanded());
                }
            }
        }
    }
};
goog.ui.tree.BaseNode.prototype.add = function (child, opt_before) {
    goog.asserts.assert(!opt_before || opt_before.getParent() == this, 'Can only add nodes before siblings');
    if (child.getParent()) {
        child.getParent().removeChild(child);
    }
    this.addChildAt(child, opt_before ? this.indexOfChild(opt_before) : this.getChildCount());
    return child;
};
goog.ui.tree.BaseNode.prototype.removeChild = function (childNode, opt_unrender) {
    var child = (childNode);
    var tree = this.getTree();
    var selectedNode = tree ? tree.getSelectedItem() : null;
    if (selectedNode == child || child.contains(selectedNode)) {
        if (tree.hasFocus()) {
            this.select();
            goog.Timer.callOnce(this.onTimeoutSelect_, 10, this);
        }
        else {
            this.select();
        }
    }
    goog.ui.tree.BaseNode.superClass_.removeChild.call(this, child);
    if (this.lastChild_ == child) {
        this.lastChild_ = child.previousSibling_;
    }
    if (this.firstChild_ == child) {
        this.firstChild_ = child.nextSibling_;
    }
    if (child.previousSibling_) {
        child.previousSibling_.nextSibling_ = child.nextSibling_;
    }
    if (child.nextSibling_) {
        child.nextSibling_.previousSibling_ = child.previousSibling_;
    }
    var wasLast = child.isLastSibling();
    child.tree = null;
    child.depth_ = -1;
    if (tree) {
        tree.removeNode(child);
        if (this.isInDocument()) {
            var childrenEl = this.getChildrenElement();
            if (child.isInDocument()) {
                var childEl = child.getElement();
                childrenEl.removeChild(childEl);
                child.exitDocument();
            }
            if (wasLast) {
                var newLast = this.getLastChild();
                if (newLast) {
                    newLast.updateExpandIcon();
                }
            }
            if (!this.hasChildren()) {
                childrenEl.style.display = 'none';
                this.updateExpandIcon();
                this.updateIcon_();
                var el = this.getElement();
                if (el) {
                    goog.a11y.aria.removeState(el, goog.a11y.aria.State.EXPANDED);
                }
            }
        }
    }
    return child;
};
goog.ui.tree.BaseNode.prototype.remove =
    goog.ui.tree.BaseNode.prototype.removeChild;
goog.ui.tree.BaseNode.prototype.onTimeoutSelect_ = function () {
    this.select();
};
goog.ui.tree.BaseNode.prototype.getTree = goog.abstractMethod;
goog.ui.tree.BaseNode.prototype.getDepth = function () {
    var depth = this.depth_;
    if (depth < 0) {
        depth = this.computeDepth_();
        this.setDepth_(depth);
    }
    return depth;
};
goog.ui.tree.BaseNode.prototype.computeDepth_ = function () {
    var parent = this.getParent();
    if (parent) {
        return parent.getDepth() + 1;
    }
    else {
        return 0;
    }
};
goog.ui.tree.BaseNode.prototype.setDepth_ = function (depth) {
    if (depth != this.depth_) {
        this.depth_ = depth;
        var row = this.getRowElement();
        if (row) {
            var indent = this.getPixelIndent_() + 'px';
            if (this.isRightToLeft()) {
                row.style.paddingRight = indent;
            }
            else {
                row.style.paddingLeft = indent;
            }
        }
        this.forEachChild(function (child) { child.setDepth_(depth + 1); });
    }
};
goog.ui.tree.BaseNode.prototype.contains = function (node) {
    var current = node;
    while (current) {
        if (current == this) {
            return true;
        }
        current = current.getParent();
    }
    return false;
};
goog.ui.tree.BaseNode.EMPTY_CHILDREN_ = [];
goog.ui.tree.BaseNode.prototype.getChildAt;
goog.ui.tree.BaseNode.prototype.getChildren = function () {
    var children = [];
    this.forEachChild(function (child) { children.push(child); });
    return children;
};
goog.ui.tree.BaseNode.prototype.getFirstChild = function () {
    return this.getChildAt(0);
};
goog.ui.tree.BaseNode.prototype.getLastChild = function () {
    return this.getChildAt(this.getChildCount() - 1);
};
goog.ui.tree.BaseNode.prototype.getPreviousSibling = function () {
    return this.previousSibling_;
};
goog.ui.tree.BaseNode.prototype.getNextSibling = function () {
    return this.nextSibling_;
};
goog.ui.tree.BaseNode.prototype.isLastSibling = function () {
    return !this.nextSibling_;
};
goog.ui.tree.BaseNode.prototype.isSelected = function () {
    return this.selected_;
};
goog.ui.tree.BaseNode.prototype.select = function () {
    var tree = this.getTree();
    if (tree) {
        tree.setSelectedItem(this);
    }
};
goog.ui.tree.BaseNode.prototype.deselect = goog.nullFunction;
goog.ui.tree.BaseNode.prototype.setSelectedInternal = function (selected) {
    if (this.selected_ == selected) {
        return;
    }
    this.selected_ = selected;
    this.updateRow();
    var el = this.getElement();
    if (el) {
        goog.a11y.aria.setState(el, 'selected', selected);
        if (selected) {
            var treeElement = this.getTree().getElement();
            goog.asserts.assert(treeElement, 'The DOM element for the tree cannot be null');
            goog.a11y.aria.setState(treeElement, 'activedescendant', this.getId());
        }
    }
};
goog.ui.tree.BaseNode.prototype.getExpanded = function () {
    return this.expanded_;
};
goog.ui.tree.BaseNode.prototype.setExpandedInternal = function (expanded) {
    this.expanded_ = expanded;
};
goog.ui.tree.BaseNode.prototype.setExpanded = function (expanded) {
    var isStateChange = expanded != this.expanded_;
    if (isStateChange) {
        var prevented = !this.dispatchEvent(expanded ? goog.ui.tree.BaseNode.EventType.BEFORE_EXPAND :
            goog.ui.tree.BaseNode.EventType.BEFORE_COLLAPSE);
        if (prevented)
            return;
    }
    var ce;
    this.expanded_ = expanded;
    var tree = this.getTree();
    var el = this.getElement();
    if (this.hasChildren()) {
        if (!expanded && tree && this.contains(tree.getSelectedItem())) {
            this.select();
        }
        if (el) {
            ce = this.getChildrenElement();
            if (ce) {
                goog.style.setElementShown(ce, expanded);
                goog.a11y.aria.setState(el, goog.a11y.aria.State.EXPANDED, expanded);
                if (expanded && this.isInDocument() && !ce.hasChildNodes()) {
                    var children = [];
                    this.forEachChild(function (child) {
                        children.push(child.toSafeHtml());
                    });
                    goog.dom.safe.setInnerHtml(ce, goog.html.SafeHtml.concat(children));
                    this.forEachChild(function (child) { child.enterDocument(); });
                }
            }
            this.updateExpandIcon();
        }
    }
    else {
        ce = this.getChildrenElement();
        if (ce) {
            goog.style.setElementShown(ce, false);
        }
    }
    if (el) {
        this.updateIcon_();
    }
    if (isStateChange) {
        this.dispatchEvent(expanded ? goog.ui.tree.BaseNode.EventType.EXPAND :
            goog.ui.tree.BaseNode.EventType.COLLAPSE);
    }
};
goog.ui.tree.BaseNode.prototype.toggle = function () {
    this.setExpanded(!this.getExpanded());
};
goog.ui.tree.BaseNode.prototype.expand = function () {
    this.setExpanded(true);
};
goog.ui.tree.BaseNode.prototype.collapse = function () {
    this.setExpanded(false);
};
goog.ui.tree.BaseNode.prototype.collapseChildren = function () {
    this.forEachChild(function (child) { child.collapseAll(); });
};
goog.ui.tree.BaseNode.prototype.collapseAll = function () {
    this.collapseChildren();
    this.collapse();
};
goog.ui.tree.BaseNode.prototype.expandChildren = function () {
    this.forEachChild(function (child) { child.expandAll(); });
};
goog.ui.tree.BaseNode.prototype.expandAll = function () {
    this.expandChildren();
    this.expand();
};
goog.ui.tree.BaseNode.prototype.reveal = function () {
    var parent = this.getParent();
    if (parent) {
        parent.setExpanded(true);
        parent.reveal();
    }
};
goog.ui.tree.BaseNode.prototype.setIsUserCollapsible = function (isCollapsible) {
    this.isUserCollapsible_ = isCollapsible;
    if (!this.isUserCollapsible_) {
        this.expand();
    }
    if (this.getElement()) {
        this.updateExpandIcon();
    }
};
goog.ui.tree.BaseNode.prototype.isUserCollapsible = function () {
    return this.isUserCollapsible_;
};
goog.ui.tree.BaseNode.prototype.toSafeHtml = function () {
    var tree = this.getTree();
    var hideLines = !tree.getShowLines() ||
        tree == this.getParent() && !tree.getShowRootLines();
    var childClass = hideLines ? this.config_.cssChildrenNoLines : this.config_.cssChildren;
    var nonEmptyAndExpanded = this.getExpanded() && this.hasChildren();
    var attributes = { 'class': childClass, 'style': this.getLineStyle() };
    var content = [];
    if (nonEmptyAndExpanded) {
        this.forEachChild(function (child) { content.push(child.toSafeHtml()); });
    }
    var children = goog.html.SafeHtml.create('div', attributes, content);
    return goog.html.SafeHtml.create('div', { 'class': this.config_.cssItem, 'id': this.getId() }, [this.getRowSafeHtml(), children]);
};
goog.ui.tree.BaseNode.prototype.getPixelIndent_ = function () {
    return Math.max(0, (this.getDepth() - 1) * this.config_.indentWidth);
};
goog.ui.tree.BaseNode.prototype.getRowSafeHtml = function () {
    var style = {};
    style['padding-' + (this.isRightToLeft() ? 'right' : 'left')] =
        this.getPixelIndent_() + 'px';
    var attributes = { 'class': this.getRowClassName(), 'style': style };
    var content = [
        this.getExpandIconSafeHtml(), this.getIconSafeHtml(),
        this.getLabelSafeHtml()
    ];
    return goog.html.SafeHtml.create('div', attributes, content);
};
goog.ui.tree.BaseNode.prototype.getRowClassName = function () {
    var selectedClass;
    if (this.isSelected()) {
        selectedClass = ' ' + this.config_.cssSelectedRow;
    }
    else {
        selectedClass = '';
    }
    return this.config_.cssTreeRow + selectedClass;
};
goog.ui.tree.BaseNode.prototype.getLabelSafeHtml = function () {
    var html = goog.html.SafeHtml.create('span', { 'class': this.config_.cssItemLabel, 'title': this.getToolTip() || null }, this.getSafeHtml());
    return goog.html.SafeHtml.concat(html, goog.html.SafeHtml.create('span', {}, this.getAfterLabelSafeHtml()));
};
goog.ui.tree.BaseNode.prototype.getAfterLabelHtml = function () {
    return goog.html.SafeHtml.unwrap(this.getAfterLabelSafeHtml());
};
goog.ui.tree.BaseNode.prototype.getAfterLabelSafeHtml = function () {
    return this.afterLabelHtml_;
};
goog.ui.tree.BaseNode.prototype.setAfterLabelSafeHtml = function (html) {
    this.afterLabelHtml_ = html;
    var el = this.getAfterLabelElement();
    if (el) {
        goog.dom.safe.setInnerHtml(el, html);
    }
};
goog.ui.tree.BaseNode.prototype.getIconSafeHtml = function () {
    return goog.html.SafeHtml.create('span', {
        'style': { 'display': 'inline-block' },
        'class': this.getCalculatedIconClass()
    });
};
goog.ui.tree.BaseNode.prototype.getCalculatedIconClass = goog.abstractMethod;
goog.ui.tree.BaseNode.prototype.getExpandIconSafeHtml = function () {
    return goog.html.SafeHtml.create('span', {
        'type': 'expand',
        'style': { 'display': 'inline-block' },
        'class': this.getExpandIconClass()
    });
};
goog.ui.tree.BaseNode.prototype.getExpandIconClass = function () {
    var tree = this.getTree();
    var hideLines = !tree.getShowLines() ||
        tree == this.getParent() && !tree.getShowRootLines();
    var config = this.config_;
    var sb = new goog.string.StringBuffer();
    sb.append(config.cssTreeIcon, ' ', config.cssExpandTreeIcon, ' ');
    if (this.hasChildren()) {
        var bits = 0;
        if (tree.getShowExpandIcons() && this.isUserCollapsible_) {
            if (this.getExpanded()) {
                bits = 2;
            }
            else {
                bits = 1;
            }
        }
        if (!hideLines) {
            if (this.isLastSibling()) {
                bits += 4;
            }
            else {
                bits += 8;
            }
        }
        switch (bits) {
            case 1:
                sb.append(config.cssExpandTreeIconPlus);
                break;
            case 2:
                sb.append(config.cssExpandTreeIconMinus);
                break;
            case 4:
                sb.append(config.cssExpandTreeIconL);
                break;
            case 5:
                sb.append(config.cssExpandTreeIconLPlus);
                break;
            case 6:
                sb.append(config.cssExpandTreeIconLMinus);
                break;
            case 8:
                sb.append(config.cssExpandTreeIconT);
                break;
            case 9:
                sb.append(config.cssExpandTreeIconTPlus);
                break;
            case 10:
                sb.append(config.cssExpandTreeIconTMinus);
                break;
            default:
                sb.append(config.cssExpandTreeIconBlank);
        }
    }
    else {
        if (hideLines) {
            sb.append(config.cssExpandTreeIconBlank);
        }
        else if (this.isLastSibling()) {
            sb.append(config.cssExpandTreeIconL);
        }
        else {
            sb.append(config.cssExpandTreeIconT);
        }
    }
    return sb.toString();
};
goog.ui.tree.BaseNode.prototype.getLineStyle = function () {
    var nonEmptyAndExpanded = this.getExpanded() && this.hasChildren();
    return goog.html.SafeStyle.create({
        'background-position': this.getBackgroundPosition(),
        'display': nonEmptyAndExpanded ? null : 'none'
    });
};
goog.ui.tree.BaseNode.prototype.getBackgroundPosition = function () {
    return (this.isLastSibling() ? '-100' : (this.getDepth() - 1) *
        this.config_.indentWidth) +
        'px 0';
};
goog.ui.tree.BaseNode.prototype.getElement = function () {
    var el = goog.ui.tree.BaseNode.superClass_.getElement.call(this);
    if (!el) {
        el = this.getDomHelper().getElement(this.getId());
        this.setElementInternal(el);
    }
    return el;
};
goog.ui.tree.BaseNode.prototype.getRowElement = function () {
    var el = this.getElement();
    return el ? (el.firstChild) : null;
};
goog.ui.tree.BaseNode.prototype.getExpandIconElement = function () {
    var el = this.getRowElement();
    return el ? (el.firstChild) : null;
};
goog.ui.tree.BaseNode.prototype.getIconElement = function () {
    var el = this.getRowElement();
    return el ? (el.childNodes[1]) : null;
};
goog.ui.tree.BaseNode.prototype.getLabelElement = function () {
    var el = this.getRowElement();
    return el && el.lastChild ?
        (el.lastChild.previousSibling) :
        null;
};
goog.ui.tree.BaseNode.prototype.getAfterLabelElement = function () {
    var el = this.getRowElement();
    return el ? (el.lastChild) : null;
};
goog.ui.tree.BaseNode.prototype.getChildrenElement = function () {
    var el = this.getElement();
    return el ? (el.lastChild) : null;
};
goog.ui.tree.BaseNode.prototype.setIconClass = function (s) {
    this.iconClass_ = s;
    if (this.isInDocument()) {
        this.updateIcon_();
    }
};
goog.ui.tree.BaseNode.prototype.getIconClass = function () {
    return this.iconClass_;
};
goog.ui.tree.BaseNode.prototype.setExpandedIconClass = function (s) {
    this.expandedIconClass_ = s;
    if (this.isInDocument()) {
        this.updateIcon_();
    }
};
goog.ui.tree.BaseNode.prototype.getExpandedIconClass = function () {
    return this.expandedIconClass_;
};
goog.ui.tree.BaseNode.prototype.setText = function (s) {
    this.setSafeHtml(goog.html.SafeHtml.htmlEscape(s));
};
goog.ui.tree.BaseNode.prototype.getText = function () {
    return goog.string.unescapeEntities(goog.html.SafeHtml.unwrap(this.html_));
};
goog.ui.tree.BaseNode.prototype.setSafeHtml = function (html) {
    this.html_ = html;
    var el = this.getLabelElement();
    if (el) {
        goog.dom.safe.setInnerHtml(el, html);
    }
    var tree = this.getTree();
    if (tree) {
        tree.setNode(this);
    }
};
goog.ui.tree.BaseNode.prototype.getHtml = function () {
    return goog.html.SafeHtml.unwrap(this.getSafeHtml());
};
goog.ui.tree.BaseNode.prototype.getSafeHtml = function () {
    return this.html_;
};
goog.ui.tree.BaseNode.prototype.setToolTip = function (s) {
    this.toolTip_ = s;
    var el = this.getLabelElement();
    if (el) {
        el.title = s;
    }
};
goog.ui.tree.BaseNode.prototype.getToolTip = function () {
    return this.toolTip_;
};
goog.ui.tree.BaseNode.prototype.updateRow = function () {
    var rowEl = this.getRowElement();
    if (rowEl) {
        rowEl.className = this.getRowClassName();
    }
};
goog.ui.tree.BaseNode.prototype.updateExpandIcon = function () {
    var img = this.getExpandIconElement();
    if (img) {
        img.className = this.getExpandIconClass();
    }
    var cel = this.getChildrenElement();
    if (cel) {
        cel.style.backgroundPosition = this.getBackgroundPosition();
    }
};
goog.ui.tree.BaseNode.prototype.updateIcon_ = function () {
    this.getIconElement().className = this.getCalculatedIconClass();
};
goog.ui.tree.BaseNode.prototype.onMouseDown = function (e) {
    var el = e.target;
    var type = el.getAttribute('type');
    if (type == 'expand' && this.hasChildren()) {
        if (this.isUserCollapsible_) {
            this.toggle();
        }
        return;
    }
    this.select();
    this.updateRow();
};
goog.ui.tree.BaseNode.prototype.onClick_ = goog.events.Event.preventDefault;
goog.ui.tree.BaseNode.prototype.onDoubleClick_ = function (e) {
    var el = e.target;
    var type = el.getAttribute('type');
    if (type == 'expand' && this.hasChildren()) {
        return;
    }
    if (this.isUserCollapsible_) {
        this.toggle();
    }
};
goog.ui.tree.BaseNode.prototype.onKeyDown = function (e) {
    var handled = true;
    switch (e.keyCode) {
        case goog.events.KeyCodes.RIGHT:
            if (e.altKey) {
                break;
            }
            if (this.hasChildren()) {
                if (!this.getExpanded()) {
                    this.setExpanded(true);
                }
                else {
                    this.getFirstChild().select();
                }
            }
            break;
        case goog.events.KeyCodes.LEFT:
            if (e.altKey) {
                break;
            }
            if (this.hasChildren() && this.getExpanded() && this.isUserCollapsible_) {
                this.setExpanded(false);
            }
            else {
                var parent = this.getParent();
                var tree = this.getTree();
                if (parent && (tree.getShowRootNode() || parent != tree)) {
                    parent.select();
                }
            }
            break;
        case goog.events.KeyCodes.DOWN:
            var nextNode = this.getNextShownNode();
            if (nextNode) {
                nextNode.select();
            }
            break;
        case goog.events.KeyCodes.UP:
            var previousNode = this.getPreviousShownNode();
            if (previousNode) {
                previousNode.select();
            }
            break;
        default:
            handled = false;
    }
    if (handled) {
        e.preventDefault();
        var tree = this.getTree();
        if (tree) {
            tree.clearTypeAhead();
        }
    }
    return handled;
};
goog.ui.tree.BaseNode.prototype.getLastShownDescendant = function () {
    if (!this.getExpanded() || !this.hasChildren()) {
        return this;
    }
    return this.getLastChild().getLastShownDescendant();
};
goog.ui.tree.BaseNode.prototype.getNextShownNode = function () {
    if (this.hasChildren() && this.getExpanded()) {
        return this.getFirstChild();
    }
    else {
        var parent = this;
        var next;
        while (parent != this.getTree()) {
            next = parent.getNextSibling();
            if (next != null) {
                return next;
            }
            parent = parent.getParent();
        }
        return null;
    }
};
goog.ui.tree.BaseNode.prototype.getPreviousShownNode = function () {
    var ps = this.getPreviousSibling();
    if (ps != null) {
        return ps.getLastShownDescendant();
    }
    var parent = this.getParent();
    var tree = this.getTree();
    if (!tree.getShowRootNode() && parent == tree) {
        return null;
    }
    if (this == tree) {
        return null;
    }
    return (parent);
};
goog.ui.tree.BaseNode.prototype.getClientData =
    goog.ui.tree.BaseNode.prototype.getModel;
goog.ui.tree.BaseNode.prototype.setClientData =
    goog.ui.tree.BaseNode.prototype.setModel;
goog.ui.tree.BaseNode.prototype.getConfig = function () {
    return this.config_;
};
goog.ui.tree.BaseNode.prototype.setTreeInternal = function (tree) {
    if (this.tree != tree) {
        this.tree = tree;
        tree.setNode(this);
        this.forEachChild(function (child) { child.setTreeInternal(tree); });
    }
};
goog.ui.tree.BaseNode.defaultConfig = {
    indentWidth: 19,
    cssRoot: goog.getCssName('goog-tree-root') + ' ' +
        goog.getCssName('goog-tree-item'),
    cssHideRoot: goog.getCssName('goog-tree-hide-root'),
    cssItem: goog.getCssName('goog-tree-item'),
    cssChildren: goog.getCssName('goog-tree-children'),
    cssChildrenNoLines: goog.getCssName('goog-tree-children-nolines'),
    cssTreeRow: goog.getCssName('goog-tree-row'),
    cssItemLabel: goog.getCssName('goog-tree-item-label'),
    cssTreeIcon: goog.getCssName('goog-tree-icon'),
    cssExpandTreeIcon: goog.getCssName('goog-tree-expand-icon'),
    cssExpandTreeIconPlus: goog.getCssName('goog-tree-expand-icon-plus'),
    cssExpandTreeIconMinus: goog.getCssName('goog-tree-expand-icon-minus'),
    cssExpandTreeIconTPlus: goog.getCssName('goog-tree-expand-icon-tplus'),
    cssExpandTreeIconTMinus: goog.getCssName('goog-tree-expand-icon-tminus'),
    cssExpandTreeIconLPlus: goog.getCssName('goog-tree-expand-icon-lplus'),
    cssExpandTreeIconLMinus: goog.getCssName('goog-tree-expand-icon-lminus'),
    cssExpandTreeIconT: goog.getCssName('goog-tree-expand-icon-t'),
    cssExpandTreeIconL: goog.getCssName('goog-tree-expand-icon-l'),
    cssExpandTreeIconBlank: goog.getCssName('goog-tree-expand-icon-blank'),
    cssExpandedFolderIcon: goog.getCssName('goog-tree-expanded-folder-icon'),
    cssCollapsedFolderIcon: goog.getCssName('goog-tree-collapsed-folder-icon'),
    cssFileIcon: goog.getCssName('goog-tree-file-icon'),
    cssExpandedRootIcon: goog.getCssName('goog-tree-expanded-folder-icon'),
    cssCollapsedRootIcon: goog.getCssName('goog-tree-collapsed-folder-icon'),
    cssSelectedRow: goog.getCssName('selected')
};
goog.provide('goog.ui.tree.TreeControl');
goog.require('goog.a11y.aria');
goog.require('goog.asserts');
goog.require('goog.dom.classlist');
goog.require('goog.events.EventType');
goog.require('goog.events.FocusHandler');
goog.require('goog.events.KeyHandler');
goog.require('goog.html.SafeHtml');
goog.require('goog.log');
goog.require('goog.ui.tree.BaseNode');
goog.require('goog.ui.tree.TreeNode');
goog.require('goog.ui.tree.TypeAhead');
goog.require('goog.userAgent');
goog.ui.tree.TreeControl = function (content, opt_config, opt_domHelper) {
    goog.ui.tree.BaseNode.call(this, content, opt_config, opt_domHelper);
    this.setExpandedInternal(true);
    this.setSelectedInternal(true);
    this.selectedItem_ = this;
    this.typeAhead_ = new goog.ui.tree.TypeAhead();
    this.keyHandler_ = null;
    this.focusHandler_ = null;
    this.logger_ = goog.log.getLogger('this');
    this.focused_ = false;
    this.focusedNode_ = null;
    this.showLines_ = true;
    this.showExpandIcons_ = true;
    this.showRootNode_ = true;
    this.showRootLines_ = true;
    if (goog.userAgent.IE) {
        try {
            document.execCommand('BackgroundImageCache', false, true);
        }
        catch (e) {
            goog.log.warning(this.logger_, 'Failed to enable background image cache');
        }
    }
};
goog.inherits(goog.ui.tree.TreeControl, goog.ui.tree.BaseNode);
goog.ui.tree.TreeControl.prototype.getTree = function () {
    return this;
};
goog.ui.tree.TreeControl.prototype.getDepth = function () {
    return 0;
};
goog.ui.tree.TreeControl.prototype.reveal = function () {
};
goog.ui.tree.TreeControl.prototype.handleFocus_ = function (e) {
    this.focused_ = true;
    goog.dom.classlist.add(goog.asserts.assert(this.getElement()), goog.getCssName('focused'));
    if (this.selectedItem_) {
        this.selectedItem_.select();
    }
};
goog.ui.tree.TreeControl.prototype.handleBlur_ = function (e) {
    this.focused_ = false;
    goog.dom.classlist.remove(goog.asserts.assert(this.getElement()), goog.getCssName('focused'));
};
goog.ui.tree.TreeControl.prototype.hasFocus = function () {
    return this.focused_;
};
goog.ui.tree.TreeControl.prototype.getExpanded = function () {
    return !this.showRootNode_ ||
        goog.ui.tree.TreeControl.superClass_.getExpanded.call(this);
};
goog.ui.tree.TreeControl.prototype.setExpanded = function (expanded) {
    if (!this.showRootNode_) {
        this.setExpandedInternal(expanded);
    }
    else {
        goog.ui.tree.TreeControl.superClass_.setExpanded.call(this, expanded);
    }
};
goog.ui.tree.TreeControl.prototype.getExpandIconSafeHtml = function () {
    return goog.html.SafeHtml.EMPTY;
};
goog.ui.tree.TreeControl.prototype.getIconElement = function () {
    var el = this.getRowElement();
    return el ? (el.firstChild) : null;
};
goog.ui.tree.TreeControl.prototype.getExpandIconElement = function () {
    return null;
};
goog.ui.tree.TreeControl.prototype.updateExpandIcon = function () {
};
goog.ui.tree.TreeControl.prototype.getRowClassName = function () {
    return goog.ui.tree.TreeControl.superClass_.getRowClassName.call(this) +
        (this.showRootNode_ ? '' : ' ' + this.getConfig().cssHideRoot);
};
goog.ui.tree.TreeControl.prototype.getCalculatedIconClass = function () {
    var expanded = this.getExpanded();
    var expandedIconClass = this.getExpandedIconClass();
    if (expanded && expandedIconClass) {
        return expandedIconClass;
    }
    var iconClass = this.getIconClass();
    if (!expanded && iconClass) {
        return iconClass;
    }
    var config = this.getConfig();
    if (expanded && config.cssExpandedRootIcon) {
        return config.cssTreeIcon + ' ' + config.cssExpandedRootIcon;
    }
    else if (!expanded && config.cssCollapsedRootIcon) {
        return config.cssTreeIcon + ' ' + config.cssCollapsedRootIcon;
    }
    return '';
};
goog.ui.tree.TreeControl.prototype.setSelectedItem = function (node) {
    if (this.selectedItem_ == node) {
        return;
    }
    var hadFocus = false;
    if (this.selectedItem_) {
        hadFocus = this.selectedItem_ == this.focusedNode_;
        this.selectedItem_.setSelectedInternal(false);
    }
    this.selectedItem_ = node;
    if (node) {
        node.setSelectedInternal(true);
        if (hadFocus) {
            node.select();
        }
    }
    this.dispatchEvent(goog.events.EventType.CHANGE);
};
goog.ui.tree.TreeControl.prototype.getSelectedItem = function () {
    return this.selectedItem_;
};
goog.ui.tree.TreeControl.prototype.setShowLines = function (b) {
    if (this.showLines_ != b) {
        this.showLines_ = b;
        if (this.isInDocument()) {
            this.updateLinesAndExpandIcons_();
        }
    }
};
goog.ui.tree.TreeControl.prototype.getShowLines = function () {
    return this.showLines_;
};
goog.ui.tree.TreeControl.prototype.updateLinesAndExpandIcons_ = function () {
    var tree = this;
    var showLines = tree.getShowLines();
    var showRootLines = tree.getShowRootLines();
    function updateShowLines(node) {
        var childrenEl = node.getChildrenElement();
        if (childrenEl) {
            var hideLines = !showLines || tree == node.getParent() && !showRootLines;
            var childClass = hideLines ? node.getConfig().cssChildrenNoLines :
                node.getConfig().cssChildren;
            childrenEl.className = childClass;
            var expandIconEl = node.getExpandIconElement();
            if (expandIconEl) {
                expandIconEl.className = node.getExpandIconClass();
            }
        }
        node.forEachChild(updateShowLines);
    }
    updateShowLines(this);
};
goog.ui.tree.TreeControl.prototype.setShowRootLines = function (b) {
    if (this.showRootLines_ != b) {
        this.showRootLines_ = b;
        if (this.isInDocument()) {
            this.updateLinesAndExpandIcons_();
        }
    }
};
goog.ui.tree.TreeControl.prototype.getShowRootLines = function () {
    return this.showRootLines_;
};
goog.ui.tree.TreeControl.prototype.setShowExpandIcons = function (b) {
    if (this.showExpandIcons_ != b) {
        this.showExpandIcons_ = b;
        if (this.isInDocument()) {
            this.updateLinesAndExpandIcons_();
        }
    }
};
goog.ui.tree.TreeControl.prototype.getShowExpandIcons = function () {
    return this.showExpandIcons_;
};
goog.ui.tree.TreeControl.prototype.setShowRootNode = function (b) {
    if (this.showRootNode_ != b) {
        this.showRootNode_ = b;
        if (this.isInDocument()) {
            var el = this.getRowElement();
            if (el) {
                el.className = this.getRowClassName();
            }
        }
        if (!b && this.getSelectedItem() == this && this.getFirstChild()) {
            this.setSelectedItem(this.getFirstChild());
        }
    }
};
goog.ui.tree.TreeControl.prototype.getShowRootNode = function () {
    return this.showRootNode_;
};
goog.ui.tree.TreeControl.prototype.initAccessibility = function () {
    goog.ui.tree.TreeControl.superClass_.initAccessibility.call(this);
    var elt = this.getElement();
    goog.asserts.assert(elt, 'The DOM element for the tree cannot be null.');
    goog.a11y.aria.setRole(elt, 'tree');
    goog.a11y.aria.setState(elt, 'labelledby', this.getLabelElement().id);
};
goog.ui.tree.TreeControl.prototype.enterDocument = function () {
    goog.ui.tree.TreeControl.superClass_.enterDocument.call(this);
    var el = this.getElement();
    el.className = this.getConfig().cssRoot;
    el.setAttribute('hideFocus', 'true');
    this.attachEvents_();
    this.initAccessibility();
};
goog.ui.tree.TreeControl.prototype.exitDocument = function () {
    goog.ui.tree.TreeControl.superClass_.exitDocument.call(this);
    this.detachEvents_();
};
goog.ui.tree.TreeControl.prototype.attachEvents_ = function () {
    var el = this.getElement();
    el.tabIndex = 0;
    var kh = this.keyHandler_ = new goog.events.KeyHandler(el);
    var fh = this.focusHandler_ = new goog.events.FocusHandler(el);
    this.getHandler()
        .listen(fh, goog.events.FocusHandler.EventType.FOCUSOUT, this.handleBlur_)
        .listen(fh, goog.events.FocusHandler.EventType.FOCUSIN, this.handleFocus_)
        .listen(kh, goog.events.KeyHandler.EventType.KEY, this.handleKeyEvent)
        .listen(el, goog.events.EventType.MOUSEDOWN, this.handleMouseEvent_)
        .listen(el, goog.events.EventType.CLICK, this.handleMouseEvent_)
        .listen(el, goog.events.EventType.DBLCLICK, this.handleMouseEvent_);
};
goog.ui.tree.TreeControl.prototype.detachEvents_ = function () {
    this.keyHandler_.dispose();
    this.keyHandler_ = null;
    this.focusHandler_.dispose();
    this.focusHandler_ = null;
};
goog.ui.tree.TreeControl.prototype.handleMouseEvent_ = function (e) {
    goog.log.fine(this.logger_, 'Received event ' + e.type);
    var node = this.getNodeFromEvent_(e);
    if (node) {
        switch (e.type) {
            case goog.events.EventType.MOUSEDOWN:
                node.onMouseDown(e);
                break;
            case goog.events.EventType.CLICK:
                node.onClick_(e);
                break;
            case goog.events.EventType.DBLCLICK:
                node.onDoubleClick_(e);
                break;
        }
    }
};
goog.ui.tree.TreeControl.prototype.handleKeyEvent = function (e) {
    var handled = false;
    handled = this.typeAhead_.handleNavigation(e) ||
        (this.selectedItem_ && this.selectedItem_.onKeyDown(e)) ||
        this.typeAhead_.handleTypeAheadChar(e);
    if (handled) {
        e.preventDefault();
    }
    return handled;
};
goog.ui.tree.TreeControl.prototype.getNodeFromEvent_ = function (e) {
    var node = null;
    var target = e.target;
    while (target != null) {
        var id = target.id;
        node = goog.ui.tree.BaseNode.allNodes[id];
        if (node) {
            return node;
        }
        if (target == this.getElement()) {
            break;
        }
        target = target.parentNode;
    }
    return null;
};
goog.ui.tree.TreeControl.prototype.createNode = function (opt_content) {
    return new goog.ui.tree.TreeNode(opt_content || goog.html.SafeHtml.EMPTY, this.getConfig(), this.getDomHelper());
};
goog.ui.tree.TreeControl.prototype.setNode = function (node) {
    this.typeAhead_.setNodeInMap(node);
};
goog.ui.tree.TreeControl.prototype.removeNode = function (node) {
    this.typeAhead_.removeNodeFromMap(node);
};
goog.ui.tree.TreeControl.prototype.clearTypeAhead = function () {
    this.typeAhead_.clear();
};
goog.ui.tree.TreeControl.defaultConfig = goog.ui.tree.BaseNode.defaultConfig;
goog.provide('goog.ui.tree.TreeNode');
goog.require('goog.ui.tree.BaseNode');
goog.forwardDeclare('goog.ui.tree.TreeControl');
goog.ui.tree.TreeNode = function (content, opt_config, opt_domHelper) {
    goog.ui.tree.BaseNode.call(this, content, opt_config, opt_domHelper);
};
goog.inherits(goog.ui.tree.TreeNode, goog.ui.tree.BaseNode);
goog.ui.tree.TreeNode.prototype.getTree = function () {
    if (this.tree) {
        return this.tree;
    }
    var parent = this.getParent();
    if (parent) {
        var tree = parent.getTree();
        if (tree) {
            this.setTreeInternal(tree);
            return tree;
        }
    }
    return null;
};
goog.ui.tree.TreeNode.prototype.getCalculatedIconClass = function () {
    var expanded = this.getExpanded();
    var expandedIconClass = this.getExpandedIconClass();
    if (expanded && expandedIconClass) {
        return expandedIconClass;
    }
    var iconClass = this.getIconClass();
    if (!expanded && iconClass) {
        return iconClass;
    }
    var config = this.getConfig();
    if (this.hasChildren()) {
        if (expanded && config.cssExpandedFolderIcon) {
            return config.cssTreeIcon + ' ' + config.cssExpandedFolderIcon;
        }
        else if (!expanded && config.cssCollapsedFolderIcon) {
            return config.cssTreeIcon + ' ' + config.cssCollapsedFolderIcon;
        }
    }
    else {
        if (config.cssFileIcon) {
            return config.cssTreeIcon + ' ' + config.cssFileIcon;
        }
    }
    return '';
};
goog.provide('goog.ui.tree.TypeAhead');
goog.provide('goog.ui.tree.TypeAhead.Offset');
goog.require('goog.array');
goog.require('goog.events.KeyCodes');
goog.require('goog.string');
goog.require('goog.structs.Trie');
goog.forwardDeclare('goog.ui.tree.BaseNode');
goog.ui.tree.TypeAhead = function () {
    this.nodeMap_ = new goog.structs.Trie();
    this.buffer_ = '';
    this.matchingLabels_ = null;
    this.matchingNodes_ = null;
    this.matchingLabelIndex_ = 0;
    this.matchingNodeIndex_ = 0;
};
goog.ui.tree.TypeAhead.Offset = {
    DOWN: 1,
    UP: -1
};
goog.ui.tree.TypeAhead.prototype.handleNavigation = function (e) {
    var handled = false;
    switch (e.keyCode) {
        case goog.events.KeyCodes.DOWN:
        case goog.events.KeyCodes.UP:
            if (e.ctrlKey) {
                this.jumpTo_(e.keyCode == goog.events.KeyCodes.DOWN ?
                    goog.ui.tree.TypeAhead.Offset.DOWN :
                    goog.ui.tree.TypeAhead.Offset.UP);
                handled = true;
            }
            break;
        case goog.events.KeyCodes.BACKSPACE:
            var length = this.buffer_.length - 1;
            handled = true;
            if (length > 0) {
                this.buffer_ = this.buffer_.substring(0, length);
                this.jumpToLabel_(this.buffer_);
            }
            else if (length == 0) {
                this.buffer_ = '';
            }
            else {
                handled = false;
            }
            break;
        case goog.events.KeyCodes.ESC:
            this.buffer_ = '';
            handled = true;
            break;
    }
    return handled;
};
goog.ui.tree.TypeAhead.prototype.handleTypeAheadChar = function (e) {
    var handled = false;
    if (!e.ctrlKey && !e.altKey) {
        var ch = String.fromCharCode(e.charCode || e.keyCode).toLowerCase();
        if (goog.string.isUnicodeChar(ch) && (ch != ' ' || this.buffer_)) {
            this.buffer_ += ch;
            handled = this.jumpToLabel_(this.buffer_);
        }
    }
    return handled;
};
goog.ui.tree.TypeAhead.prototype.setNodeInMap = function (node) {
    var labelText = node.getText();
    if (labelText &&
        !goog.string.isEmptyOrWhitespace(goog.string.makeSafe(labelText))) {
        labelText = labelText.toLowerCase();
        var previousValue = this.nodeMap_.get(labelText);
        if (previousValue) {
            previousValue.push(node);
        }
        else {
            var nodeList = [node];
            this.nodeMap_.set(labelText, nodeList);
        }
    }
};
goog.ui.tree.TypeAhead.prototype.removeNodeFromMap = function (node) {
    var labelText = node.getText();
    if (labelText &&
        !goog.string.isEmptyOrWhitespace(goog.string.makeSafe(labelText))) {
        labelText = labelText.toLowerCase();
        var nodeList = this.nodeMap_.get(labelText);
        if (nodeList) {
            var count = node.getChildCount();
            for (var i = 0; i < count; i++) {
                this.removeNodeFromMap(node.getChildAt(i));
            }
            goog.array.remove(nodeList, node);
            if (!nodeList.length) {
                this.nodeMap_.remove(labelText);
            }
        }
    }
};
goog.ui.tree.TypeAhead.prototype.jumpToLabel_ = function (typeAhead) {
    var handled = false;
    var labels = this.nodeMap_.getKeys(typeAhead);
    if (labels && labels.length) {
        this.matchingNodeIndex_ = 0;
        this.matchingLabelIndex_ = 0;
        var nodes = this.nodeMap_.get(labels[0]);
        if ((handled = this.selectMatchingNode_(nodes))) {
            this.matchingLabels_ = labels;
        }
    }
    return handled;
};
goog.ui.tree.TypeAhead.prototype.jumpTo_ = function (offset) {
    var handled = false;
    var labels = this.matchingLabels_;
    if (labels) {
        var nodes = null;
        var nodeIndexOutOfRange = false;
        if (this.matchingNodes_) {
            var newNodeIndex = this.matchingNodeIndex_ + offset;
            if (newNodeIndex >= 0 && newNodeIndex < this.matchingNodes_.length) {
                this.matchingNodeIndex_ = newNodeIndex;
                nodes = this.matchingNodes_;
            }
            else {
                nodeIndexOutOfRange = true;
            }
        }
        if (!nodes) {
            var newLabelIndex = this.matchingLabelIndex_ + offset;
            if (newLabelIndex >= 0 && newLabelIndex < labels.length) {
                this.matchingLabelIndex_ = newLabelIndex;
            }
            if (labels.length > this.matchingLabelIndex_) {
                nodes = this.nodeMap_.get(labels[this.matchingLabelIndex_]);
            }
            if (nodes && nodes.length && nodeIndexOutOfRange) {
                this.matchingNodeIndex_ =
                    (offset == goog.ui.tree.TypeAhead.Offset.UP) ? nodes.length - 1 : 0;
            }
        }
        if ((handled = this.selectMatchingNode_(nodes))) {
            this.matchingLabels_ = labels;
        }
    }
    return handled;
};
goog.ui.tree.TypeAhead.prototype.selectMatchingNode_ = function (nodes) {
    var node;
    if (nodes) {
        if (this.matchingNodeIndex_ < nodes.length) {
            node = nodes[this.matchingNodeIndex_];
            this.matchingNodes_ = nodes;
        }
        if (node) {
            node.reveal();
            node.select();
        }
    }
    return !!node;
};
goog.ui.tree.TypeAhead.prototype.clear = function () {
    this.buffer_ = '';
};
'use strict';
goog.provide('Blockly');
goog.require('Blockly.BlockSvg.render');
goog.require('Blockly.DropDownDiv');
goog.require('Blockly.Events');
goog.require('Blockly.FieldAngle');
goog.require('Blockly.FieldCheckbox');
goog.require('Blockly.FieldColour');
goog.require('Blockly.FieldColourSlider');
goog.require('Blockly.FieldDropdown');
goog.require('Blockly.FieldIconMenu');
goog.require('Blockly.FieldImage');
goog.require('Blockly.FieldNote');
goog.require('Blockly.FieldTextInput');
goog.require('Blockly.FieldTextInputRemovable');
goog.require('Blockly.FieldTextDropdown');
goog.require('Blockly.FieldNumber');
goog.require('Blockly.FieldNumberDropdown');
goog.require('Blockly.FieldMatrix');
goog.require('Blockly.FieldVariable');
goog.require('Blockly.FieldVerticalSeparator');
goog.require('Blockly.Generator');
goog.require('Blockly.Msg');
goog.require('Blockly.Procedures');
goog.require('Blockly.ScratchMsgs');
goog.require('Blockly.Toolbox');
goog.require('Blockly.Touch');
goog.require('Blockly.WidgetDiv');
goog.require('Blockly.WorkspaceSvg');
goog.require('Blockly.constants');
goog.require('Blockly.inject');
goog.require('Blockly.utils');
goog.require('goog.color');
var CLOSURE_DEFINES = { 'goog.DEBUG': false };
Blockly.mainWorkspace = null;
Blockly.selected = null;
Blockly.draggingConnections_ = [];
Blockly.clipboardXml_ = null;
Blockly.clipboardSource_ = null;
Blockly.cache3dSupported_ = null;
Blockly.hueToRgb = function (hue) {
    return goog.color.hsvToHex(hue, Blockly.HSV_SATURATION, Blockly.HSV_VALUE * 255);
};
Blockly.svgSize = function (svg) {
    return {
        width: svg.cachedWidth_,
        height: svg.cachedHeight_
    };
};
Blockly.resizeSvgContents = function (workspace) {
    workspace.resizeContents();
};
Blockly.svgResize = function (workspace) {
    var mainWorkspace = workspace;
    while (mainWorkspace.options.parentWorkspace) {
        mainWorkspace = mainWorkspace.options.parentWorkspace;
    }
    var svg = mainWorkspace.getParentSvg();
    var div = svg.parentNode;
    if (!div) {
        return;
    }
    var width = div.offsetWidth;
    var height = div.offsetHeight;
    if (svg.cachedWidth_ != width) {
        svg.setAttribute('width', width + 'px');
        svg.cachedWidth_ = width;
    }
    if (svg.cachedHeight_ != height) {
        svg.setAttribute('height', height + 'px');
        svg.cachedHeight_ = height;
    }
    mainWorkspace.resize();
};
Blockly.onKeyDown_ = function (e) {
    if (Blockly.mainWorkspace.options.readOnly || Blockly.utils.isTargetInput(e)
        || (Blockly.mainWorkspace.rendered && !Blockly.mainWorkspace.isVisible())) {
        return;
    }
    var deleteBlock = false;
    if (e.keyCode == 27) {
        Blockly.hideChaff();
        Blockly.DropDownDiv.hide();
    }
    else if (e.keyCode == 8 || e.keyCode == 46) {
        e.preventDefault();
        if (Blockly.mainWorkspace.isDragging()) {
            return;
        }
        if (Blockly.selected && Blockly.selected.isDeletable()) {
            deleteBlock = true;
        }
    }
    else if (e.altKey || e.ctrlKey || e.metaKey) {
        if (Blockly.mainWorkspace.isDragging()) {
            return;
        }
        if (Blockly.selected &&
            Blockly.selected.isDeletable() && Blockly.selected.isMovable()) {
            if (e.keyCode == 67) {
                Blockly.hideChaff();
                Blockly.copy_(Blockly.selected);
            }
            else if (e.keyCode == 88 && !Blockly.selected.workspace.isFlyout) {
                Blockly.copy_(Blockly.selected);
                deleteBlock = true;
            }
        }
        if (e.keyCode == 86) {
            if (Blockly.clipboardXml_) {
                Blockly.Events.setGroup(true);
                var workspace = Blockly.clipboardSource_;
                if (workspace.isFlyout) {
                    workspace = workspace.targetWorkspace;
                }
                workspace.paste(Blockly.clipboardXml_);
                Blockly.Events.setGroup(false);
            }
        }
        else if (e.keyCode == 90) {
            Blockly.hideChaff();
            Blockly.mainWorkspace.undo(e.shiftKey);
        }
    }
    if (deleteBlock && !Blockly.selected.workspace.isFlyout) {
        Blockly.Events.setGroup(true);
        Blockly.hideChaff();
        Blockly.selected.dispose(true, true);
        Blockly.Events.setGroup(false);
    }
};
Blockly.copy_ = function (toCopy) {
    if (toCopy.isComment) {
        var xml = toCopy.toXmlWithXY();
    }
    else {
        var xml = Blockly.Xml.blockToDom(toCopy);
        var xy = toCopy.getRelativeToSurfaceXY();
        xml.setAttribute('x', toCopy.RTL ? -xy.x : xy.x);
        xml.setAttribute('y', xy.y);
    }
    Blockly.clipboardXml_ = xml;
    Blockly.clipboardSource_ = toCopy.workspace;
};
Blockly.duplicate_ = function (toDuplicate) {
    var clipboardXml = Blockly.clipboardXml_;
    var clipboardSource = Blockly.clipboardSource_;
    Blockly.copy_(toDuplicate);
    toDuplicate.workspace.paste(Blockly.clipboardXml_);
    Blockly.clipboardXml_ = clipboardXml;
    Blockly.clipboardSource_ = clipboardSource;
};
Blockly.onContextMenu_ = function (e) {
    if (!Blockly.utils.isTargetInput(e)) {
        e.preventDefault();
    }
};
Blockly.hideChaff = function (opt_allowToolbox) {
    Blockly.hideChaffInternal_(opt_allowToolbox);
    Blockly.WidgetDiv.hide(true);
};
Blockly.hideChaffOnResize = function (opt_allowToolbox) {
    Blockly.hideChaffInternal_(opt_allowToolbox);
    Blockly.WidgetDiv.repositionForWindowResize();
};
Blockly.hideChaffInternal_ = function (opt_allowToolbox) {
    Blockly.Tooltip.hide();
    Blockly.DropDownDiv.hideWithoutAnimation();
    if (!opt_allowToolbox) {
        var workspace = Blockly.getMainWorkspace();
        if (workspace.toolbox_ &&
            workspace.toolbox_.flyout_ &&
            workspace.toolbox_.flyout_.autoClose) {
            workspace.toolbox_.clearSelection();
        }
    }
};
Blockly.getMainWorkspace = function () {
    return Blockly.mainWorkspace;
};
Blockly.alert = function (message, opt_callback) {
    window.alert(message);
    if (opt_callback) {
        opt_callback();
    }
};
Blockly.confirm = function (message, callback) {
    callback(window.confirm(message));
};
Blockly.prompt = function (message, defaultValue, callback, _opt_title, _opt_varType) {
    callback(window.prompt(message, defaultValue));
};
Blockly.statusButtonCallback = function (id) {
    window.alert('status button was pressed for ' + id);
};
Blockly.refreshStatusButtons = function (workspace) {
    var buttons = workspace.getFlyout().buttons_;
    for (var i = 0; i < buttons.length; i++) {
        if (buttons[i] instanceof Blockly.FlyoutExtensionCategoryHeader) {
            buttons[i].refreshStatus();
        }
    }
};
Blockly.jsonInitFactory_ = function (jsonDef) {
    return function () {
        this.jsonInit(jsonDef);
    };
};
Blockly.defineBlocksWithJsonArray = function (jsonArray) {
    for (var i = 0; i < jsonArray.length; i++) {
        var elem = jsonArray[i];
        if (!elem) {
            console.warn('Block definition #' + i + ' in JSON array is ' + elem + '. ' +
                'Skipping.');
        }
        else {
            var typename = elem.type;
            if (typename == null || typename === '') {
                console.warn('Block definition #' + i +
                    ' in JSON array is missing a type attribute. Skipping.');
            }
            else {
                if (Blockly.Blocks[typename]) {
                    console.warn('Block definition #' + i + ' in JSON array' +
                        ' overwrites prior definition of "' + typename + '".');
                }
                Blockly.Blocks[typename] = {
                    init: Blockly.jsonInitFactory_(elem)
                };
            }
        }
    }
};
Blockly.bindEventWithChecks_ = function (node, name, thisObject, func, opt_noCaptureIdentifier, opt_noPreventDefault) {
    var handled = false;
    var wrapFunc = function (e) {
        var captureIdentifier = !opt_noCaptureIdentifier;
        var events = Blockly.Touch.splitEventByTouches(e);
        for (var i = 0, event; event = events[i]; i++) {
            if (captureIdentifier && !Blockly.Touch.shouldHandleEvent(event)) {
                continue;
            }
            Blockly.Touch.setClientFromTouch(event);
            if (thisObject) {
                func.call(thisObject, event);
            }
            else {
                func(event);
            }
            handled = true;
        }
    };
    node.addEventListener(name, wrapFunc, false);
    var bindData = [[node, name, wrapFunc]];
    if (name in Blockly.Touch.TOUCH_MAP) {
        var touchWrapFunc = function (e) {
            wrapFunc(e);
            var preventDef = !opt_noPreventDefault;
            if (handled && preventDef) {
                e.preventDefault();
            }
        };
        for (var i = 0, type; type = Blockly.Touch.TOUCH_MAP[name][i]; i++) {
            node.addEventListener(type, touchWrapFunc, false);
            bindData.push([node, type, touchWrapFunc]);
        }
    }
    return bindData;
};
Blockly.bindEvent_ = function (node, name, thisObject, func) {
    var wrapFunc = function (e) {
        if (thisObject) {
            func.call(thisObject, e);
        }
        else {
            func(e);
        }
    };
    node.addEventListener(name, wrapFunc, false);
    var bindData = [[node, name, wrapFunc]];
    if (name in Blockly.Touch.TOUCH_MAP) {
        var touchWrapFunc = function (e) {
            if (e.changedTouches.length == 1) {
                var touchPoint = e.changedTouches[0];
                e.clientX = touchPoint.clientX;
                e.clientY = touchPoint.clientY;
            }
            wrapFunc(e);
            e.preventDefault();
        };
        for (var i = 0, type; type = Blockly.Touch.TOUCH_MAP[name][i]; i++) {
            node.addEventListener(type, touchWrapFunc, false);
            bindData.push([node, type, touchWrapFunc]);
        }
    }
    return bindData;
};
Blockly.unbindEvent_ = function (bindData) {
    while (bindData.length) {
        var bindDatum = bindData.pop();
        var node = bindDatum[0];
        var name = bindDatum[1];
        var func = bindDatum[2];
        node.removeEventListener(name, func, false);
    }
    return func;
};
Blockly.isNumber = function (str) {
    return !!str.match(/^\s*-?\d+(\.\d+)?\s*$/);
};
if (!goog.global['console']) {
    goog.global['console'] = {
        'log': function () { },
        'warn': function () { }
    };
}
if (!goog.global['Blockly']) {
    goog.global['Blockly'] = {};
}
goog.global['Blockly']['getMainWorkspace'] = Blockly.getMainWorkspace;
'use strict';
goog.provide('Blockly.Block');
goog.require('Blockly.Blocks');
goog.require('Blockly.Colours');
goog.require('Blockly.Comment');
goog.require('Blockly.ScratchBlockComment');
goog.require('Blockly.Connection');
goog.require('Blockly.Events.BlockChange');
goog.require('Blockly.Events.BlockCreate');
goog.require('Blockly.Events.BlockDelete');
goog.require('Blockly.Events.BlockMove');
goog.require('Blockly.Extensions');
goog.require('Blockly.FieldLabelSerializable');
goog.require('Blockly.FieldVariableGetter');
goog.require('Blockly.Input');
goog.require('Blockly.Mutator');
goog.require('Blockly.Warning');
goog.require('Blockly.Workspace');
goog.require('Blockly.Xml');
goog.require('goog.array');
goog.require('goog.asserts');
goog.require('goog.math.Coordinate');
goog.require('goog.string');
Blockly.Block = function (workspace, prototypeName, opt_id) {
    var flyoutWorkspace = workspace && workspace.getFlyout && workspace.getFlyout() ?
        workspace.getFlyout().getWorkspace() : null;
    this.id = (opt_id && !workspace.getBlockById(opt_id) &&
        (!flyoutWorkspace || !flyoutWorkspace.getBlockById(opt_id))) ?
        opt_id : Blockly.utils.genUid();
    workspace.blockDB_[this.id] = this;
    this.outputConnection = null;
    this.nextConnection = null;
    this.previousConnection = null;
    this.inputList = [];
    this.inputsInline = true;
    this.disabled = false;
    this.tooltip = '';
    this.contextMenu = true;
    this.parentBlock_ = null;
    this.childBlocks_ = [];
    this.deletable_ = true;
    this.movable_ = true;
    this.editable_ = true;
    this.isShadow_ = false;
    this.collapsed_ = false;
    this.checkboxInFlyout_ = false;
    this.comment = null;
    this.outputShape_ = null;
    this.category_ = null;
    this.xy_ = new goog.math.Coordinate(0, 0);
    this.workspace = workspace;
    this.isInFlyout = workspace.isFlyout;
    this.isInMutator = workspace.isMutator;
    this.RTL = workspace.RTL;
    this.isInsertionMarker_ = false;
    if (prototypeName) {
        this.type = prototypeName;
        var prototype = Blockly.Blocks[prototypeName];
        if (prototype) {
            goog.asserts.assertObject(prototype, 'Error: Unknown block type "%s".', prototypeName);
            goog.mixin(this, prototype);
        }
        else if (Blockly.initWithDynamicJson) {
            var ok = Blockly.initWithDynamicJson(prototypeName, this);
            goog.asserts.assert(ok, 'Error: Unknown block type "%s".', prototypeName);
        }
    }
    workspace.addTopBlock(this);
    if (goog.isFunction(this.init)) {
        this.init();
    }
    this.inputsInlineDefault = this.inputsInline;
    if (Blockly.Events.isEnabled()) {
        var existingGroup = Blockly.Events.getGroup();
        if (!existingGroup) {
            Blockly.Events.setGroup(true);
        }
        try {
            Blockly.Events.fire(new Blockly.Events.BlockCreate(this));
        }
        finally {
            if (!existingGroup) {
                Blockly.Events.setGroup(false);
            }
        }
    }
    if (goog.isFunction(this.onchange)) {
        this.setOnChange(this.onchange);
    }
};
Blockly.Block.prototype.data = null;
Blockly.Block.prototype.colour_ = '#FF0000';
Blockly.Block.prototype.colourSecondary_ = '#FF0000';
Blockly.Block.prototype.colourTertiary_ = '#FF0000';
Blockly.Block.prototype.shadowColour_ = null;
Blockly.Block.prototype.dispose = function (healStack) {
    if (!this.workspace) {
        return;
    }
    if (this.onchangeWrapper_) {
        this.workspace.removeChangeListener(this.onchangeWrapper_);
    }
    this.unplug(healStack);
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.BlockDelete(this));
    }
    Blockly.Events.disable();
    try {
        if (this.workspace) {
            this.workspace.removeTopBlock(this);
            delete this.workspace.blockDB_[this.id];
            this.workspace = null;
        }
        if (Blockly.selected == this) {
            Blockly.selected = null;
        }
        for (var i = this.childBlocks_.length - 1; i >= 0; i--) {
            this.childBlocks_[i].dispose(false);
        }
        for (var i = 0, input; input = this.inputList[i]; i++) {
            input.dispose();
        }
        this.inputList.length = 0;
        var connections = this.getConnections_(true);
        for (var i = 0; i < connections.length; i++) {
            var connection = connections[i];
            if (connection.isConnected()) {
                connection.disconnect();
            }
            connections[i].dispose();
        }
    }
    finally {
        Blockly.Events.enable();
    }
};
Blockly.Block.prototype.initModel = function () {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field.initModel) {
                field.initModel();
            }
        }
    }
};
Blockly.Block.prototype.unplug = function (opt_healStack) {
    if (this.outputConnection) {
        if (this.outputConnection.isConnected()) {
            this.outputConnection.disconnect();
        }
    }
    else {
        if (this.previousConnection) {
            var previousTarget = null;
            if (this.previousConnection.isConnected()) {
                previousTarget = this.previousConnection.targetConnection;
                this.previousConnection.disconnect();
            }
        }
        var nextBlock = this.getNextBlock();
        if (opt_healStack && nextBlock) {
            var nextTarget = this.nextConnection.targetConnection;
            nextTarget.disconnect();
            if (previousTarget && previousTarget.checkType_(nextTarget)) {
                previousTarget.connect(nextTarget);
            }
        }
    }
};
Blockly.Block.prototype.getConnections_ = function () {
    var myConnections = [];
    if (this.outputConnection) {
        myConnections.push(this.outputConnection);
    }
    if (this.previousConnection) {
        myConnections.push(this.previousConnection);
    }
    if (this.nextConnection) {
        myConnections.push(this.nextConnection);
    }
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.connection) {
            myConnections.push(input.connection);
        }
    }
    return myConnections;
};
Blockly.Block.prototype.lastConnectionInStack = function () {
    var nextConnection = this.nextConnection;
    while (nextConnection) {
        var nextBlock = nextConnection.targetBlock();
        if (!nextBlock) {
            return nextConnection;
        }
        nextConnection = nextBlock.nextConnection;
    }
    return null;
};
Blockly.Block.prototype.bumpNeighbours_ = function () {
    console.warn('Not expected to reach this bumpNeighbours_ function. The ' +
        'BlockSvg function for bumpNeighbours_ was expected to be called instead.');
};
Blockly.Block.prototype.getParent = function () {
    return this.parentBlock_;
};
Blockly.Block.prototype.getInputWithBlock = function (block) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.connection && input.connection.targetBlock() == block) {
            return input;
        }
    }
    return null;
};
Blockly.Block.prototype.getInputWithConnection = function (conn) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.connection == conn) {
            return input;
        }
    }
    return null;
};
Blockly.Block.prototype.getSurroundParent = function () {
    var block = this;
    do {
        var prevBlock = block;
        block = block.getParent();
        if (!block) {
            return null;
        }
    } while (block.getNextBlock() == prevBlock);
    return block;
};
Blockly.Block.prototype.getNextBlock = function () {
    return this.nextConnection && this.nextConnection.targetBlock();
};
Blockly.Block.prototype.getPreviousBlock = function () {
    return this.previousConnection && this.previousConnection.targetBlock();
};
Blockly.Block.prototype.getFirstStatementConnection = function () {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.connection && input.connection.type == Blockly.NEXT_STATEMENT) {
            return input.connection;
        }
    }
    return null;
};
Blockly.Block.prototype.getRootBlock = function () {
    var rootBlock;
    var block = this;
    do {
        rootBlock = block;
        block = rootBlock.parentBlock_;
    } while (block);
    return rootBlock;
};
Blockly.Block.prototype.getChildren = function (ordered) {
    if (!ordered) {
        return this.childBlocks_;
    }
    var blocks = [];
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.connection) {
            var child = input.connection.targetBlock();
            if (child) {
                blocks.push(child);
            }
        }
    }
    var next = this.getNextBlock();
    if (next) {
        blocks.push(next);
    }
    return blocks;
};
Blockly.Block.prototype.setParent = function (newParent) {
    if (newParent == this.parentBlock_) {
        return;
    }
    if (this.parentBlock_) {
        goog.array.remove(this.parentBlock_.childBlocks_, this);
        if (this.previousConnection && this.previousConnection.isConnected()) {
            throw 'Still connected to previous block.';
        }
        if (this.outputConnection && this.outputConnection.isConnected()) {
            throw 'Still connected to parent block.';
        }
        this.parentBlock_ = null;
    }
    else {
        this.workspace.removeTopBlock(this);
    }
    this.parentBlock_ = newParent;
    if (newParent) {
        newParent.childBlocks_.push(this);
    }
    else {
        this.workspace.addTopBlock(this);
    }
};
Blockly.Block.prototype.getDescendants = function (ordered, opt_ignoreShadows) {
    var blocks = [this];
    var childBlocks = this.getChildren(ordered);
    for (var child, i = 0; child = childBlocks[i]; i++) {
        if (!opt_ignoreShadows || !child.isShadow_) {
            blocks.push.apply(blocks, child.getDescendants(ordered, opt_ignoreShadows));
        }
    }
    return blocks;
};
Blockly.Block.prototype.isDeletable = function () {
    return this.deletable_ && !this.isShadow_ &&
        !(this.workspace && this.workspace.options.readOnly);
};
Blockly.Block.prototype.setDeletable = function (deletable) {
    this.deletable_ = deletable;
};
Blockly.Block.prototype.isMovable = function () {
    return this.movable_ && !this.isShadow_ &&
        !(this.workspace && this.workspace.options.readOnly);
};
Blockly.Block.prototype.setMovable = function (movable) {
    this.movable_ = movable;
};
Blockly.Block.prototype.isShadow = function () {
    return this.isShadow_;
};
Blockly.Block.prototype.setShadow = function (shadow) {
    this.isShadow_ = shadow;
};
Blockly.Block.prototype.isInsertionMarker = function () {
    return this.isInsertionMarker_;
};
Blockly.Block.prototype.setInsertionMarker = function (insertionMarker) {
    if (this.isInsertionMarker_ == insertionMarker) {
        return;
    }
    this.isInsertionMarker_ = insertionMarker;
    if (this.isInsertionMarker_) {
        this.setColour(Blockly.Colours.insertionMarker);
        this.setOpacity(Blockly.Colours.insertionMarkerOpacity);
        Blockly.utils.addClass((this.svgGroup_), 'blocklyInsertionMarker');
    }
};
Blockly.Block.prototype.isEditable = function () {
    return this.editable_ && !(this.workspace && this.workspace.options.readOnly);
};
Blockly.Block.prototype.setEditable = function (editable) {
    this.editable_ = editable;
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            field.updateEditable();
        }
    }
};
Blockly.Block.prototype.setConnectionsHidden = function (hidden) {
    if (!hidden && this.isCollapsed()) {
        if (this.outputConnection) {
            this.outputConnection.setHidden(hidden);
        }
        if (this.previousConnection) {
            this.previousConnection.setHidden(hidden);
        }
        if (this.nextConnection) {
            this.nextConnection.setHidden(hidden);
            var child = this.nextConnection.targetBlock();
            if (child) {
                child.setConnectionsHidden(hidden);
            }
        }
    }
    else {
        var myConnections = this.getConnections_(true);
        for (var i = 0, connection; connection = myConnections[i]; i++) {
            connection.setHidden(hidden);
            if (connection.isSuperior()) {
                var child = connection.targetBlock();
                if (child) {
                    child.setConnectionsHidden(hidden);
                }
            }
        }
    }
};
Blockly.Block.prototype.getMatchingConnection = function (otherBlock, conn) {
    var connections = this.getConnections_(true);
    var otherConnections = otherBlock.getConnections_(true);
    if (connections.length != otherConnections.length) {
        throw "Connection lists did not match in length.";
    }
    for (var i = 0; i < otherConnections.length; i++) {
        if (otherConnections[i] == conn) {
            return connections[i];
        }
    }
    return null;
};
Blockly.Block.prototype.setHelpUrl = function (url) {
    this.helpUrl = url;
};
Blockly.Block.prototype.setTooltip = function (newTip) {
    this.tooltip = newTip;
};
Blockly.Block.prototype.getColour = function () {
    return this.colour_;
};
Blockly.Block.prototype.getColourSecondary = function () {
    return this.colourSecondary_;
};
Blockly.Block.prototype.getColourTertiary = function () {
    return this.colourTertiary_;
};
Blockly.Block.prototype.getShadowColour = function () {
    return this.shadowColour_;
};
Blockly.Block.prototype.setShadowColour = function (colour) {
    this.shadowColour_ = this.makeColour_(colour);
    if (this.rendered) {
        this.updateColour();
    }
};
Blockly.Block.prototype.clearShadowColour = function () {
    this.shadowColour_ = null;
    if (this.rendered) {
        this.updateColour();
    }
};
Blockly.Block.prototype.makeColour_ = function (colour) {
    var hue = Number(colour);
    if (!isNaN(hue)) {
        return Blockly.hueToRgb(hue);
    }
    else if (goog.isString(colour) && colour.match(/^#[0-9a-fA-F]{6}$/)) {
        return colour;
    }
    else {
        throw 'Invalid colour: ' + colour;
    }
};
Blockly.Block.prototype.setColour = function (colour, colourSecondary, colourTertiary) {
    this.colour_ = this.makeColour_(colour);
    if (colourSecondary !== undefined) {
        this.colourSecondary_ = this.makeColour_(colourSecondary);
    }
    else {
        this.colourSecondary_ = goog.color.rgbArrayToHex(goog.color.darken(goog.color.hexToRgb(this.colour_), 0.1));
    }
    if (colourTertiary !== undefined) {
        this.colourTertiary_ = this.makeColour_(colourTertiary);
    }
    else {
        this.colourTertiary_ = goog.color.rgbArrayToHex(goog.color.darken(goog.color.hexToRgb(this.colour_), 0.2));
    }
    if (this.rendered) {
        this.updateColour();
    }
};
Blockly.Block.prototype.setOnChange = function (onchangeFn) {
    if (onchangeFn && !goog.isFunction(onchangeFn)) {
        throw new Error("onchange must be a function.");
    }
    if (this.onchangeWrapper_) {
        this.workspace.removeChangeListener(this.onchangeWrapper_);
    }
    this.onchange = onchangeFn;
    if (this.onchange) {
        this.onchangeWrapper_ = onchangeFn.bind(this);
        this.workspace.addChangeListener(this.onchangeWrapper_);
    }
};
Blockly.Block.prototype.getField = function (name) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field.name === name) {
                return field;
            }
        }
    }
    return null;
};
Blockly.Block.prototype.getVars = function () {
    var vars = [];
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field.referencesVariables()) {
                vars.push(field.getValue());
            }
        }
    }
    return vars;
};
Blockly.Block.prototype.getVarModels = function () {
    var vars = [];
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field.referencesVariables()) {
                var model = this.workspace.getVariableById(field.getValue());
                if (model) {
                    vars.push(model);
                }
            }
        }
    }
    return vars;
};
Blockly.Block.prototype.updateVarName = function (variable) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field.referencesVariables() &&
                variable.getId() == field.getValue()) {
                field.setText(variable.name);
            }
        }
    }
};
Blockly.Block.prototype.renameVarById = function (oldId, newId) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field.referencesVariables() &&
                oldId == field.getValue()) {
                field.setValue(newId);
            }
        }
    }
};
Blockly.Block.prototype.getFieldValue = function (name) {
    var field = this.getField(name);
    if (field) {
        return field.getValue();
    }
    return null;
};
Blockly.Block.prototype.setFieldValue = function (newValue, name) {
    var field = this.getField(name);
    goog.asserts.assertObject(field, 'Field "%s" not found.', name);
    field.setValue(newValue);
};
Blockly.Block.prototype.setPreviousStatement = function (newBoolean, opt_check) {
    if (newBoolean) {
        if (opt_check === undefined) {
            opt_check = null;
        }
        if (!this.previousConnection) {
            goog.asserts.assert(!this.outputConnection, 'Remove output connection prior to adding previous connection.');
            this.previousConnection =
                this.makeConnection_(Blockly.PREVIOUS_STATEMENT);
        }
        this.previousConnection.setCheck(opt_check);
    }
    else {
        if (this.previousConnection) {
            goog.asserts.assert(!this.previousConnection.isConnected(), 'Must disconnect previous statement before removing connection.');
            this.previousConnection.dispose();
            this.previousConnection = null;
        }
    }
};
Blockly.Block.prototype.setNextStatement = function (newBoolean, opt_check) {
    if (newBoolean) {
        if (opt_check === undefined) {
            opt_check = null;
        }
        if (!this.nextConnection) {
            this.nextConnection = this.makeConnection_(Blockly.NEXT_STATEMENT);
        }
        this.nextConnection.setCheck(opt_check);
    }
    else {
        if (this.nextConnection) {
            goog.asserts.assert(!this.nextConnection.isConnected(), 'Must disconnect next statement before removing connection.');
            this.nextConnection.dispose();
            this.nextConnection = null;
        }
    }
};
Blockly.Block.prototype.setOutput = function (newBoolean, opt_check) {
    if (newBoolean) {
        if (opt_check === undefined) {
            opt_check = null;
        }
        if (!this.outputConnection) {
            goog.asserts.assert(!this.previousConnection, 'Remove previous connection prior to adding output connection.');
            this.outputConnection = this.makeConnection_(Blockly.OUTPUT_VALUE);
        }
        this.outputConnection.setCheck(opt_check);
    }
    else {
        if (this.outputConnection) {
            goog.asserts.assert(!this.outputConnection.isConnected(), 'Must disconnect output value before removing connection.');
            this.outputConnection.dispose();
            this.outputConnection = null;
        }
    }
};
Blockly.Block.prototype.setInputsInline = function (newBoolean) {
    if (this.inputsInline != newBoolean) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this, 'inline', null, this.inputsInline, newBoolean));
        this.inputsInline = newBoolean;
    }
};
Blockly.Block.prototype.getInputsInline = function () {
    if (this.inputsInline != undefined) {
        return this.inputsInline;
    }
    for (var i = 1; i < this.inputList.length; i++) {
        if (this.inputList[i - 1].type == Blockly.DUMMY_INPUT &&
            this.inputList[i].type == Blockly.DUMMY_INPUT) {
            return false;
        }
    }
    for (var i = 1; i < this.inputList.length; i++) {
        if (this.inputList[i - 1].type == Blockly.INPUT_VALUE &&
            this.inputList[i].type == Blockly.DUMMY_INPUT) {
            return true;
        }
    }
    return false;
};
Blockly.Block.prototype.setDisabled = function (disabled) {
    if (this.disabled != disabled) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this, 'disabled', null, this.disabled, disabled));
        this.disabled = disabled;
    }
};
Blockly.Block.prototype.getInheritedDisabled = function () {
    var ancestor = this.getSurroundParent();
    while (ancestor) {
        if (ancestor.disabled) {
            return true;
        }
        ancestor = ancestor.getSurroundParent();
    }
    return false;
};
Blockly.Block.prototype.isCollapsed = function () {
    return this.collapsed_;
};
Blockly.Block.prototype.setCollapsed = function (collapsed) {
    if (this.collapsed_ != collapsed) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this, 'collapsed', null, this.collapsed_, collapsed));
        this.collapsed_ = collapsed;
    }
};
Blockly.Block.prototype.toString = function (opt_maxLength, opt_emptyToken) {
    var text = [];
    var emptyFieldPlaceholder = opt_emptyToken || '?';
    if (this.collapsed_) {
        text.push(this.getInput('_TEMP_COLLAPSED_INPUT').fieldRow[0].text_);
    }
    else {
        for (var i = 0, input; input = this.inputList[i]; i++) {
            for (var j = 0, field; field = input.fieldRow[j]; j++) {
                if (field instanceof Blockly.FieldDropdown && !field.getValue()) {
                    text.push(emptyFieldPlaceholder);
                }
                else {
                    text.push(field.getText());
                }
            }
            if (input.connection) {
                var child = input.connection.targetBlock();
                if (child) {
                    text.push(child.toString(undefined, opt_emptyToken));
                }
                else {
                    text.push(emptyFieldPlaceholder);
                }
            }
        }
    }
    text = goog.string.trim(text.join(' ')) || '???';
    if (opt_maxLength) {
        text = goog.string.truncate(text, opt_maxLength);
    }
    return text;
};
Blockly.Block.prototype.appendValueInput = function (name) {
    return this.appendInput_(Blockly.INPUT_VALUE, name);
};
Blockly.Block.prototype.appendStatementInput = function (name) {
    return this.appendInput_(Blockly.NEXT_STATEMENT, name);
};
Blockly.Block.prototype.appendDummyInput = function (opt_name) {
    return this.appendInput_(Blockly.DUMMY_INPUT, opt_name || '');
};
Blockly.Block.prototype.jsonInit = function (json) {
    var warningPrefix = json['type'] ? 'Block "' + json['type'] + '": ' : '';
    goog.asserts.assert(json['output'] == undefined || json['previousStatement'] == undefined, warningPrefix + 'Must not have both an output and a previousStatement.');
    if (json['colour'] !== undefined) {
        this.setColourFromJson_(json);
    }
    var i = 0;
    while (json['message' + i] !== undefined) {
        this.interpolate_(json['message' + i], json['args' + i] || [], json['lastDummyAlign' + i]);
        i++;
    }
    if (json['inputsInline'] !== undefined) {
        this.setInputsInline(json['inputsInline']);
    }
    if (json['output'] !== undefined) {
        this.setOutput(true, json['output']);
    }
    if (json['previousStatement'] !== undefined) {
        this.setPreviousStatement(true, json['previousStatement']);
    }
    if (json['nextStatement'] !== undefined) {
        this.setNextStatement(true, json['nextStatement']);
    }
    if (json['tooltip'] !== undefined) {
        var rawValue = json['tooltip'];
        var localizedText = Blockly.utils.replaceMessageReferences(rawValue);
        this.setTooltip(localizedText);
    }
    if (json['enableContextMenu'] !== undefined) {
        var rawValue = json['enableContextMenu'];
        this.contextMenu = !!rawValue;
    }
    if (json['helpUrl'] !== undefined) {
        var rawValue = json['helpUrl'];
        var localizedValue = Blockly.utils.replaceMessageReferences(rawValue);
        this.setHelpUrl(localizedValue);
    }
    if (goog.isString(json['extensions'])) {
        console.warn('JSON attribute \'extensions\' should be an array of ' +
            'strings. Found raw string in JSON for \'' + json['type'] + '\' block.');
        json['extensions'] = [json['extensions']];
    }
    if (json['mutator'] !== undefined) {
        Blockly.Extensions.apply(json['mutator'], this, true);
    }
    if (Array.isArray(json['extensions'])) {
        var extensionNames = json['extensions'];
        for (var i = 0; i < extensionNames.length; ++i) {
            var extensionName = extensionNames[i];
            Blockly.Extensions.apply(extensionName, this, false);
        }
    }
    if (json['outputShape'] !== undefined) {
        this.setOutputShape(json['outputShape']);
    }
    if (json['checkboxInFlyout'] !== undefined) {
        this.setCheckboxInFlyout(json['checkboxInFlyout']);
    }
    if (json['category'] !== undefined) {
        this.setCategory(json['category']);
    }
};
Blockly.Block.prototype.mixin = function (mixinObj, opt_disableCheck) {
    if (goog.isDef(opt_disableCheck) && !goog.isBoolean(opt_disableCheck)) {
        throw new Error("opt_disableCheck must be a boolean if provided");
    }
    if (!opt_disableCheck) {
        var overwrites = [];
        for (var key in mixinObj) {
            if (this[key] !== undefined) {
                overwrites.push(key);
            }
        }
        if (overwrites.length) {
            throw new Error('Mixin will overwrite block members: ' +
                JSON.stringify(overwrites));
        }
    }
    goog.mixin(this, mixinObj);
};
Blockly.Block.prototype.setColourFromRawValues_ = function (primary, secondary, tertiary) {
    primary = goog.isString(primary) ?
        Blockly.utils.replaceMessageReferences(primary) : primary;
    secondary = goog.isString(secondary) ?
        Blockly.utils.replaceMessageReferences(secondary) : secondary;
    tertiary = goog.isString(tertiary) ?
        Blockly.utils.replaceMessageReferences(tertiary) : tertiary;
    this.setColour(primary, secondary, tertiary);
};
Blockly.Block.prototype.setColourFromJson_ = function (json) {
    this.setColourFromRawValues_(json['colour'], json['colourSecondary'], json['colourTertiary']);
};
Blockly.Block.prototype.interpolate_ = function (message, args, lastDummyAlign) {
    var tokens = Blockly.utils.tokenizeInterpolation(message);
    var indexDup = [];
    var indexCount = 0;
    var elements = [];
    for (var i = 0; i < tokens.length; i++) {
        var token = tokens[i];
        if (typeof token == 'number') {
            if (token <= 0 || token > args.length) {
                throw new Error('Block "' + this.type + '": ' +
                    'Message index %' + token + ' out of range.');
            }
            if (indexDup[token]) {
                throw new Error('Block "' + this.type + '": ' +
                    'Message index %' + token + ' duplicated.');
            }
            indexDup[token] = true;
            indexCount++;
            elements.push(args[token - 1]);
        }
        else {
            token = token.trim();
            if (token) {
                elements.push(token);
            }
        }
    }
    if (indexCount != args.length) {
        throw new Error('Block "' + this.type + '": ' +
            'Message does not reference all ' + args.length + ' arg(s).');
    }
    if (elements.length && (typeof elements[elements.length - 1] == 'string' ||
        goog.string.startsWith(elements[elements.length - 1]['type'], 'field_'))) {
        var dummyInput = { type: 'input_dummy' };
        if (lastDummyAlign) {
            dummyInput['align'] = lastDummyAlign;
        }
        elements.push(dummyInput);
    }
    var alignmentLookup = {
        'LEFT': Blockly.ALIGN_LEFT,
        'RIGHT': Blockly.ALIGN_RIGHT,
        'CENTRE': Blockly.ALIGN_CENTRE
    };
    var fieldStack = [];
    for (var i = 0; i < elements.length; i++) {
        var element = elements[i];
        if (typeof element == 'string') {
            fieldStack.push([element, undefined]);
        }
        else {
            var field = null;
            var input = null;
            do {
                var altRepeat = false;
                if (typeof element == 'string') {
                    field = new Blockly.FieldLabel(element);
                }
                else {
                    switch (element['type']) {
                        case 'input_value':
                            input = this.appendValueInput(element['name']);
                            break;
                        case 'input_statement':
                            input = this.appendStatementInput(element['name']);
                            break;
                        case 'input_dummy':
                            input = this.appendDummyInput(element['name']);
                            break;
                        default:
                            field = Blockly.Field.fromJson(element);
                            if (!field) {
                                if (element['alt']) {
                                    element = element['alt'];
                                    altRepeat = true;
                                }
                                else {
                                    console.warn('Blockly could not create a field of type ' +
                                        element['type'] +
                                        '. You may need to register your custom field.  See ' +
                                        'github.com/google/blockly/issues/1584');
                                }
                            }
                    }
                }
            } while (altRepeat);
            if (field) {
                fieldStack.push([field, element['name']]);
            }
            else if (input) {
                if (element['check']) {
                    input.setCheck(element['check']);
                }
                if (element['align']) {
                    input.setAlign(alignmentLookup[element['align']]);
                }
                for (var j = 0; j < fieldStack.length; j++) {
                    input.appendField(fieldStack[j][0], fieldStack[j][1]);
                }
                fieldStack.length = 0;
            }
        }
    }
};
Blockly.Block.prototype.appendInput_ = function (type, name) {
    var connection = null;
    if (type == Blockly.INPUT_VALUE || type == Blockly.NEXT_STATEMENT) {
        connection = this.makeConnection_(type);
    }
    var input = new Blockly.Input(type, name, this, connection);
    this.inputList.push(input);
    return input;
};
Blockly.Block.prototype.moveInputBefore = function (name, refName) {
    if (name == refName) {
        return;
    }
    var inputIndex = -1;
    var refIndex = refName ? -1 : this.inputList.length;
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.name == name) {
            inputIndex = i;
            if (refIndex != -1) {
                break;
            }
        }
        else if (refName && input.name == refName) {
            refIndex = i;
            if (inputIndex != -1) {
                break;
            }
        }
    }
    goog.asserts.assert(inputIndex != -1, 'Named input "%s" not found.', name);
    goog.asserts.assert(refIndex != -1, 'Reference input "%s" not found.', refName);
    this.moveNumberedInputBefore(inputIndex, refIndex);
};
Blockly.Block.prototype.moveNumberedInputBefore = function (inputIndex, refIndex) {
    goog.asserts.assert(inputIndex != refIndex, 'Can\'t move input to itself.');
    goog.asserts.assert(inputIndex < this.inputList.length, 'Input index ' + inputIndex + ' out of bounds.');
    goog.asserts.assert(refIndex <= this.inputList.length, 'Reference input ' + refIndex + ' out of bounds.');
    var input = this.inputList[inputIndex];
    this.inputList.splice(inputIndex, 1);
    if (inputIndex < refIndex) {
        refIndex--;
    }
    this.inputList.splice(refIndex, 0, input);
};
Blockly.Block.prototype.removeInput = function (name, opt_quiet) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.name == name) {
            if (input.connection && input.connection.isConnected()) {
                input.connection.setShadowDom(null);
                var block = input.connection.targetBlock();
                if (block.isShadow()) {
                    block.dispose();
                }
                else {
                    block.unplug();
                }
            }
            input.dispose();
            this.inputList.splice(i, 1);
            return;
        }
    }
    if (!opt_quiet) {
        goog.asserts.fail('Input "%s" not found.', name);
    }
};
Blockly.Block.prototype.getInput = function (name) {
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.name == name) {
            return input;
        }
    }
    return null;
};
Blockly.Block.prototype.getInputTargetBlock = function (name) {
    var input = this.getInput(name);
    return input && input.connection && input.connection.targetBlock();
};
Blockly.Block.prototype.getCommentText = function () {
    return this.comment || '';
};
Blockly.Block.prototype.setCommentText = function (text) {
    if (this.comment != text) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this, 'comment', null, this.comment, text || ''));
        this.comment = text;
    }
};
Blockly.Block.prototype.setOutputShape = function (outputShape) {
    this.outputShape_ = outputShape;
};
Blockly.Block.prototype.getOutputShape = function () {
    return this.outputShape_;
};
Blockly.Block.prototype.setCategory = function (category) {
    this.category_ = category;
};
Blockly.Block.prototype.getCategory = function () {
    return this.category_;
};
Blockly.Block.prototype.setCheckboxInFlyout = function (hasCheckbox) {
    this.checkboxInFlyout_ = hasCheckbox;
};
Blockly.Block.prototype.hasCheckboxInFlyout = function () {
    return this.checkboxInFlyout_;
};
Blockly.Block.prototype.setWarningText = function () {
};
Blockly.Block.prototype.setMutator = function () {
};
Blockly.Block.prototype.getRelativeToSurfaceXY = function () {
    return this.xy_;
};
Blockly.Block.prototype.moveBy = function (dx, dy) {
    goog.asserts.assert(!this.parentBlock_, 'Block has parent.');
    var event = new Blockly.Events.BlockMove(this);
    this.xy_.translate(dx, dy);
    event.recordNew();
    Blockly.Events.fire(event);
};
Blockly.Block.prototype.makeConnection_ = function (type) {
    return new Blockly.Connection(this, type);
};
Blockly.Block.prototype.allInputsFilled = function (opt_shadowBlocksAreFilled) {
    if (opt_shadowBlocksAreFilled === undefined) {
        opt_shadowBlocksAreFilled = true;
    }
    if (!opt_shadowBlocksAreFilled && this.isShadow()) {
        return false;
    }
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (!input.connection) {
            continue;
        }
        var target = input.connection.targetBlock();
        if (!target || !target.allInputsFilled(opt_shadowBlocksAreFilled)) {
            return false;
        }
    }
    var next = this.getNextBlock();
    if (next) {
        return next.allInputsFilled(opt_shadowBlocksAreFilled);
    }
    return true;
};
Blockly.Block.prototype.toDevString = function () {
    var msg = this.type ? '"' + this.type + '" block' : 'Block';
    if (this.id) {
        msg += ' (id="' + this.id + '")';
    }
    return msg;
};
'use strict';
goog.provide('Blockly.BlockSvg');
goog.require('Blockly.Block');
goog.require('Blockly.BlockAnimations');
goog.require('Blockly.ContextMenu');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.Events.BlockMove');
goog.require('Blockly.Grid');
goog.require('Blockly.RenderedConnection');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.Tooltip');
goog.require('Blockly.Touch');
goog.require('Blockly.utils');
goog.require('goog.Timer');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.math.Coordinate');
Blockly.BlockSvg = function (workspace, prototypeName, opt_id) {
    this.svgGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    this.svgPath_ = Blockly.utils.createSvgElement('path', { 'class': 'blocklyPath blocklyBlockBackground' }, this.svgGroup_);
    this.svgPath_.tooltip = this;
    this.rendered = false;
    this.useDragSurface_ = Blockly.utils.is3dSupported() && !!workspace.blockDragSurface_;
    Blockly.Tooltip.bindMouseEvents(this.svgPath_);
    Blockly.BlockSvg.superClass_.constructor.call(this, workspace, prototypeName, opt_id);
    if (this.svgGroup_.dataset) {
        this.svgGroup_.dataset.id = this.id;
    }
};
goog.inherits(Blockly.BlockSvg, Blockly.Block);
Blockly.BlockSvg.prototype.height = 0;
Blockly.BlockSvg.prototype.width = 0;
Blockly.BlockSvg.prototype.insertionMarkerMinWidth_ = 0;
Blockly.BlockSvg.prototype.opacity_ = 1;
Blockly.BlockSvg.prototype.dragStartXY_ = null;
Blockly.BlockSvg.prototype.isGlowingBlock_ = false;
Blockly.BlockSvg.prototype.isGlowingStack_ = false;
Blockly.BlockSvg.INLINE = -1;
Blockly.BlockSvg.prototype.initSvg = function () {
    goog.asserts.assert(this.workspace.rendered, 'Workspace is headless.');
    if (!this.isInsertionMarker()) {
        for (var i = 0, input; input = this.inputList[i]; i++) {
            input.init();
            input.initOutlinePath(this.svgGroup_);
        }
        var icons = this.getIcons();
        for (i = 0; i < icons.length; i++) {
            icons[i].createIcon();
        }
    }
    this.updateColour();
    this.updateMovable();
    if (!this.workspace.options.readOnly && !this.eventsInit_) {
        Blockly.bindEventWithChecks_(this.getSvgRoot(), 'mousedown', this, this.onMouseDown_);
    }
    this.eventsInit_ = true;
    if (!this.getSvgRoot().parentNode) {
        this.workspace.getCanvas().appendChild(this.getSvgRoot());
    }
};
Blockly.BlockSvg.prototype.select = function () {
    if (this.isShadow() && this.getParent()) {
        this.getParent().select();
        return;
    }
    if (Blockly.selected == this) {
        return;
    }
    var oldId = null;
    if (Blockly.selected) {
        oldId = Blockly.selected.id;
        Blockly.Events.disable();
        try {
            Blockly.selected.unselect();
        }
        finally {
            Blockly.Events.enable();
        }
    }
    var event = new Blockly.Events.Ui(null, 'selected', oldId, this.id);
    event.workspaceId = this.workspace.id;
    Blockly.Events.fire(event);
    Blockly.selected = this;
    this.addSelect();
};
Blockly.BlockSvg.prototype.unselect = function () {
    if (Blockly.selected != this) {
        return;
    }
    var event = new Blockly.Events.Ui(null, 'selected', this.id, null);
    event.workspaceId = this.workspace.id;
    Blockly.Events.fire(event);
    Blockly.selected = null;
    this.removeSelect();
};
Blockly.BlockSvg.prototype.setGlowBlock = function (isGlowingBlock) {
    this.isGlowingBlock_ = isGlowingBlock;
    this.updateColour();
};
Blockly.BlockSvg.prototype.setGlowStack = function (isGlowingStack) {
    this.isGlowingStack_ = isGlowingStack;
    var svg = this.getSvgRoot();
    if (this.isGlowingStack_ && !svg.hasAttribute('filter')) {
        var stackGlowFilterId = this.workspace.options.stackGlowFilterId || 'blocklyStackGlowFilter';
        svg.setAttribute('filter', 'url(#' + stackGlowFilterId + ')');
    }
    else if (!this.isGlowingStack_ && svg.hasAttribute('filter')) {
        svg.removeAttribute('filter');
    }
};
Blockly.BlockSvg.prototype.mutator = null;
Blockly.BlockSvg.prototype.comment = null;
Blockly.BlockSvg.prototype.warning = null;
Blockly.BlockSvg.prototype.getIcons = function () {
    var icons = [];
    if (this.mutator) {
        icons.push(this.mutator);
    }
    if (this.comment) {
        icons.push(this.comment);
    }
    if (this.warning) {
        icons.push(this.warning);
    }
    return icons;
};
Blockly.BlockSvg.prototype.setParent = function (newParent) {
    var oldParent = this.parentBlock_;
    if (newParent == oldParent) {
        return;
    }
    Blockly.Field.startCache();
    Blockly.BlockSvg.superClass_.setParent.call(this, newParent);
    Blockly.Field.stopCache();
    var svgRoot = this.getSvgRoot();
    if (this.workspace.isClearing || !svgRoot) {
        return;
    }
    var oldXY = this.getRelativeToSurfaceXY();
    if (newParent) {
        newParent.getSvgRoot().appendChild(svgRoot);
        var newXY = this.getRelativeToSurfaceXY();
        this.moveConnections_(newXY.x - oldXY.x, newXY.y - oldXY.y);
        if (this.isShadow()) {
            this.setColour(this.getColour(), this.getColourSecondary(), newParent.getColourTertiary());
        }
    }
    else if (oldParent) {
        this.workspace.getCanvas().appendChild(svgRoot);
        this.translate(oldXY.x, oldXY.y);
    }
};
Blockly.BlockSvg.prototype.getRelativeToSurfaceXY = function () {
    var x = 0;
    var y = 0;
    var dragSurfaceGroup = this.useDragSurface_ ?
        this.workspace.blockDragSurface_.getGroup() : null;
    var element = this.getSvgRoot();
    if (element) {
        do {
            var xy = Blockly.utils.getRelativeXY(element);
            x += xy.x;
            y += xy.y;
            if (this.useDragSurface_ &&
                this.workspace.blockDragSurface_.getCurrentBlock() == element) {
                var surfaceTranslation = this.workspace.blockDragSurface_.getSurfaceTranslation();
                x += surfaceTranslation.x;
                y += surfaceTranslation.y;
            }
            element = element.parentNode;
        } while (element && element != this.workspace.getCanvas() &&
            element != dragSurfaceGroup);
    }
    return new goog.math.Coordinate(x, y);
};
Blockly.BlockSvg.prototype.moveBy = function (dx, dy) {
    goog.asserts.assert(!this.parentBlock_, 'Block has parent.');
    var eventsEnabled = Blockly.Events.isEnabled();
    if (eventsEnabled) {
        var event = new Blockly.Events.BlockMove(this);
    }
    var xy = this.getRelativeToSurfaceXY();
    this.translate(xy.x + dx, xy.y + dy);
    this.moveConnections_(dx, dy);
    if (eventsEnabled) {
        event.recordNew();
        Blockly.Events.fire(event);
    }
    this.workspace.resizeContents();
};
Blockly.BlockSvg.prototype.translate = function (x, y) {
    this.getSvgRoot().setAttribute('transform', 'translate(' + x + ',' + y + ')');
};
Blockly.BlockSvg.prototype.moveToDragSurface_ = function () {
    if (!this.useDragSurface_) {
        return;
    }
    var xy = this.getRelativeToSurfaceXY();
    this.clearTransformAttributes_();
    this.workspace.blockDragSurface_.translateSurface(xy.x, xy.y);
    this.workspace.blockDragSurface_.setBlocksAndShow(this.getSvgRoot());
};
Blockly.BlockSvg.prototype.moveOffDragSurface_ = function (newXY) {
    if (!this.useDragSurface_) {
        return;
    }
    this.translate(newXY.x, newXY.y);
    this.workspace.blockDragSurface_.clearAndHide(this.workspace.getCanvas());
};
Blockly.BlockSvg.prototype.moveDuringDrag = function (newLoc) {
    if (this.useDragSurface_) {
        this.workspace.blockDragSurface_.translateSurface(newLoc.x, newLoc.y);
    }
    else {
        this.svgGroup_.translate_ = 'translate(' + newLoc.x + ',' + newLoc.y + ')';
        this.svgGroup_.setAttribute('transform', this.svgGroup_.translate_ + this.svgGroup_.skew_);
    }
};
Blockly.BlockSvg.prototype.clearTransformAttributes_ = function () {
    Blockly.utils.removeAttribute(this.getSvgRoot(), 'transform');
};
Blockly.BlockSvg.prototype.snapToGrid = function () {
    if (!this.workspace) {
        return;
    }
    if (this.workspace.isDragging()) {
        return;
    }
    if (this.getParent()) {
        return;
    }
    if (this.isInFlyout) {
        return;
    }
    var grid = this.workspace.getGrid();
    if (!grid || !grid.shouldSnap()) {
        return;
    }
    var spacing = grid.getSpacing();
    var half = spacing / 2;
    var xy = this.getRelativeToSurfaceXY();
    var dx = Math.round((xy.x - half) / spacing) * spacing + half - xy.x;
    var dy = Math.round((xy.y - half) / spacing) * spacing + half - xy.y;
    dx = Math.round(dx);
    dy = Math.round(dy);
    if (dx != 0 || dy != 0) {
        this.moveBy(dx, dy);
    }
};
Blockly.BlockSvg.prototype.getBoundingRectangle = function () {
    var blockXY = this.getRelativeToSurfaceXY(this);
    var blockBounds = this.getHeightWidth();
    var topLeft;
    var bottomRight;
    if (this.RTL) {
        topLeft = new goog.math.Coordinate(blockXY.x - blockBounds.width, blockXY.y);
        bottomRight = new goog.math.Coordinate(blockXY.x, blockXY.y + blockBounds.height);
    }
    else {
        topLeft = new goog.math.Coordinate(blockXY.x, blockXY.y);
        bottomRight = new goog.math.Coordinate(blockXY.x + blockBounds.width, blockXY.y + blockBounds.height);
    }
    return { topLeft: topLeft, bottomRight: bottomRight };
};
Blockly.BlockSvg.prototype.setOpacity = function (opacity) {
    this.opacity_ = opacity;
    if (this.rendered) {
        this.updateColour();
    }
};
Blockly.BlockSvg.prototype.getOpacity = function () {
    return this.opacity_;
};
Blockly.BlockSvg.prototype.setCollapsed = function (collapsed) {
    if (this.collapsed_ == collapsed) {
        return;
    }
    var renderList = [];
    for (var i = 0, input; input = this.inputList[i]; i++) {
        renderList.push.apply(renderList, input.setVisible(!collapsed));
    }
    var COLLAPSED_INPUT_NAME = '_TEMP_COLLAPSED_INPUT';
    if (collapsed) {
        var icons = this.getIcons();
        for (var i = 0; i < icons.length; i++) {
            icons[i].setVisible(false);
        }
        var text = this.toString(Blockly.COLLAPSE_CHARS);
        this.appendDummyInput(COLLAPSED_INPUT_NAME).appendField(text).init();
    }
    else {
        this.removeInput(COLLAPSED_INPUT_NAME);
        this.setWarningText(null);
    }
    Blockly.BlockSvg.superClass_.setCollapsed.call(this, collapsed);
    if (!renderList.length) {
        renderList[0] = this;
    }
    if (this.rendered) {
        for (var i = 0, block; block = renderList[i]; i++) {
            block.render();
        }
    }
};
Blockly.BlockSvg.prototype.tab = function (start, forward) {
    var list = this.createTabList_();
    var i = list.indexOf(start);
    if (i == -1) {
        i = forward ? -1 : list.length;
    }
    var target = list[forward ? i + 1 : i - 1];
    if (!target) {
        var outputBlock = this.outputConnection && this.outputConnection.targetBlock();
        if (outputBlock) {
            outputBlock.tab(this, forward);
        }
        else {
            var block = forward ? this.getNextBlock() : this.getPreviousBlock();
            if (block) {
                block.tab(this, forward);
            }
        }
    }
    else if (target instanceof Blockly.Field) {
        target.showEditor_();
    }
    else {
        target.tab(null, forward);
    }
};
Blockly.BlockSvg.prototype.createTabList_ = function () {
    var list = [];
    for (var i = 0, input; input = this.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (field instanceof Blockly.FieldTextInput) {
                list.push(field);
            }
        }
        if (input.connection) {
            var block = input.connection.targetBlock();
            if (block) {
                list.push(block);
            }
        }
    }
    return list;
};
Blockly.BlockSvg.prototype.onMouseDown_ = function (e) {
    var gesture = this.workspace && this.workspace.getGesture(e);
    if (gesture) {
        gesture.handleBlockStart(e, this);
    }
};
Blockly.BlockSvg.prototype.showHelp_ = function () {
    var url = goog.isFunction(this.helpUrl) ? this.helpUrl() : this.helpUrl;
    if (url) {
        alert(url);
    }
};
Blockly.BlockSvg.prototype.showContextMenu_ = function (e) {
    if (this.workspace.options.readOnly || !this.contextMenu) {
        return;
    }
    var block = this;
    var menuOptions = [];
    if (this.isDeletable() && this.isMovable() && !block.isInFlyout) {
        menuOptions.push(Blockly.ContextMenu.blockDuplicateOption(block, e));
        if (this.isEditable() && this.workspace.options.comments) {
            menuOptions.push(Blockly.ContextMenu.blockCommentOption(block));
        }
        menuOptions.push(Blockly.ContextMenu.blockDeleteOption(block));
    }
    else if (this.parentBlock_ && this.isShadow_) {
        this.parentBlock_.showContextMenu_(e);
        return;
    }
    if (this.customContextMenu) {
        this.customContextMenu(menuOptions);
    }
    Blockly.ContextMenu.show(e, menuOptions, this.RTL);
    Blockly.ContextMenu.currentBlock = this;
};
Blockly.BlockSvg.prototype.moveConnections_ = function (dx, dy) {
    if (!this.rendered) {
        return;
    }
    var myConnections = this.getConnections_(false);
    for (var i = 0; i < myConnections.length; i++) {
        myConnections[i].moveBy(dx, dy);
    }
    var icons = this.getIcons();
    for (i = 0; i < icons.length; i++) {
        icons[i].computeIconLocation();
    }
    for (i = 0; i < this.childBlocks_.length; i++) {
        this.childBlocks_[i].moveConnections_(dx, dy);
    }
};
Blockly.BlockSvg.prototype.setDragging = function (adding) {
    if (adding) {
        var group = this.getSvgRoot();
        group.translate_ = '';
        group.skew_ = '';
        Blockly.draggingConnections_ =
            Blockly.draggingConnections_.concat(this.getConnections_(true));
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDragging');
    }
    else {
        Blockly.draggingConnections_ = [];
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDragging');
    }
    for (var i = 0; i < this.childBlocks_.length; i++) {
        this.childBlocks_[i].setDragging(adding);
    }
};
Blockly.BlockSvg.prototype.updateMovable = function () {
    if (this.isMovable()) {
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDraggable');
    }
    else {
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDraggable');
    }
};
Blockly.BlockSvg.prototype.setMovable = function (movable) {
    Blockly.BlockSvg.superClass_.setMovable.call(this, movable);
    this.updateMovable();
};
Blockly.BlockSvg.prototype.setEditable = function (editable) {
    Blockly.BlockSvg.superClass_.setEditable.call(this, editable);
    var icons = this.getIcons();
    for (var i = 0; i < icons.length; i++) {
        icons[i].updateEditable();
    }
};
Blockly.BlockSvg.prototype.setShadow = function (shadow) {
    Blockly.BlockSvg.superClass_.setShadow.call(this, shadow);
    this.updateColour();
};
Blockly.BlockSvg.prototype.setInsertionMarker = function (insertionMarker, opt_minWidth) {
    Blockly.BlockSvg.superClass_.setInsertionMarker.call(this, insertionMarker);
    this.insertionMarkerMinWidth_ = opt_minWidth;
    this.updateColour();
};
Blockly.BlockSvg.prototype.getSvgRoot = function () {
    return this.svgGroup_;
};
Blockly.BlockSvg.prototype.dispose = function (healStack, animate) {
    if (!this.workspace) {
        return;
    }
    Blockly.Tooltip.hide();
    Blockly.Field.startCache();
    var blockWorkspace = this.workspace;
    if (Blockly.selected == this) {
        this.unselect();
        this.workspace.cancelCurrentGesture();
    }
    if (Blockly.ContextMenu.currentBlock == this) {
        Blockly.ContextMenu.hide();
    }
    if (animate && this.rendered) {
        this.unplug(healStack);
        Blockly.BlockAnimations.disposeUiEffect(this);
    }
    this.rendered = false;
    Blockly.Events.disable();
    try {
        var icons = this.getIcons();
        for (var i = 0; i < icons.length; i++) {
            icons[i].dispose();
        }
    }
    finally {
        Blockly.Events.enable();
    }
    Blockly.BlockSvg.superClass_.dispose.call(this, healStack);
    goog.dom.removeNode(this.svgGroup_);
    blockWorkspace.resizeContents();
    this.svgGroup_ = null;
    this.svgPath_ = null;
    Blockly.Field.stopCache();
};
Blockly.BlockSvg.prototype.updateDisabled = function () {
};
Blockly.BlockSvg.prototype.getCommentText = function () {
    if (this.comment) {
        var comment = this.comment.getText();
        return comment.replace(/\s+$/, '').replace(/ +\n/g, '\n');
    }
    return '';
};
Blockly.BlockSvg.prototype.setCommentText = function (text, commentId, commentX, commentY, minimized) {
    var changedState = false;
    if (goog.isString(text)) {
        if (!this.comment) {
            this.comment = new Blockly.ScratchBlockComment(this, text, commentId, commentX, commentY, minimized);
            changedState = true;
        }
        else {
            this.comment.setText((text));
        }
    }
    else {
        if (this.comment) {
            this.comment.dispose();
            changedState = true;
        }
    }
    if (changedState && this.rendered) {
        this.render();
        if (goog.isString(text)) {
            this.comment.setVisible(true);
        }
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.setWarningText = function (text, opt_id) {
    if (!this.setWarningText.pid_) {
        this.setWarningText.pid_ = Object.create(null);
    }
    var id = opt_id || '';
    if (!id) {
        for (var n in this.setWarningText.pid_) {
            clearTimeout(this.setWarningText.pid_[n]);
            delete this.setWarningText.pid_[n];
        }
    }
    else if (this.setWarningText.pid_[id]) {
        clearTimeout(this.setWarningText.pid_[id]);
        delete this.setWarningText.pid_[id];
    }
    if (this.workspace.isDragging()) {
        var thisBlock = this;
        this.setWarningText.pid_[id] = setTimeout(function () {
            if (thisBlock.workspace) {
                delete thisBlock.setWarningText.pid_[id];
                thisBlock.setWarningText(text, id);
            }
        }, 100);
        return;
    }
    if (this.isInFlyout) {
        text = null;
    }
    var changedState = false;
    if (goog.isString(text)) {
        if (!this.warning) {
            this.warning = new Blockly.Warning(this);
            changedState = true;
        }
        this.warning.setText((text), id);
    }
    else {
        if (this.warning && !id) {
            this.warning.dispose();
            changedState = true;
        }
        else if (this.warning) {
            var oldText = this.warning.getText();
            this.warning.setText('', id);
            var newText = this.warning.getText();
            if (!newText) {
                this.warning.dispose();
            }
            changedState = oldText != newText;
        }
    }
    if (changedState && this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.setMutator = function (mutator) {
    if (this.mutator && this.mutator !== mutator) {
        this.mutator.dispose();
    }
    if (mutator) {
        mutator.block_ = this;
        this.mutator = mutator;
        mutator.createIcon();
    }
};
Blockly.BlockSvg.prototype.addSelect = function () {
    Blockly.utils.addClass((this.svgGroup_), 'blocklySelected');
};
Blockly.BlockSvg.prototype.removeSelect = function () {
    Blockly.utils.removeClass((this.svgGroup_), 'blocklySelected');
};
Blockly.BlockSvg.prototype.setMouseThroughStyle = function (letMouseThrough) {
    if (letMouseThrough) {
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDraggingMouseThrough');
    }
    else {
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDraggingMouseThrough');
    }
};
Blockly.BlockSvg.prototype.setDeleteStyle = function (enable) {
    if (enable) {
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDraggingDelete');
    }
    else {
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDraggingDelete');
    }
};
Blockly.BlockSvg.prototype.setColour = function (colour, colourSecondary, colourTertiary) {
    Blockly.BlockSvg.superClass_.setColour.call(this, colour, colourSecondary, colourTertiary);
    if (this.rendered) {
        this.updateColour();
    }
};
Blockly.BlockSvg.prototype.bringToFront = function () {
    var block = this;
    do {
        var root = block.getSvgRoot();
        root.parentNode.appendChild(root);
        block = block.getParent();
    } while (block);
};
Blockly.BlockSvg.prototype.setPreviousStatement = function (newBoolean, opt_check) {
    Blockly.BlockSvg.superClass_.setPreviousStatement.call(this, newBoolean, opt_check);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.setNextStatement = function (newBoolean, opt_check) {
    Blockly.BlockSvg.superClass_.setNextStatement.call(this, newBoolean, opt_check);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.setOutput = function (newBoolean, opt_check) {
    Blockly.BlockSvg.superClass_.setOutput.call(this, newBoolean, opt_check);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.setInputsInline = function (newBoolean) {
    Blockly.BlockSvg.superClass_.setInputsInline.call(this, newBoolean);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.removeInput = function (name, opt_quiet) {
    Blockly.BlockSvg.superClass_.removeInput.call(this, name, opt_quiet);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.moveNumberedInputBefore = function (inputIndex, refIndex) {
    Blockly.BlockSvg.superClass_.moveNumberedInputBefore.call(this, inputIndex, refIndex);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
};
Blockly.BlockSvg.prototype.appendInput_ = function (type, name) {
    var input = Blockly.BlockSvg.superClass_.appendInput_.call(this, type, name);
    if (this.rendered) {
        this.render();
        this.bumpNeighbours_();
    }
    return input;
};
Blockly.BlockSvg.prototype.getConnections_ = function (all) {
    var myConnections = [];
    if (all || this.rendered) {
        if (this.outputConnection) {
            myConnections.push(this.outputConnection);
        }
        if (this.previousConnection) {
            myConnections.push(this.previousConnection);
        }
        if (this.nextConnection) {
            myConnections.push(this.nextConnection);
        }
        if (all || !this.collapsed_) {
            for (var i = 0, input; input = this.inputList[i]; i++) {
                if (input.connection) {
                    myConnections.push(input.connection);
                }
            }
        }
    }
    return myConnections;
};
Blockly.BlockSvg.prototype.makeConnection_ = function (type) {
    return new Blockly.RenderedConnection(this, type);
};
Blockly.BlockSvg.prototype.bumpNeighbours_ = function () {
    if (!this.workspace) {
        return;
    }
    if (this.workspace.isDragging()) {
        return;
    }
    var rootBlock = this.getRootBlock();
    if (rootBlock.isInFlyout) {
        return;
    }
    var myConnections = this.getConnections_(false);
    for (var i = 0, connection; connection = myConnections[i]; i++) {
        if (connection.isConnected() && connection.isSuperior()) {
            connection.targetBlock().bumpNeighbours_();
        }
        var neighbours = connection.neighbours_(Blockly.SNAP_RADIUS);
        for (var j = 0, otherConnection; otherConnection = neighbours[j]; j++) {
            if (!connection.isConnected() || !otherConnection.isConnected()) {
                if (otherConnection.getSourceBlock().getRootBlock() != rootBlock) {
                    if (connection.isSuperior()) {
                        otherConnection.bumpAwayFrom_(connection);
                    }
                    else {
                        connection.bumpAwayFrom_(otherConnection);
                    }
                }
            }
        }
    }
};
Blockly.BlockSvg.prototype.scheduleSnapAndBump = function () {
    var block = this;
    var group = Blockly.Events.getGroup();
    setTimeout(function () {
        Blockly.Events.setGroup(group);
        block.snapToGrid();
        Blockly.Events.setGroup(false);
    }, Blockly.BUMP_DELAY / 2);
    setTimeout(function () {
        Blockly.Events.setGroup(group);
        block.bumpNeighbours_();
        Blockly.Events.setGroup(false);
    }, Blockly.BUMP_DELAY);
};
'use strict';
goog.provide('Blockly.BlockSvg.render');
goog.require('Blockly.BlockSvg');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.utils');
Blockly.BlockSvg.GRID_UNIT = 4;
Blockly.BlockSvg.SEP_SPACE_X = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.SEP_SPACE_Y = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_X = 16 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_X_OUTPUT = 12 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_X_SHADOW_OUTPUT = 10 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_Y = 12 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y = 8 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_X_WITH_STATEMENT = 40 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_Y_SINGLE_FIELD_OUTPUT = 8 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER = 10 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MIN_STATEMENT_INPUT_HEIGHT = 6 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.NOTCH_WIDTH = 8 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.NOTCH_HEIGHT = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.CORNER_RADIUS = 1 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.STATEMENT_INPUT_EDGE_WIDTH = 4 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.START_HAT_HEIGHT = 16;
Blockly.BlockSvg.ICON_SEPARATOR_HEIGHT = 10 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.START_HAT_PATH = 'c 25,-22 71,-22 96,0';
Blockly.BlockSvg.NOTCH_PATH_LEFT = ('c 2,0 3,1 4,2 ' +
    'l 4,4 ' +
    'c 1,1 2,2 4,2 ' +
    'h 12 ' +
    'c 2,0 3,-1 4,-2 ' +
    'l 4,-4 ' +
    'c 1,-1 2,-2 4,-2');
Blockly.BlockSvg.NOTCH_PATH_RIGHT = ('c -2,0 -3,1 -4,2 ' +
    'l -4,4 ' +
    'c -1,1 -2,2 -4,2 ' +
    'h -12 ' +
    'c -2,0 -3,-1 -4,-2 ' +
    'l -4,-4 ' +
    'c -1,-1 -2,-2 -4,-2');
Blockly.BlockSvg.NOTCH_START_PADDING = 3 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.TOP_LEFT_CORNER_START =
    'm 0,' + Blockly.BlockSvg.CORNER_RADIUS;
Blockly.BlockSvg.TOP_LEFT_CORNER =
    'A ' + Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS + ' 0 0,1 ' +
        Blockly.BlockSvg.CORNER_RADIUS + ',0';
Blockly.BlockSvg.TOP_RIGHT_CORNER =
    'a ' + Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS + ' 0 0,1 ' +
        Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS;
Blockly.BlockSvg.BOTTOM_RIGHT_CORNER =
    ' a ' + Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS + ' 0 0,1 -' +
        Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS;
Blockly.BlockSvg.BOTTOM_LEFT_CORNER =
    'a ' + Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS + ' 0 0,1 -' +
        Blockly.BlockSvg.CORNER_RADIUS + ',-' +
        Blockly.BlockSvg.CORNER_RADIUS;
Blockly.BlockSvg.INNER_TOP_LEFT_CORNER =
    ' a ' + Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS + ' 0 0,0 -' +
        Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS;
Blockly.BlockSvg.INNER_BOTTOM_LEFT_CORNER =
    'a ' + Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS + ' 0 0,0 ' +
        Blockly.BlockSvg.CORNER_RADIUS + ',' +
        Blockly.BlockSvg.CORNER_RADIUS;
Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL =
    'M ' + 4 * Blockly.BlockSvg.GRID_UNIT + ',0 ' +
        ' h ' + 4 * Blockly.BlockSvg.GRID_UNIT +
        ' l ' + 4 * Blockly.BlockSvg.GRID_UNIT + ',' + 4 * Blockly.BlockSvg.GRID_UNIT +
        ' l ' + -4 * Blockly.BlockSvg.GRID_UNIT + ',' + 4 * Blockly.BlockSvg.GRID_UNIT +
        ' h ' + -4 * Blockly.BlockSvg.GRID_UNIT +
        ' l ' + -4 * Blockly.BlockSvg.GRID_UNIT + ',' + -4 * Blockly.BlockSvg.GRID_UNIT +
        ' l ' + 4 * Blockly.BlockSvg.GRID_UNIT + ',' + -4 * Blockly.BlockSvg.GRID_UNIT +
        ' z';
Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH = 12 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.INPUT_SHAPE_SQUARE =
    Blockly.BlockSvg.TOP_LEFT_CORNER_START +
        Blockly.BlockSvg.TOP_LEFT_CORNER +
        ' h ' + (12 * Blockly.BlockSvg.GRID_UNIT - 2 * Blockly.BlockSvg.CORNER_RADIUS) +
        Blockly.BlockSvg.TOP_RIGHT_CORNER +
        ' v ' + (8 * Blockly.BlockSvg.GRID_UNIT - 2 * Blockly.BlockSvg.CORNER_RADIUS) +
        Blockly.BlockSvg.BOTTOM_RIGHT_CORNER +
        ' h ' + (-12 * Blockly.BlockSvg.GRID_UNIT + 2 * Blockly.BlockSvg.CORNER_RADIUS) +
        Blockly.BlockSvg.BOTTOM_LEFT_CORNER +
        ' z';
Blockly.BlockSvg.INPUT_SHAPE_SQUARE_WIDTH = 10 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.INPUT_SHAPE_ROUND =
    'M ' + (4 * Blockly.BlockSvg.GRID_UNIT) + ',0' +
        ' h ' + (4 * Blockly.BlockSvg.GRID_UNIT) +
        ' a ' + (4 * Blockly.BlockSvg.GRID_UNIT) + ' ' +
        (4 * Blockly.BlockSvg.GRID_UNIT) + ' 0 0 1 0 ' + (8 * Blockly.BlockSvg.GRID_UNIT) +
        ' h ' + (-4 * Blockly.BlockSvg.GRID_UNIT) +
        ' a ' + (4 * Blockly.BlockSvg.GRID_UNIT) + ' ' +
        (4 * Blockly.BlockSvg.GRID_UNIT) + ' 0 0 1 0 -' + (8 * Blockly.BlockSvg.GRID_UNIT) +
        ' z';
Blockly.BlockSvg.INPUT_SHAPE_ROUND_WIDTH = 12 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.INPUT_SHAPE_HEIGHT = 8 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.FIELD_HEIGHT = 8 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.FIELD_WIDTH = 6 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.EDITABLE_FIELD_PADDING = 6;
Blockly.BlockSvg.BOX_FIELD_PADDING = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.DROPDOWN_ARROW_PADDING = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.FIELD_WIDTH_MIN_EDIT = 8 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.FIELD_WIDTH_MAX_EDIT = Infinity;
Blockly.BlockSvg.FIELD_HEIGHT_MAX_EDIT = Blockly.BlockSvg.FIELD_HEIGHT;
Blockly.BlockSvg.FIELD_TOP_PADDING = 0.5 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.NUMBER_FIELD_CORNER_RADIUS = 4 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.TEXT_FIELD_CORNER_RADIUS = 1 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.FIELD_DEFAULT_CORNER_RADIUS = 4 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.MAX_DISPLAY_LENGTH = Infinity;
Blockly.BlockSvg.INPUT_AND_FIELD_MIN_X = 12 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.INLINE_PADDING_Y = 1 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_INITIAL = 12;
Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_FINAL = 12;
Blockly.BlockSvg.FIELD_TEXTINPUT_EXPAND_PAST_TRUNCATION = false;
Blockly.BlockSvg.FIELD_TEXTINPUT_ANIMATE_POSITIONING = false;
Blockly.BlockSvg.SHAPE_IN_SHAPE_PADDING = {
    1: {
        0: 5 * Blockly.BlockSvg.GRID_UNIT,
        1: 2 * Blockly.BlockSvg.GRID_UNIT,
        2: 5 * Blockly.BlockSvg.GRID_UNIT,
        3: 5 * Blockly.BlockSvg.GRID_UNIT
    },
    2: {
        0: 3 * Blockly.BlockSvg.GRID_UNIT,
        1: 3 * Blockly.BlockSvg.GRID_UNIT,
        2: 1 * Blockly.BlockSvg.GRID_UNIT,
        3: 2 * Blockly.BlockSvg.GRID_UNIT
    },
    3: {
        0: 2 * Blockly.BlockSvg.GRID_UNIT,
        1: 2 * Blockly.BlockSvg.GRID_UNIT,
        2: 2 * Blockly.BlockSvg.GRID_UNIT,
        3: 2 * Blockly.BlockSvg.GRID_UNIT
    }
};
Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS = 5 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.TOP_LEFT_CORNER_DEFINE_HAT =
    'a ' + Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS + ',' +
        Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS + ' 0 0,1 ' +
        Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS + ',-' +
        Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS;
Blockly.BlockSvg.TOP_RIGHT_CORNER_DEFINE_HAT =
    'a ' + Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS + ',' +
        Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS + ' 0 0,1 ' +
        Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS + ',' +
        Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS;
Blockly.BlockSvg.DEFINE_BLOCK_PADDING_RIGHT = 2 * Blockly.BlockSvg.GRID_UNIT;
Blockly.BlockSvg.prototype.updateColour = function () {
    var strokeColour = this.getColourTertiary();
    var renderShadowed = this.isShadow() &&
        !Blockly.scratchBlocksUtils.isShadowArgumentReporter(this);
    if (renderShadowed && this.parentBlock_) {
        strokeColour = this.parentBlock_.getColourTertiary();
        if (this.inputList[0] &&
            this.inputList[0].fieldRow[0] &&
            (this.inputList[0].fieldRow[0] instanceof Blockly.FieldColour ||
                this.inputList[0].fieldRow[0] instanceof Blockly.FieldColourSlider)) {
            strokeColour = Blockly.Colours.colourPickerStroke;
        }
    }
    this.svgPath_.setAttribute('stroke', strokeColour);
    if (this.isGlowingBlock_ || renderShadowed) {
        if (this.getShadowColour()) {
            var fillColour = this.getShadowColour();
        }
        else {
            var fillColour = this.getColourSecondary();
        }
    }
    else {
        var fillColour = this.getColour();
    }
    this.svgPath_.setAttribute('fill', fillColour);
    this.svgPath_.setAttribute('fill-opacity', this.getOpacity());
    for (var i = 0, input; input = this.inputList[i]; i++) {
        if (input.outlinePath) {
            input.outlinePath.setAttribute('fill', this.getColourTertiary());
        }
    }
    var icons = this.getIcons();
    for (var i = 0; i < icons.length; i++) {
        icons[i].updateColour();
    }
    for (var x = 0, input; input = this.inputList[x]; x++) {
        for (var y = 0, field; field = input.fieldRow[y]; y++) {
            field.setText(null);
        }
    }
};
Blockly.BlockSvg.prototype.highlightForReplacement = function (add) {
    if (add) {
        var replacementGlowFilterId = this.workspace.options.replacementGlowFilterId
            || 'blocklyReplacementGlowFilter';
        this.svgPath_.setAttribute('filter', 'url(#' + replacementGlowFilterId + ')');
        Blockly.utils.addClass((this.svgGroup_), 'blocklyReplaceable');
    }
    else {
        this.svgPath_.removeAttribute('filter');
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyReplaceable');
    }
};
Blockly.BlockSvg.prototype.highlightShapeForInput = function (conn, add) {
    var input = this.getInputWithConnection(conn);
    if (!input) {
        throw 'No input found for the connection';
    }
    if (!input.outlinePath) {
        return;
    }
    if (add) {
        var replacementGlowFilterId = this.workspace.options.replacementGlowFilterId
            || 'blocklyReplacementGlowFilter';
        input.outlinePath.setAttribute('filter', 'url(#' + replacementGlowFilterId + ')');
        Blockly.utils.addClass((this.svgGroup_), 'blocklyReplaceable');
    }
    else {
        input.outlinePath.removeAttribute('filter');
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyReplaceable');
    }
};
Blockly.BlockSvg.prototype.getHeightWidth = function () {
    var height = this.height;
    var width = this.width;
    var nextBlock = this.getNextBlock();
    if (nextBlock) {
        var nextHeightWidth = nextBlock.getHeightWidth();
        height += nextHeightWidth.height;
        height -= Blockly.BlockSvg.NOTCH_HEIGHT;
        width = Math.max(width, nextHeightWidth.width);
    }
    return { height: height, width: width };
};
Blockly.BlockSvg.prototype.render = function (opt_bubble) {
    Blockly.Field.startCache();
    this.rendered = true;
    var cursorX = Blockly.BlockSvg.SEP_SPACE_X;
    if (this.RTL) {
        cursorX = -cursorX;
    }
    var icons = this.getIcons();
    var scratchCommentIcon = null;
    for (var i = 0; i < icons.length; i++) {
        if (icons[i] instanceof Blockly.ScratchBlockComment) {
            scratchCommentIcon = icons[i];
        }
        else {
            cursorX = icons[i].renderIcon(cursorX);
        }
    }
    cursorX += this.RTL ?
        Blockly.BlockSvg.SEP_SPACE_X : -Blockly.BlockSvg.SEP_SPACE_X;
    if (this.isScratchExtension && this.outputConnection) {
        cursorX += this.RTL ?
            -Blockly.BlockSvg.GRID_UNIT : Blockly.BlockSvg.GRID_UNIT;
    }
    var inputRows = this.renderCompute_(cursorX);
    this.renderDraw_(cursorX, inputRows);
    this.renderMoveConnections_();
    this.renderClassify_();
    if (scratchCommentIcon) {
        var iconX = this.RTL ? -inputRows.rightEdge : inputRows.rightEdge;
        var inputMarginY = inputRows[0].height / 2;
        scratchCommentIcon.renderIcon(iconX, inputMarginY);
    }
    if (opt_bubble !== false) {
        var parentBlock = this.getParent();
        if (parentBlock) {
            parentBlock.render(true);
        }
        else {
            Blockly.resizeSvgContents(this.workspace);
        }
    }
    Blockly.Field.stopCache();
};
Blockly.BlockSvg.prototype.renderFields_ = function (fieldList, cursorX, cursorY) {
    if (this.RTL) {
        cursorX = -cursorX;
    }
    for (var t = 0, field; field = fieldList[t]; t++) {
        var root = field.getSvgRoot();
        if (!root) {
            continue;
        }
        if (this.previousConnection && !(field instanceof Blockly.FieldLabel) &&
            !(field instanceof Blockly.FieldImage)) {
            cursorX = this.RTL ?
                Math.min(cursorX, -Blockly.BlockSvg.INPUT_AND_FIELD_MIN_X) :
                Math.max(cursorX, Blockly.BlockSvg.INPUT_AND_FIELD_MIN_X);
        }
        var yOffset = -field.getSize().height / 2;
        if (this.isScratchExtension && (field === this.inputList[0].fieldRow[0])
            && (field instanceof Blockly.FieldImage) && this.previousConnection) {
            yOffset += Blockly.BlockSvg.GRID_UNIT;
        }
        if (this.isScratchExtension &&
            !this.previousConnection && this.nextConnection &&
            field instanceof Blockly.FieldVerticalSeparator) {
            field.setLineHeight(Blockly.BlockSvg.ICON_SEPARATOR_HEIGHT -
                Blockly.BlockSvg.GRID_UNIT);
        }
        var translateX, translateY;
        var scale = '';
        if (this.RTL) {
            cursorX -= field.renderSep + field.renderWidth;
            translateX = cursorX;
            translateY = cursorY + yOffset;
            if (field.renderWidth) {
                cursorX -= Blockly.BlockSvg.SEP_SPACE_X;
            }
        }
        else {
            translateX = cursorX + field.renderSep;
            translateY = cursorY + yOffset;
            if (field.renderWidth) {
                cursorX += field.renderSep + field.renderWidth +
                    Blockly.BlockSvg.SEP_SPACE_X;
            }
        }
        if (this.RTL &&
            field instanceof Blockly.FieldImage &&
            field.getFlipRTL()) {
            scale = 'scale(-1 1)';
            translateX += field.renderWidth;
        }
        root.setAttribute('transform', 'translate(' + translateX + ', ' + translateY + ') ' + scale);
        if (this.isInsertionMarker()) {
            root.setAttribute('display', 'none');
        }
    }
    return this.RTL ? -cursorX : cursorX;
};
Blockly.BlockSvg.prototype.renderCompute_ = function (iconWidth) {
    var inputList = this.inputList;
    var inputRows = [];
    inputRows.rightEdge = 0;
    inputRows.bottomEdge = 0;
    var fieldValueWidth = 0;
    var fieldStatementWidth = 0;
    var hasValue = false;
    var hasStatement = false;
    var hasDummy = false;
    var lastType = undefined;
    var previousRow;
    for (var i = 0, input; input = inputList[i]; i++) {
        if (!input.isVisible()) {
            continue;
        }
        var isSecondInputOnProcedure = this.type == 'procedures_definition' &&
            lastType && lastType == Blockly.NEXT_STATEMENT;
        var row;
        if (!isSecondInputOnProcedure &&
            (!lastType || lastType == Blockly.NEXT_STATEMENT ||
                input.type == Blockly.NEXT_STATEMENT)) {
            lastType = input.type;
            row = this.createRowForInput_(input);
            inputRows.push(row);
        }
        else {
            row = inputRows[inputRows.length - 1];
        }
        row.push(input);
        input.renderHeight = this.computeInputHeight_(input, row, previousRow);
        input.renderWidth = this.computeInputWidth_(input);
        row.statementNotchAtBottom = true;
        if (input.connection && input.connection.type === Blockly.NEXT_STATEMENT) {
            var linkedBlock = input.connection.targetBlock();
            if (linkedBlock && !linkedBlock.lastConnectionInStack()) {
                row.statementNotchAtBottom = false;
            }
        }
        if (input.connection) {
            var linkedBlock = input.connection.targetBlock();
            var paddedHeight = 0;
            var paddedWidth = 0;
            if (linkedBlock) {
                var bBox = linkedBlock.getHeightWidth();
                paddedHeight = bBox.height;
                paddedWidth = bBox.width;
            }
            else {
                paddedHeight = Blockly.BlockSvg.INPUT_SHAPE_HEIGHT;
            }
            if (input.connection.type === Blockly.INPUT_VALUE) {
                paddedHeight += 2 * Blockly.BlockSvg.INLINE_PADDING_Y;
            }
            if (input.connection.type === Blockly.NEXT_STATEMENT) {
                if (row.statementNotchAtBottom) {
                    paddedHeight -= Blockly.BlockSvg.NOTCH_HEIGHT;
                }
            }
            input.renderHeight = Math.max(input.renderHeight, paddedHeight);
            input.renderWidth = Math.max(input.renderWidth, paddedWidth);
        }
        row.height = Math.max(row.height, input.renderHeight);
        input.fieldWidth = 0;
        if (inputRows.length == 1) {
            input.fieldWidth += this.RTL ? -iconWidth : iconWidth;
        }
        var previousFieldEditable = false;
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            if (j != 0) {
                input.fieldWidth += Blockly.BlockSvg.SEP_SPACE_X;
            }
            var fieldSize = field.getSize();
            field.renderWidth = fieldSize.width;
            field.renderSep = (previousFieldEditable && field.EDITABLE) ?
                Blockly.BlockSvg.SEP_SPACE_X : 0;
            if (!isSecondInputOnProcedure) {
                input.fieldWidth += field.renderWidth + field.renderSep;
            }
            row.height = Math.max(row.height, fieldSize.height);
            previousFieldEditable = field.EDITABLE;
        }
        if (row.type != Blockly.BlockSvg.INLINE) {
            if (row.type == Blockly.NEXT_STATEMENT) {
                hasStatement = true;
                fieldStatementWidth = Math.max(fieldStatementWidth, input.fieldWidth);
            }
            else {
                if (row.type == Blockly.INPUT_VALUE) {
                    hasValue = true;
                }
                else if (row.type == Blockly.DUMMY_INPUT) {
                    hasDummy = true;
                }
                fieldValueWidth = Math.max(fieldValueWidth, input.fieldWidth);
            }
        }
        previousRow = row;
    }
    this.computeOutputPadding_(inputRows);
    inputRows.statementEdge = Blockly.BlockSvg.STATEMENT_INPUT_EDGE_WIDTH +
        fieldStatementWidth;
    inputRows.rightEdge = this.computeRightEdge_(inputRows.rightEdge, hasStatement);
    for (var i = 0; i < inputRows.length; i++) {
        inputRows.bottomEdge += inputRows[i].height;
    }
    inputRows.hasValue = hasValue;
    inputRows.hasStatement = hasStatement;
    inputRows.hasDummy = hasDummy;
    return inputRows;
};
Blockly.BlockSvg.prototype.computeInputWidth_ = function (input) {
    if (input.type == Blockly.INPUT_VALUE &&
        (!input.connection || !input.connection.isConnected())) {
        switch (input.connection.getOutputShape()) {
            case Blockly.OUTPUT_SHAPE_SQUARE:
                return Blockly.BlockSvg.INPUT_SHAPE_SQUARE_WIDTH;
            case Blockly.OUTPUT_SHAPE_ROUND:
                return Blockly.BlockSvg.INPUT_SHAPE_ROUND_WIDTH;
            case Blockly.OUTPUT_SHAPE_HEXAGONAL:
                return Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH;
            default:
                return 0;
        }
    }
    else {
        return 0;
    }
};
Blockly.BlockSvg.prototype.computeInputHeight_ = function (input, row, previousRow) {
    if (this.inputList.length === 1 && this.outputConnection &&
        (this.isShadow() &&
            !Blockly.scratchBlocksUtils.isShadowArgumentReporter(this))) {
        return Blockly.BlockSvg.MIN_BLOCK_Y_SINGLE_FIELD_OUTPUT;
    }
    else if (this.outputConnection) {
        if (this.isScratchExtension) {
            return Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER + 2 * Blockly.BlockSvg.GRID_UNIT;
        }
        return Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER;
    }
    else if (row.type == Blockly.NEXT_STATEMENT) {
        return Blockly.BlockSvg.MIN_STATEMENT_INPUT_HEIGHT;
    }
    else if (previousRow && previousRow.type == Blockly.NEXT_STATEMENT) {
        return Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y;
    }
    else {
        if (this.isScratchExtension && this.previousConnection) {
            return Blockly.BlockSvg.MIN_BLOCK_Y + 2 * Blockly.BlockSvg.GRID_UNIT;
        }
        return Blockly.BlockSvg.MIN_BLOCK_Y;
    }
};
Blockly.BlockSvg.prototype.createRowForInput_ = function (input) {
    var row = [];
    if (input.type != Blockly.NEXT_STATEMENT) {
        row.type = Blockly.BlockSvg.INLINE;
    }
    else {
        row.type = input.type;
    }
    row.height = 0;
    row.paddingStart = Blockly.BlockSvg.SEP_SPACE_X;
    row.paddingEnd = Blockly.BlockSvg.SEP_SPACE_X;
    return row;
};
Blockly.BlockSvg.prototype.computeRightEdge_ = function (curEdge, hasStatement) {
    var edge = curEdge;
    if (this.previousConnection || this.nextConnection) {
        edge = Math.max(edge, Blockly.BlockSvg.MIN_BLOCK_X);
    }
    else if (this.outputConnection) {
        if (this.isShadow() &&
            !Blockly.scratchBlocksUtils.isShadowArgumentReporter(this)) {
            edge = Math.max(edge, Blockly.BlockSvg.MIN_BLOCK_X_SHADOW_OUTPUT);
        }
        else {
            edge = Math.max(edge, Blockly.BlockSvg.MIN_BLOCK_X_OUTPUT);
        }
    }
    if (hasStatement) {
        edge = Math.max(edge, Blockly.BlockSvg.MIN_BLOCK_X_WITH_STATEMENT);
    }
    if (this.insertionMarkerMinWidth_ > 0) {
        edge = Math.max(edge, this.insertionMarkerMinWidth_);
    }
    return edge;
};
Blockly.BlockSvg.prototype.computeOutputPadding_ = function (inputRows) {
    if (!this.getOutputShape() || !this.outputConnection ||
        (this.isShadow() &&
            !Blockly.scratchBlocksUtils.isShadowArgumentReporter(this))) {
        return;
    }
    if (inputRows.length > 1) {
        return;
    }
    var row = inputRows[0];
    var shape = this.getOutputShape();
    row.paddingStart = 0;
    row.paddingEnd = 0;
    var firstInput = row[0];
    var firstField = firstInput.fieldRow[0];
    var otherShape;
    if (firstField) {
        otherShape = 0;
    }
    else {
        var inputConnection = firstInput.connection;
        if (!inputConnection.targetConnection) {
            otherShape = inputConnection.getOutputShape();
        }
        else {
            otherShape = inputConnection.targetConnection.getSourceBlock().getOutputShape();
        }
        if (shape == Blockly.OUTPUT_SHAPE_HEXAGONAL &&
            otherShape != Blockly.OUTPUT_SHAPE_HEXAGONAL) {
            var deltaHeight = firstInput.renderHeight - Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER;
            row.paddingStart += deltaHeight / 2;
        }
    }
    row.paddingStart += Blockly.BlockSvg.SHAPE_IN_SHAPE_PADDING[shape][otherShape];
    var lastInput = row[row.length - 1];
    if (lastInput.connection) {
        var inputConnection = lastInput.connection;
        if (!inputConnection.targetConnection) {
            otherShape = inputConnection.getOutputShape();
        }
        else {
            otherShape = inputConnection.targetConnection.getSourceBlock().getOutputShape();
        }
        if (shape == Blockly.OUTPUT_SHAPE_HEXAGONAL &&
            otherShape != Blockly.OUTPUT_SHAPE_HEXAGONAL) {
            var deltaHeight = lastInput.renderHeight - Blockly.BlockSvg.MIN_BLOCK_Y_REPORTER;
            row.paddingEnd += deltaHeight / 2;
        }
    }
    else {
        otherShape = 0;
    }
    row.paddingEnd += Blockly.BlockSvg.SHAPE_IN_SHAPE_PADDING[shape][otherShape];
};
Blockly.BlockSvg.prototype.renderDraw_ = function (iconWidth, inputRows) {
    this.startHat_ = false;
    this.squareTopLeftCorner_ = false;
    if (!this.outputConnection && !this.previousConnection) {
        this.squareTopLeftCorner_ = true;
        this.startHat_ = true;
        inputRows.rightEdge = Math.max(inputRows.rightEdge, 100);
    }
    this.edgeShapeWidth_ = 0;
    this.edgeShape_ = null;
    if (this.outputConnection) {
        var shape = this.getOutputShape();
        if (shape === Blockly.OUTPUT_SHAPE_HEXAGONAL || shape === Blockly.OUTPUT_SHAPE_ROUND) {
            this.edgeShapeWidth_ = inputRows.bottomEdge / 2;
            this.edgeShape_ = shape;
            this.squareTopLeftCorner_ = true;
        }
    }
    var steps = [];
    this.renderDrawTop_(steps, inputRows.rightEdge);
    var cursorY = this.renderDrawRight_(steps, inputRows, iconWidth);
    this.renderDrawBottom_(steps, cursorY);
    this.renderDrawLeft_(steps);
    var pathString = steps.join(' ');
    this.svgPath_.setAttribute('d', pathString);
    if (this.RTL) {
        this.svgPath_.setAttribute('transform', 'scale(-1 1)');
    }
};
Blockly.BlockSvg.prototype.renderClassify_ = function () {
    var shapes = [];
    if (this.outputConnection) {
        if (this.isShadow_) {
            shapes.push('argument');
        }
        else {
            shapes.push('reporter');
        }
        if (this.edgeShape_ === Blockly.OUTPUT_SHAPE_HEXAGONAL) {
            shapes.push('boolean');
        }
        else if (this.edgeShape_ === Blockly.OUTPUT_SHAPE_ROUND) {
            shapes.push('round');
        }
    }
    else {
        var inputList = this.inputList;
        var statementCount = 0;
        for (var i = 0, input; input = inputList[i]; i++) {
            if (input.connection && input.connection.type === Blockly.NEXT_STATEMENT) {
                statementCount++;
            }
        }
        if (statementCount) {
            shapes.push('c-block');
            shapes.push('c-' + statementCount);
        }
        if (this.startHat_) {
            shapes.push('hat');
        }
        else if (!statementCount) {
            shapes.push('stack');
        }
        if (!this.nextConnection) {
            shapes.push('end');
        }
    }
    this.svgGroup_.setAttribute('data-shapes', shapes.join(' '));
    if (this.getCategory()) {
        this.svgGroup_.setAttribute('data-category', this.getCategory());
    }
};
Blockly.BlockSvg.prototype.renderDrawTop_ = function (steps, rightEdge) {
    if (this.type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE) {
        steps.push('m 0, 0');
        steps.push(Blockly.BlockSvg.TOP_LEFT_CORNER_DEFINE_HAT);
    }
    else {
        if (this.squareTopLeftCorner_) {
            steps.push('m 0,0');
            if (this.startHat_) {
                steps.push(Blockly.BlockSvg.START_HAT_PATH);
            }
            if (this.edgeShapeWidth_) {
                steps.push('m ' + this.edgeShapeWidth_ + ',0');
            }
        }
        else {
            steps.push(Blockly.BlockSvg.TOP_LEFT_CORNER_START);
            steps.push(Blockly.BlockSvg.TOP_LEFT_CORNER);
        }
        if (this.previousConnection) {
            steps.push('H', Blockly.BlockSvg.NOTCH_START_PADDING);
            steps.push(Blockly.BlockSvg.NOTCH_PATH_LEFT);
            var connectionX = (this.RTL ?
                -Blockly.BlockSvg.NOTCH_WIDTH : Blockly.BlockSvg.NOTCH_WIDTH);
            this.previousConnection.setOffsetInBlock(connectionX, 0);
        }
    }
    this.width = rightEdge;
};
Blockly.BlockSvg.prototype.renderDrawRight_ = function (steps, inputRows, iconWidth) {
    var cursorX = 0;
    var cursorY = 0;
    var connectionX, connectionY;
    for (var y = 0, row; row = inputRows[y]; y++) {
        cursorX = row.paddingStart;
        if (y == 0) {
            cursorX += this.RTL ? -iconWidth : iconWidth;
        }
        if (row.type == Blockly.BlockSvg.INLINE) {
            for (var x = 0, input; input = row[x]; x++) {
                var fieldY = cursorY + row.height / 2;
                var fieldX = Blockly.BlockSvg.getAlignedCursor_(cursorX, input, inputRows.rightEdge);
                cursorX = this.renderFields_(input.fieldRow, fieldX, fieldY);
                if (input.type == Blockly.INPUT_VALUE) {
                    if (this.previousConnection) {
                        cursorX = Math.max(cursorX, Blockly.BlockSvg.INPUT_AND_FIELD_MIN_X);
                    }
                    connectionX = this.RTL ? -cursorX : cursorX;
                    var connectionYOffset = row.height / 2;
                    connectionY = cursorY + connectionYOffset;
                    input.connection.setOffsetInBlock(connectionX, connectionY);
                    this.renderInputShape_(input, cursorX, cursorY + connectionYOffset);
                    cursorX += input.renderWidth + Blockly.BlockSvg.SEP_SPACE_X;
                }
            }
            cursorX -= Blockly.BlockSvg.SEP_SPACE_X;
            cursorX += row.paddingEnd;
            inputRows.rightEdge = Math.max(cursorX, inputRows.rightEdge);
            cursorX = Math.max(cursorX, inputRows.rightEdge);
            this.width = Math.max(this.width, cursorX);
            if (!this.edgeShape_) {
                steps.push('H', cursorX - Blockly.BlockSvg.CORNER_RADIUS - this.edgeShapeWidth_);
                steps.push(Blockly.BlockSvg.TOP_RIGHT_CORNER);
            }
            else {
                steps.push('H', cursorX - this.edgeShapeWidth_);
            }
            if (!this.edgeShape_) {
                steps.push('v', row.height - Blockly.BlockSvg.CORNER_RADIUS * 2);
            }
        }
        else if (row.type == Blockly.NEXT_STATEMENT) {
            var input = row[0];
            var fieldX = cursorX;
            var fieldY = cursorY;
            fieldY += Blockly.BlockSvg.MIN_STATEMENT_INPUT_HEIGHT;
            this.renderFields_(input.fieldRow, fieldX, fieldY);
            cursorX = inputRows.statementEdge + Blockly.BlockSvg.NOTCH_WIDTH;
            if (this.type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE) {
                this.renderDefineBlock_(steps, inputRows, input, row, cursorY);
            }
            else {
                Blockly.BlockSvg.drawStatementInputFromTopRight_(steps, cursorX, inputRows.rightEdge, row);
            }
            connectionX = this.RTL ? -cursorX : cursorX;
            input.connection.setOffsetInBlock(connectionX, cursorY);
            if (input.connection.isConnected()) {
                this.width = Math.max(this.width, inputRows.statementEdge +
                    input.connection.targetBlock().getHeightWidth().width);
            }
            if (this.type != Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE &&
                (y == inputRows.length - 1 ||
                    inputRows[y + 1].type == Blockly.NEXT_STATEMENT)) {
                steps.push(Blockly.BlockSvg.TOP_RIGHT_CORNER);
                steps.push('v', Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y - 2 * Blockly.BlockSvg.CORNER_RADIUS);
                cursorY += Blockly.BlockSvg.EXTRA_STATEMENT_ROW_Y;
            }
        }
        cursorY += row.height;
    }
    this.drawEdgeShapeRight_(steps);
    if (!inputRows.length) {
        cursorY = Blockly.BlockSvg.MIN_BLOCK_Y;
        steps.push('V', cursorY);
    }
    return cursorY;
};
Blockly.BlockSvg.prototype.renderInputShape_ = function (input, x, y) {
    var inputShape = input.outlinePath;
    if (!inputShape) {
        return;
    }
    if (input.connection.targetConnection) {
        inputShape.setAttribute('style', 'visibility: hidden');
    }
    else {
        var inputShapeX = 0, inputShapeY = 0;
        var inputShapeInfo = Blockly.BlockSvg.getInputShapeInfo_(input.connection.getOutputShape());
        if (this.RTL) {
            inputShapeX = -x - inputShapeInfo.width;
        }
        else {
            inputShapeX = x;
        }
        inputShapeY = y - (Blockly.BlockSvg.INPUT_SHAPE_HEIGHT / 2);
        inputShape.setAttribute('d', inputShapeInfo.path);
        inputShape.setAttribute('transform', 'translate(' + inputShapeX + ',' + inputShapeY + ')');
        inputShape.setAttribute('data-argument-type', inputShapeInfo.argType);
        inputShape.setAttribute('style', 'visibility: visible');
    }
};
Blockly.BlockSvg.prototype.renderDrawBottom_ = function (steps, cursorY) {
    this.height = cursorY;
    if (!this.edgeShape_) {
        steps.push(Blockly.BlockSvg.BOTTOM_RIGHT_CORNER);
    }
    if (this.nextConnection) {
        var notchStart = (Blockly.BlockSvg.NOTCH_WIDTH +
            Blockly.BlockSvg.NOTCH_START_PADDING +
            Blockly.BlockSvg.CORNER_RADIUS);
        steps.push('H', notchStart, ' ');
        steps.push(Blockly.BlockSvg.NOTCH_PATH_RIGHT);
        var connectionX = this.RTL ? -Blockly.BlockSvg.NOTCH_WIDTH :
            Blockly.BlockSvg.NOTCH_WIDTH;
        this.nextConnection.setOffsetInBlock(connectionX, cursorY);
        this.height += Blockly.BlockSvg.NOTCH_HEIGHT;
    }
    if (!this.edgeShape_) {
        steps.push('H', Blockly.BlockSvg.CORNER_RADIUS);
        steps.push(Blockly.BlockSvg.BOTTOM_LEFT_CORNER);
    }
    else {
        steps.push('H', this.edgeShapeWidth_);
    }
};
Blockly.BlockSvg.prototype.renderDrawLeft_ = function (steps) {
    if (this.outputConnection) {
        this.outputConnection.setOffsetInBlock(0, this.height / 2);
    }
    if (this.edgeShape_) {
        if (this.edgeShape_ === Blockly.OUTPUT_SHAPE_ROUND) {
            steps.push('a ' + this.edgeShapeWidth_ + ' ' + this.edgeShapeWidth_ + ' 0 0 1 0 -' + this.edgeShapeWidth_ * 2);
        }
        else if (this.edgeShape_ === Blockly.OUTPUT_SHAPE_HEXAGONAL) {
            steps.push('l ' + -this.edgeShapeWidth_ + ' ' + -this.edgeShapeWidth_ +
                ' l ' + this.edgeShapeWidth_ + ' ' + -this.edgeShapeWidth_);
        }
    }
    steps.push('z');
};
Blockly.BlockSvg.prototype.drawEdgeShapeRight_ = function (steps) {
    if (this.edgeShape_) {
        if (this.edgeShape_ === Blockly.OUTPUT_SHAPE_ROUND) {
            steps.push('a ' + this.edgeShapeWidth_ + ' ' + this.edgeShapeWidth_ +
                ' 0 0 1 0 ' + this.edgeShapeWidth_ * 2);
        }
        else if (this.edgeShape_ === Blockly.OUTPUT_SHAPE_HEXAGONAL) {
            steps.push('l ' + this.edgeShapeWidth_ + ' ' + this.edgeShapeWidth_ +
                ' l ' + -this.edgeShapeWidth_ + ' ' + this.edgeShapeWidth_);
        }
    }
};
Blockly.BlockSvg.prototype.positionNewBlock = function (newBlock, newConnection, existingConnection) {
    if (newConnection.type == Blockly.NEXT_STATEMENT) {
        var dx = existingConnection.x_ - newConnection.x_;
        var dy = existingConnection.y_ - newConnection.y_;
        newBlock.moveBy(dx, dy);
    }
};
Blockly.BlockSvg.drawStatementInputFromTopRight_ = function (steps, cursorX, rightEdge, row) {
    Blockly.BlockSvg.drawStatementInputTop_(steps, cursorX);
    steps.push('v', row.height - 2 * Blockly.BlockSvg.CORNER_RADIUS);
    Blockly.BlockSvg.drawStatementInputBottom_(steps, rightEdge, row);
};
Blockly.BlockSvg.drawStatementInputTop_ = function (steps, cursorX) {
    steps.push(Blockly.BlockSvg.BOTTOM_RIGHT_CORNER);
    steps.push('H', cursorX + Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE +
        2 * Blockly.BlockSvg.CORNER_RADIUS);
    steps.push(Blockly.BlockSvg.NOTCH_PATH_RIGHT);
    steps.push('h', '-' + Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE);
    steps.push(Blockly.BlockSvg.INNER_TOP_LEFT_CORNER);
};
Blockly.BlockSvg.drawStatementInputBottom_ = function (steps, rightEdge, row) {
    steps.push(Blockly.BlockSvg.INNER_BOTTOM_LEFT_CORNER);
    if (row.statementNotchAtBottom) {
        steps.push('h ', Blockly.BlockSvg.STATEMENT_INPUT_INNER_SPACE);
        steps.push(Blockly.BlockSvg.NOTCH_PATH_LEFT);
    }
    steps.push('H', rightEdge - Blockly.BlockSvg.CORNER_RADIUS);
};
Blockly.BlockSvg.prototype.renderDefineBlock_ = function (steps, inputRows, input, row, cursorY) {
    var hasFollowingText = row.length == 2;
    var rightSide = inputRows.rightEdge;
    if (input.connection && input.connection.targetBlock()) {
        rightSide = inputRows.statementEdge +
            input.connection.targetBlock().getHeightWidth().width +
            Blockly.BlockSvg.DEFINE_BLOCK_PADDING_RIGHT;
    }
    else {
        rightSide = Math.max(Blockly.BlockSvg.MIN_BLOCK_X_WITH_STATEMENT, rightSide)
            + Blockly.BlockSvg.DEFINE_BLOCK_PADDING_RIGHT;
    }
    rightSide -= Blockly.BlockSvg.DEFINE_HAT_CORNER_RADIUS;
    if (hasFollowingText) {
        var followingTextInput = row[1];
        var fieldStart = rightSide + 3 * Blockly.BlockSvg.SEP_SPACE_X;
        rightSide += followingTextInput.fieldRow[0].getSize().width;
        rightSide += 2 * Blockly.BlockSvg.SEP_SPACE_X;
        var fieldY = cursorY;
        fieldY += Blockly.BlockSvg.MIN_STATEMENT_INPUT_HEIGHT;
        this.renderFields_(followingTextInput.fieldRow, fieldStart, fieldY);
    }
    steps.push('H', rightSide);
    steps.push(Blockly.BlockSvg.TOP_RIGHT_CORNER_DEFINE_HAT);
    row.height += 3 * Blockly.BlockSvg.GRID_UNIT;
    steps.push('v', row.height);
    row.height += Blockly.BlockSvg.GRID_UNIT;
};
Blockly.BlockSvg.getInputShapeInfo_ = function (shape) {
    var inputShapePath = null;
    var inputShapeArgType = null;
    var inputShapeWidth = 0;
    switch (shape) {
        case Blockly.OUTPUT_SHAPE_HEXAGONAL:
            inputShapePath = Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL;
            inputShapeWidth = Blockly.BlockSvg.INPUT_SHAPE_HEXAGONAL_WIDTH;
            inputShapeArgType = 'boolean';
            break;
        case Blockly.OUTPUT_SHAPE_ROUND:
            inputShapePath = Blockly.BlockSvg.INPUT_SHAPE_ROUND;
            inputShapeWidth = Blockly.BlockSvg.INPUT_SHAPE_ROUND_WIDTH;
            inputShapeArgType = 'round';
            break;
        case Blockly.OUTPUT_SHAPE_SQUARE:
        default:
            inputShapePath = Blockly.BlockSvg.INPUT_SHAPE_SQUARE;
            inputShapeWidth = Blockly.BlockSvg.INPUT_SHAPE_SQUARE_WIDTH;
            inputShapeArgType = 'square';
            break;
    }
    return {
        path: inputShapePath,
        argType: inputShapeArgType,
        width: inputShapeWidth
    };
};
Blockly.BlockSvg.getAlignedCursor_ = function (cursorX, input, rightEdge) {
    if (input.align === Blockly.ALIGN_RIGHT) {
        cursorX += rightEdge - input.fieldWidth -
            (2 * Blockly.BlockSvg.SEP_SPACE_X);
    }
    else if (input.align === Blockly.ALIGN_CENTRE) {
        cursorX = Math.max(cursorX, rightEdge / 2 - input.fieldWidth / 2);
    }
    return cursorX;
};
Blockly.BlockSvg.prototype.renderMoveConnections_ = function () {
    var blockTL = this.getRelativeToSurfaceXY();
    if (this.previousConnection) {
        this.previousConnection.moveToOffset(blockTL);
    }
    if (this.outputConnection) {
        this.outputConnection.moveToOffset(blockTL);
    }
    for (var i = 0; i < this.inputList.length; i++) {
        var conn = this.inputList[i].connection;
        if (conn) {
            conn.moveToOffset(blockTL);
            if (conn.isConnected()) {
                conn.tighten_();
            }
        }
    }
    if (this.nextConnection) {
        this.nextConnection.moveToOffset(blockTL);
        if (this.nextConnection.isConnected()) {
            this.nextConnection.tighten_();
        }
    }
};
'use strict';
goog.provide('Blockly.BlockAnimations');
Blockly.BlockAnimations.disposeUiEffect = function (block) {
    var workspace = block.workspace;
    var svgGroup = block.getSvgRoot();
    workspace.getAudioManager().play('delete');
    var xy = workspace.getSvgXY(svgGroup);
    var clone = svgGroup.cloneNode(true);
    clone.translateX_ = xy.x;
    clone.translateY_ = xy.y;
    clone.setAttribute('transform', 'translate(' + xy.x + ',' + xy.y + ')');
    workspace.getParentSvg().appendChild(clone);
    clone.bBox_ = clone.getBBox();
    Blockly.BlockAnimations.disposeUiStep_(clone, workspace.RTL, new Date, workspace.scale);
};
Blockly.BlockAnimations.disposeUiStep_ = function (clone, rtl, start, workspaceScale) {
    var ms = new Date - start;
    var percent = ms / 150;
    if (percent > 1) {
        goog.dom.removeNode(clone);
    }
    else {
        var x = clone.translateX_ +
            (rtl ? -1 : 1) * clone.bBox_.width * workspaceScale / 2 * percent;
        var y = clone.translateY_ + clone.bBox_.height * workspaceScale * percent;
        var scale = (1 - percent) * workspaceScale;
        clone.setAttribute('transform', 'translate(' + x + ',' + y + ')' +
            ' scale(' + scale + ')');
        setTimeout(Blockly.BlockAnimations.disposeUiStep_, 10, clone, rtl, start, workspaceScale);
    }
};
Blockly.BlockAnimations.connectionUiEffect = function (block) {
    block.workspace.getAudioManager().play('click');
};
Blockly.BlockAnimations.disconnectUiEffect = function (_block) {
};
Blockly.BlockAnimations.disconnectUiStop = function () {
};
'use strict';
goog.provide('Blockly.BlockDragSurfaceSvg');
goog.require('Blockly.utils');
goog.require('goog.asserts');
goog.require('goog.math.Coordinate');
Blockly.BlockDragSurfaceSvg = function (container) {
    this.container_ = container;
    this.createDom();
};
Blockly.BlockDragSurfaceSvg.prototype.SVG_ = null;
Blockly.BlockDragSurfaceSvg.prototype.dragGroup_ = null;
Blockly.BlockDragSurfaceSvg.prototype.container_ = null;
Blockly.BlockDragSurfaceSvg.prototype.scale_ = 1;
Blockly.BlockDragSurfaceSvg.prototype.surfaceXY_ = null;
Blockly.BlockDragSurfaceSvg.prototype.dragShadowFilterId_ = '';
Blockly.BlockDragSurfaceSvg.SHADOW_STD_DEVIATION = 6;
Blockly.BlockDragSurfaceSvg.prototype.createDom = function () {
    if (this.SVG_) {
        return;
    }
    this.SVG_ = Blockly.utils.createSvgElement('svg', {
        'xmlns': Blockly.SVG_NS,
        'xmlns:html': Blockly.HTML_NS,
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'class': 'blocklyBlockDragSurface'
    }, this.container_);
    this.dragGroup_ = Blockly.utils.createSvgElement('g', {}, this.SVG_);
    var defs = Blockly.utils.createSvgElement('defs', {}, this.SVG_);
    this.dragShadowFilterId_ = this.createDropShadowDom_(defs);
    this.dragGroup_.setAttribute('filter', 'url(#' + this.dragShadowFilterId_ + ')');
};
Blockly.BlockDragSurfaceSvg.prototype.createDropShadowDom_ = function (defs) {
    var rnd = String(Math.random()).substring(2);
    var dragShadowFilter = Blockly.utils.createSvgElement('filter', {
        'id': 'blocklyDragShadowFilter' + rnd,
        'height': '140%',
        'width': '140%',
        'y': '-20%',
        'x': '-20%'
    }, defs);
    Blockly.utils.createSvgElement('feGaussianBlur', {
        'in': 'SourceAlpha',
        'stdDeviation': Blockly.BlockDragSurfaceSvg.SHADOW_STD_DEVIATION
    }, dragShadowFilter);
    var componentTransfer = Blockly.utils.createSvgElement('feComponentTransfer', { 'result': 'offsetBlur' }, dragShadowFilter);
    Blockly.utils.createSvgElement('feFuncA', {
        'type': 'linear',
        'slope': Blockly.Colours.dragShadowOpacity
    }, componentTransfer);
    Blockly.utils.createSvgElement('feComposite', {
        'in': 'SourceGraphic',
        'in2': 'offsetBlur',
        'operator': 'over'
    }, dragShadowFilter);
    return dragShadowFilter.id;
};
Blockly.BlockDragSurfaceSvg.prototype.setBlocksAndShow = function (blocks) {
    goog.asserts.assert(this.dragGroup_.childNodes.length == 0, 'Already dragging a block.');
    this.dragGroup_.appendChild(blocks);
    this.SVG_.style.display = 'block';
    this.surfaceXY_ = new goog.math.Coordinate(0, 0);
    var injectionDiv = document.getElementsByClassName('injectionDiv')[0];
    injectionDiv.style.overflow = 'visible';
};
Blockly.BlockDragSurfaceSvg.prototype.translateAndScaleGroup = function (x, y, scale) {
    this.scale_ = scale;
    var fixedX = x.toFixed(0);
    var fixedY = y.toFixed(0);
    this.dragGroup_.setAttribute('transform', 'translate(' + fixedX + ',' + fixedY + ') scale(' + scale + ')');
};
Blockly.BlockDragSurfaceSvg.prototype.translateSurfaceInternal_ = function () {
    var x = this.surfaceXY_.x;
    var y = this.surfaceXY_.y;
    x = x.toFixed(0);
    y = y.toFixed(0);
    this.SVG_.style.display = 'block';
    Blockly.utils.setCssTransform(this.SVG_, 'translate3d(' + x + 'px, ' + y + 'px, 0px)');
};
Blockly.BlockDragSurfaceSvg.prototype.translateSurface = function (x, y) {
    this.surfaceXY_ = new goog.math.Coordinate(x * this.scale_, y * this.scale_);
    this.translateSurfaceInternal_();
};
Blockly.BlockDragSurfaceSvg.prototype.getSurfaceTranslation = function () {
    var xy = Blockly.utils.getRelativeXY(this.SVG_);
    return new goog.math.Coordinate(xy.x / this.scale_, xy.y / this.scale_);
};
Blockly.BlockDragSurfaceSvg.prototype.getGroup = function () {
    return this.dragGroup_;
};
Blockly.BlockDragSurfaceSvg.prototype.getCurrentBlock = function () {
    return this.dragGroup_.firstChild;
};
Blockly.BlockDragSurfaceSvg.prototype.clearAndHide = function (opt_newSurface) {
    if (opt_newSurface) {
        opt_newSurface.appendChild(this.getCurrentBlock());
    }
    else {
        this.dragGroup_.removeChild(this.getCurrentBlock());
    }
    this.SVG_.style.display = 'none';
    goog.asserts.assert(this.dragGroup_.childNodes.length == 0, 'Drag group was not cleared.');
    this.surfaceXY_ = null;
    var injectionDiv = document.getElementsByClassName('injectionDiv')[0];
    injectionDiv.style.overflow = 'hidden';
};
'use strict';
goog.provide('Blockly.BlockDragger');
goog.require('Blockly.BlockAnimations');
goog.require('Blockly.Events.BlockMove');
goog.require('Blockly.Events.DragBlockOutside');
goog.require('Blockly.Events.EndBlockDrag');
goog.require('Blockly.InsertionMarkerManager');
goog.require('goog.math.Coordinate');
goog.require('goog.asserts');
Blockly.BlockDragger = function (block, workspace) {
    this.draggingBlock_ = block;
    this.workspace_ = workspace;
    this.draggedConnectionManager_ = new Blockly.InsertionMarkerManager(this.draggingBlock_);
    this.deleteArea_ = null;
    this.wouldDeleteBlock_ = false;
    this.wasOutside_ = false;
    this.startXY_ = this.draggingBlock_.getRelativeToSurfaceXY();
    this.dragIconData_ = Blockly.BlockDragger.initIconData_(block);
};
Blockly.BlockDragger.prototype.dispose = function () {
    this.draggingBlock_ = null;
    this.workspace_ = null;
    this.startWorkspace_ = null;
    this.dragIconData_.length = 0;
    if (this.draggedConnectionManager_) {
        this.draggedConnectionManager_.dispose();
        this.draggedConnectionManager_ = null;
    }
};
Blockly.BlockDragger.initIconData_ = function (block) {
    var dragIconData = [];
    var descendants = block.getDescendants(false);
    for (var i = 0, descendant; descendant = descendants[i]; i++) {
        var icons = descendant.getIcons();
        for (var j = 0; j < icons.length; j++) {
            var data = {
                location: icons[j].getIconLocation(),
                icon: icons[j]
            };
            dragIconData.push(data);
        }
    }
    return dragIconData;
};
Blockly.BlockDragger.prototype.startBlockDrag = function (currentDragDeltaXY) {
    if (!Blockly.Events.getGroup()) {
        Blockly.Events.setGroup(true);
    }
    this.workspace_.setResizesEnabled(false);
    Blockly.BlockAnimations.disconnectUiStop();
    if (this.draggingBlock_.getParent()) {
        this.draggingBlock_.unplug();
        var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);
        var newLoc = goog.math.Coordinate.sum(this.startXY_, delta);
        this.draggingBlock_.translate(newLoc.x, newLoc.y);
        Blockly.BlockAnimations.disconnectUiEffect(this.draggingBlock_);
    }
    this.draggingBlock_.setDragging(true);
    this.draggingBlock_.moveToDragSurface_();
    var toolbox = this.workspace_.getToolbox();
    if (toolbox) {
        var style = this.draggingBlock_.isDeletable() ? 'blocklyToolboxDelete' :
            'blocklyToolboxGrab';
        toolbox.addStyle(style);
    }
};
Blockly.BlockDragger.prototype.dragBlock = function (e, currentDragDeltaXY) {
    var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);
    var newLoc = goog.math.Coordinate.sum(this.startXY_, delta);
    this.draggingBlock_.moveDuringDrag(newLoc);
    this.dragIcons_(delta);
    this.deleteArea_ = this.workspace_.isDeleteArea(e);
    var isOutside = !this.workspace_.isInsideBlocksArea(e);
    this.draggedConnectionManager_.update(delta, this.deleteArea_, isOutside);
    if (isOutside !== this.wasOutside_) {
        this.fireDragOutsideEvent_(isOutside);
        this.wasOutside_ = isOutside;
    }
    this.updateCursorDuringBlockDrag_(isOutside);
    return isOutside;
};
Blockly.BlockDragger.prototype.endBlockDrag = function (e, currentDragDeltaXY) {
    this.dragBlock(e, currentDragDeltaXY);
    this.dragIconData_ = [];
    var isOutside = this.wasOutside_;
    this.fireEndDragEvent_(isOutside);
    this.draggingBlock_.setMouseThroughStyle(false);
    Blockly.BlockAnimations.disconnectUiStop();
    var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);
    var newLoc = goog.math.Coordinate.sum(this.startXY_, delta);
    this.draggingBlock_.moveOffDragSurface_(newLoc);
    var isDeletingProcDef = this.wouldDeleteBlock_ &&
        (this.draggingBlock_.type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE);
    var deleted = this.maybeDeleteBlock_();
    if (!deleted) {
        this.draggingBlock_.moveConnections_(delta.x, delta.y);
        this.draggingBlock_.setDragging(false);
        this.draggedConnectionManager_.applyConnections();
        this.draggingBlock_.render();
        this.fireMoveEvent_();
        this.draggingBlock_.scheduleSnapAndBump();
    }
    this.workspace_.setResizesEnabled(true);
    var toolbox = this.workspace_.getToolbox();
    if (toolbox) {
        var style = this.draggingBlock_.isDeletable() ? 'blocklyToolboxDelete' :
            'blocklyToolboxGrab';
        toolbox.removeStyle(style);
    }
    Blockly.Events.setGroup(false);
    if (isOutside) {
        var ws = this.workspace_;
        setTimeout(function () {
            ws.undo();
        });
    }
    if (isDeletingProcDef) {
        var ws = this.workspace_;
        setTimeout(function () {
            var allBlocks = ws.getAllBlocks();
            for (var i = 0; i < allBlocks.length; i++) {
                var block = allBlocks[i];
                if (block.type == Blockly.PROCEDURES_CALL_BLOCK_TYPE) {
                    var procCode = block.getProcCode();
                    if (!Blockly.Procedures.getDefineBlock(procCode, ws)) {
                        alert('To delete a block definition, first remove all uses of the block');
                        ws.undo();
                        return;
                    }
                }
            }
            ws.refreshToolboxSelection_();
        });
    }
};
Blockly.BlockDragger.prototype.fireDragOutsideEvent_ = function (isOutside) {
    var event = new Blockly.Events.DragBlockOutside(this.draggingBlock_);
    event.isOutside = isOutside;
    Blockly.Events.fire(event);
};
Blockly.BlockDragger.prototype.fireEndDragEvent_ = function (isOutside) {
    var event = new Blockly.Events.EndBlockDrag(this.draggingBlock_, isOutside);
    Blockly.Events.fire(event);
};
Blockly.BlockDragger.prototype.fireMoveEvent_ = function () {
    var event = new Blockly.Events.BlockMove(this.draggingBlock_);
    event.oldCoordinate = this.startXY_;
    event.recordNew();
    Blockly.Events.fire(event);
};
Blockly.BlockDragger.prototype.maybeDeleteBlock_ = function () {
    var trashcan = this.workspace_.trashcan;
    if (this.wouldDeleteBlock_) {
        if (trashcan) {
            goog.Timer.callOnce(trashcan.close, 100, trashcan);
        }
        this.fireMoveEvent_();
        this.draggingBlock_.dispose(false, true);
    }
    else if (trashcan) {
        trashcan.close();
    }
    return this.wouldDeleteBlock_;
};
Blockly.BlockDragger.prototype.updateCursorDuringBlockDrag_ = function (isOutside) {
    this.wouldDeleteBlock_ = this.draggedConnectionManager_.wouldDeleteBlock();
    var trashcan = this.workspace_.trashcan;
    if (this.wouldDeleteBlock_) {
        this.draggingBlock_.setDeleteStyle(true);
        if (this.deleteArea_ == Blockly.DELETE_AREA_TRASH && trashcan) {
            trashcan.setOpen_(true);
        }
    }
    else {
        this.draggingBlock_.setDeleteStyle(false);
        if (trashcan) {
            trashcan.setOpen_(false);
        }
    }
    if (isOutside) {
        this.draggingBlock_.setMouseThroughStyle(true);
    }
    else {
        this.draggingBlock_.setMouseThroughStyle(false);
    }
};
Blockly.BlockDragger.prototype.pixelsToWorkspaceUnits_ = function (pixelCoord) {
    var result = new goog.math.Coordinate(pixelCoord.x / this.workspace_.scale, pixelCoord.y / this.workspace_.scale);
    if (this.workspace_.isMutator) {
        var mainScale = this.workspace_.options.parentWorkspace.scale;
        result = result.scale(1 / mainScale);
    }
    return result;
};
Blockly.BlockDragger.prototype.dragIcons_ = function (dxy) {
    for (var i = 0; i < this.dragIconData_.length; i++) {
        var data = this.dragIconData_[i];
        data.icon.setIconLocation(goog.math.Coordinate.sum(data.location, dxy));
    }
};
'use strict';
goog.provide('Blockly.Blocks');
Blockly.Blocks = new Object(null);
'use strict';
goog.provide('Blockly.BubbleDragger');
goog.require('Blockly.Bubble');
goog.require('Blockly.Events.CommentMove');
goog.require('Blockly.WorkspaceCommentSvg');
goog.require('goog.math.Coordinate');
goog.require('goog.asserts');
Blockly.BubbleDragger = function (bubble, workspace) {
    this.draggingBubble_ = bubble;
    this.workspace_ = workspace;
    this.deleteArea_ = null;
    this.wouldDeleteBubble_ = false;
    this.startXY_ = this.draggingBubble_.getRelativeToSurfaceXY();
    this.dragSurface_ =
        Blockly.utils.is3dSupported() && !!workspace.getBlockDragSurface() ?
            workspace.getBlockDragSurface() : null;
};
Blockly.BubbleDragger.prototype.dispose = function () {
    this.draggingBubble_ = null;
    this.workspace_ = null;
    this.dragSurface_ = null;
};
Blockly.BubbleDragger.prototype.startBubbleDrag = function () {
    if (!Blockly.Events.getGroup()) {
        Blockly.Events.setGroup(true);
    }
    this.workspace_.setResizesEnabled(false);
    this.draggingBubble_.setAutoLayout(false);
    if (this.dragSurface_) {
        this.moveToDragSurface_();
    }
    this.draggingBubble_.setDragging && this.draggingBubble_.setDragging(true);
    var toolbox = this.workspace_.getToolbox();
    if (toolbox) {
        var style = this.draggingBubble_.isDeletable() ? 'blocklyToolboxDelete' :
            'blocklyToolboxGrab';
        toolbox.addStyle(style);
    }
};
Blockly.BubbleDragger.prototype.dragBubble = function (e, currentDragDeltaXY) {
    var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);
    var newLoc = goog.math.Coordinate.sum(this.startXY_, delta);
    this.draggingBubble_.moveDuringDrag(this.dragSurface_, newLoc);
    if (this.draggingBubble_.isDeletable()) {
        this.deleteArea_ = this.workspace_.isDeleteArea(e);
        this.updateCursorDuringBubbleDrag_();
    }
};
Blockly.BubbleDragger.prototype.maybeDeleteBubble_ = function () {
    var trashcan = this.workspace_.trashcan;
    if (this.wouldDeleteBubble_) {
        if (trashcan) {
            setTimeout(trashcan.close.bind(trashcan), 100);
        }
        this.fireMoveEvent_();
        this.draggingBubble_.dispose(false, true);
    }
    else if (trashcan) {
        trashcan.close();
    }
    return this.wouldDeleteBubble_;
};
Blockly.BubbleDragger.prototype.updateCursorDuringBubbleDrag_ = function () {
    this.wouldDeleteBubble_ = this.deleteArea_ != Blockly.DELETE_AREA_NONE;
    var trashcan = this.workspace_.trashcan;
    if (this.wouldDeleteBubble_) {
        this.draggingBubble_.setDeleteStyle(true);
        if (this.deleteArea_ == Blockly.DELETE_AREA_TRASH && trashcan) {
            trashcan.setOpen_(true);
        }
    }
    else {
        this.draggingBubble_.setDeleteStyle(false);
        if (trashcan) {
            trashcan.setOpen_(false);
        }
    }
};
Blockly.BubbleDragger.prototype.endBubbleDrag = function (e, currentDragDeltaXY) {
    this.dragBubble(e, currentDragDeltaXY);
    var delta = this.pixelsToWorkspaceUnits_(currentDragDeltaXY);
    var newLoc = goog.math.Coordinate.sum(this.startXY_, delta);
    this.draggingBubble_.moveTo(newLoc.x, newLoc.y);
    var deleted = this.maybeDeleteBubble_();
    if (!deleted) {
        if (this.dragSurface_) {
            this.dragSurface_.clearAndHide(this.workspace_.getBubbleCanvas());
        }
        this.draggingBubble_.setDragging && this.draggingBubble_.setDragging(false);
        this.fireMoveEvent_();
    }
    this.workspace_.setResizesEnabled(true);
    if (this.workspace_.toolbox_) {
        var style = this.draggingBubble_.isDeletable() ? 'blocklyToolboxDelete' :
            'blocklyToolboxGrab';
        this.workspace_.toolbox_.removeStyle(style);
    }
    Blockly.Events.setGroup(false);
};
Blockly.BubbleDragger.prototype.fireMoveEvent_ = function () {
    var event = null;
    if (this.draggingBubble_.isComment) {
        event = new Blockly.Events.CommentMove(this.draggingBubble_);
    }
    else if (this.draggingBubble_ instanceof Blockly.ScratchBubble) {
        event = new Blockly.Events.CommentMove(this.draggingBubble_.comment);
    }
    else {
        return;
    }
    event.setOldCoordinate(this.startXY_);
    event.recordNew();
    Blockly.Events.fire(event);
};
Blockly.BubbleDragger.prototype.pixelsToWorkspaceUnits_ = function (pixelCoord) {
    var result = new goog.math.Coordinate(pixelCoord.x / this.workspace_.scale, pixelCoord.y / this.workspace_.scale);
    if (this.workspace_.isMutator) {
        var mainScale = this.workspace_.options.parentWorkspace.scale;
        result = result.scale(1 / mainScale);
    }
    return result;
};
Blockly.BubbleDragger.prototype.moveToDragSurface_ = function () {
    this.draggingBubble_.moveTo(0, 0);
    this.dragSurface_.translateSurface(this.startXY_.x, this.startXY_.y);
    this.dragSurface_.setBlocksAndShow(this.draggingBubble_.getSvgRoot());
};
'use strict';
goog.provide('Blockly.Colours');
Blockly.Colours = {
    "motion": {
        "primary": "#4C97FF",
        "secondary": "#4280D7",
        "tertiary": "#3373CC"
    },
    "looks": {
        "primary": "#9966FF",
        "secondary": "#855CD6",
        "tertiary": "#774DCB"
    },
    "sounds": {
        "primary": "#CF63CF",
        "secondary": "#C94FC9",
        "tertiary": "#BD42BD"
    },
    "control": {
        "primary": "#FFAB19",
        "secondary": "#EC9C13",
        "tertiary": "#CF8B17"
    },
    "event": {
        "primary": "#FFBF00",
        "secondary": "#E6AC00",
        "tertiary": "#CC9900"
    },
    "sensing": {
        "primary": "#5CB1D6",
        "secondary": "#47A8D1",
        "tertiary": "#2E8EB8"
    },
    "pen": {
        "primary": "#0fBD8C",
        "secondary": "#0DA57A",
        "tertiary": "#0B8E69"
    },
    "operators": {
        "primary": "#59C059",
        "secondary": "#46B946",
        "tertiary": "#389438"
    },
    "data": {
        "primary": "#FF8C1A",
        "secondary": "#FF8000",
        "tertiary": "#DB6E00"
    },
    "data_lists": {
        "primary": "#FF661A",
        "secondary": "#FF5500",
        "tertiary": "#E64D00"
    },
    "more": {
        "primary": "#FF6680",
        "secondary": "#FF4D6A",
        "tertiary": "#FF3355"
    },
    "text": "#575E75",
    "workspace": "#F9F9F9",
    "toolboxHover": "#4C97FF",
    "toolboxSelected": "#e9eef2",
    "toolboxText": "#575E75",
    "toolbox": "#FFFFFF",
    "flyout": "#F9F9F9",
    "scrollbar": "#CECDCE",
    "scrollbarHover": '#CECDCE',
    "textField": "#FFFFFF",
    "insertionMarker": "#000000",
    "insertionMarkerOpacity": 0.2,
    "dragShadowOpacity": 0.3,
    "stackGlow": "#FFF200",
    "stackGlowSize": 4,
    "stackGlowOpacity": 1,
    "replacementGlow": "#FFFFFF",
    "replacementGlowSize": 2,
    "replacementGlowOpacity": 1,
    "colourPickerStroke": "#FFFFFF",
    "fieldShadow": "rgba(0,0,0,0.1)",
    "dropDownShadow": "rgba(0, 0, 0, .3)",
    "numPadBackground": "#547AB2",
    "numPadBorder": "#435F91",
    "numPadActiveBackground": "#435F91",
    "numPadText": "white",
    "valueReportBackground": "#FFFFFF",
    "valueReportBorder": "#AAAAAA"
};
Blockly.Colours.overrideColours = function (colours) {
    if (colours) {
        for (var colourProperty in colours) {
            if (colours.hasOwnProperty(colourProperty) &&
                Blockly.Colours.hasOwnProperty(colourProperty)) {
                var colourPropertyValue = colours[colourProperty];
                if (goog.isObject(colourPropertyValue)) {
                    for (var colourSequence in colourPropertyValue) {
                        if (colourPropertyValue.hasOwnProperty(colourSequence) &&
                            Blockly.Colours[colourProperty].hasOwnProperty(colourSequence)) {
                            Blockly.Colours[colourProperty][colourSequence] =
                                colourPropertyValue[colourSequence];
                        }
                    }
                }
                else {
                    Blockly.Colours[colourProperty] = colourPropertyValue;
                }
            }
        }
    }
};
'use strict';
goog.provide('Blockly.Connection');
goog.require('Blockly.Events.BlockMove');
goog.require('goog.asserts');
goog.require('goog.dom');
Blockly.Connection = function (source, type) {
    this.sourceBlock_ = source;
    this.type = type;
    if (source.workspace.connectionDBList) {
        this.db_ = source.workspace.connectionDBList[type];
        this.dbOpposite_ =
            source.workspace.connectionDBList[Blockly.OPPOSITE_TYPE[type]];
        this.hidden_ = !this.db_;
    }
};
Blockly.Connection.CAN_CONNECT = 0;
Blockly.Connection.REASON_SELF_CONNECTION = 1;
Blockly.Connection.REASON_WRONG_TYPE = 2;
Blockly.Connection.REASON_TARGET_NULL = 3;
Blockly.Connection.REASON_CHECKS_FAILED = 4;
Blockly.Connection.REASON_DIFFERENT_WORKSPACES = 5;
Blockly.Connection.REASON_SHADOW_PARENT = 6;
Blockly.Connection.REASON_CUSTOM_PROCEDURE = 7;
Blockly.Connection.prototype.targetConnection = null;
Blockly.Connection.prototype.check_ = null;
Blockly.Connection.prototype.shadowDom_ = null;
Blockly.Connection.prototype.x_ = 0;
Blockly.Connection.prototype.y_ = 0;
Blockly.Connection.prototype.inDB_ = false;
Blockly.Connection.prototype.db_ = null;
Blockly.Connection.prototype.dbOpposite_ = null;
Blockly.Connection.prototype.hidden_ = null;
Blockly.Connection.prototype.connect_ = function (childConnection) {
    var parentConnection = this;
    var parentBlock = parentConnection.getSourceBlock();
    var childBlock = childConnection.getSourceBlock();
    var isSurroundingC = false;
    if (parentConnection == parentBlock.getFirstStatementConnection()) {
        isSurroundingC = true;
    }
    if (childConnection.isConnected()) {
        if (isSurroundingC) {
            var previousParentConnection = childConnection.targetConnection;
        }
        childConnection.disconnect();
    }
    if (parentConnection.isConnected()) {
        var orphanBlock = parentConnection.targetBlock();
        var shadowDom = parentConnection.getShadowDom();
        parentConnection.setShadowDom(null);
        if (orphanBlock.isShadow()) {
            shadowDom = Blockly.Xml.blockToDom(orphanBlock);
            orphanBlock.dispose();
            orphanBlock = null;
        }
        else if (parentConnection.type == Blockly.NEXT_STATEMENT) {
            if (!orphanBlock.previousConnection) {
                throw 'Orphan block does not have a previous connection.';
            }
            var newBlock = childBlock;
            while (newBlock.nextConnection) {
                var nextBlock = newBlock.getNextBlock();
                if (nextBlock && !nextBlock.isShadow()) {
                    newBlock = nextBlock;
                }
                else {
                    if (orphanBlock.previousConnection.checkType_(newBlock.nextConnection)) {
                        newBlock.nextConnection.connect(orphanBlock.previousConnection);
                        orphanBlock = null;
                    }
                    break;
                }
            }
        }
        if (orphanBlock) {
            parentConnection.disconnect();
            if (Blockly.Events.recordUndo) {
                var group = Blockly.Events.getGroup();
                setTimeout(function () {
                    if (orphanBlock.workspace && !orphanBlock.getParent()) {
                        Blockly.Events.setGroup(group);
                        if (orphanBlock.outputConnection) {
                            orphanBlock.outputConnection.bumpAwayFrom_(parentConnection);
                        }
                        else if (orphanBlock.previousConnection) {
                            orphanBlock.previousConnection.bumpAwayFrom_(parentConnection);
                        }
                        Blockly.Events.setGroup(false);
                    }
                }, Blockly.BUMP_DELAY);
            }
        }
        parentConnection.setShadowDom(shadowDom);
    }
    if (isSurroundingC && previousParentConnection) {
        previousParentConnection.connect(parentBlock.previousConnection);
    }
    var event;
    if (Blockly.Events.isEnabled()) {
        event = new Blockly.Events.BlockMove(childBlock);
    }
    Blockly.Connection.connectReciprocally_(parentConnection, childConnection);
    childBlock.setParent(parentBlock);
    if (event) {
        event.recordNew();
        Blockly.Events.fire(event);
    }
};
Blockly.Connection.prototype.dispose = function () {
    if (this.isConnected()) {
        throw 'Disconnect connection before disposing of it.';
    }
    if (this.inDB_) {
        this.db_.removeConnection_(this);
    }
    this.db_ = null;
    this.dbOpposite_ = null;
};
Blockly.Connection.prototype.isConnectedToNonInsertionMarker = function () {
    return this.targetConnection && !this.targetBlock().isInsertionMarker();
};
Blockly.Connection.prototype.getSourceBlock = function () {
    return this.sourceBlock_;
};
Blockly.Connection.prototype.isSuperior = function () {
    return this.type == Blockly.INPUT_VALUE ||
        this.type == Blockly.NEXT_STATEMENT;
};
Blockly.Connection.prototype.isConnected = function () {
    return !!this.targetConnection;
};
Blockly.Connection.prototype.canConnectWithReason_ = function (target) {
    if (!target) {
        return Blockly.Connection.REASON_TARGET_NULL;
    }
    if (this.isSuperior()) {
        var blockA = this.sourceBlock_;
        var blockB = target.getSourceBlock();
        var superiorConn = this;
    }
    else {
        var blockB = this.sourceBlock_;
        var blockA = target.getSourceBlock();
        var superiorConn = target;
    }
    if (blockA && blockA == blockB) {
        return Blockly.Connection.REASON_SELF_CONNECTION;
    }
    else if (target.type != Blockly.OPPOSITE_TYPE[this.type]) {
        return Blockly.Connection.REASON_WRONG_TYPE;
    }
    else if (blockA && blockB && blockA.workspace !== blockB.workspace) {
        return Blockly.Connection.REASON_DIFFERENT_WORKSPACES;
    }
    else if (!this.checkType_(target)) {
        return Blockly.Connection.REASON_CHECKS_FAILED;
    }
    else if (blockA.isShadow() && !blockB.isShadow()) {
        return Blockly.Connection.REASON_SHADOW_PARENT;
    }
    else if ((blockA.type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE &&
        blockB.type != Blockly.PROCEDURES_PROTOTYPE_BLOCK_TYPE &&
        superiorConn == blockA.getInput('custom_block').connection) ||
        (blockB.type == Blockly.PROCEDURES_PROTOTYPE_BLOCK_TYPE &&
            blockA.type != Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE)) {
        return Blockly.Connection.REASON_CUSTOM_PROCEDURE;
    }
    return Blockly.Connection.CAN_CONNECT;
};
Blockly.Connection.prototype.checkConnection_ = function (target) {
    switch (this.canConnectWithReason_(target)) {
        case Blockly.Connection.CAN_CONNECT:
            break;
        case Blockly.Connection.REASON_SELF_CONNECTION:
            throw 'Attempted to connect a block to itself.';
        case Blockly.Connection.REASON_DIFFERENT_WORKSPACES:
            throw 'Blocks not on same workspace.';
        case Blockly.Connection.REASON_WRONG_TYPE:
            throw 'Attempt to connect incompatible types.';
        case Blockly.Connection.REASON_TARGET_NULL:
            throw 'Target connection is null.';
        case Blockly.Connection.REASON_CHECKS_FAILED:
            var msg = 'Connection checks failed. ';
            msg += this + ' expected ' + this.check_ + ', found ' + target.check_;
            throw msg;
        case Blockly.Connection.REASON_SHADOW_PARENT:
            throw 'Connecting non-shadow to shadow block.';
        case Blockly.Connection.REASON_CUSTOM_PROCEDURE:
            throw 'Trying to replace a shadow on a custom procedure definition.';
        default:
            throw 'Unknown connection failure: this should never happen!';
    }
};
Blockly.Connection.prototype.canConnectToPrevious_ = function (candidate) {
    if (this.targetConnection) {
        return false;
    }
    if (Blockly.draggingConnections_.indexOf(candidate) != -1) {
        return false;
    }
    var firstStatementConnection = this.sourceBlock_.getFirstStatementConnection();
    var isComplexStatement = firstStatementConnection != null;
    var isFirstStatementConnection = this == firstStatementConnection;
    var isNextConnection = this == this.sourceBlock_.nextConnection;
    if (isComplexStatement && !isFirstStatementConnection && !isNextConnection) {
        return false;
    }
    var sourceHasPreviousConn = this.sourceBlock_.previousConnection != null;
    if (isFirstStatementConnection && sourceHasPreviousConn) {
        return true;
    }
    if (isNextConnection ||
        (isFirstStatementConnection && !sourceHasPreviousConn)) {
        if (!candidate.targetConnection) {
            return true;
        }
        var targetBlock = candidate.targetBlock();
        if (!targetBlock.isInsertionMarker()) {
            return false;
        }
        return !targetBlock.getPreviousBlock();
    }
};
Blockly.Connection.prototype.isConnectionAllowed = function (candidate) {
    if (candidate.sourceBlock_.isInsertionMarker()) {
        return false;
    }
    var canConnect = this.canConnectWithReason_(candidate);
    if (canConnect != Blockly.Connection.CAN_CONNECT) {
        return false;
    }
    var firstStatementConnection = this.sourceBlock_.getFirstStatementConnection();
    switch (candidate.type) {
        case Blockly.PREVIOUS_STATEMENT:
            return this.canConnectToPrevious_(candidate);
        case Blockly.OUTPUT_VALUE: {
            return false;
        }
        case Blockly.INPUT_VALUE: {
            if (candidate.targetConnection &&
                !candidate.targetBlock().isMovable() &&
                !candidate.targetBlock().isShadow()) {
                return false;
            }
            break;
        }
        case Blockly.NEXT_STATEMENT: {
            if (firstStatementConnection &&
                this == this.sourceBlock_.previousConnection &&
                candidate.isConnectedToNonInsertionMarker() &&
                !firstStatementConnection.targetConnection) {
                return false;
            }
            if (candidate.isConnectedToNonInsertionMarker() &&
                !this.sourceBlock_.nextConnection &&
                !candidate.targetBlock().isShadow() &&
                candidate.targetBlock().nextConnection) {
                return false;
            }
            break;
        }
        default:
            throw 'Unknown connection type in isConnectionAllowed';
    }
    if (Blockly.draggingConnections_.indexOf(candidate) != -1) {
        return false;
    }
    return true;
};
Blockly.Connection.prototype.connect = function (otherConnection) {
    if (this.targetConnection == otherConnection) {
        return;
    }
    this.checkConnection_(otherConnection);
    if (this.isSuperior()) {
        this.connect_(otherConnection);
    }
    else {
        otherConnection.connect_(this);
    }
};
Blockly.Connection.connectReciprocally_ = function (first, second) {
    goog.asserts.assert(first && second, 'Cannot connect null connections.');
    first.targetConnection = second;
    second.targetConnection = first;
};
Blockly.Connection.singleConnection_ = function (block, orphanBlock) {
    var connection = false;
    for (var i = 0; i < block.inputList.length; i++) {
        var thisConnection = block.inputList[i].connection;
        if (thisConnection && thisConnection.type == Blockly.INPUT_VALUE &&
            orphanBlock.outputConnection.checkType_(thisConnection)) {
            if (connection) {
                return null;
            }
            connection = thisConnection;
        }
    }
    return connection;
};
Blockly.Connection.prototype.disconnect = function () {
    var otherConnection = this.targetConnection;
    goog.asserts.assert(otherConnection, 'Source connection not connected.');
    goog.asserts.assert(otherConnection.targetConnection == this, 'Target connection not connected to source connection.');
    var parentBlock, childBlock, parentConnection;
    if (this.isSuperior()) {
        parentBlock = this.sourceBlock_;
        childBlock = otherConnection.getSourceBlock();
        parentConnection = this;
    }
    else {
        parentBlock = otherConnection.getSourceBlock();
        childBlock = this.sourceBlock_;
        parentConnection = otherConnection;
    }
    this.disconnectInternal_(parentBlock, childBlock);
    parentConnection.respawnShadow_();
};
Blockly.Connection.prototype.disconnectInternal_ = function (parentBlock, childBlock) {
    var event;
    if (Blockly.Events.isEnabled()) {
        event = new Blockly.Events.BlockMove(childBlock);
    }
    var otherConnection = this.targetConnection;
    otherConnection.targetConnection = null;
    this.targetConnection = null;
    childBlock.setParent(null);
    if (event) {
        event.recordNew();
        Blockly.Events.fire(event);
    }
};
Blockly.Connection.prototype.respawnShadow_ = function () {
    var parentBlock = this.getSourceBlock();
    var shadow = this.getShadowDom();
    if (parentBlock.workspace && shadow && Blockly.Events.recordUndo) {
        var blockShadow = Blockly.Xml.domToBlock(shadow, parentBlock.workspace);
        if (blockShadow.outputConnection) {
            this.connect(blockShadow.outputConnection);
        }
        else if (blockShadow.previousConnection) {
            this.connect(blockShadow.previousConnection);
        }
        else {
            throw 'Child block does not have output or previous statement.';
        }
    }
};
Blockly.Connection.prototype.targetBlock = function () {
    if (this.isConnected()) {
        return this.targetConnection.getSourceBlock();
    }
    return null;
};
Blockly.Connection.prototype.checkType_ = function (otherConnection) {
    if (!this.check_ || !otherConnection.check_) {
        return true;
    }
    for (var i = 0; i < this.check_.length; i++) {
        if (otherConnection.check_.indexOf(this.check_[i]) != -1) {
            return true;
        }
    }
    return false;
};
Blockly.Connection.prototype.onCheckChanged_ = function () {
    if (this.isConnected() && !this.checkType_(this.targetConnection)) {
        var child = this.isSuperior() ? this.targetBlock() : this.sourceBlock_;
        child.unplug();
    }
};
Blockly.Connection.prototype.setCheck = function (check) {
    if (check) {
        if (!goog.isArray(check)) {
            check = [check];
        }
        this.check_ = check;
        this.onCheckChanged_();
    }
    else {
        this.check_ = null;
    }
    return this;
};
Blockly.Connection.prototype.getOutputShape = function () {
    if (!this.check_)
        return Blockly.OUTPUT_SHAPE_ROUND;
    if (this.check_.indexOf('Boolean') !== -1) {
        return Blockly.OUTPUT_SHAPE_HEXAGONAL;
    }
    if (this.check_.indexOf('Number') !== -1) {
        return Blockly.OUTPUT_SHAPE_ROUND;
    }
    if (this.check_.indexOf('String') !== -1) {
        return Blockly.OUTPUT_SHAPE_SQUARE;
    }
    return Blockly.OUTPUT_SHAPE_ROUND;
};
Blockly.Connection.prototype.setShadowDom = function (shadow) {
    this.shadowDom_ = shadow;
};
Blockly.Connection.prototype.getShadowDom = function () {
    return this.shadowDom_;
};
Blockly.Connection.prototype.neighbours_ = function () {
    return [];
};
Blockly.Connection.prototype.toString = function () {
    var msg;
    var block = this.sourceBlock_;
    if (!block) {
        return 'Orphan Connection';
    }
    else if (block.outputConnection == this) {
        msg = 'Output Connection of ';
    }
    else if (block.previousConnection == this) {
        msg = 'Previous Connection of ';
    }
    else if (block.nextConnection == this) {
        msg = 'Next Connection of ';
    }
    else {
        var parentInput = goog.array.find(block.inputList, function (input) {
            return input.connection == this;
        }, this);
        if (parentInput) {
            msg = 'Input "' + parentInput.name + '" connection on ';
        }
        else {
            console.warn('Connection not actually connected to sourceBlock_');
            return 'Orphan Connection';
        }
    }
    return msg + block.toDevString();
};
'use strict';
goog.provide('Blockly.ConnectionDB');
goog.require('Blockly.Connection');
Blockly.ConnectionDB = function () {
    this.connections_ = [];
};
Blockly.ConnectionDB.prototype.addConnection = function (connection) {
    if (connection.inDB_) {
        throw Error('Connection already in database.');
    }
    if (connection.getSourceBlock().isInFlyout) {
        return;
    }
    var position = this.findPositionForConnection_(connection);
    this.connections_.splice(position, 0, connection);
    connection.inDB_ = true;
};
Blockly.ConnectionDB.prototype.findConnection = function (conn) {
    if (!this.connections_.length) {
        return -1;
    }
    var bestGuess = this.findPositionForConnection_(conn);
    if (bestGuess >= this.connections_.length) {
        return -1;
    }
    var yPos = conn.y_;
    var pointerMin = bestGuess;
    var pointerMax = bestGuess;
    while (pointerMin >= 0 && this.connections_[pointerMin].y_ == yPos) {
        if (this.connections_[pointerMin] == conn) {
            return pointerMin;
        }
        pointerMin--;
    }
    while (pointerMax < this.connections_.length &&
        this.connections_[pointerMax].y_ == yPos) {
        if (this.connections_[pointerMax] == conn) {
            return pointerMax;
        }
        pointerMax++;
    }
    return -1;
};
Blockly.ConnectionDB.prototype.findPositionForConnection_ = function (connection) {
    if (!this.connections_.length) {
        return 0;
    }
    var pointerMin = 0;
    var pointerMax = this.connections_.length;
    while (pointerMin < pointerMax) {
        var pointerMid = Math.floor((pointerMin + pointerMax) / 2);
        if (this.connections_[pointerMid].y_ < connection.y_) {
            pointerMin = pointerMid + 1;
        }
        else if (this.connections_[pointerMid].y_ > connection.y_) {
            pointerMax = pointerMid;
        }
        else {
            pointerMin = pointerMid;
            break;
        }
    }
    return pointerMin;
};
Blockly.ConnectionDB.prototype.removeConnection_ = function (connection) {
    if (!connection.inDB_) {
        throw Error('Connection not in database.');
    }
    var removalIndex = this.findConnection(connection);
    if (removalIndex == -1) {
        throw Error('Unable to find connection in connectionDB.');
    }
    connection.inDB_ = false;
    this.connections_.splice(removalIndex, 1);
};
Blockly.ConnectionDB.prototype.getNeighbours = function (connection, maxRadius) {
    var db = this.connections_;
    var currentX = connection.x_;
    var currentY = connection.y_;
    var pointerMin = 0;
    var pointerMax = db.length - 2;
    var pointerMid = pointerMax;
    while (pointerMin < pointerMid) {
        if (db[pointerMid].y_ < currentY) {
            pointerMin = pointerMid;
        }
        else {
            pointerMax = pointerMid;
        }
        pointerMid = Math.floor((pointerMin + pointerMax) / 2);
    }
    var neighbours = [];
    function checkConnection_(yIndex) {
        var dx = currentX - db[yIndex].x_;
        var dy = currentY - db[yIndex].y_;
        var r = Math.sqrt(dx * dx + dy * dy);
        if (r <= maxRadius) {
            neighbours.push(db[yIndex]);
        }
        return dy < maxRadius;
    }
    pointerMin = pointerMid;
    pointerMax = pointerMid;
    if (db.length) {
        while (pointerMin >= 0 && checkConnection_(pointerMin)) {
            pointerMin--;
        }
        do {
            pointerMax++;
        } while (pointerMax < db.length && checkConnection_(pointerMax));
    }
    return neighbours;
};
Blockly.ConnectionDB.prototype.isInYRange_ = function (index, baseY, maxRadius) {
    return (Math.abs(this.connections_[index].y_ - baseY) <= maxRadius);
};
Blockly.ConnectionDB.prototype.searchForClosest = function (conn, maxRadius, dxy) {
    if (!this.connections_.length) {
        return { connection: null, radius: maxRadius };
    }
    var baseY = conn.y_;
    var baseX = conn.x_;
    conn.x_ = baseX + dxy.x;
    conn.y_ = baseY + dxy.y;
    var closestIndex = this.findPositionForConnection_(conn);
    var bestConnection = null;
    var bestRadius = maxRadius;
    var temp;
    var pointerMin = closestIndex - 1;
    while (pointerMin >= 0 && this.isInYRange_(pointerMin, conn.y_, maxRadius)) {
        temp = this.connections_[pointerMin];
        if (conn.isConnectionAllowed(temp, bestRadius)) {
            bestConnection = temp;
            bestRadius = temp.distanceFrom(conn);
        }
        pointerMin--;
    }
    var pointerMax = closestIndex;
    while (pointerMax < this.connections_.length &&
        this.isInYRange_(pointerMax, conn.y_, maxRadius)) {
        temp = this.connections_[pointerMax];
        if (conn.isConnectionAllowed(temp, bestRadius)) {
            bestConnection = temp;
            bestRadius = temp.distanceFrom(conn);
        }
        pointerMax++;
    }
    conn.x_ = baseX;
    conn.y_ = baseY;
    return { connection: bestConnection, radius: bestRadius };
};
Blockly.ConnectionDB.init = function (workspace) {
    var dbList = [];
    dbList[Blockly.INPUT_VALUE] = new Blockly.ConnectionDB();
    dbList[Blockly.OUTPUT_VALUE] = new Blockly.ConnectionDB();
    dbList[Blockly.NEXT_STATEMENT] = new Blockly.ConnectionDB();
    dbList[Blockly.PREVIOUS_STATEMENT] = new Blockly.ConnectionDB();
    workspace.connectionDBList = dbList;
};
'use strict';
goog.provide('Blockly.constants');
Blockly.DRAG_RADIUS = 3;
Blockly.FLYOUT_DRAG_RADIUS = 10;
Blockly.SNAP_RADIUS = 48;
Blockly.CONNECTING_SNAP_RADIUS = 68;
Blockly.CURRENT_CONNECTION_PREFERENCE = 20;
Blockly.BUMP_DELAY = 0;
Blockly.COLLAPSE_CHARS = 30;
Blockly.LONGPRESS = 750;
Blockly.LINE_SCROLL_MULTIPLIER = 15;
Blockly.SOUND_LIMIT = 100;
Blockly.DRAG_STACK = true;
Blockly.HSV_SATURATION = 0.45;
Blockly.HSV_VALUE = 0.65;
Blockly.SPRITE = {
    width: 96,
    height: 124,
    url: 'sprites.png'
};
Blockly.SVG_NS = 'http://www.w3.org/2000/svg';
Blockly.HTML_NS = 'http://www.w3.org/1999/xhtml';
Blockly.INPUT_VALUE = 1;
Blockly.OUTPUT_VALUE = 2;
Blockly.NEXT_STATEMENT = 3;
Blockly.PREVIOUS_STATEMENT = 4;
Blockly.DUMMY_INPUT = 5;
Blockly.ALIGN_LEFT = -1;
Blockly.ALIGN_CENTRE = 0;
Blockly.ALIGN_RIGHT = 1;
Blockly.DRAG_NONE = 0;
Blockly.DRAG_STICKY = 1;
Blockly.DRAG_BEGIN = 1;
Blockly.DRAG_FREE = 2;
Blockly.OPPOSITE_TYPE = [];
Blockly.OPPOSITE_TYPE[Blockly.INPUT_VALUE] = Blockly.OUTPUT_VALUE;
Blockly.OPPOSITE_TYPE[Blockly.OUTPUT_VALUE] = Blockly.INPUT_VALUE;
Blockly.OPPOSITE_TYPE[Blockly.NEXT_STATEMENT] = Blockly.PREVIOUS_STATEMENT;
Blockly.OPPOSITE_TYPE[Blockly.PREVIOUS_STATEMENT] = Blockly.NEXT_STATEMENT;
Blockly.TOOLBOX_AT_TOP = 0;
Blockly.TOOLBOX_AT_BOTTOM = 1;
Blockly.TOOLBOX_AT_LEFT = 2;
Blockly.TOOLBOX_AT_RIGHT = 3;
Blockly.OUTPUT_SHAPE_HEXAGONAL = 1;
Blockly.OUTPUT_SHAPE_ROUND = 2;
Blockly.OUTPUT_SHAPE_SQUARE = 3;
Blockly.Categories = {
    "motion": "motion",
    "looks": "looks",
    "sound": "sounds",
    "pen": "pen",
    "data": "data",
    "dataLists": "data-lists",
    "event": "events",
    "control": "control",
    "sensing": "sensing",
    "operators": "operators",
    "more": "more"
};
Blockly.DELETE_AREA_NONE = null;
Blockly.DELETE_AREA_TRASH = 1;
Blockly.DELETE_AREA_TOOLBOX = 2;
Blockly.VARIABLE_CATEGORY_NAME = 'VARIABLE';
Blockly.PROCEDURE_CATEGORY_NAME = 'PROCEDURE';
Blockly.RENAME_VARIABLE_ID = 'RENAME_VARIABLE_ID';
Blockly.DELETE_VARIABLE_ID = 'DELETE_VARIABLE_ID';
Blockly.NEW_BROADCAST_MESSAGE_ID = 'NEW_BROADCAST_MESSAGE_ID';
Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE = 'broadcast_msg';
Blockly.LIST_VARIABLE_TYPE = 'list';
Blockly.SCALAR_VARIABLE_TYPE = '';
Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE = 'procedures_definition';
Blockly.PROCEDURES_PROTOTYPE_BLOCK_TYPE = 'procedures_prototype';
Blockly.PROCEDURES_CALL_BLOCK_TYPE = 'procedures_call';
Blockly.StatusButtonState = {
    "READY": "ready",
    "NOT_READY": "not ready",
};
'use strict';
goog.provide('Blockly.ContextMenu');
goog.require('Blockly.Events.BlockCreate');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.utils');
goog.require('Blockly.utils.uiMenu');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.style');
goog.require('goog.ui.Menu');
goog.require('goog.ui.MenuItem');
goog.require('goog.userAgent');
Blockly.ContextMenu.currentBlock = null;
Blockly.ContextMenu.eventWrapper_ = null;
Blockly.ContextMenu.show = function (e, options, rtl) {
    Blockly.WidgetDiv.show(Blockly.ContextMenu, rtl, null);
    if (!options.length) {
        Blockly.ContextMenu.hide();
        return;
    }
    var menu = Blockly.ContextMenu.populate_(options, rtl);
    goog.events.listen(menu, goog.ui.Component.EventType.ACTION, Blockly.ContextMenu.hide);
    Blockly.ContextMenu.position_(menu, e, rtl);
    setTimeout(function () { menu.getElement().focus(); }, 1);
    Blockly.ContextMenu.currentBlock = null;
};
Blockly.ContextMenu.populate_ = function (options, rtl) {
    var menu = new goog.ui.Menu();
    menu.setRightToLeft(rtl);
    for (var i = 0, option; option = options[i]; i++) {
        var menuItem = new goog.ui.MenuItem(option.text);
        menuItem.setRightToLeft(rtl);
        menu.addChild(menuItem, true);
        menuItem.setEnabled(option.enabled);
        if (option.enabled) {
            goog.events.listen(menuItem, goog.ui.Component.EventType.ACTION, option.callback);
            menuItem.handleContextMenu = function () {
                goog.events.dispatchEvent(this, goog.ui.Component.EventType.ACTION);
            };
        }
    }
    return menu;
};
Blockly.ContextMenu.position_ = function (menu, e, rtl) {
    var viewportBBox = Blockly.utils.getViewportBBox();
    var anchorBBox = {
        top: e.clientY + viewportBBox.top,
        bottom: e.clientY + viewportBBox.top,
        left: e.clientX + viewportBBox.left,
        right: e.clientX + viewportBBox.left
    };
    Blockly.ContextMenu.createWidget_(menu);
    var menuSize = Blockly.utils.uiMenu.getSize(menu);
    if (rtl) {
        Blockly.utils.uiMenu.adjustBBoxesForRTL(viewportBBox, anchorBBox, menuSize);
    }
    Blockly.WidgetDiv.positionWithAnchor(viewportBBox, anchorBBox, menuSize, rtl);
    menu.getElement().focus();
};
Blockly.ContextMenu.createWidget_ = function (menu) {
    var div = Blockly.WidgetDiv.DIV;
    menu.render(div);
    var menuDom = menu.getElement();
    Blockly.utils.addClass(menuDom, 'blocklyContextMenu');
    Blockly.bindEventWithChecks_(menuDom, 'contextmenu', null, Blockly.utils.noEvent);
    menu.setAllowAutoFocus(true);
};
Blockly.ContextMenu.hide = function () {
    Blockly.WidgetDiv.hideIfOwner(Blockly.ContextMenu);
    Blockly.ContextMenu.currentBlock = null;
    if (Blockly.ContextMenu.eventWrapper_) {
        Blockly.unbindEvent_(Blockly.ContextMenu.eventWrapper_);
    }
};
Blockly.ContextMenu.callbackFactory = function (block, xml) {
    return function () {
        Blockly.Events.disable();
        try {
            var newBlock = Blockly.Xml.domToBlock(xml, block.workspace);
            var xy = block.getRelativeToSurfaceXY();
            if (block.RTL) {
                xy.x -= Blockly.SNAP_RADIUS;
            }
            else {
                xy.x += Blockly.SNAP_RADIUS;
            }
            xy.y += Blockly.SNAP_RADIUS * 2;
            newBlock.moveBy(xy.x, xy.y);
        }
        finally {
            Blockly.Events.enable();
        }
        if (Blockly.Events.isEnabled() && !newBlock.isShadow()) {
            Blockly.Events.fire(new Blockly.Events.BlockCreate(newBlock));
        }
        newBlock.select();
    };
};
Blockly.ContextMenu.blockDeleteOption = function (block) {
    var descendantCount = block.getDescendants(false, true).length;
    var nextBlock = block.getNextBlock();
    if (nextBlock) {
        descendantCount -= nextBlock.getDescendants(false, true).length;
    }
    var deleteOption = {
        text: descendantCount == 1 ? Blockly.Msg.DELETE_BLOCK :
            Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(descendantCount)),
        enabled: true,
        callback: function () {
            Blockly.Events.setGroup(true);
            block.dispose(true, true);
            Blockly.Events.setGroup(false);
        }
    };
    return deleteOption;
};
Blockly.ContextMenu.blockHelpOption = function (block) {
    var url = goog.isFunction(block.helpUrl) ? block.helpUrl() : block.helpUrl;
    var helpOption = {
        enabled: !!url,
        text: Blockly.Msg.HELP,
        callback: function () {
            block.showHelp_();
        }
    };
    return helpOption;
};
Blockly.ContextMenu.blockDuplicateOption = function (block, event) {
    var duplicateOption = {
        text: Blockly.Msg.DUPLICATE,
        enabled: true,
        callback: Blockly.scratchBlocksUtils.duplicateAndDragCallback(block, event)
    };
    return duplicateOption;
};
Blockly.ContextMenu.blockCommentOption = function (block) {
    var commentOption = {
        enabled: !goog.userAgent.IE
    };
    if (block.comment) {
        commentOption.text = Blockly.Msg.REMOVE_COMMENT;
        commentOption.callback = function () {
            block.setCommentText(null);
        };
    }
    else {
        commentOption.text = Blockly.Msg.ADD_COMMENT;
        commentOption.callback = function () {
            block.setCommentText('');
            block.comment.focus();
        };
    }
    return commentOption;
};
Blockly.ContextMenu.wsUndoOption = function (ws) {
    return {
        text: Blockly.Msg.UNDO,
        enabled: ws.hasUndoStack(),
        callback: ws.undo.bind(ws, false)
    };
};
Blockly.ContextMenu.wsRedoOption = function (ws) {
    return {
        text: Blockly.Msg.REDO,
        enabled: ws.hasRedoStack(),
        callback: ws.undo.bind(ws, true)
    };
};
Blockly.ContextMenu.wsCleanupOption = function (ws, numTopBlocks) {
    return {
        text: Blockly.Msg.CLEAN_UP,
        enabled: numTopBlocks > 1,
        callback: ws.cleanUp.bind(ws, true)
    };
};
Blockly.ContextMenu.toggleCollapseFn_ = function (topBlocks, shouldCollapse) {
    var DELAY = 10;
    var ms = 0;
    for (var i = 0; i < topBlocks.length; i++) {
        var block = topBlocks[i];
        while (block) {
            setTimeout(block.setCollapsed.bind(block, shouldCollapse), ms);
            block = block.getNextBlock();
            ms += DELAY;
        }
    }
};
Blockly.ContextMenu.wsCollapseOption = function (hasExpandedBlocks, topBlocks) {
    return {
        enabled: hasExpandedBlocks,
        text: Blockly.Msg.COLLAPSE_ALL,
        callback: function () {
            Blockly.ContextMenu.toggleCollapseFn_(topBlocks, true);
        }
    };
};
Blockly.ContextMenu.wsExpandOption = function (hasCollapsedBlocks, topBlocks) {
    return {
        enabled: hasCollapsedBlocks,
        text: Blockly.Msg.EXPAND_ALL,
        callback: function () {
            Blockly.ContextMenu.toggleCollapseFn_(topBlocks, false);
        }
    };
};
Blockly.ContextMenu.commentDeleteOption = function (comment) {
    var deleteOption = {
        text: Blockly.Msg.DELETE,
        enabled: true,
        callback: function () {
            Blockly.Events.setGroup(true);
            comment.dispose(true, true);
            Blockly.Events.setGroup(false);
        }
    };
    return deleteOption;
};
Blockly.ContextMenu.commentDuplicateOption = function (comment) {
    var duplicateOption = {
        text: Blockly.Msg.DUPLICATE,
        enabled: true,
        callback: function () {
            Blockly.duplicate_(comment);
        }
    };
    return duplicateOption;
};
Blockly.ContextMenu.workspaceCommentOption = function (ws, e) {
    var addWsComment = function () {
        var disabled = false;
        if (Blockly.Events.isEnabled()) {
            Blockly.Events.disable();
            disabled = true;
        }
        var comment = new Blockly.WorkspaceCommentSvg(ws, '', Blockly.WorkspaceCommentSvg.DEFAULT_SIZE, Blockly.WorkspaceCommentSvg.DEFAULT_SIZE, false);
        var injectionDiv = ws.getInjectionDiv();
        var boundingRect = injectionDiv.getBoundingClientRect();
        var clientOffsetPixels = new goog.math.Coordinate(e.clientX - boundingRect.left, e.clientY - boundingRect.top);
        var mainOffsetPixels = ws.getOriginOffsetInPixels();
        var finalOffsetPixels = goog.math.Coordinate.difference(clientOffsetPixels, mainOffsetPixels);
        var finalOffsetMainWs = finalOffsetPixels.scale(1 / ws.scale);
        var commentX = finalOffsetMainWs.x;
        var commentY = finalOffsetMainWs.y;
        comment.moveBy(commentX, commentY);
        if (ws.rendered) {
            comment.initSvg();
            comment.render(false);
            comment.select();
        }
        if (disabled) {
            Blockly.Events.enable();
        }
        Blockly.WorkspaceComment.fireCreateEvent(comment);
    };
    var wsCommentOption = { enabled: true };
    wsCommentOption.text = Blockly.Msg.ADD_COMMENT;
    wsCommentOption.callback = function () {
        addWsComment();
    };
    return wsCommentOption;
};
'use strict';
goog.provide('Blockly.Css');
goog.require('Blockly.Colours');
goog.require('goog.userAgent');
Blockly.Css.Cursor = {
    OPEN: 'handopen',
    CLOSED: 'handclosed',
    DELETE: 'handdelete'
};
Blockly.Css.currentCursor_ = '';
Blockly.Css.styleSheet_ = null;
Blockly.Css.mediaPath_ = '';
Blockly.Css.inject = function (hasCss, pathToMedia) {
    if (Blockly.Css.styleSheet_) {
        return;
    }
    var text = '.blocklyDraggable {}\n';
    if (hasCss) {
        text += Blockly.Css.CONTENT.join('\n');
        if (Blockly.FieldDate) {
            text += Blockly.FieldDate.CSS.join('\n');
        }
    }
    Blockly.Css.mediaPath_ = pathToMedia.replace(/[\\\/]$/, '');
    text = text.replace(/<<<PATH>>>/g, Blockly.Css.mediaPath_);
    for (var colourProperty in Blockly.Colours) {
        if (Blockly.Colours.hasOwnProperty(colourProperty)) {
            text = text.replace(new RegExp('\\$colour\\_' + colourProperty, 'g'), Blockly.Colours[colourProperty]);
        }
    }
    var cssNode = document.createElement('style');
    document.head.insertBefore(cssNode, document.head.firstChild);
    var cssTextNode = document.createTextNode(text);
    cssNode.appendChild(cssTextNode);
    Blockly.Css.styleSheet_ = cssNode.sheet;
};
Blockly.Css.setCursor = function (cursor) {
    console.warn('Deprecated call to Blockly.Css.setCursor.' +
        'See https://github.com/google/blockly/issues/981 for context');
};
Blockly.Css.CONTENT = [
    '.blocklySvg {',
    'background-color: $colour_workspace;',
    'outline: none;',
    'overflow: hidden;',
    'position: absolute;',
    'display: block;',
    '}',
    '.blocklyRelativeWrapper {',
    'position: relative;',
    'width: 100%;',
    'height: 100%;',
    '}',
    '.blocklyWidgetDiv {',
    'display: none;',
    'position: absolute;',
    'z-index: 99999;',
    '}',
    '.injectionDiv {',
    'height: 100%;',
    'position: relative;',
    'overflow: hidden;',
    'touch-action: none',
    '}',
    '.blocklyNonSelectable {',
    'user-select: none;',
    '-moz-user-select: none;',
    '-webkit-user-select: none;',
    '-ms-user-select: none;',
    '}',
    '.blocklyWidgetDiv.fieldTextInput {',
    'overflow: hidden;',
    'border: 1px solid;',
    'box-sizing: border-box;',
    'transform-origin: 0 0;',
    '-ms-transform-origin: 0 0;',
    '-moz-transform-origin: 0 0;',
    '-webkit-transform-origin: 0 0;',
    '}',
    '.blocklyWidgetDiv.fieldTextInput.removableTextInput {',
    'overflow: visible;',
    '}',
    '.blocklyTextDropDownArrow {',
    'position: absolute;',
    '}',
    '.blocklyTextRemoveIcon {',
    'position: absolute;',
    'width: 24px;',
    'height: 24px;',
    'top: -40px;',
    'left: 50%;',
    'margin-left: -12px;',
    'cursor: pointer;',
    '}',
    '.blocklyNonSelectable {',
    'user-select: none;',
    '-moz-user-select: none;',
    '-webkit-user-select: none;',
    '-ms-user-select: none;',
    '}',
    '.blocklyWsDragSurface {',
    'display: none;',
    'position: absolute;',
    'top: 0;',
    'left: 0;',
    '}',
    '.blocklyWsDragSurface.blocklyOverflowVisible {',
    'overflow: visible;',
    '}',
    '.blocklyBlockDragSurface {',
    'display: none;',
    'position: absolute;',
    'top: 0;',
    'left: 0;',
    'right: 0;',
    'bottom: 0;',
    'overflow: visible !important;',
    'z-index: 50;',
    '}',
    '.blocklyTooltipDiv {',
    'background-color: #ffffc7;',
    'border: 1px solid #ddc;',
    'box-shadow: 4px 4px 20px 1px rgba(0,0,0,.15);',
    'color: #000;',
    'display: none;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 9pt;',
    'opacity: 0.9;',
    'padding: 2px;',
    'position: absolute;',
    'z-index: 100000;',
    '}',
    '.blocklyDropDownDiv {',
    'position: fixed;',
    'left: 0;',
    'top: 0;',
    'z-index: 1000;',
    'display: none;',
    'border: 1px solid;',
    'border-radius: 4px;',
    'box-shadow: 0px 0px 8px 1px ' + Blockly.Colours.dropDownShadow + ';',
    'padding: 4px;',
    '-webkit-user-select: none;',
    'min-height: 15px',
    '}',
    '.blocklyDropDownContent {',
    'max-height: 300px;',
    'overflow: auto;',
    '}',
    '.blocklyDropDownArrow {',
    'position: absolute;',
    'left: 0;',
    'top: 0;',
    'width: 16px;',
    'height: 16px;',
    'z-index: -1;',
    'background-color: inherit;',
    'border-color: inherit;',
    '}',
    '.blocklyDropDownButton {',
    'display: inline-block;',
    'float: left;',
    'padding: 0;',
    'margin: 4px;',
    'border-radius: 4px;',
    'outline: none;',
    'border: 1px solid;',
    'transition: box-shadow .1s;',
    'cursor: pointer;',
    '}',
    '.blocklyDropDownButtonHover {',
    'box-shadow: 0px 0px 0px 4px ' + Blockly.Colours.fieldShadow + ';',
    '}',
    '.blocklyDropDownButton:active {',
    'box-shadow: 0px 0px 0px 6px ' + Blockly.Colours.fieldShadow + ';',
    '}',
    '.blocklyDropDownButton > img {',
    'width: 80%;',
    'height: 80%;',
    'margin-top: 5%',
    '}',
    '.blocklyDropDownPlaceholder {',
    'display: inline-block;',
    'float: left;',
    'padding: 0;',
    'margin: 4px;',
    '}',
    '.blocklyNumPadButton {',
    'display: inline-block;',
    'float: left;',
    'padding: 0;',
    'width: 48px;',
    'height: 48px;',
    'margin: 4px;',
    'border-radius: 4px;',
    'background: $colour_numPadBackground;',
    'color: $colour_numPadText;',
    'outline: none;',
    'border: 1px solid $colour_numPadBorder;',
    'cursor: pointer;',
    'font-weight: 600;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 12pt;',
    '-webkit-tap-highlight-color: rgba(0,0,0,0);',
    '}',
    '.blocklyNumPadButton > img {',
    'margin-top: 10%;',
    'width: 80%;',
    'height: 80%;',
    '}',
    '.blocklyNumPadButton:active {',
    'background: $colour_numPadActiveBackground;',
    '-webkit-tap-highlight-color: rgba(0,0,0,0);',
    '}',
    '.arrowTop {',
    'border-top: 1px solid;',
    'border-left: 1px solid;',
    'border-top-left-radius: 4px;',
    'border-color: inherit;',
    '}',
    '.arrowBottom {',
    'border-bottom: 1px solid;',
    'border-right: 1px solid;',
    'border-bottom-right-radius: 4px;',
    'border-color: inherit;',
    '}',
    '.valueReportBox {',
    'min-width: 50px;',
    'max-width: 300px;',
    'max-height: 200px;',
    'overflow: auto;',
    'word-wrap: break-word;',
    'text-align: center;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: .8em;',
    '}',
    '.blocklyResizeSE {',
    'cursor: se-resize;',
    'fill: #aaa;',
    '}',
    '.blocklyResizeSW {',
    'cursor: sw-resize;',
    'fill: #aaa;',
    '}',
    '.blocklyResizeLine {',
    'stroke: #888;',
    'stroke-width: 1;',
    '}',
    '.blocklyHighlightedConnectionPath {',
    'fill: none;',
    'stroke: #fc3;',
    'stroke-width: 4px;',
    '}',
    '.blocklyPath {',
    'stroke-width: 1px;',
    '}',
    '.blocklySelected>.blocklyPath {',
    '}',
    '.blocklySelected>.blocklyPathLight {',
    'display: none;',
    '}',
    '.blocklyDraggable {',
    'cursor: url("<<<PATH>>>/handopen.cur"), auto;',
    'cursor: grab;',
    'cursor: -webkit-grab;',
    'cursor: -moz-grab;',
    '}',
    '.blocklyDragging {',
    'cursor: url("<<<PATH>>>/handclosed.cur"), auto;',
    'cursor: grabbing;',
    'cursor: -webkit-grabbing;',
    'cursor: -moz-grabbing;',
    '}',
    '.blocklyDraggable:active {',
    'cursor: url("<<<PATH>>>/handclosed.cur"), auto;',
    'cursor: grabbing;',
    'cursor: -webkit-grabbing;',
    'cursor: -moz-grabbing;',
    '}',
    '.blocklyBlockDragSurface .blocklyDraggable {',
    'cursor: url("<<<PATH>>>/handclosed.cur"), auto;',
    'cursor: grabbing;',
    'cursor: -webkit-grabbing;',
    'cursor: -moz-grabbing;',
    '}',
    '.blocklyDragging.blocklyDraggingDelete {',
    'cursor: url("<<<PATH>>>/handdelete.cur"), auto;',
    '}',
    '.blocklyDragging.blocklyDraggingMouseThrough {',
    'pointer-events: none;',
    '}',
    '.blocklyToolboxDelete {',
    'cursor: url("<<<PATH>>>/handdelete.cur"), auto;',
    '}',
    '.blocklyToolboxGrab {',
    'cursor: url("<<<PATH>>>/handclosed.cur"), auto;',
    'cursor: grabbing;',
    'cursor: -webkit-grabbing;',
    '}',
    '.blocklyDragging>.blocklyPath,',
    '.blocklyDragging>.blocklyPathLight {',
    'fill-opacity: 1.0;',
    'stroke-opacity: 1.0;',
    '}',
    '.blocklyDragging>.blocklyPath {',
    '}',
    '.blocklyDisabled>.blocklyPath {',
    'fill-opacity: .5;',
    'stroke-opacity: .5;',
    '}',
    '.blocklyInsertionMarker>.blocklyPath {',
    'stroke: none;',
    '}',
    '.blocklyText {',
    'fill: #fff;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 12pt;',
    'font-weight: 500;',
    '}',
    '.blocklyTextTruncated {',
    'font-size: 11pt;',
    '}',
    '.blocklyNonEditableText>text {',
    'pointer-events: none;',
    '}',
    '.blocklyNonEditableText>text,',
    '.blocklyEditableText>text {',
    'fill: $colour_text;',
    '}',
    '.blocklyEditableText>.blocklyEditableLabel {',
    'fill: #fff;',
    '}',
    '.blocklyDropdownText {',
    'fill: #fff !important;',
    '}',
    '.blocklyBubbleText {',
    'fill: $colour_text;',
    '}',
    '.blocklyFlyout {',
    'position: absolute;',
    'z-index: 20;',
    '}',
    '.blocklyFlyoutButton {',
    'fill: none;',
    'pointer-events: all;',
    '}',
    '.blocklyFlyoutButtonBackground {',
    'stroke: #c6c6c6;',
    '}',
    '.blocklyFlyoutButton .blocklyText {',
    'fill: $colour_text;',
    '}',
    '.blocklyFlyoutButtonShadow {',
    'fill: transparent;',
    '}',
    '.blocklyFlyoutButton:hover {',
    'fill: white;',
    'cursor: pointer;',
    '}',
    '.blocklyFlyoutLabel {',
    'cursor: default;',
    '}',
    '.blocklyFlyoutLabelBackground {',
    'opacity: 0;',
    '}',
    '.blocklyTouchTargetBackground {',
    'fill: transparent;',
    'cursor: pointer;',
    '}',
    '.blocklyFlyoutLabelText {',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 14pt;',
    'fill: #575E75;',
    'font-weight: bold;',
    '}',
    '.blocklySvg text, .blocklyBlockDragSurface text, .blocklyFlyout text, .blocklyToolboxDiv text {',
    'user-select: none;',
    '-moz-user-select: none;',
    '-webkit-user-select: none;',
    'cursor: inherit;',
    '}',
    '.blocklyHidden {',
    'display: none;',
    '}',
    '.blocklyFieldDropdown:not(.blocklyHidden) {',
    'display: block;',
    '}',
    '.blocklyIconGroup {',
    'cursor: default;',
    '}',
    '.blocklyIconGroup:not(:hover),',
    '.blocklyIconGroupReadonly {',
    'opacity: .6;',
    '}',
    '.blocklyIconShape {',
    'fill: #00f;',
    'stroke: #fff;',
    'stroke-width: 1px;',
    '}',
    '.blocklyIconSymbol {',
    'fill: #fff;',
    '}',
    '.blocklyMinimalBody {',
    'margin: 0;',
    'padding: 0;',
    '}',
    '.blocklyCommentForeignObject {',
    'position: relative;',
    'z-index: 0;',
    '}',
    '.blocklyCommentRect {',
    'fill: #E7DE8E;',
    'stroke: #bcA903;',
    'stroke-width: 1px',
    '}',
    '.blocklyCommentTarget {',
    'fill: transparent;',
    'stroke: #bcA903;',
    '}',
    '.blocklyCommentTargetFocused {',
    'fill: none;',
    '}',
    '.blocklyCommentHandleTarget {',
    'fill: none;',
    '}',
    '.blocklyCommentHandleTargetFocused {',
    'fill: transparent;',
    '}',
    '.blocklyFocused>.blocklyCommentRect {',
    'fill: #B9B272;',
    'stroke: #B9B272;',
    '}',
    '.blocklySelected>.blocklyCommentTarget {',
    'stroke: #fc3;',
    'stroke-width: 3px;',
    '}',
    '.blocklyCommentTextarea {',
    'background-color: #fef49c;',
    'border: 0;',
    'outline: 0;',
    'margin: 0;',
    'padding: 3px;',
    'resize: none;',
    'display: block;',
    'overflow: hidden;',
    '}',
    '.blocklyCommentDeleteIcon {',
    'cursor: pointer;',
    'fill: #000;',
    'display: none',
    '}',
    '.blocklySelected > .blocklyCommentDeleteIcon {',
    'display: block',
    '}',
    '.blocklyDeleteIconShape {',
    'fill: #000;',
    'stroke: #000;',
    'stroke-width: 1px;',
    '}',
    '.blocklyDeleteIconShape.blocklyDeleteIconHighlighted {',
    'stroke: #fc3;',
    '}',
    '.scratchCommentForeignObject {',
    'position: relative;',
    '}',
    '.scratchCommentBody {',
    'background-color: #fef49c;',
    'border-radius: 4px;',
    '}',
    '.scratchCommentRect {',
    'fill: #fef49c;',
    '}',
    '.scratchCommentTarget {',
    'fill: transparent;',
    '}',
    '.scratchWorkspaceCommentBorder {',
    'stroke: #bcA903;',
    'stroke-width: 1px;',
    '}',
    '.scratchCommentTargetFocused {',
    'fill: none;',
    '}',
    '.scratchCommentTopBar {',
    'fill: #000000;',
    'fill-opacity: 0.1',
    '}',
    '.scratchCommentText {',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 12pt;',
    'font-weight: 400;',
    '}',
    '.scratchCommentTextarea {',
    'background-color: #fef49c;',
    'border: 0;',
    'outline: 0;',
    'padding: 0;',
    'resize: none;',
    'overflow: hidden;',
    '}',
    '.scratchCommentTextarea::placeholder {',
    'color: rgba(0,0,0,0.5);',
    'font-style: italic;',
    '}',
    '.scratchCommentResizeSE {',
    'cursor: se-resize;',
    'fill: transparent;',
    '}',
    '.scratchCommentResizeSW {',
    'cursor: sw-resize;',
    'fill: transparent;',
    '}',
    '.blocklyHtmlInput {',
    'border: none;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 12pt;',
    'height: 100%;',
    'margin: 0;',
    'outline: none;',
    'box-sizing: border-box;',
    'width: 100%;',
    'text-align: center;',
    'color: $colour_text;',
    'font-weight: 500;',
    '}',
    '.blocklyMainBackground {',
    'stroke-width: 1;',
    'stroke: #c6c6c6;',
    '}',
    '.blocklyMutatorBackground {',
    'fill: #fff;',
    'stroke: #ddd;',
    'stroke-width: 1;',
    '}',
    '.blocklyFlyoutBackground {',
    'fill: $colour_flyout;',
    'fill-opacity: .8;',
    '}',
    '.blocklyMainWorkspaceScrollbar {',
    'z-index: 20;',
    '}',
    '.blocklyFlyoutScrollbar {',
    'z-index: 30;',
    '}',
    '.blocklyScrollbarHorizontal, .blocklyScrollbarVertical {',
    'position: absolute;',
    'outline: none;',
    '}',
    '.blocklyScrollbarBackground {',
    'opacity: 0;',
    '}',
    '.blocklyScrollbarHandle {',
    'fill: $colour_scrollbar;',
    '}',
    '.blocklyScrollbarBackground:hover+.blocklyScrollbarHandle,',
    '.blocklyScrollbarHandle:hover {',
    'fill: $colour_scrollbarHover;',
    '}',
    '.blocklyZoom>image {',
    'opacity: 1;',
    '}',
    '.blocklyFlyout .blocklyScrollbarHandle {',
    'fill: #bbb;',
    '}',
    '.blocklyFlyout .blocklyScrollbarBackground:hover+.blocklyScrollbarHandle,',
    '.blocklyFlyout .blocklyScrollbarHandle:hover {',
    'fill: #aaa;',
    '}',
    '.blocklyInvalidInput {',
    'background: #faa;',
    '}',
    '.blocklyAngleCircle {',
    'stroke: ' + Blockly.Colours.motion.tertiary + ';',
    'stroke-width: 1;',
    'fill: ' + Blockly.Colours.motion.secondary + ';',
    '}',
    '.blocklyAngleCenterPoint {',
    'stroke: #fff;',
    'stroke-width: 1;',
    'fill: #fff;',
    '}',
    '.blocklyAngleDragHandle {',
    'stroke: #fff;',
    'stroke-width: 5;',
    'stroke-opacity: 0.25;',
    'fill: #fff;',
    'cursor: pointer;',
    '}',
    '.blocklyAngleDragArrow {',
    'pointer-events: none',
    '}',
    '.blocklyAngleMarks {',
    'stroke: #fff;',
    'stroke-width: 1;',
    'stroke-opacity: 0.5;',
    '}',
    '.blocklyAngleGauge {',
    'fill: #fff;',
    'fill-opacity: 0.20;',
    '}',
    '.blocklyAngleLine {',
    'stroke: #fff;',
    'stroke-width: 1;',
    'stroke-linecap: round;',
    'pointer-events: none;',
    '}',
    '.blocklyContextMenu {',
    'border-radius: 4px;',
    'max-height: 100%;',
    '}',
    '.blocklyDropdownMenu {',
    'padding: 0 !important;',
    '}',
    '.blocklyDropDownNumPad {',
    'background-color: $colour_numPadBackground;',
    '}',
    '.blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,',
    '.blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon {',
    'background: url(<<<PATH>>>/sprites.png) no-repeat -48px -16px !important;',
    '}',
    '.blocklyToolboxDiv {',
    'background-color: $colour_toolbox;',
    'color: $colour_toolboxText;',
    'overflow-x: visible;',
    'overflow-y: auto;',
    'position: absolute;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'z-index: 40;',
    '-webkit-tap-highlight-color: transparent;',
    '}',
    '.blocklyTreeRoot {',
    'padding: 4px 0;',
    '}',
    '.blocklyTreeRoot:focus {',
    'outline: none;',
    '}',
    '.blocklyTreeRow {',
    'height: 22px;',
    'line-height: 22px;',
    'margin-bottom: 3px;',
    'padding-right: 8px;',
    'white-space: nowrap;',
    '}',
    '.blocklyHorizontalTree {',
    'float: left;',
    'margin: 1px 5px 8px 0;',
    '}',
    '.blocklyHorizontalTreeRtl {',
    'float: right;',
    'margin: 1px 0 8px 5px;',
    '}',
    '.blocklyToolboxDiv[dir="RTL"] .blocklyTreeRow {',
    'margin-left: 8px;',
    '}',
    '.blocklyTreeRow:not(.blocklyTreeSelected):hover {',
    'background-color: #e4e4e4;',
    '}',
    '.blocklyTreeSeparator {',
    'border-bottom: solid #e5e5e5 1px;',
    'height: 0;',
    'margin: 5px 0;',
    '}',
    '.blocklyTreeSeparatorHorizontal {',
    'border-right: solid #e5e5e5 1px;',
    'width: 0;',
    'padding: 5px 0;',
    'margin: 0 5px;',
    '}',
    '.blocklyTreeIcon {',
    'background-image: url(<<<PATH>>>/sprites.png);',
    'height: 16px;',
    'vertical-align: middle;',
    'width: 16px;',
    '}',
    '.blocklyTreeIconClosedLtr {',
    'background-position: -32px -1px;',
    '}',
    '.blocklyTreeIconClosedRtl {',
    'background-position: 0px -1px;',
    '}',
    '.blocklyTreeIconOpen {',
    'background-position: -16px -1px;',
    '}',
    '.blocklyTreeSelected>.blocklyTreeIconClosedLtr {',
    'background-position: -32px -17px;',
    '}',
    '.blocklyTreeSelected>.blocklyTreeIconClosedRtl {',
    'background-position: 0px -17px;',
    '}',
    '.blocklyTreeSelected>.blocklyTreeIconOpen {',
    'background-position: -16px -17px;',
    '}',
    '.blocklyTreeIconNone,',
    '.blocklyTreeSelected>.blocklyTreeIconNone {',
    'background-position: -48px -1px;',
    '}',
    '.blocklyTreeLabel {',
    'cursor: default;',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 16px;',
    'padding: 0 3px;',
    'vertical-align: middle;',
    '}',
    '.blocklyToolboxDelete .blocklyTreeLabel {',
    'cursor: url("<<<PATH>>>/handdelete.cur"), auto;',
    '}',
    '.blocklyTreeSelected .blocklyTreeLabel {',
    'color: #fff;',
    '}',
    '.blocklyDropDownDiv .goog-slider-horizontal {',
    'margin: 8px;',
    'height: 22px;',
    'width: 150px;',
    'position: relative;',
    'outline: none;',
    'border-radius: 11px;',
    'margin-bottom: 20px;',
    '}',
    '.blocklyDropDownDiv .goog-slider-horizontal .goog-slider-thumb {',
    'width: 26px;',
    'height: 26px;',
    'top: -1px;',
    'position: absolute;',
    'background-color: white;',
    'border-radius: 100%;',
    '-webkit-box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.15);',
    '-moz-box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.15);',
    'box-shadow: 0 0 0 4px rgba(0, 0, 0, 0.15);',
    '}',
    '.scratchEyedropper {',
    'background: none;',
    'outline: none;',
    'border: none;',
    'width: 100%;',
    'text-align: center;',
    'border-top: 1px solid #ddd;',
    'padding-top: 5px;',
    'cursor: pointer;',
    '}',
    '.scratchColourPickerLabel {',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 0.65rem;',
    'color: $colour_toolboxText;',
    'margin: 8px;',
    '}',
    '.scratchColourPickerLabelText {',
    'font-weight: bold;',
    '}',
    '.scratchColourPickerReadout {',
    'margin-left: 10px;',
    '}',
    '.scratchMatrixButtonDiv {',
    'width: 50%;',
    'text-align: center;',
    'float: left;',
    '}',
    '.scratchNotePickerKeyLabel {',
    'font-family: "Helvetica Neue", Helvetica, sans-serif;',
    'font-size: 0.75rem;',
    'fill: $colour_text;',
    'pointer-events: none;',
    '}',
    '.blocklyWidgetDiv .goog-menu {',
    'background: #fff;',
    'border-color: #ccc #666 #666 #ccc;',
    'border-style: solid;',
    'border-width: 1px;',
    'cursor: default;',
    'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',
    'margin: 0;',
    'outline: none;',
    'padding: 4px 0;',
    'position: absolute;',
    'overflow-y: auto;',
    'overflow-x: hidden;',
    'z-index: 20000;',
    '}',
    '.blocklyDropDownDiv .goog-menu {',
    'cursor: default;',
    'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',
    'outline: none;',
    'z-index: 20000;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem {',
    'color: #000;',
    'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',
    'list-style: none;',
    'margin: 0;',
    'padding: 4px 7em 4px 28px;',
    'white-space: nowrap;',
    '}',
    '.blocklyDropDownDiv .goog-menuitem {',
    'color: #fff;',
    'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',
    'font-weight: bold;',
    'list-style: none;',
    'margin: 0;',
    'min-height: 24px;',
    'padding: 4px 7em 4px 28px;',
    'white-space: nowrap;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem.goog-menuitem-rtl, ',
    '.blocklyDropDownDiv .goog-menuitem.goog-menuitem-rtl {',
    'padding-left: 7em;',
    'padding-right: 28px;',
    '}',
    '.blocklyWidgetDiv .goog-menu-nocheckbox .goog-menuitem,',
    '.blocklyWidgetDiv .goog-menu-noicon .goog-menuitem, ',
    '.blocklyDropDownDiv .goog-menu-nocheckbox .goog-menuitem,',
    '.blocklyDropDownDiv .goog-menu-noicon .goog-menuitem { ',
    'padding-left: 12px;',
    '}',
    '.blocklyWidgetDiv .goog-menu-noaccel .goog-menuitem, ',
    '.blocklyDropDownDiv .goog-menu-noaccel .goog-menuitem {',
    'padding-right: 20px;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-content ',
    '.blocklyDropDownDiv .goog-menuitem-content {',
    'color: #000;',
    'font: normal 13px "Helvetica Neue", Helvetica, sans-serif;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-accel,',
    '.blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-content, ',
    '.blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-accel,',
    '.blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-content {',
    'color: #ccc !important;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-disabled .goog-menuitem-icon, ',
    '.blocklyDropDownDiv .goog-menuitem-disabled .goog-menuitem-icon {',
    'opacity: 0.3;',
    '-moz-opacity: 0.3;',
    'filter: alpha(opacity=30);',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-highlight,',
    '.blocklyWidgetDiv .goog-menuitem-hover {',
    'background-color: #d6e9f8;',
    'border-color: #d6e9f8;',
    'border-style: dotted;',
    'border-width: 1px 0;',
    'padding-bottom: 3px;',
    'padding-top: 3px;',
    '}',
    '.blocklyDropDownDiv .goog-menuitem-highlight,',
    '.blocklyDropDownDiv .goog-menuitem-hover {',
    'background-color: rgba(0, 0, 0, 0.2);',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-checkbox,',
    '.blocklyWidgetDiv .goog-menuitem-icon, ',
    '.blocklyDropDownDiv .goog-menuitem-checkbox,',
    '.blocklyDropDownDiv .goog-menuitem-icon {',
    'background-repeat: no-repeat;',
    'height: 16px;',
    'left: 6px;',
    'position: absolute;',
    'right: auto;',
    'vertical-align: middle;',
    'width: 16px;',
    '}',
    '.blocklyWidgetDiv .goog-option-selected .goog-menuitem-checkbox,',
    '.blocklyWidgetDiv .goog-option-selected .goog-menuitem-icon,',
    '.blocklyDropDownDiv .goog-option-selected .goog-menuitem-checkbox,',
    '.blocklyDropDownDiv .goog-option-selected .goog-menuitem-icon {',
    'background: url(<<<PATH>>>/sprites.png) no-repeat -48px -16px !important;',
    'position: static;',
    'float: left;',
    'margin-left: -24px;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-checkbox,',
    '.blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-icon,',
    '.blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-checkbox,',
    '.blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-icon {',
    'float: right;',
    'margin-right: -24px;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-accel, ',
    '.blocklyDropDownDiv .goog-menuitem-accel {',
    'color: #999;',
    'direction: ltr;',
    'left: auto;',
    'padding: 0 6px;',
    'position: absolute;',
    'right: 0;',
    'text-align: right;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-rtl .goog-menuitem-accel, ',
    '.blocklyDropDownDiv .goog-menuitem-rtl .goog-menuitem-accel {',
    'left: 0;',
    'right: auto;',
    'text-align: left;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-mnemonic-hint, ',
    '.blocklyDropDownDiv .goog-menuitem-mnemonic-hint {',
    'text-decoration: underline;',
    '}',
    '.blocklyWidgetDiv .goog-menuitem-mnemonic-separator, ',
    '.blocklyDropDownDiv .goog-menuitem-mnemonic-separator {',
    'color: #999;',
    'font-size: 12px;',
    'padding-left: 4px;',
    '}',
    '.blocklyWidgetDiv .goog-menuseparator, ',
    '.blocklyDropDownDiv .goog-menuseparator {',
    'border-top: 1px solid #ccc;',
    'margin: 4px 0;',
    'padding: 0;',
    '}',
    '.blocklyFlyoutCheckbox {',
    'fill: white;',
    'stroke: #c8c8c8;',
    '}',
    '.checked > .blocklyFlyoutCheckbox {',
    'fill: ' + Blockly.Colours.motion.primary + ';',
    'stroke: ' + Blockly.Colours.motion.tertiary + ';',
    '}',
    '.blocklyFlyoutCheckboxPath {',
    'fill: transparent;',
    'stroke: white;',
    'stroke-width: 3;',
    'stroke-linecap: round;',
    'stroke-linejoin: round;',
    '}',
    '.scratchCategoryMenu {',
    'width: 60px;',
    'background: $colour_toolbox;',
    'color: $colour_toolboxText;',
    'font-size: .7rem;',
    'user-select: none;',
    '-webkit-user-select: none;',
    '-moz-user-select: none;',
    '-ms-user-select: none;',
    '}',
    '.scratchCategoryMenuHorizontal {',
    'width: 100%;',
    'height: 50px;',
    'background: $colour_toolbox;',
    'color: $colour_toolboxText;',
    'font-size: .7em;',
    'user-select: none;',
    '-webkit-user-select: none;',
    '-moz-user-select: none;',
    '-ms-user-select: none;',
    '}',
    '.scratchCategoryMenuHorizontal .scratchCategoryMenuRow {',
    'float: left;',
    'margin: 3px;',
    '}',
    '.scratchCategoryMenuRow {',
    '}',
    '.scratchCategoryMenuItem {',
    'padding: 0.375rem 0px;',
    'cursor: pointer;',
    'text-align: center;',
    '}',
    '.scratchCategoryMenuHorizontal .scratchCategoryMenuItem {',
    'padding: 6px 5px;',
    '}',
    '.scratchCategoryMenuItem.categorySelected {',
    'background: $colour_toolboxSelected;',
    '}',
    '.scratchCategoryItemBubble {',
    'width: 1.25rem;',
    'height: 1.25rem;',
    'border: 1px solid;',
    'border-radius: 100%;',
    'margin: 0 auto 0.125rem;',
    '}',
    '.scratchCategoryItemIcon {',
    'width: 1.25rem;',
    'height: 1.25rem;',
    'margin: 0 auto 0.125rem;',
    'background-size: 100%;',
    '}',
    '.scratchCategoryMenuItem:hover {',
    'color: $colour_toolboxHover !important;',
    '}',
    ''
];
'use strict';
goog.provide('Blockly.DataCategory');
goog.require('Blockly.Blocks');
goog.require('Blockly.VariableModel');
goog.require('Blockly.Variables');
goog.require('Blockly.Workspace');
Blockly.DataCategory = function (workspace) {
    var variableModelList = workspace.getVariablesOfType('');
    variableModelList.sort(Blockly.VariableModel.compareByName);
    var xmlList = [];
    Blockly.DataCategory.addCreateButton(xmlList, workspace, 'VARIABLE');
    for (var i = 0; i < variableModelList.length; i++) {
        Blockly.DataCategory.addDataVariable(xmlList, variableModelList[i]);
    }
    if (variableModelList.length > 0) {
        xmlList[xmlList.length - 1].setAttribute('gap', 24);
        var firstVariable = variableModelList[0];
        Blockly.DataCategory.addSetVariableTo(xmlList, firstVariable);
        Blockly.DataCategory.addChangeVariableBy(xmlList, firstVariable);
        Blockly.DataCategory.addShowVariable(xmlList, firstVariable);
        Blockly.DataCategory.addHideVariable(xmlList, firstVariable);
    }
    Blockly.DataCategory.addCreateButton(xmlList, workspace, 'LIST');
    variableModelList = workspace.getVariablesOfType(Blockly.LIST_VARIABLE_TYPE);
    variableModelList.sort(Blockly.VariableModel.compareByName);
    for (var i = 0; i < variableModelList.length; i++) {
        Blockly.DataCategory.addDataList(xmlList, variableModelList[i]);
    }
    if (variableModelList.length > 0) {
        xmlList[xmlList.length - 1].setAttribute('gap', 24);
        var firstVariable = variableModelList[0];
        Blockly.DataCategory.addAddToList(xmlList, firstVariable);
        Blockly.DataCategory.addSep(xmlList);
        Blockly.DataCategory.addDeleteOfList(xmlList, firstVariable);
        Blockly.DataCategory.addDeleteAllOfList(xmlList, firstVariable);
        Blockly.DataCategory.addInsertAtList(xmlList, firstVariable);
        Blockly.DataCategory.addReplaceItemOfList(xmlList, firstVariable);
        Blockly.DataCategory.addSep(xmlList);
        Blockly.DataCategory.addItemOfList(xmlList, firstVariable);
        Blockly.DataCategory.addItemNumberOfList(xmlList, firstVariable);
        Blockly.DataCategory.addLengthOfList(xmlList, firstVariable);
        Blockly.DataCategory.addListContainsItem(xmlList, firstVariable);
        Blockly.DataCategory.addSep(xmlList);
        Blockly.DataCategory.addShowList(xmlList, firstVariable);
        Blockly.DataCategory.addHideList(xmlList, firstVariable);
    }
    return xmlList;
};
Blockly.DataCategory.addDataVariable = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_variable', 'VARIABLE');
    xmlList[xmlList.length - 1].setAttribute('id', variable.getId());
};
Blockly.DataCategory.addSetVariableTo = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_setvariableto', 'VARIABLE', ['VALUE', 'text', 0]);
};
Blockly.DataCategory.addChangeVariableBy = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_changevariableby', 'VARIABLE', ['VALUE', 'math_number', 1]);
};
Blockly.DataCategory.addShowVariable = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_showvariable', 'VARIABLE');
};
Blockly.DataCategory.addHideVariable = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_hidevariable', 'VARIABLE');
};
Blockly.DataCategory.addDataList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_listcontents', 'LIST');
    xmlList[xmlList.length - 1].setAttribute('id', variable.getId());
};
Blockly.DataCategory.addAddToList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_addtolist', 'LIST', ['ITEM', 'text', Blockly.Msg.DEFAULT_LIST_ITEM]);
};
Blockly.DataCategory.addDeleteOfList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_deleteoflist', 'LIST', ['INDEX', 'math_integer', 1]);
};
Blockly.DataCategory.addDeleteAllOfList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_deletealloflist', 'LIST');
};
Blockly.DataCategory.addInsertAtList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_insertatlist', 'LIST', ['INDEX', 'math_integer', 1], ['ITEM', 'text', Blockly.Msg.DEFAULT_LIST_ITEM]);
};
Blockly.DataCategory.addReplaceItemOfList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_replaceitemoflist', 'LIST', ['INDEX', 'math_integer', 1], ['ITEM', 'text', Blockly.Msg.DEFAULT_LIST_ITEM]);
};
Blockly.DataCategory.addItemOfList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_itemoflist', 'LIST', ['INDEX', 'math_integer', 1]);
};
Blockly.DataCategory.addItemNumberOfList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_itemnumoflist', 'LIST', ['ITEM', 'text', Blockly.Msg.DEFAULT_LIST_ITEM]);
};
Blockly.DataCategory.addLengthOfList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_lengthoflist', 'LIST');
};
Blockly.DataCategory.addListContainsItem = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_listcontainsitem', 'LIST', ['ITEM', 'text', Blockly.Msg.DEFAULT_LIST_ITEM]);
};
Blockly.DataCategory.addShowList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_showlist', 'LIST');
};
Blockly.DataCategory.addHideList = function (xmlList, variable) {
    Blockly.DataCategory.addBlock(xmlList, variable, 'data_hidelist', 'LIST');
};
Blockly.DataCategory.addCreateButton = function (xmlList, workspace, type) {
    var button = goog.dom.createDom('button');
    var msg = Blockly.Msg.NEW_VARIABLE;
    var callbackKey = 'CREATE_VARIABLE';
    var callback = function (button) {
        Blockly.Variables.createVariable(button.getTargetWorkspace(), null, '');
    };
    if (type === 'LIST') {
        msg = Blockly.Msg.NEW_LIST;
        callbackKey = 'CREATE_LIST';
        callback = function (button) {
            Blockly.Variables.createVariable(button.getTargetWorkspace(), null, Blockly.LIST_VARIABLE_TYPE);
        };
    }
    button.setAttribute('text', msg);
    button.setAttribute('callbackKey', callbackKey);
    workspace.registerButtonCallback(callbackKey, callback);
    xmlList.push(button);
};
Blockly.DataCategory.addBlock = function (xmlList, variable, blockType, fieldName, opt_value, opt_secondValue) {
    if (Blockly.Blocks[blockType]) {
        var firstValueField;
        var secondValueField;
        if (opt_value) {
            firstValueField = Blockly.DataCategory.createValue(opt_value[0], opt_value[1], opt_value[2]);
        }
        if (opt_secondValue) {
            secondValueField = Blockly.DataCategory.createValue(opt_secondValue[0], opt_secondValue[1], opt_secondValue[2]);
        }
        var gap = 8;
        var blockText = '<xml>' +
            '<block type="' + blockType + '" gap="' + gap + '">' +
            Blockly.Variables.generateVariableFieldXml_(variable, fieldName) +
            firstValueField + secondValueField +
            '</block>' +
            '</xml>';
        var block = Blockly.Xml.textToDom(blockText).firstChild;
        xmlList.push(block);
    }
};
Blockly.DataCategory.createValue = function (valueName, type, value) {
    var fieldName;
    switch (valueName) {
        case 'ITEM':
            fieldName = 'TEXT';
            break;
        case 'INDEX':
            fieldName = 'NUM';
            break;
        case 'VALUE':
            if (type === 'math_number') {
                fieldName = 'NUM';
            }
            else {
                fieldName = 'TEXT';
            }
            break;
    }
    var valueField = '<value name="' + valueName + '">' +
        '<shadow type="' + type + '">' +
        '<field name="' + fieldName + '">' + value + '</field>' +
        '</shadow>' +
        '</value>';
    return valueField;
};
Blockly.DataCategory.addSep = function (xmlList) {
    var gap = 36;
    var sepText = '<xml>' +
        '<sep gap="' + gap + '"/>' +
        '</xml>';
    var sep = Blockly.Xml.textToDom(sepText).firstChild;
    xmlList.push(sep);
};
'use strict';
goog.provide('Blockly.DraggedConnectionManager');
goog.require('Blockly.BlockAnimations');
goog.require('Blockly.RenderedConnection');
goog.require('goog.math.Coordinate');
Blockly.DraggedConnectionManager = function (block) {
    Blockly.selected = block;
    this.topBlock_ = block;
    this.workspace_ = block.workspace;
    this.availableConnections_ = this.initAvailableConnections_();
    this.closestConnection_ = null;
    this.localConnection_ = null;
    this.radiusConnection_ = 0;
    this.wouldDeleteBlock_ = false;
};
Blockly.DraggedConnectionManager.prototype.dispose = function () {
    this.topBlock_ = null;
    this.workspace_ = null;
    this.availableConnections_.length = 0;
    this.closestConnection_ = null;
    this.localConnection_ = null;
};
Blockly.DraggedConnectionManager.prototype.wouldDeleteBlock = function () {
    return this.wouldDeleteBlock_;
};
Blockly.DraggedConnectionManager.prototype.applyConnections = function () {
    if (this.closestConnection_) {
        this.localConnection_.connect(this.closestConnection_);
        if (this.topBlock_.rendered) {
            var inferiorConnection = this.localConnection_.isSuperior() ?
                this.closestConnection_ : this.localConnection_;
            Blockly.BlockAnimations.connectionUiEffect(inferiorConnection.getSourceBlock());
            var rootBlock = this.topBlock_.getRootBlock();
            rootBlock.bringToFront();
        }
        this.removeHighlighting_();
    }
};
Blockly.DraggedConnectionManager.prototype.update = function (dxy, deleteArea, isOutside) {
    var oldClosestConnection;
    var closestConnectionChanged;
    if (!isOutside) {
        oldClosestConnection = this.closestConnection_;
        closestConnectionChanged = this.updateClosest_(dxy);
        if (closestConnectionChanged && oldClosestConnection) {
            oldClosestConnection.unhighlight();
        }
    }
    else if (this.closestConnection_) {
        this.closestConnection_.unhighlight();
        this.closestConnection_ = null;
    }
    var wouldConnect = !!this.closestConnection_ &&
        deleteArea != Blockly.DELETE_AREA_TOOLBOX;
    var wouldDelete = !!deleteArea && !this.topBlock_.getParent() &&
        this.topBlock_.isDeletable();
    this.wouldDeleteBlock_ = wouldDelete && !wouldConnect;
    if (!this.wouldDeleteBlock_ && closestConnectionChanged &&
        this.closestConnection_) {
        this.addHighlighting_();
    }
};
Blockly.DraggedConnectionManager.prototype.removeHighlighting_ = function () {
    if (this.closestConnection_) {
        this.closestConnection_.unhighlight();
    }
};
Blockly.DraggedConnectionManager.prototype.addHighlighting_ = function () {
    if (this.closestConnection_) {
        this.closestConnection_.highlight();
    }
};
Blockly.DraggedConnectionManager.prototype.initAvailableConnections_ = function () {
    var available = this.topBlock_.getConnections_(false);
    var lastOnStack = this.topBlock_.lastConnectionInStack();
    if (lastOnStack && lastOnStack != this.topBlock_.nextConnection) {
        available.push(lastOnStack);
    }
    return available;
};
Blockly.DraggedConnectionManager.prototype.updateClosest_ = function (dxy) {
    var oldClosestConnection = this.closestConnection_;
    this.closestConnection_ = null;
    this.localConnection_ = null;
    this.radiusConnection_ = Blockly.SNAP_RADIUS;
    for (var i = 0; i < this.availableConnections_.length; i++) {
        var myConnection = this.availableConnections_[i];
        var neighbour = myConnection.closest(this.radiusConnection_, dxy);
        if (neighbour.connection) {
            this.closestConnection_ = neighbour.connection;
            this.localConnection_ = myConnection;
            this.radiusConnection_ = neighbour.radius;
        }
    }
    return oldClosestConnection != this.closestConnection_;
};
'use strict';
goog.provide('Blockly.DropDownDiv');
goog.require('goog.dom');
goog.require('goog.style');
Blockly.DropDownDiv = function () {
};
Blockly.DropDownDiv.DIV_ = null;
Blockly.DropDownDiv.boundsElement_ = null;
Blockly.DropDownDiv.owner_ = null;
Blockly.DropDownDiv.ARROW_SIZE = 16;
Blockly.DropDownDiv.BORDER_SIZE = 1;
Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING = 12;
Blockly.DropDownDiv.PADDING_Y = 20;
Blockly.DropDownDiv.ANIMATION_TIME = 0.25;
Blockly.DropDownDiv.animateOutTimer_ = null;
Blockly.DropDownDiv.onHide_ = 0;
Blockly.DropDownDiv.createDom = function () {
    if (Blockly.DropDownDiv.DIV_) {
        return;
    }
    Blockly.DropDownDiv.DIV_ = goog.dom.createDom('div', 'blocklyDropDownDiv');
    document.body.appendChild(Blockly.DropDownDiv.DIV_);
    Blockly.DropDownDiv.content_ = goog.dom.createDom('div', 'blocklyDropDownContent');
    Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.content_);
    Blockly.DropDownDiv.arrow_ = goog.dom.createDom('div', 'blocklyDropDownArrow');
    Blockly.DropDownDiv.DIV_.appendChild(Blockly.DropDownDiv.arrow_);
    Blockly.DropDownDiv.DIV_.style.transition = 'transform ' +
        Blockly.DropDownDiv.ANIMATION_TIME + 's, ' +
        'opacity ' + Blockly.DropDownDiv.ANIMATION_TIME + 's';
};
Blockly.DropDownDiv.setBoundsElement = function (boundsElement) {
    Blockly.DropDownDiv.boundsElement_ = boundsElement;
};
Blockly.DropDownDiv.getContentDiv = function () {
    return Blockly.DropDownDiv.content_;
};
Blockly.DropDownDiv.clearContent = function () {
    Blockly.DropDownDiv.content_.innerHTML = '';
    Blockly.DropDownDiv.content_.style.width = '';
};
Blockly.DropDownDiv.setColour = function (backgroundColour, borderColour) {
    Blockly.DropDownDiv.DIV_.style.backgroundColor = backgroundColour;
    Blockly.DropDownDiv.DIV_.style.borderColor = borderColour;
};
Blockly.DropDownDiv.setCategory = function (category) {
    Blockly.DropDownDiv.DIV_.setAttribute('data-category', category);
};
Blockly.DropDownDiv.showPositionedByBlock = function (owner, block, opt_onHide, opt_secondaryYOffset) {
    var scale = block.workspace.scale;
    var bBox = { width: block.width, height: block.height };
    bBox.width *= scale;
    bBox.height *= scale;
    var position = block.getSvgRoot().getBoundingClientRect();
    var primaryX = position.left + bBox.width / 2;
    var primaryY = position.top + bBox.height;
    var secondaryX = primaryX;
    var secondaryY = position.top;
    if (opt_secondaryYOffset) {
        secondaryY += opt_secondaryYOffset;
    }
    Blockly.DropDownDiv.setBoundsElement(block.workspace.getParentSvg().parentNode);
    return Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, opt_onHide);
};
Blockly.DropDownDiv.show = function (owner, primaryX, primaryY, secondaryX, secondaryY, opt_onHide) {
    Blockly.DropDownDiv.owner_ = owner;
    Blockly.DropDownDiv.onHide_ = opt_onHide;
    var div = Blockly.DropDownDiv.DIV_;
    var metrics = Blockly.DropDownDiv.getPositionMetrics(primaryX, primaryY, secondaryX, secondaryY);
    Blockly.DropDownDiv.arrow_.style.transform = 'translate(' +
        metrics.arrowX + 'px,' + metrics.arrowY + 'px) rotate(45deg)';
    Blockly.DropDownDiv.arrow_.setAttribute('class', metrics.arrowAtTop ? 'blocklyDropDownArrow arrowTop' : 'blocklyDropDownArrow arrowBottom');
    div.style.direction = owner.sourceBlock_ && owner.sourceBlock_.RTL ? 'rtl' : 'ltr';
    div.style.left = metrics.initialX + 'px';
    div.style.top = metrics.initialY + 'px';
    div.style.display = 'block';
    div.style.opacity = 1;
    var dx = (metrics.finalX - metrics.initialX);
    var dy = (metrics.finalY - metrics.initialY);
    div.style.transform = 'translate(' + dx + 'px,' + dy + 'px)';
    return metrics.arrowAtTop;
};
Blockly.DropDownDiv.getPositionMetrics = function (primaryX, primaryY, secondaryX, secondaryY) {
    var div = Blockly.DropDownDiv.DIV_;
    var boundPosition = Blockly.DropDownDiv.boundsElement_.getBoundingClientRect();
    var boundSize = goog.style.getSize(Blockly.DropDownDiv.boundsElement_);
    var divSize = goog.style.getSize(div);
    var renderX, renderY, renderedSecondary;
    if (primaryY + divSize.height > boundPosition.top + boundSize.height) {
        if (secondaryY - divSize.height < boundPosition.top) {
            renderX = primaryX;
            renderY = primaryY + Blockly.DropDownDiv.PADDING_Y;
            renderedSecondary = false;
        }
        else {
            renderX = secondaryX;
            renderY = secondaryY - divSize.height - Blockly.DropDownDiv.PADDING_Y;
            renderedSecondary = true;
        }
    }
    else {
        renderX = primaryX;
        renderY = primaryY + Blockly.DropDownDiv.PADDING_Y;
        renderedSecondary = false;
    }
    var arrowX = renderX - Blockly.DropDownDiv.ARROW_SIZE / 2;
    arrowX = Math.max(boundPosition.left, Math.min(arrowX, boundPosition.left + boundSize.width));
    var centerX = divSize.width / 2;
    renderX -= centerX;
    renderX = Math.max(boundPosition.left, Math.min(renderX, boundPosition.left + boundSize.width - divSize.width));
    arrowX -= renderX;
    arrowX = Math.max(Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING, Math.min(arrowX, divSize.width - Blockly.DropDownDiv.ARROW_HORIZONTAL_PADDING - Blockly.DropDownDiv.ARROW_SIZE));
    var arrowY = (renderedSecondary) ? divSize.height - Blockly.DropDownDiv.BORDER_SIZE : 0;
    arrowY -= (Blockly.DropDownDiv.ARROW_SIZE / 2) + Blockly.DropDownDiv.BORDER_SIZE;
    var initialX = renderX;
    var initialY;
    if (renderedSecondary) {
        initialY = secondaryY - divSize.height;
    }
    else {
        initialY = primaryY;
    }
    return {
        initialX: initialX,
        initialY: initialY,
        finalX: renderX,
        finalY: renderY,
        arrowX: arrowX,
        arrowY: arrowY,
        arrowAtTop: !renderedSecondary
    };
};
Blockly.DropDownDiv.isVisible = function () {
    return !!Blockly.DropDownDiv.owner_;
};
Blockly.DropDownDiv.hideIfOwner = function (owner) {
    if (Blockly.DropDownDiv.owner_ === owner) {
        Blockly.DropDownDiv.hide();
        return true;
    }
    return false;
};
Blockly.DropDownDiv.hide = function () {
    var div = Blockly.DropDownDiv.DIV_;
    div.style.transform = 'translate(0px, 0px)';
    div.style.opacity = 0;
    Blockly.DropDownDiv.animateOutTimer_ = setTimeout(function () {
        Blockly.DropDownDiv.hideWithoutAnimation();
    }, Blockly.DropDownDiv.ANIMATION_TIME * 1000);
    if (Blockly.DropDownDiv.onHide_) {
        Blockly.DropDownDiv.onHide_();
        Blockly.DropDownDiv.onHide_ = null;
    }
};
Blockly.DropDownDiv.hideWithoutAnimation = function () {
    if (!Blockly.DropDownDiv.isVisible()) {
        return;
    }
    var div = Blockly.DropDownDiv.DIV_;
    Blockly.DropDownDiv.animateOutTimer_ && window.clearTimeout(Blockly.DropDownDiv.animateOutTimer_);
    div.style.transform = '';
    div.style.top = '';
    div.style.left = '';
    div.style.display = 'none';
    Blockly.DropDownDiv.clearContent();
    Blockly.DropDownDiv.owner_ = null;
    if (Blockly.DropDownDiv.onHide_) {
        Blockly.DropDownDiv.onHide_();
        Blockly.DropDownDiv.onHide_ = null;
    }
};
'use strict';
goog.provide('Blockly.Extensions');
goog.require('Blockly.Mutator');
goog.require('Blockly.utils');
goog.require('goog.string');
Blockly.Extensions.ALL_ = {};
Blockly.Extensions.register = function (name, initFn) {
    if (!goog.isString(name) || goog.string.isEmptyOrWhitespace(name)) {
        throw new Error('Error: Invalid extension name "' + name + '"');
    }
    if (Blockly.Extensions.ALL_[name]) {
        throw new Error('Error: Extension "' + name + '" is already registered.');
    }
    if (!goog.isFunction(initFn)) {
        throw new Error('Error: Extension "' + name + '" must be a function');
    }
    Blockly.Extensions.ALL_[name] = initFn;
};
Blockly.Extensions.registerMixin = function (name, mixinObj) {
    if (!goog.isObject(mixinObj)) {
        throw new Error('Error: Mixin "' + name + '" must be a object');
    }
    Blockly.Extensions.register(name, function () {
        this.mixin(mixinObj);
    });
};
Blockly.Extensions.registerMutator = function (name, mixinObj, opt_helperFn, opt_blockList) {
    var errorPrefix = 'Error when registering mutator "' + name + '": ';
    Blockly.Extensions.checkHasFunction_(errorPrefix, mixinObj.domToMutation, 'domToMutation');
    Blockly.Extensions.checkHasFunction_(errorPrefix, mixinObj.mutationToDom, 'mutationToDom');
    var hasMutatorDialog = Blockly.Extensions.checkMutatorDialog_(mixinObj, errorPrefix);
    if (opt_helperFn && !goog.isFunction(opt_helperFn)) {
        throw new Error('Extension "' + name + '" is not a function');
    }
    Blockly.Extensions.register(name, function () {
        if (hasMutatorDialog) {
            this.setMutator(new Blockly.Mutator(opt_blockList));
        }
        this.mixin(mixinObj);
        if (opt_helperFn) {
            opt_helperFn.apply(this);
        }
    });
};
Blockly.Extensions.apply = function (name, block, isMutator) {
    var extensionFn = Blockly.Extensions.ALL_[name];
    if (!goog.isFunction(extensionFn)) {
        throw new Error('Error: Extension "' + name + '" not found.');
    }
    if (isMutator) {
        Blockly.Extensions.checkNoMutatorProperties_(name, block);
    }
    else {
        var mutatorProperties = Blockly.Extensions.getMutatorProperties_(block);
    }
    extensionFn.apply(block);
    if (isMutator) {
        var errorPrefix = 'Error after applying mutator "' + name + '": ';
        Blockly.Extensions.checkBlockHasMutatorProperties_(errorPrefix, block);
    }
    else {
        if (!Blockly.Extensions.mutatorPropertiesMatch_(mutatorProperties, block)) {
            throw new Error('Error when applying extension "' + name + '": ' +
                'mutation properties changed when applying a non-mutator extension.');
        }
    }
};
Blockly.Extensions.checkHasFunction_ = function (errorPrefix, func, propertyName) {
    if (!func) {
        throw new Error(errorPrefix +
            'missing required property "' + propertyName + '"');
    }
    else if (typeof func != 'function') {
        throw new Error(errorPrefix +
            '" required property "' + propertyName + '" must be a function');
    }
};
Blockly.Extensions.checkNoMutatorProperties_ = function (mutationName, block) {
    var properties = Blockly.Extensions.getMutatorProperties_(block);
    if (properties.length) {
        throw new Error('Error: tried to apply mutation "' + mutationName +
            '" to a block that already has mutator functions.' +
            '  Block id: ' + block.id);
    }
};
Blockly.Extensions.checkMutatorDialog_ = function (object, errorPrefix) {
    var hasCompose = object.compose !== undefined;
    var hasDecompose = object.decompose !== undefined;
    if (hasCompose && hasDecompose) {
        if (typeof object.compose != 'function') {
            throw new Error(errorPrefix + 'compose must be a function.');
        }
        else if (typeof object.decompose != 'function') {
            throw new Error(errorPrefix + 'decompose must be a function.');
        }
        return true;
    }
    else if (!hasCompose && !hasDecompose) {
        return false;
    }
    else {
        throw new Error(errorPrefix +
            'Must have both or neither of "compose" and "decompose"');
    }
};
Blockly.Extensions.checkBlockHasMutatorProperties_ = function (errorPrefix, block) {
    if (typeof block.domToMutation !== 'function') {
        throw new Error(errorPrefix + 'Applying a mutator didn\'t add "domToMutation"');
    }
    if (typeof block.mutationToDom != 'function') {
        throw new Error(errorPrefix +
            'Applying a mutator didn\'t add "mutationToDom"');
    }
    Blockly.Extensions.checkMutatorDialog_(block, errorPrefix);
};
Blockly.Extensions.getMutatorProperties_ = function (block) {
    var result = [];
    if (block.domToMutation !== undefined) {
        result.push(block.domToMutation);
    }
    if (block.mutationToDom !== undefined) {
        result.push(block.mutationToDom);
    }
    if (block.compose !== undefined) {
        result.push(block.compose);
    }
    if (block.decompose !== undefined) {
        result.push(block.decompose);
    }
    return result;
};
Blockly.Extensions.mutatorPropertiesMatch_ = function (oldProperties, block) {
    var newProperties = Blockly.Extensions.getMutatorProperties_(block);
    if (newProperties.length != oldProperties.length) {
        return false;
    }
    for (var i = 0; i < newProperties.length; i++) {
        if (oldProperties[i] != newProperties[i]) {
            return false;
        }
    }
    return true;
};
Blockly.Extensions.buildTooltipForDropdown = function (dropdownName, lookupTable) {
    var blockTypesChecked = [];
    if (document) {
        Blockly.utils.runAfterPageLoad(function () {
            for (var key in lookupTable) {
                Blockly.utils.checkMessageReferences(lookupTable[key]);
            }
        });
    }
    var extensionFn = function () {
        if (this.type && blockTypesChecked.indexOf(this.type) === -1) {
            Blockly.Extensions.checkDropdownOptionsInTable_(this, dropdownName, lookupTable);
            blockTypesChecked.push(this.type);
        }
        this.setTooltip(function () {
            var value = this.getFieldValue(dropdownName);
            var tooltip = lookupTable[value];
            if (tooltip == null) {
                if (blockTypesChecked.indexOf(this.type) === -1) {
                    var warning = 'No tooltip mapping for value ' + value +
                        ' of field ' + dropdownName;
                    if (this.type != null) {
                        warning += (' of block type ' + this.type);
                    }
                    console.warn(warning + '.');
                }
            }
            else {
                tooltip = Blockly.utils.replaceMessageReferences(tooltip);
            }
            return tooltip;
        }.bind(this));
    };
    return extensionFn;
};
Blockly.Extensions.checkDropdownOptionsInTable_ = function (block, dropdownName, lookupTable) {
    var dropdown = block.getField(dropdownName);
    if (!dropdown.isOptionListDynamic()) {
        var options = dropdown.getOptions();
        for (var i = 0; i < options.length; ++i) {
            var optionKey = options[i][1];
            if (lookupTable[optionKey] == null) {
                console.warn('No tooltip mapping for value ' + optionKey +
                    ' of field ' + dropdownName + ' of block type ' + block.type);
            }
        }
    }
};
Blockly.Extensions.buildTooltipWithFieldValue =
    function (msgTemplate, fieldName) {
        if (document) {
            Blockly.utils.runAfterPageLoad(function () {
                Blockly.utils.checkMessageReferences(msgTemplate);
            });
        }
        var extensionFn = function () {
            this.setTooltip(function () {
                return Blockly.utils.replaceMessageReferences(msgTemplate)
                    .replace('%1', this.getFieldValue(fieldName));
            }.bind(this));
        };
        return extensionFn;
    };
Blockly.Extensions.extensionParentTooltip_ = function () {
    this.tooltipWhenNotConnected_ = this.tooltip;
    this.setTooltip(function () {
        var parent = this.getParent();
        return (parent && parent.getInputsInline() && parent.tooltip) ||
            this.tooltipWhenNotConnected_;
    }.bind(this));
};
Blockly.Extensions.register('parent_tooltip_when_inline', Blockly.Extensions.extensionParentTooltip_);
'use strict';
goog.provide('Blockly.Field');
goog.require('Blockly.Events.BlockChange');
goog.require('Blockly.Gesture');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.math.Size');
goog.require('goog.style');
goog.require('goog.userAgent');
Blockly.Field = function (text, opt_validator) {
    this.size_ = new goog.math.Size(Blockly.BlockSvg.FIELD_WIDTH, Blockly.BlockSvg.FIELD_HEIGHT);
    this.setValue(text);
    this.setValidator(opt_validator);
    this.maxDisplayLength = Blockly.BlockSvg.MAX_DISPLAY_LENGTH;
};
Blockly.Field.TYPE_MAP_ = {};
Blockly.Field.register = function (type, fieldClass) {
    if (!goog.isString(type) || goog.string.isEmptyOrWhitespace(type)) {
        throw new Error('Invalid field type "' + type + '"');
    }
    if (!goog.isObject(fieldClass) || !goog.isFunction(fieldClass.fromJson)) {
        throw new Error('Field "' + fieldClass +
            '" must have a fromJson function');
    }
    Blockly.Field.TYPE_MAP_[type] = fieldClass;
};
Blockly.Field.fromJson = function (options) {
    var fieldClass = Blockly.Field.TYPE_MAP_[options['type']];
    if (fieldClass) {
        return fieldClass.fromJson(options);
    }
    return null;
};
Blockly.Field.cacheWidths_ = null;
Blockly.Field.cacheReference_ = 0;
Blockly.Field.prototype.name = undefined;
Blockly.Field.prototype.className_ = 'blocklyText';
Blockly.Field.prototype.text_ = '';
Blockly.Field.prototype.sourceBlock_ = null;
Blockly.Field.prototype.visible_ = true;
Blockly.Field.prototype.argType_ = null;
Blockly.Field.prototype.validator_ = null;
Blockly.Field.prototype.useTouchInteraction_ = false;
Blockly.Field.NBSP = '\u00A0';
Blockly.Field.IE_TEXT_OFFSET = '0.3em';
Blockly.Field.prototype.EDITABLE = true;
Blockly.Field.prototype.SERIALIZABLE = true;
Blockly.Field.prototype.setSourceBlock = function (block) {
    goog.asserts.assert(!this.sourceBlock_, 'Field already bound to a block.');
    this.sourceBlock_ = block;
};
Blockly.Field.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    this.fieldGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    if (!this.visible_) {
        this.fieldGroup_.style.display = 'none';
    }
    if (this.getArgTypes() !== null) {
        if (this.sourceBlock_.isShadow()) {
            this.sourceBlock_.svgGroup_.setAttribute('data-argument-type', this.getArgTypes());
        }
        else {
            this.fieldGroup_.setAttribute('data-argument-type', this.getArgTypes());
        }
    }
    var size = this.getSize();
    var fieldX = (this.sourceBlock_.RTL) ? -size.width / 2 : size.width / 2;
    this.textElement_ = Blockly.utils.createSvgElement('text', {
        'class': this.className_,
        'x': fieldX,
        'y': size.height / 2 + Blockly.BlockSvg.FIELD_TOP_PADDING,
        'dominant-baseline': 'middle',
        'dy': goog.userAgent.EDGE_OR_IE ? Blockly.Field.IE_TEXT_OFFSET : '0',
        'text-anchor': 'middle'
    }, this.fieldGroup_);
    this.updateEditable();
    this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);
    this.render_();
    this.size_.width = 0;
    this.mouseDownWrapper_ = Blockly.bindEventWithChecks_(this.getClickTarget_(), 'mousedown', this, this.onMouseDown_);
};
Blockly.Field.prototype.initModel = function () {
};
Blockly.Field.prototype.dispose = function () {
    if (this.mouseDownWrapper_) {
        Blockly.unbindEvent_(this.mouseDownWrapper_);
        this.mouseDownWrapper_ = null;
    }
    this.sourceBlock_ = null;
    goog.dom.removeNode(this.fieldGroup_);
    this.fieldGroup_ = null;
    this.textElement_ = null;
    this.validator_ = null;
};
Blockly.Field.prototype.updateEditable = function () {
    var group = this.fieldGroup_;
    if (!this.EDITABLE || !group) {
        return;
    }
    if (this.sourceBlock_.isEditable()) {
        Blockly.utils.addClass(group, 'blocklyEditableText');
        Blockly.utils.removeClass(group, 'blocklyNonEditableText');
        this.fieldGroup_.style.cursor = this.CURSOR;
    }
    else {
        Blockly.utils.addClass(group, 'blocklyNonEditableText');
        Blockly.utils.removeClass(group, 'blocklyEditableText');
        this.fieldGroup_.style.cursor = '';
    }
};
Blockly.Field.prototype.isCurrentlyEditable = function () {
    return this.EDITABLE && !!this.sourceBlock_ && this.sourceBlock_.isEditable();
};
Blockly.Field.prototype.isVisible = function () {
    return this.visible_;
};
Blockly.Field.prototype.setVisible = function (visible) {
    if (this.visible_ == visible) {
        return;
    }
    this.visible_ = visible;
    var root = this.getSvgRoot();
    if (root) {
        root.style.display = visible ? 'block' : 'none';
        this.render_();
    }
};
Blockly.Field.prototype.addArgType = function (argType) {
    if (this.argType_ == null) {
        this.argType_ = [];
    }
    this.argType_.push(argType);
};
Blockly.Field.prototype.getArgTypes = function () {
    if (this.argType_ === null || this.argType_.length === 0) {
        return null;
    }
    else {
        return this.argType_.join(' ');
    }
};
Blockly.Field.prototype.setValidator = function (handler) {
    this.validator_ = handler;
};
Blockly.Field.prototype.getValidator = function () {
    return this.validator_;
};
Blockly.Field.prototype.classValidator = function (text) {
    return text;
};
Blockly.Field.prototype.callValidator = function (text) {
    var classResult = this.classValidator(text);
    if (classResult === null) {
        return null;
    }
    else if (classResult !== undefined) {
        text = classResult;
    }
    var userValidator = this.getValidator();
    if (userValidator) {
        var userResult = userValidator.call(this, text);
        if (userResult === null) {
            return null;
        }
        else if (userResult !== undefined) {
            text = userResult;
        }
    }
    return text;
};
Blockly.Field.prototype.getSvgRoot = function () {
    return (this.fieldGroup_);
};
Blockly.Field.prototype.render_ = function () {
    if (this.visible_ && this.textElement_) {
        this.textElement_.textContent = this.getDisplayText_();
        this.updateWidth();
        var centerTextX = (this.size_.width - this.arrowWidth_) / 2;
        if (this.sourceBlock_.RTL) {
            centerTextX += this.arrowWidth_;
        }
        if (this.sourceBlock_.isShadow() && !this.positionArrow) {
            var minOffset = Blockly.BlockSvg.FIELD_WIDTH / 2;
            if (this.sourceBlock_.RTL) {
                var minCenter = this.size_.width - minOffset;
                centerTextX = Math.min(minCenter, centerTextX);
            }
            else {
                centerTextX = Math.max(minOffset, centerTextX);
            }
        }
        this.textElement_.setAttribute('x', centerTextX);
    }
    if (this.box_) {
        this.box_.setAttribute('width', this.size_.width);
        this.box_.setAttribute('height', this.size_.height);
    }
};
Blockly.Field.prototype.updateWidth = function () {
    var width = Blockly.Field.getCachedWidth(this.textElement_);
    if (this.EDITABLE) {
        width += Blockly.BlockSvg.EDITABLE_FIELD_PADDING;
    }
    this.arrowWidth_ = 0;
    if (this.positionArrow) {
        this.arrowWidth_ = this.positionArrow(width);
        width += this.arrowWidth_;
    }
    if (this.box_) {
        width += 2 * Blockly.BlockSvg.BOX_FIELD_PADDING;
    }
    this.size_.width = width;
};
Blockly.Field.getCachedWidth = function (textElement) {
    var key = textElement.textContent + '\n' + textElement.className.baseVal;
    var width;
    if (Blockly.Field.cacheWidths_) {
        width = Blockly.Field.cacheWidths_[key];
        if (width) {
            return width;
        }
    }
    try {
        if (goog.userAgent.IE || goog.userAgent.EDGE) {
            width = textElement.getBBox().width;
        }
        else {
            width = textElement.getComputedTextLength();
        }
    }
    catch (e) {
        return textElement.textContent.length * 8;
    }
    if (Blockly.Field.cacheWidths_) {
        Blockly.Field.cacheWidths_[key] = width;
    }
    return width;
};
Blockly.Field.startCache = function () {
    Blockly.Field.cacheReference_++;
    if (!Blockly.Field.cacheWidths_) {
        Blockly.Field.cacheWidths_ = {};
    }
};
Blockly.Field.stopCache = function () {
    Blockly.Field.cacheReference_--;
    if (!Blockly.Field.cacheReference_) {
        Blockly.Field.cacheWidths_ = null;
    }
};
Blockly.Field.prototype.getSize = function () {
    if (!this.size_.width) {
        this.render_();
    }
    return this.size_;
};
Blockly.Field.prototype.getScaledBBox_ = function () {
    var size = this.getSize();
    var scaledHeight = size.height * this.sourceBlock_.workspace.scale;
    var scaledWidth = size.width * this.sourceBlock_.workspace.scale;
    var xy = this.getAbsoluteXY_();
    return {
        top: xy.y,
        bottom: xy.y + scaledHeight,
        left: xy.x,
        right: xy.x + scaledWidth
    };
};
Blockly.Field.prototype.getDisplayText_ = function () {
    var text = this.text_;
    if (!text) {
        return Blockly.Field.NBSP;
    }
    if (text.length > this.maxDisplayLength) {
        text = text.substring(0, this.maxDisplayLength - 2) + '\u2026';
    }
    text = text.replace(/\s/g, Blockly.Field.NBSP);
    if (this.sourceBlock_.RTL) {
        if (this.sourceBlock_.editable_ && this.sourceBlock_.type === 'math_number') {
            text = '\u202A' + text + '\u202C';
        }
        else {
            text = '\u202B' + text + '\u202C';
        }
    }
    return text;
};
Blockly.Field.prototype.getText = function () {
    return this.text_;
};
Blockly.Field.prototype.setText = function (newText) {
    if (newText === null) {
        return;
    }
    newText = String(newText);
    if (newText === this.text_) {
        return;
    }
    this.text_ = newText;
    this.forceRerender();
};
Blockly.Field.prototype.forceRerender = function () {
    this.size_.width = 0;
    if (this.sourceBlock_ && this.sourceBlock_.rendered) {
        this.sourceBlock_.render();
        this.sourceBlock_.bumpNeighbours_();
    }
};
Blockly.Field.prototype.updateTextNode_ = function () {
    if (!this.textElement_) {
        return;
    }
    var text = this.text_;
    if (text.length > this.maxDisplayLength) {
        text = text.substring(0, this.maxDisplayLength - 2) + '\u2026';
        this.textElement_.setAttribute('class', this.className_ + ' blocklyTextTruncated');
    }
    else {
        this.textElement_.setAttribute('class', this.className_);
    }
    goog.dom.removeChildren((this.textElement_));
    text = text.replace(/\s/g, Blockly.Field.NBSP);
    if (this.sourceBlock_.RTL && text) {
        if (this.sourceBlock_.editable_ && this.sourceBlock_.type === 'math_number') {
            text = '\u202A' + text + '\u202C';
        }
        else {
            text = '\u202B' + text + '\u202C';
        }
    }
    if (!text) {
        text = Blockly.Field.NBSP;
    }
    var textNode = document.createTextNode(text);
    this.textElement_.appendChild(textNode);
    this.size_.width = 0;
};
Blockly.Field.prototype.getValue = function () {
    return this.getText();
};
Blockly.Field.prototype.setValue = function (newValue) {
    if (newValue === null) {
        return;
    }
    var oldValue = this.getValue();
    if (oldValue == newValue) {
        return;
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, oldValue, newValue));
    }
    this.setText(newValue);
};
Blockly.Field.prototype.onMouseDown_ = function (e) {
    if (!this.sourceBlock_ || !this.sourceBlock_.workspace) {
        return;
    }
    var gesture = this.sourceBlock_.workspace.getGesture(e);
    if (gesture) {
        gesture.setStartField(this);
    }
    this.useTouchInteraction_ = Blockly.Touch.getTouchIdentifierFromEvent(event) !== 'mouse';
};
Blockly.Field.prototype.setTooltip = function (_newTip) {
};
Blockly.Field.prototype.getClickTarget_ = function () {
    var nFields = 0;
    for (var i = 0, input; input = this.sourceBlock_.inputList[i]; i++) {
        nFields += input.fieldRow.length;
    }
    if (nFields <= 1 && this.sourceBlock_.outputConnection) {
        return this.sourceBlock_.getSvgRoot();
    }
    else {
        return this.getSvgRoot();
    }
};
Blockly.Field.prototype.getAbsoluteXY_ = function () {
    return goog.style.getPageOffset(this.getClickTarget_());
};
Blockly.Field.prototype.referencesVariables = function () {
    return false;
};
'use strict';
goog.provide('Blockly.FieldTextInput');
goog.require('Blockly.BlockSvg.render');
goog.require('Blockly.Colours');
goog.require('Blockly.Field');
goog.require('Blockly.Msg');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.utils');
goog.require('goog.asserts');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.userAgent');
Blockly.FieldTextInput = function (text, opt_validator, opt_restrictor) {
    Blockly.FieldTextInput.superClass_.constructor.call(this, text, opt_validator);
    this.setRestrictor(opt_restrictor);
    this.addArgType('text');
};
goog.inherits(Blockly.FieldTextInput, Blockly.Field);
Blockly.FieldTextInput.fromJson = function (options) {
    var text = Blockly.utils.replaceMessageReferences(options['text']);
    var field = new Blockly.FieldTextInput(text, options['class']);
    if (typeof options['spellcheck'] === 'boolean') {
        field.setSpellcheck(options['spellcheck']);
    }
    return field;
};
Blockly.FieldTextInput.ANIMATION_TIME = 0.25;
Blockly.FieldTextInput.TEXT_MEASURE_PADDING_MAGIC = 45;
Blockly.FieldTextInput.htmlInput_ = null;
Blockly.FieldTextInput.prototype.CURSOR = 'text';
Blockly.FieldTextInput.prototype.spellcheck_ = true;
Blockly.FieldTextInput.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    var notInShadow = !this.sourceBlock_.isShadow();
    if (notInShadow) {
        this.className_ += ' blocklyEditableLabel';
    }
    Blockly.FieldTextInput.superClass_.init.call(this);
    if (notInShadow) {
        this.box_ = Blockly.utils.createSvgElement('rect', {
            'x': 0,
            'y': 0,
            'width': this.size_.width,
            'height': this.size_.height,
            'fill': this.sourceBlock_.getColourTertiary(),
            'rx': 15,
        });
        this.fieldGroup_.insertBefore(this.box_, this.textElement_);
    }
};
Blockly.FieldTextInput.prototype.dispose = function () {
    Blockly.WidgetDiv.hideIfOwner(this);
    Blockly.FieldTextInput.superClass_.dispose.call(this);
};
Blockly.FieldTextInput.prototype.setValue = function (newValue) {
    if (newValue === null) {
        return;
    }
    if (this.sourceBlock_) {
        var validated = this.callValidator(newValue);
        if (validated !== null) {
            newValue = validated;
        }
    }
    Blockly.Field.prototype.setValue.call(this, newValue);
};
Blockly.FieldTextInput.prototype.setText = function (newText) {
    if (newText === null) {
        return;
    }
    newText = String(newText);
    if (newText === this.text_) {
        return;
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, this.text_, newText));
    }
    Blockly.Field.prototype.setText.call(this, newText);
};
Blockly.FieldTextInput.prototype.setSpellcheck = function (check) {
    this.spellcheck_ = check;
};
Blockly.FieldTextInput.prototype.setRestrictor = function (restrictor) {
    this.restrictor_ = restrictor;
};
Blockly.FieldTextInput.prototype.showEditor_ = function (opt_quietInput, opt_readOnly, opt_withArrow, opt_arrowCallback) {
    this.workspace_ = this.sourceBlock_.workspace;
    var quietInput = opt_quietInput || false;
    var readOnly = opt_readOnly || false;
    Blockly.WidgetDiv.show(this, this.sourceBlock_.RTL, this.widgetDispose_(), this.widgetDisposeAnimationFinished_(), Blockly.FieldTextInput.ANIMATION_TIME);
    var div = Blockly.WidgetDiv.DIV;
    div.className += ' fieldTextInput';
    var htmlInput = goog.dom.createDom(goog.dom.TagName.INPUT, 'blocklyHtmlInput');
    htmlInput.setAttribute('spellcheck', this.spellcheck_);
    if (readOnly) {
        htmlInput.setAttribute('readonly', 'true');
    }
    Blockly.FieldTextInput.htmlInput_ = htmlInput;
    div.appendChild(htmlInput);
    if (opt_withArrow) {
        if (this.sourceBlock_.RTL) {
            htmlInput.style.paddingLeft = (this.arrowSize_ + Blockly.BlockSvg.DROPDOWN_ARROW_PADDING) + 'px';
        }
        else {
            htmlInput.style.paddingRight = (this.arrowSize_ + Blockly.BlockSvg.DROPDOWN_ARROW_PADDING) + 'px';
        }
        var dropDownArrow = goog.dom.createDom(goog.dom.TagName.IMG, 'blocklyTextDropDownArrow');
        dropDownArrow.setAttribute('src', Blockly.mainWorkspace.options.pathToMedia + 'dropdown-arrow-dark.svg');
        dropDownArrow.style.width = this.arrowSize_ + 'px';
        dropDownArrow.style.height = this.arrowSize_ + 'px';
        dropDownArrow.style.top = this.arrowY_ + 'px';
        dropDownArrow.style.cursor = 'pointer';
        var dropdownArrowMagic = '11px';
        if (this.sourceBlock_.RTL) {
            dropDownArrow.style.left = dropdownArrowMagic;
        }
        else {
            dropDownArrow.style.right = dropdownArrowMagic;
        }
        if (opt_arrowCallback) {
            htmlInput.dropDownArrowMouseWrapper_ = Blockly.bindEvent_(dropDownArrow, 'mousedown', this, opt_arrowCallback);
        }
        div.appendChild(dropDownArrow);
    }
    htmlInput.value = htmlInput.defaultValue = this.text_;
    htmlInput.oldValue_ = null;
    this.validate_();
    this.resizeEditor_();
    if (!quietInput) {
        htmlInput.focus();
        htmlInput.select();
        htmlInput.setSelectionRange(0, 99999);
    }
    this.bindEvents_(htmlInput, quietInput || readOnly);
    var transitionProperties = 'box-shadow ' + Blockly.FieldTextInput.ANIMATION_TIME + 's';
    if (Blockly.BlockSvg.FIELD_TEXTINPUT_ANIMATE_POSITIONING) {
        div.style.transition += ',padding ' + Blockly.FieldTextInput.ANIMATION_TIME + 's,' +
            'width ' + Blockly.FieldTextInput.ANIMATION_TIME + 's,' +
            'height ' + Blockly.FieldTextInput.ANIMATION_TIME + 's,' +
            'margin-left ' + Blockly.FieldTextInput.ANIMATION_TIME + 's';
    }
    div.style.transition = transitionProperties;
    htmlInput.style.transition = 'font-size ' + Blockly.FieldTextInput.ANIMATION_TIME + 's';
    htmlInput.style.fontSize = Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_FINAL + 'pt';
    div.style.boxShadow = '0px 0px 0px 4px ' + Blockly.Colours.fieldShadow;
};
Blockly.FieldTextInput.prototype.bindEvents_ = function (htmlInput, bindGlobalKeypress) {
    htmlInput.onKeyDownWrapper_ =
        Blockly.bindEventWithChecks_(htmlInput, 'keydown', this, this.onHtmlInputKeyDown_);
    htmlInput.onKeyUpWrapper_ =
        Blockly.bindEventWithChecks_(htmlInput, 'keyup', this, this.onHtmlInputChange_);
    htmlInput.onKeyPressWrapper_ =
        Blockly.bindEventWithChecks_(htmlInput, 'keypress', this, this.onHtmlInputChange_);
    htmlInput.onInputWrapper_ =
        Blockly.bindEvent_(htmlInput, 'input', this, this.onHtmlInputChange_);
    htmlInput.onWorkspaceChangeWrapper_ = this.resizeEditor_.bind(this);
    this.workspace_.addChangeListener(htmlInput.onWorkspaceChangeWrapper_);
    if (bindGlobalKeypress) {
        htmlInput.onDocumentKeyDownWrapper_ =
            Blockly.bindEventWithChecks_(document, 'keydown', this, this.onDocumentKeyDown_);
    }
};
Blockly.FieldTextInput.prototype.unbindEvents_ = function (htmlInput) {
    Blockly.unbindEvent_(htmlInput.onKeyDownWrapper_);
    Blockly.unbindEvent_(htmlInput.onKeyUpWrapper_);
    Blockly.unbindEvent_(htmlInput.onKeyPressWrapper_);
    Blockly.unbindEvent_(htmlInput.onInputWrapper_);
    this.workspace_.removeChangeListener(htmlInput.onWorkspaceChangeWrapper_);
    if (htmlInput.onDocumentKeyDownWrapper_) {
        Blockly.unbindEvent_(htmlInput.onDocumentKeyDownWrapper_);
    }
};
Blockly.FieldTextInput.prototype.onHtmlInputKeyDown_ = function (e) {
    var htmlInput = Blockly.FieldTextInput.htmlInput_;
    var tabKey = 9, enterKey = 13, escKey = 27;
    if (e.keyCode == enterKey) {
        Blockly.WidgetDiv.hide();
        Blockly.DropDownDiv.hideWithoutAnimation();
    }
    else if (e.keyCode == escKey) {
        htmlInput.value = htmlInput.defaultValue;
        Blockly.WidgetDiv.hide();
        Blockly.DropDownDiv.hideWithoutAnimation();
    }
    else if (e.keyCode == tabKey) {
        Blockly.WidgetDiv.hide();
        Blockly.DropDownDiv.hideWithoutAnimation();
        this.sourceBlock_.tab(this, !e.shiftKey);
        e.preventDefault();
    }
};
Blockly.FieldTextInput.prototype.onDocumentKeyDown_ = function (e) {
    var htmlInput = Blockly.FieldTextInput.htmlInput_;
    var targetMatches = e.target === htmlInput;
    var targetIsInput = e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA';
    if (targetMatches || !targetIsInput) {
        htmlInput.removeAttribute('readonly');
        htmlInput.value = '';
        htmlInput.focus();
        Blockly.unbindEvent_(htmlInput.onDocumentKeyDownWrapper_);
        htmlInput.onDocumentKeyDownWrapper_ = null;
    }
};
Blockly.FieldTextInput.GECKO_KEYCODE_WHITELIST = [
    97,
    99,
    118,
    120
];
Blockly.FieldTextInput.prototype.onHtmlInputChange_ = function (e) {
    if (e.type === 'keypress' && this.restrictor_) {
        var keyCode;
        var isWhitelisted = false;
        if (goog.userAgent.GECKO) {
            keyCode = e.charCode;
            if (keyCode < 32 || keyCode == 127) {
                isWhitelisted = true;
            }
            else if (e.metaKey || e.ctrlKey) {
                isWhitelisted = Blockly.FieldTextInput.GECKO_KEYCODE_WHITELIST.indexOf(keyCode) > -1;
            }
        }
        else {
            keyCode = e.keyCode;
        }
        var char = String.fromCharCode(keyCode);
        if (!isWhitelisted && !this.restrictor_.test(char) && e.preventDefault) {
            e.preventDefault();
            return;
        }
    }
    var htmlInput = Blockly.FieldTextInput.htmlInput_;
    var text = htmlInput.value;
    if (text !== htmlInput.oldValue_) {
        htmlInput.oldValue_ = text;
        this.setText(text);
        this.validate_();
    }
    else if (goog.userAgent.WEBKIT) {
        this.sourceBlock_.render();
    }
    this.resizeEditor_();
};
Blockly.FieldTextInput.prototype.validate_ = function () {
    var valid = true;
    goog.asserts.assertObject(Blockly.FieldTextInput.htmlInput_);
    var htmlInput = Blockly.FieldTextInput.htmlInput_;
    if (this.sourceBlock_) {
        valid = this.callValidator(htmlInput.value);
    }
    if (valid === null) {
        Blockly.utils.addClass(htmlInput, 'blocklyInvalidInput');
    }
    else {
        Blockly.utils.removeClass(htmlInput, 'blocklyInvalidInput');
    }
};
Blockly.FieldTextInput.prototype.resizeEditor_ = function () {
    var scale = this.sourceBlock_.workspace.scale;
    var div = Blockly.WidgetDiv.DIV;
    var initialWidth;
    if (this.sourceBlock_.isShadow()) {
        initialWidth = this.sourceBlock_.getHeightWidth().width * scale;
    }
    else {
        initialWidth = this.size_.width * scale;
    }
    var width;
    if (Blockly.BlockSvg.FIELD_TEXTINPUT_EXPAND_PAST_TRUNCATION) {
        var textWidth = Blockly.scratchBlocksUtils.measureText(Blockly.FieldTextInput.htmlInput_.style.fontSize, Blockly.FieldTextInput.htmlInput_.style.fontFamily, Blockly.FieldTextInput.htmlInput_.style.fontWeight, Blockly.FieldTextInput.htmlInput_.value);
        textWidth += Blockly.FieldTextInput.TEXT_MEASURE_PADDING_MAGIC;
        textWidth *= scale;
        width = textWidth;
    }
    else {
        width = initialWidth;
    }
    width = Math.max(width, Blockly.BlockSvg.FIELD_WIDTH_MIN_EDIT * scale);
    width = Math.min(width, Blockly.BlockSvg.FIELD_WIDTH_MAX_EDIT * scale);
    div.style.width = (width / scale + 1) + 'px';
    div.style.height = (Blockly.BlockSvg.FIELD_HEIGHT_MAX_EDIT + 1) + 'px';
    div.style.transform = 'scale(' + scale + ')';
    div.style.marginLeft = -0.5 * (width - initialWidth) + 'px';
    var borderRadius = this.getBorderRadius() + 0.5;
    div.style.borderRadius = borderRadius + 'px';
    Blockly.FieldTextInput.htmlInput_.style.borderRadius = borderRadius + 'px';
    var strokeColour = this.sourceBlock_.getColourTertiary();
    div.style.borderColor = strokeColour;
    var xy = this.getAbsoluteXY_();
    xy.x -= scale / 2;
    xy.y -= scale / 2;
    if (this.sourceBlock_.RTL) {
        xy.x += width;
        xy.x -= div.offsetWidth * scale;
        xy.x += 1 * scale;
    }
    xy.y += 1 * scale;
    if (goog.userAgent.GECKO && Blockly.WidgetDiv.DIV.style.top) {
        xy.x += 2 * scale;
        xy.y += 1 * scale;
    }
    if (goog.userAgent.WEBKIT) {
        xy.y -= 1 * scale;
    }
    div.style.left = xy.x + 'px';
    div.style.top = xy.y + 'px';
};
Blockly.FieldTextInput.prototype.getBorderRadius = function () {
    if (this.sourceBlock_.getOutputShape() == Blockly.OUTPUT_SHAPE_ROUND) {
        return Blockly.BlockSvg.NUMBER_FIELD_CORNER_RADIUS;
    }
    return Blockly.BlockSvg.TEXT_FIELD_CORNER_RADIUS;
};
Blockly.FieldTextInput.prototype.widgetDispose_ = function () {
    var thisField = this;
    return function () {
        var div = Blockly.WidgetDiv.DIV;
        var htmlInput = Blockly.FieldTextInput.htmlInput_;
        thisField.maybeSaveEdit_();
        thisField.unbindEvents_(htmlInput);
        if (htmlInput.dropDownArrowMouseWrapper_) {
            Blockly.unbindEvent_(htmlInput.dropDownArrowMouseWrapper_);
        }
        Blockly.Events.setGroup(false);
        htmlInput.style.fontSize = Blockly.BlockSvg.FIELD_TEXTINPUT_FONTSIZE_INITIAL + 'pt';
        div.style.boxShadow = '';
        if (thisField.sourceBlock_) {
            if (thisField.sourceBlock_.isShadow()) {
                var size = thisField.sourceBlock_.getHeightWidth();
                div.style.width = (size.width + 1) + 'px';
                div.style.height = (size.height + 1) + 'px';
            }
            else {
                div.style.width = (thisField.size_.width + 1) + 'px';
                div.style.height = (Blockly.BlockSvg.FIELD_HEIGHT_MAX_EDIT + 1) + 'px';
            }
        }
        div.style.marginLeft = 0;
    };
};
Blockly.FieldTextInput.prototype.widgetDisposeAnimationFinished_ = function () {
    return function () {
        var style = Blockly.WidgetDiv.DIV.style;
        style.width = 'auto';
        style.height = 'auto';
        style.fontSize = '';
        Blockly.WidgetDiv.DIV.className = 'blocklyWidgetDiv';
        Blockly.WidgetDiv.DIV.removeAttribute('style');
        Blockly.FieldTextInput.htmlInput_.style.transition = '';
        Blockly.FieldTextInput.htmlInput_ = null;
    };
};
Blockly.FieldTextInput.prototype.maybeSaveEdit_ = function () {
    var htmlInput = Blockly.FieldTextInput.htmlInput_;
    var text = htmlInput.value;
    if (this.sourceBlock_) {
        var text1 = this.callValidator(text);
        if (text1 === null) {
            text = htmlInput.defaultValue;
        }
        else {
            text = text1;
            if (this.onFinishEditing_) {
                this.onFinishEditing_(text);
            }
        }
    }
    this.setText(text);
    this.sourceBlock_.rendered && this.sourceBlock_.render();
};
Blockly.FieldTextInput.numberValidator = function (text) {
    console.warn('Blockly.FieldTextInput.numberValidator is deprecated. ' +
        'Use Blockly.FieldNumber instead.');
    if (text === null) {
        return null;
    }
    text = String(text);
    text = text.replace(/O/ig, '0');
    text = text.replace(/,/g, '');
    var n = parseFloat(text || 0);
    return isNaN(n) ? null : String(n);
};
Blockly.FieldTextInput.nonnegativeIntegerValidator = function (text) {
    var n = Blockly.FieldTextInput.numberValidator(text);
    if (n) {
        n = String(Math.max(0, Math.floor(n)));
    }
    return n;
};
Blockly.Field.register('field_input', Blockly.FieldTextInput);
'use strict';
goog.provide('Blockly.FieldAngle');
goog.require('Blockly.DropDownDiv');
goog.require('Blockly.FieldTextInput');
goog.require('goog.math');
goog.require('goog.userAgent');
Blockly.FieldAngle = function (opt_value, opt_validator) {
    this.symbol_ = Blockly.utils.createSvgElement('tspan', {}, null);
    this.symbol_.appendChild(document.createTextNode('\u00B0'));
    var numRestrictor = new RegExp("[\\d]|[\\.]|[-]|[eE]");
    opt_value = (opt_value && !isNaN(opt_value)) ? String(opt_value) : '0';
    Blockly.FieldAngle.superClass_.constructor.call(this, opt_value, opt_validator, numRestrictor);
    this.addArgType('angle');
};
goog.inherits(Blockly.FieldAngle, Blockly.FieldTextInput);
Blockly.FieldAngle.fromJson = function (options) {
    return new Blockly.FieldAngle(options['angle']);
};
Blockly.FieldAngle.ROUND = 15;
Blockly.FieldAngle.HALF = 120 / 2;
Blockly.FieldAngle.CLOCKWISE = true;
Blockly.FieldAngle.OFFSET = 90;
Blockly.FieldAngle.WRAP = 180;
Blockly.FieldAngle.HANDLE_RADIUS = 10;
Blockly.FieldAngle.ARROW_WIDTH = Blockly.FieldAngle.HANDLE_RADIUS;
Blockly.FieldAngle.HANDLE_GLOW_WIDTH = 3;
Blockly.FieldAngle.RADIUS = Blockly.FieldAngle.HALF
    - Blockly.FieldAngle.HANDLE_RADIUS - Blockly.FieldAngle.HANDLE_GLOW_WIDTH;
Blockly.FieldAngle.CENTER_RADIUS = 2;
Blockly.FieldAngle.ARROW_SVG_PATH = 'icons/arrow.svg';
Blockly.FieldAngle.prototype.dispose_ = function () {
    var thisField = this;
    return function () {
        Blockly.FieldAngle.superClass_.dispose_.call(thisField)();
        thisField.gauge_ = null;
        if (thisField.mouseDownWrapper_) {
            Blockly.unbindEvent_(thisField.mouseDownWrapper_);
        }
        if (thisField.mouseUpWrapper_) {
            Blockly.unbindEvent_(thisField.mouseUpWrapper_);
        }
        if (thisField.mouseMoveWrapper_) {
            Blockly.unbindEvent_(thisField.mouseMoveWrapper_);
        }
    };
};
Blockly.FieldAngle.prototype.showEditor_ = function () {
    Blockly.FieldAngle.superClass_.showEditor_.call(this, this.useTouchInteraction_);
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var div = Blockly.DropDownDiv.getContentDiv();
    var svg = Blockly.utils.createSvgElement('svg', {
        'xmlns': 'http://www.w3.org/2000/svg',
        'xmlns:html': 'http://www.w3.org/1999/xhtml',
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'height': (Blockly.FieldAngle.HALF * 2) + 'px',
        'width': (Blockly.FieldAngle.HALF * 2) + 'px'
    }, div);
    Blockly.utils.createSvgElement('circle', {
        'cx': Blockly.FieldAngle.HALF, 'cy': Blockly.FieldAngle.HALF,
        'r': Blockly.FieldAngle.RADIUS,
        'class': 'blocklyAngleCircle'
    }, svg);
    this.gauge_ = Blockly.utils.createSvgElement('path', { 'class': 'blocklyAngleGauge' }, svg);
    this.line_ = Blockly.utils.createSvgElement('line', {
        'x1': Blockly.FieldAngle.HALF,
        'y1': Blockly.FieldAngle.HALF,
        'class': 'blocklyAngleLine'
    }, svg);
    var offsetRadians = Math.PI * Blockly.FieldAngle.OFFSET / 180;
    Blockly.utils.createSvgElement('line', {
        'x1': Blockly.FieldAngle.HALF,
        'y1': Blockly.FieldAngle.HALF,
        'x2': Blockly.FieldAngle.HALF + Blockly.FieldAngle.RADIUS * Math.cos(offsetRadians),
        'y2': Blockly.FieldAngle.HALF - Blockly.FieldAngle.RADIUS * Math.sin(offsetRadians),
        'class': 'blocklyAngleLine'
    }, svg);
    for (var angle = 0; angle < 360; angle += 15) {
        Blockly.utils.createSvgElement('line', {
            'x1': Blockly.FieldAngle.HALF + Blockly.FieldAngle.RADIUS - 13,
            'y1': Blockly.FieldAngle.HALF,
            'x2': Blockly.FieldAngle.HALF + Blockly.FieldAngle.RADIUS - 7,
            'y2': Blockly.FieldAngle.HALF,
            'class': 'blocklyAngleMarks',
            'transform': 'rotate(' + angle + ',' +
                Blockly.FieldAngle.HALF + ',' + Blockly.FieldAngle.HALF + ')'
        }, svg);
    }
    Blockly.utils.createSvgElement('circle', {
        'cx': Blockly.FieldAngle.HALF, 'cy': Blockly.FieldAngle.HALF,
        'r': Blockly.FieldAngle.CENTER_RADIUS,
        'class': 'blocklyAngleCenterPoint'
    }, svg);
    this.handle_ = Blockly.utils.createSvgElement('g', {}, svg);
    Blockly.utils.createSvgElement('circle', {
        'cx': 0,
        'cy': 0,
        'r': Blockly.FieldAngle.HANDLE_RADIUS,
        'class': 'blocklyAngleDragHandle'
    }, this.handle_);
    this.arrowSvg_ = Blockly.utils.createSvgElement('image', {
        'width': Blockly.FieldAngle.ARROW_WIDTH,
        'height': Blockly.FieldAngle.ARROW_WIDTH,
        'x': -Blockly.FieldAngle.ARROW_WIDTH / 2,
        'y': -Blockly.FieldAngle.ARROW_WIDTH / 2,
        'class': 'blocklyAngleDragArrow'
    }, this.handle_);
    this.arrowSvg_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + Blockly.FieldAngle.ARROW_SVG_PATH);
    Blockly.DropDownDiv.setColour(this.sourceBlock_.parentBlock_.getColour(), this.sourceBlock_.getColourTertiary());
    Blockly.DropDownDiv.setCategory(this.sourceBlock_.parentBlock_.getCategory());
    Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_);
    this.mouseDownWrapper_ =
        Blockly.bindEvent_(this.handle_, 'mousedown', this, this.onMouseDown);
    this.updateGraph_();
};
Blockly.FieldAngle.prototype.onMouseDown = function () {
    this.mouseMoveWrapper_ = Blockly.bindEvent_(document.body, 'mousemove', this, this.onMouseMove);
    this.mouseUpWrapper_ = Blockly.bindEvent_(document.body, 'mouseup', this, this.onMouseUp);
};
Blockly.FieldAngle.prototype.onMouseUp = function () {
    Blockly.unbindEvent_(this.mouseMoveWrapper_);
    Blockly.unbindEvent_(this.mouseUpWrapper_);
};
Blockly.FieldAngle.prototype.onMouseMove = function (e) {
    e.preventDefault();
    var bBox = this.gauge_.ownerSVGElement.getBoundingClientRect();
    var dx = e.clientX - bBox.left - Blockly.FieldAngle.HALF;
    var dy = e.clientY - bBox.top - Blockly.FieldAngle.HALF;
    var angle = Math.atan(-dy / dx);
    if (isNaN(angle)) {
        return;
    }
    angle = goog.math.toDegrees(angle);
    if (dx < 0) {
        angle += 180;
    }
    else if (dy > 0) {
        angle += 360;
    }
    if (Blockly.FieldAngle.CLOCKWISE) {
        angle = Blockly.FieldAngle.OFFSET + 360 - angle;
    }
    else {
        angle -= Blockly.FieldAngle.OFFSET;
    }
    if (Blockly.FieldAngle.ROUND) {
        angle = Math.round(angle / Blockly.FieldAngle.ROUND) *
            Blockly.FieldAngle.ROUND;
    }
    angle = this.callValidator(angle);
    Blockly.FieldTextInput.htmlInput_.value = angle;
    this.setValue(angle);
    this.validate_();
    this.resizeEditor_();
};
Blockly.FieldAngle.prototype.setText = function (text) {
    Blockly.FieldAngle.superClass_.setText.call(this, text);
    if (!this.textElement_) {
        return;
    }
    this.updateGraph_();
    this.size_.width = 0;
};
Blockly.FieldAngle.prototype.updateGraph_ = function () {
    if (!this.gauge_) {
        return;
    }
    var angleDegrees = Number(this.getText()) % 360 + Blockly.FieldAngle.OFFSET;
    var angleRadians = goog.math.toRadians(angleDegrees);
    var path = ['M ', Blockly.FieldAngle.HALF, ',', Blockly.FieldAngle.HALF];
    var x2 = Blockly.FieldAngle.HALF;
    var y2 = Blockly.FieldAngle.HALF;
    if (!isNaN(angleRadians)) {
        var angle1 = goog.math.toRadians(Blockly.FieldAngle.OFFSET);
        var x1 = Math.cos(angle1) * Blockly.FieldAngle.RADIUS;
        var y1 = Math.sin(angle1) * -Blockly.FieldAngle.RADIUS;
        if (Blockly.FieldAngle.CLOCKWISE) {
            angleRadians = 2 * angle1 - angleRadians;
        }
        x2 += Math.cos(angleRadians) * Blockly.FieldAngle.RADIUS;
        y2 -= Math.sin(angleRadians) * Blockly.FieldAngle.RADIUS;
        var largeFlag = Math.abs(angleDegrees - Blockly.FieldAngle.OFFSET) > 180 ? 1 : 0;
        var sweepFlag = Number(Blockly.FieldAngle.CLOCKWISE);
        if (angleDegrees < Blockly.FieldAngle.OFFSET) {
            sweepFlag = 1 - sweepFlag;
        }
        path.push(' l ', x1, ',', y1, ' A ', Blockly.FieldAngle.RADIUS, ',', Blockly.FieldAngle.RADIUS, ' 0 ', largeFlag, ' ', sweepFlag, ' ', x2, ',', y2, ' z');
        if (Blockly.FieldAngle.CLOCKWISE) {
            var imageRotation = angleDegrees + 2 * Blockly.FieldAngle.OFFSET;
        }
        else {
            var imageRotation = -angleDegrees;
        }
        this.arrowSvg_.setAttribute('transform', 'rotate(' + (imageRotation) + ')');
    }
    this.gauge_.setAttribute('d', path.join(''));
    this.line_.setAttribute('x2', x2);
    this.line_.setAttribute('y2', y2);
    this.handle_.setAttribute('transform', 'translate(' + x2 + ',' + y2 + ')');
};
Blockly.FieldAngle.prototype.classValidator = function (text) {
    if (text === null) {
        return null;
    }
    var n = parseFloat(text || 0);
    if (isNaN(n)) {
        return null;
    }
    n = n % 360;
    if (n < 0) {
        n += 360;
    }
    if (n > Blockly.FieldAngle.WRAP) {
        n -= 360;
    }
    return String(n);
};
Blockly.Field.register('field_angle', Blockly.FieldAngle);
'use strict';
goog.provide('Blockly.FieldCheckbox');
goog.require('Blockly.Field');
Blockly.FieldCheckbox = function (state, opt_validator) {
    Blockly.FieldCheckbox.superClass_.constructor.call(this, '', opt_validator);
    this.setValue(state);
    this.addArgType('checkbox');
};
goog.inherits(Blockly.FieldCheckbox, Blockly.Field);
Blockly.FieldCheckbox.fromJson = function (options) {
    return new Blockly.FieldCheckbox(options['checked'] ? 'TRUE' : 'FALSE');
};
Blockly.FieldCheckbox.CHECK_CHAR = '\u2713';
Blockly.FieldCheckbox.prototype.CURSOR = 'default';
Blockly.FieldCheckbox.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    Blockly.FieldCheckbox.superClass_.init.call(this);
    this.checkElement_ = Blockly.utils.createSvgElement('text', { 'class': 'blocklyText blocklyCheckbox', 'x': -3, 'y': 14 }, this.fieldGroup_);
    var textNode = document.createTextNode(Blockly.FieldCheckbox.CHECK_CHAR);
    this.checkElement_.appendChild(textNode);
    this.checkElement_.style.display = this.state_ ? 'block' : 'none';
};
Blockly.FieldCheckbox.prototype.getValue = function () {
    return String(this.state_).toUpperCase();
};
Blockly.FieldCheckbox.prototype.setValue = function (newBool) {
    var newState = (typeof newBool == 'string') ?
        (newBool.toUpperCase() == 'TRUE') : !!newBool;
    if (this.state_ !== newState) {
        if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
            Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, this.state_, newState));
        }
        this.state_ = newState;
        if (this.checkElement_) {
            this.checkElement_.style.display = newState ? 'block' : 'none';
        }
    }
};
Blockly.FieldCheckbox.prototype.showEditor_ = function () {
    var newState = !this.state_;
    if (this.sourceBlock_) {
        newState = this.callValidator(newState);
    }
    if (newState !== null) {
        this.setValue(String(newState).toUpperCase());
    }
};
Blockly.Field.register('field_checkbox', Blockly.FieldCheckbox);
'use strict';
goog.provide('Blockly.FieldColour');
goog.require('Blockly.Field');
goog.require('Blockly.utils');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.style');
goog.require('goog.ui.ColorPicker');
Blockly.FieldColour = function (colour, opt_validator) {
    Blockly.FieldColour.superClass_.constructor.call(this, colour, opt_validator);
    this.addArgType('colour');
};
goog.inherits(Blockly.FieldColour, Blockly.Field);
Blockly.FieldColour.fromJson = function (options) {
    return new Blockly.FieldColour(options['colour']);
};
Blockly.FieldColour.prototype.colours_ = null;
Blockly.FieldColour.prototype.columns_ = 0;
Blockly.FieldColour.prototype.init = function (block) {
    if (this.fieldGroup_) {
        return;
    }
    Blockly.FieldColour.superClass_.init.call(this, block);
    this.setValue(this.getValue());
};
Blockly.FieldColour.prototype.CURSOR = 'default';
Blockly.FieldColour.prototype.dispose = function () {
    Blockly.WidgetDiv.hideIfOwner(this);
    Blockly.FieldColour.superClass_.dispose.call(this);
};
Blockly.FieldColour.prototype.getValue = function () {
    return this.colour_;
};
Blockly.FieldColour.prototype.setValue = function (colour) {
    if (this.sourceBlock_ && Blockly.Events.isEnabled() &&
        this.colour_ != colour) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, this.colour_, colour));
    }
    this.colour_ = colour;
    if (this.sourceBlock_) {
        this.sourceBlock_.setColour(colour, colour, colour);
    }
};
Blockly.FieldColour.prototype.getText = function () {
    var colour = this.colour_;
    var m = colour.match(/^#(.)\1(.)\2(.)\3$/);
    if (m) {
        colour = '#' + m[1] + m[2] + m[3];
    }
    return colour;
};
Blockly.FieldColour.prototype.getSize = function () {
    return new goog.math.Size(Blockly.BlockSvg.FIELD_WIDTH, Blockly.BlockSvg.FIELD_HEIGHT);
};
Blockly.FieldColour.COLOURS = goog.ui.ColorPicker.SIMPLE_GRID_COLORS;
Blockly.FieldColour.COLUMNS = 7;
Blockly.FieldColour.prototype.setColours = function (colours) {
    this.colours_ = colours;
    return this;
};
Blockly.FieldColour.prototype.setColumns = function (columns) {
    this.columns_ = columns;
    return this;
};
Blockly.FieldColour.prototype.showEditor_ = function () {
    Blockly.WidgetDiv.show(this, this.sourceBlock_.RTL, Blockly.FieldColour.widgetDispose_);
    var viewportBBox = Blockly.utils.getViewportBBox();
    var anchorBBox = this.getScaledBBox_();
    var picker = this.createWidget_();
    var paletteSize = goog.style.getSize(picker.getElement());
    Blockly.WidgetDiv.positionWithAnchor(viewportBBox, anchorBBox, paletteSize, this.sourceBlock_.RTL);
    var thisField = this;
    Blockly.FieldColour.changeEventKey_ = goog.events.listen(picker, goog.ui.ColorPicker.EventType.CHANGE, function (event) {
        var colour = event.target.getSelectedColor() || '#000000';
        Blockly.WidgetDiv.hide();
        if (thisField.sourceBlock_) {
            colour = thisField.callValidator(colour);
        }
        if (colour !== null) {
            thisField.setValue(colour);
        }
    });
};
Blockly.FieldColour.prototype.createWidget_ = function () {
    var picker = new goog.ui.ColorPicker();
    picker.setSize(this.columns_ || Blockly.FieldColour.COLUMNS);
    picker.setColors(this.colours_ || Blockly.FieldColour.COLOURS);
    var div = Blockly.WidgetDiv.DIV;
    picker.render(div);
    picker.setSelectedColor(this.getValue());
    return picker;
};
Blockly.FieldColour.widgetDispose_ = function () {
    if (Blockly.FieldColour.changeEventKey_) {
        goog.events.unlistenByKey(Blockly.FieldColour.changeEventKey_);
    }
    Blockly.Events.setGroup(false);
};
Blockly.Field.register('field_colour', Blockly.FieldColour);
'use strict';
goog.provide('Blockly.FieldColourSlider');
goog.require('Blockly.Field');
goog.require('Blockly.DropDownDiv');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.style');
goog.require('goog.color');
goog.require('goog.ui.Slider');
Blockly.FieldColourSlider = function (colour, opt_validator) {
    Blockly.FieldColourSlider.superClass_.constructor.call(this, colour, opt_validator);
    this.addArgType('colour');
    this.sliderCallbacksEnabled_ = false;
};
goog.inherits(Blockly.FieldColourSlider, Blockly.Field);
Blockly.FieldColourSlider.fromJson = function (options) {
    return new Blockly.FieldColourSlider(options['colour']);
};
Blockly.FieldColourSlider.activateEyedropper_ = null;
Blockly.FieldColourSlider.EYEDROPPER_PATH = 'eyedropper.svg';
Blockly.FieldColourSlider.prototype.init = function (block) {
    if (this.fieldGroup_) {
        return;
    }
    Blockly.FieldColourSlider.superClass_.init.call(this, block);
    this.setValue(this.getValue());
};
Blockly.FieldColourSlider.prototype.getValue = function () {
    return this.colour_;
};
Blockly.FieldColourSlider.prototype.setValue = function (colour) {
    if (this.sourceBlock_ && Blockly.Events.isEnabled() &&
        this.colour_ != colour) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, this.colour_, colour));
    }
    this.colour_ = colour;
    if (this.sourceBlock_) {
        this.sourceBlock_.setColour(colour, colour, this.sourceBlock_.getColourTertiary());
    }
    this.updateSliderHandles_();
    this.updateDom_();
};
Blockly.FieldColourSlider.prototype.createColourStops_ = function (channel) {
    var stops = [];
    for (var n = 0; n <= 360; n += 20) {
        switch (channel) {
            case 'hue':
                stops.push(goog.color.hsvToHex(n, this.saturation_, this.brightness_));
                break;
            case 'saturation':
                stops.push(goog.color.hsvToHex(this.hue_, n / 360, this.brightness_));
                break;
            case 'brightness':
                stops.push(goog.color.hsvToHex(this.hue_, this.saturation_, 255 * n / 360));
                break;
            default:
                throw new Error("Unknown channel for colour sliders: " + channel);
        }
    }
    return stops;
};
Blockly.FieldColourSlider.prototype.setGradient_ = function (node, channel) {
    var gradient = this.createColourStops_(channel).join(',');
    goog.style.setStyle(node, 'background', '-moz-linear-gradient(left, ' + gradient + ')');
    goog.style.setStyle(node, 'background', '-webkit-linear-gradient(left, ' + gradient + ')');
    goog.style.setStyle(node, 'background', '-o-linear-gradient(left, ' + gradient + ')');
    goog.style.setStyle(node, 'background', '-ms-linear-gradient(left, ' + gradient + ')');
    goog.style.setStyle(node, 'background', 'linear-gradient(left, ' + gradient + ')');
};
Blockly.FieldColourSlider.prototype.updateDom_ = function () {
    if (this.hueSlider_) {
        this.setGradient_(this.hueSlider_.getElement(), 'hue');
        this.setGradient_(this.saturationSlider_.getElement(), 'saturation');
        this.setGradient_(this.brightnessSlider_.getElement(), 'brightness');
        this.hueReadout_.textContent = Math.floor(100 * this.hue_ / 360).toFixed(0);
        this.saturationReadout_.textContent = Math.floor(100 * this.saturation_).toFixed(0);
        this.brightnessReadout_.textContent = Math.floor(100 * this.brightness_ / 255).toFixed(0);
    }
};
Blockly.FieldColourSlider.prototype.updateSliderHandles_ = function () {
    if (this.hueSlider_) {
        this.sliderCallbacksEnabled_ = false;
        this.hueSlider_.setValue(this.hue_);
        this.saturationSlider_.setValue(this.saturation_);
        this.brightnessSlider_.setValue(this.brightness_);
        this.sliderCallbacksEnabled_ = true;
    }
};
Blockly.FieldColourSlider.prototype.getText = function () {
    var colour = this.colour_;
    var m = colour.match(/^#(.)\1(.)\2(.)\3$/);
    if (m) {
        colour = '#' + m[1] + m[2] + m[3];
    }
    return colour;
};
Blockly.FieldColourSlider.prototype.createLabelDom_ = function (labelText) {
    var labelContainer = document.createElement('div');
    labelContainer.setAttribute('class', 'scratchColourPickerLabel');
    var readout = document.createElement('span');
    readout.setAttribute('class', 'scratchColourPickerReadout');
    var label = document.createElement('span');
    label.setAttribute('class', 'scratchColourPickerLabelText');
    label.textContent = labelText;
    labelContainer.appendChild(label);
    labelContainer.appendChild(readout);
    return [labelContainer, readout];
};
Blockly.FieldColourSlider.prototype.sliderCallbackFactory_ = function (channel) {
    var thisField = this;
    return function (event) {
        if (!thisField.sliderCallbacksEnabled_)
            return;
        var channelValue = event.target.getValue();
        var hsv = goog.color.hexToHsv(thisField.getValue());
        switch (channel) {
            case 'hue':
                hsv[0] = thisField.hue_ = channelValue;
                break;
            case 'saturation':
                hsv[1] = thisField.saturation_ = channelValue;
                break;
            case 'brightness':
                hsv[2] = thisField.brightness_ = channelValue;
                break;
        }
        var colour = goog.color.hsvToHex(hsv[0], hsv[1], hsv[2]);
        if (thisField.sourceBlock_) {
            colour = thisField.callValidator(colour);
        }
        if (colour !== null) {
            thisField.setValue(colour, true);
        }
    };
};
Blockly.FieldColourSlider.prototype.activateEyedropperInternal_ = function () {
    var thisField = this;
    Blockly.FieldColourSlider.activateEyedropper_(function (value) {
        var hsv = goog.color.hexToHsv(value);
        thisField.hue_ = hsv[0];
        thisField.saturation_ = hsv[1];
        thisField.brightness_ = hsv[2];
        thisField.setValue(value);
    });
};
Blockly.FieldColourSlider.prototype.showEditor_ = function () {
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var div = Blockly.DropDownDiv.getContentDiv();
    var hsv = goog.color.hexToHsv(this.getValue());
    this.hue_ = hsv[0];
    this.saturation_ = hsv[1];
    this.brightness_ = hsv[2];
    var hueElements = this.createLabelDom_(Blockly.Msg.COLOUR_HUE_LABEL);
    div.appendChild(hueElements[0]);
    this.hueReadout_ = hueElements[1];
    this.hueSlider_ = new goog.ui.Slider();
    this.hueSlider_.setUnitIncrement(5);
    this.hueSlider_.setMinimum(0);
    this.hueSlider_.setMaximum(360);
    this.hueSlider_.setMoveToPointEnabled(true);
    this.hueSlider_.render(div);
    var saturationElements = this.createLabelDom_(Blockly.Msg.COLOUR_SATURATION_LABEL);
    div.appendChild(saturationElements[0]);
    this.saturationReadout_ = saturationElements[1];
    this.saturationSlider_ = new goog.ui.Slider();
    this.saturationSlider_.setMoveToPointEnabled(true);
    this.saturationSlider_.setUnitIncrement(0.01);
    this.saturationSlider_.setStep(0.001);
    this.saturationSlider_.setMinimum(0);
    this.saturationSlider_.setMaximum(1.0);
    this.saturationSlider_.render(div);
    var brightnessElements = this.createLabelDom_(Blockly.Msg.COLOUR_BRIGHTNESS_LABEL);
    div.appendChild(brightnessElements[0]);
    this.brightnessReadout_ = brightnessElements[1];
    this.brightnessSlider_ = new goog.ui.Slider();
    this.brightnessSlider_.setUnitIncrement(2);
    this.brightnessSlider_.setMinimum(0);
    this.brightnessSlider_.setMaximum(255);
    this.brightnessSlider_.setMoveToPointEnabled(true);
    this.brightnessSlider_.render(div);
    if (Blockly.FieldColourSlider.activateEyedropper_) {
        var button = document.createElement('button');
        button.setAttribute('class', 'scratchEyedropper');
        var image = document.createElement('img');
        image.src = Blockly.mainWorkspace.options.pathToMedia + Blockly.FieldColourSlider.EYEDROPPER_PATH;
        button.appendChild(image);
        div.appendChild(button);
        Blockly.FieldColourSlider.eyedropperEventData_ =
            Blockly.bindEventWithChecks_(button, 'click', this, this.activateEyedropperInternal_);
    }
    Blockly.DropDownDiv.setColour('#ffffff', '#dddddd');
    Blockly.DropDownDiv.setCategory(this.sourceBlock_.parentBlock_.getCategory());
    Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_);
    this.setValue(this.getValue());
    this.sliderCallbacksEnabled_ = true;
    Blockly.FieldColourSlider.hueChangeEventKey_ = goog.events.listen(this.hueSlider_, goog.ui.Component.EventType.CHANGE, this.sliderCallbackFactory_('hue'));
    Blockly.FieldColourSlider.saturationChangeEventKey_ = goog.events.listen(this.saturationSlider_, goog.ui.Component.EventType.CHANGE, this.sliderCallbackFactory_('saturation'));
    Blockly.FieldColourSlider.brightnessChangeEventKey_ = goog.events.listen(this.brightnessSlider_, goog.ui.Component.EventType.CHANGE, this.sliderCallbackFactory_('brightness'));
};
Blockly.FieldColourSlider.prototype.dispose = function () {
    if (Blockly.FieldColourSlider.hueChangeEventKey_) {
        goog.events.unlistenByKey(Blockly.FieldColourSlider.hueChangeEventKey_);
    }
    if (Blockly.FieldColourSlider.saturationChangeEventKey_) {
        goog.events.unlistenByKey(Blockly.FieldColourSlider.saturationChangeEventKey_);
    }
    if (Blockly.FieldColourSlider.brightnessChangeEventKey_) {
        goog.events.unlistenByKey(Blockly.FieldColourSlider.brightnessChangeEventKey_);
    }
    if (Blockly.FieldColourSlider.eyedropperEventData_) {
        Blockly.unbindEvent_(Blockly.FieldColourSlider.eyedropperEventData_);
    }
    Blockly.Events.setGroup(false);
    Blockly.FieldColourSlider.superClass_.dispose.call(this);
};
Blockly.Field.register('field_colour_slider', Blockly.FieldColourSlider);
'use strict';
goog.provide('Blockly.FieldDate');
goog.require('Blockly.Field');
goog.require('Blockly.utils');
goog.require('goog.date');
goog.require('goog.date.DateTime');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.i18n.DateTimeSymbols');
goog.require('goog.i18n.DateTimeSymbols_he');
goog.require('goog.style');
goog.require('goog.ui.DatePicker');
Blockly.FieldDate = function (date, opt_validator) {
    if (!date) {
        date = new goog.date.Date().toIsoString(true);
    }
    Blockly.FieldDate.superClass_.constructor.call(this, date, opt_validator);
    this.setValue(date);
    this.addArgType('date');
};
goog.inherits(Blockly.FieldDate, Blockly.Field);
Blockly.FieldDate.fromJson = function (options) {
    return new Blockly.FieldDate(options['date']);
};
Blockly.FieldDate.prototype.CURSOR = 'text';
Blockly.FieldDate.prototype.dispose = function () {
    Blockly.WidgetDiv.hideIfOwner(this);
    Blockly.FieldDate.superClass_.dispose.call(this);
};
Blockly.FieldDate.prototype.getValue = function () {
    return this.date_;
};
Blockly.FieldDate.prototype.setValue = function (date) {
    if (this.sourceBlock_) {
        var validated = this.callValidator(date);
        if (validated !== null) {
            date = validated;
        }
    }
    this.date_ = date;
    Blockly.Field.prototype.setText.call(this, date);
};
Blockly.FieldDate.prototype.showEditor_ = function () {
    Blockly.WidgetDiv.show(this, this.sourceBlock_.RTL, Blockly.FieldDate.widgetDispose_);
    var viewportBBox = Blockly.utils.getViewportBBox();
    var anchorBBox = this.getScaledBBox_();
    var picker = this.createWidget_();
    var pickerSize = goog.style.getSize(picker.getElement());
    Blockly.WidgetDiv.positionWithAnchor(viewportBBox, anchorBBox, pickerSize, this.sourceBlock_.RTL);
    var thisField = this;
    Blockly.FieldDate.changeEventKey_ = goog.events.listen(picker, goog.ui.DatePicker.Events.CHANGE, function (event) {
        var date = event.date ? event.date.toIsoString(true) : '';
        Blockly.WidgetDiv.hide();
        if (thisField.sourceBlock_) {
            date = thisField.callValidator(date);
        }
        thisField.setValue(date);
    });
};
Blockly.FieldDate.prototype.createWidget_ = function () {
    Blockly.FieldDate.loadLanguage_();
    var picker = new goog.ui.DatePicker();
    picker.setAllowNone(false);
    picker.setShowWeekNum(false);
    var div = Blockly.WidgetDiv.DIV;
    picker.render(div);
    picker.setDate(goog.date.DateTime.fromIsoString(this.getValue()));
    return picker;
};
Blockly.FieldDate.widgetDispose_ = function () {
    if (Blockly.FieldDate.changeEventKey_) {
        goog.events.unlistenByKey(Blockly.FieldDate.changeEventKey_);
    }
    Blockly.Events.setGroup(false);
};
Blockly.FieldDate.loadLanguage_ = function () {
    var reg = /^DateTimeSymbols_(.+)$/;
    for (var prop in goog.i18n) {
        var m = prop.match(reg);
        if (m) {
            var lang = m[1].toLowerCase().replace('_', '.');
            if (goog.getObjectByName(lang, Blockly.Msg)) {
                goog.i18n.DateTimeSymbols = goog.i18n[prop];
            }
        }
    }
};
Blockly.FieldDate.CSS = [
    '.blocklyWidgetDiv .goog-date-picker,',
    '.blocklyWidgetDiv .goog-date-picker th,',
    '.blocklyWidgetDiv .goog-date-picker td {',
    '  font: 13px Arial, sans-serif;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker {',
    '  -moz-user-focus: normal;',
    '  -moz-user-select: none;',
    '  position: relative;',
    '  border: 1px solid #000;',
    '  float: left;',
    '  padding: 2px;',
    '  color: #000;',
    '  background: #c3d9ff;',
    '  cursor: default;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker th {',
    '  text-align: center;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker td {',
    '  text-align: center;',
    '  vertical-align: middle;',
    '  padding: 1px 3px;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-menu {',
    '  position: absolute;',
    '  background: threedface;',
    '  border: 1px solid gray;',
    '  -moz-user-focus: normal;',
    '  z-index: 1;',
    '  outline: none;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-menu ul {',
    '  list-style: none;',
    '  margin: 0px;',
    '  padding: 0px;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-menu ul li {',
    '  cursor: default;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-menu-selected {',
    '  background: #ccf;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker th {',
    '  font-size: .9em;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker td div {',
    '  float: left;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker button {',
    '  padding: 0px;',
    '  margin: 1px 0;',
    '  border: 0;',
    '  color: #20c;',
    '  font-weight: bold;',
    '  background: transparent;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-date {',
    '  background: #fff;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-week,',
    '.blocklyWidgetDiv .goog-date-picker-wday {',
    '  padding: 1px 3px;',
    '  border: 0;',
    '  border-color: #a2bbdd;',
    '  border-style: solid;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-week {',
    '  border-right-width: 1px;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-wday {',
    '  border-bottom-width: 1px;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-head td {',
    '  text-align: center;',
    '}',
    '.blocklyWidgetDiv td.goog-date-picker-today-cont {',
    '  text-align: center;',
    '}',
    '.blocklyWidgetDiv td.goog-date-picker-none-cont {',
    '  text-align: center;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-month {',
    '  min-width: 11ex;',
    '  white-space: nowrap;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-year {',
    '  min-width: 6ex;',
    '  white-space: nowrap;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-monthyear {',
    '  white-space: nowrap;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker table {',
    '  border-collapse: collapse;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-other-month {',
    '  color: #888;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-wkend-start,',
    '.blocklyWidgetDiv .goog-date-picker-wkend-end {',
    '  background: #eee;',
    '}',
    '.blocklyWidgetDiv td.goog-date-picker-selected {',
    '  background: #c3d9ff;',
    '}',
    '.blocklyWidgetDiv .goog-date-picker-today {',
    '  background: #9ab;',
    '  font-weight: bold !important;',
    '  border-color: #246 #9bd #9bd #246;',
    '  color: #fff;',
    '}'
];
Blockly.Field.register('field_date', Blockly.FieldDate);
'use strict';
goog.provide('Blockly.FieldDropdown');
goog.require('Blockly.Field');
goog.require('Blockly.DropDownDiv');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.style');
goog.require('goog.ui.Menu');
goog.require('goog.ui.MenuItem');
goog.require('goog.userAgent');
Blockly.FieldDropdown = function (menuGenerator, opt_validator) {
    this.menuGenerator_ = menuGenerator;
    this.trimOptions_();
    var firstTuple = this.getOptions()[0];
    Blockly.FieldDropdown.superClass_.constructor.call(this, firstTuple[1], opt_validator);
    this.addArgType('dropdown');
};
goog.inherits(Blockly.FieldDropdown, Blockly.Field);
Blockly.FieldDropdown.fromJson = function (element) {
    return new Blockly.FieldDropdown(element['options']);
};
Blockly.FieldDropdown.CHECKMARK_OVERHANG = 25;
Blockly.FieldDropdown.prototype.CURSOR = 'default';
Blockly.FieldDropdown.prototype.selectedItem = null;
Blockly.FieldDropdown.prototype.value_ = '';
Blockly.FieldDropdown.prototype.imageElement_ = null;
Blockly.FieldDropdown.prototype.imageJson_ = null;
Blockly.FieldDropdown.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    this.arrowSize_ = 12;
    this.arrowX_ = 0;
    this.arrowY_ = 11;
    this.arrow_ = Blockly.utils.createSvgElement('image', {
        'height': this.arrowSize_ + 'px',
        'width': this.arrowSize_ + 'px'
    });
    this.arrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'dropdown-arrow.svg');
    this.className_ += ' blocklyDropdownText';
    Blockly.FieldDropdown.superClass_.init.call(this);
    if (!this.sourceBlock_.isShadow()) {
        this.box_ = Blockly.utils.createSvgElement('rect', {
            'rx': Blockly.BlockSvg.CORNER_RADIUS,
            'ry': Blockly.BlockSvg.CORNER_RADIUS,
            'x': 0,
            'y': 0,
            'width': this.size_.width,
            'height': this.size_.height,
            'stroke': this.sourceBlock_.getColourTertiary(),
            'fill': this.sourceBlock_.getColour(),
            'class': 'blocklyBlockBackground',
            'fill-opacity': 1
        }, null);
        this.fieldGroup_.insertBefore(this.box_, this.textElement_);
    }
    var text = this.text_;
    this.text_ = null;
    this.setText(text);
};
Blockly.FieldDropdown.prototype.showEditor_ = function () {
    var options = this.getOptions();
    if (options.length == 0)
        return;
    this.dropDownOpen_ = true;
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var contentDiv = Blockly.DropDownDiv.getContentDiv();
    var thisField = this;
    function callback(e) {
        var menu = this;
        var menuItem = e.target;
        if (menuItem) {
            thisField.onItemSelected(menu, menuItem);
        }
        Blockly.DropDownDiv.hide();
        Blockly.Events.setGroup(false);
    }
    var menu = new goog.ui.Menu();
    menu.setRightToLeft(this.sourceBlock_.RTL);
    for (var i = 0; i < options.length; i++) {
        var content = options[i][0];
        var value = options[i][1];
        if (typeof content == 'object') {
            var image = new Image(content['width'], content['height']);
            image.src = content['src'];
            image.alt = content['alt'] || '';
            content = image;
        }
        var menuItem = new goog.ui.MenuItem(content);
        menuItem.setRightToLeft(this.sourceBlock_.RTL);
        menuItem.setValue(value);
        menuItem.setCheckable(true);
        menu.addChild(menuItem, true);
        var checked = (value == this.value_);
        menuItem.setChecked(checked);
        if (checked) {
            this.selectedItem = menuItem;
        }
    }
    goog.events.listen(menu, goog.ui.Component.EventType.ACTION, callback);
    menu.render(contentDiv);
    var menuDom = menu.getElement();
    Blockly.utils.addClass(menuDom, 'blocklyDropdownMenu');
    var menuSize = goog.style.getSize(menuDom);
    menuSize.height = menuDom.scrollHeight;
    var primaryColour = (this.sourceBlock_.isShadow()) ?
        this.sourceBlock_.parentBlock_.getColour() : this.sourceBlock_.getColour();
    Blockly.DropDownDiv.setColour(primaryColour, this.sourceBlock_.getColourTertiary());
    var category = (this.sourceBlock_.isShadow()) ?
        this.sourceBlock_.parentBlock_.getCategory() : this.sourceBlock_.getCategory();
    Blockly.DropDownDiv.setCategory(category);
    var scale = this.sourceBlock_.workspace.scale;
    var bBox = { width: this.size_.width, height: this.size_.height };
    bBox.width *= scale;
    bBox.height *= scale;
    var position = this.fieldGroup_.getBoundingClientRect();
    var primaryX = position.left + bBox.width / 2;
    var primaryY = position.top + bBox.height;
    var secondaryX = primaryX;
    var secondaryY = position.top;
    Blockly.DropDownDiv.setBoundsElement(this.sourceBlock_.workspace.getParentSvg().parentNode);
    Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, this.onHide.bind(this));
    menu.setAllowAutoFocus(true);
    menuDom.focus();
    if (!this.disableColourChange_) {
        if (this.sourceBlock_.isShadow()) {
            this.sourceBlock_.setShadowColour(this.sourceBlock_.getColourTertiary());
        }
        else if (this.box_) {
            this.box_.setAttribute('fill', this.sourceBlock_.getColourTertiary());
        }
    }
};
Blockly.FieldDropdown.prototype.onHide = function () {
    this.dropDownOpen_ = false;
    if (!this.disableColourChange_ && this.sourceBlock_) {
        if (this.sourceBlock_.isShadow()) {
            this.sourceBlock_.clearShadowColour();
        }
        else if (this.box_) {
            this.box_.setAttribute('fill', this.sourceBlock_.getColour());
        }
    }
};
Blockly.FieldDropdown.prototype.onItemSelected = function (menu, menuItem) {
    var value = menuItem.getValue();
    if (this.sourceBlock_) {
        value = this.callValidator(value);
    }
    if (typeof value == 'function') {
        value();
        return;
    }
    if (value !== null) {
        this.setValue(value);
    }
};
Blockly.FieldDropdown.prototype.trimOptions_ = function () {
    this.prefixField = null;
    this.suffixField = null;
    var options = this.menuGenerator_;
    if (!goog.isArray(options)) {
        return;
    }
    var hasImages = false;
    for (var i = 0; i < options.length; i++) {
        var label = options[i][0];
        if (typeof label == 'string') {
            options[i][0] = Blockly.utils.replaceMessageReferences(label);
        }
        else {
            if (label.alt != null) {
                options[i][0].alt = Blockly.utils.replaceMessageReferences(label.alt);
            }
            hasImages = true;
        }
    }
    if (hasImages || options.length < 2) {
        return;
    }
    var strings = [];
    for (var i = 0; i < options.length; i++) {
        strings.push(options[i][0]);
    }
    var shortest = Blockly.utils.shortestStringLength(strings);
    var prefixLength = Blockly.utils.commonWordPrefix(strings, shortest);
    var suffixLength = Blockly.utils.commonWordSuffix(strings, shortest);
    if (!prefixLength && !suffixLength) {
        return;
    }
    if (shortest <= prefixLength + suffixLength) {
        return;
    }
    if (prefixLength) {
        this.prefixField = strings[0].substring(0, prefixLength - 1);
    }
    if (suffixLength) {
        this.suffixField = strings[0].substr(1 - suffixLength);
    }
    var newOptions = [];
    for (var i = 0; i < options.length; i++) {
        var text = options[i][0];
        var value = options[i][1];
        text = text.substring(prefixLength, text.length - suffixLength);
        newOptions[i] = [text, value];
    }
    this.menuGenerator_ = newOptions;
};
Blockly.FieldDropdown.prototype.isOptionListDynamic = function () {
    return goog.isFunction(this.menuGenerator_);
};
Blockly.FieldDropdown.prototype.getOptions = function () {
    if (goog.isFunction(this.menuGenerator_)) {
        return this.menuGenerator_.call(this);
    }
    return (this.menuGenerator_);
};
Blockly.FieldDropdown.prototype.getValue = function () {
    return this.value_;
};
Blockly.FieldDropdown.prototype.setValue = function (newValue) {
    if (newValue === null || newValue === this.value_) {
        return;
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, this.value_, newValue));
    }
    if (this.selectedItem) {
        this.selectedItem.setChecked(false);
        this.selectedItem = null;
    }
    this.value_ = newValue;
    var options = this.getOptions();
    for (var i = 0; i < options.length; i++) {
        if (options[i][1] == newValue) {
            var content = options[i][0];
            if (typeof content == 'object') {
                this.imageJson_ = content;
                this.text_ = content.alt;
            }
            else {
                this.imageJson_ = null;
                this.text_ = content;
            }
            this.forceRerender();
            return;
        }
    }
    this.text_ = newValue;
    this.forceRerender();
};
Blockly.FieldDropdown.prototype.setText = function (text) {
    if (text === null || text === this.text_) {
        return;
    }
    this.text_ = text;
    this.updateTextNode_();
    if (this.textElement_) {
        this.textElement_.parentNode.appendChild(this.arrow_);
    }
    if (this.sourceBlock_ && this.sourceBlock_.rendered) {
        this.sourceBlock_.render();
        this.sourceBlock_.bumpNeighbours_();
    }
};
Blockly.FieldDropdown.prototype.positionArrow = function (x) {
    if (!this.arrow_) {
        return 0;
    }
    var addedWidth = 0;
    if (this.sourceBlock_.RTL) {
        this.arrowX_ = this.arrowSize_ - Blockly.BlockSvg.DROPDOWN_ARROW_PADDING;
        addedWidth = this.arrowSize_ + Blockly.BlockSvg.DROPDOWN_ARROW_PADDING;
    }
    else {
        this.arrowX_ = x + Blockly.BlockSvg.DROPDOWN_ARROW_PADDING / 2;
        addedWidth = this.arrowSize_ + Blockly.BlockSvg.DROPDOWN_ARROW_PADDING;
    }
    if (this.box_) {
        this.arrowX_ += Blockly.BlockSvg.BOX_FIELD_PADDING;
    }
    this.arrow_.setAttribute('transform', 'translate(' + this.arrowX_ + ',' + this.arrowY_ + ')');
    return addedWidth;
};
Blockly.FieldDropdown.prototype.dispose = function () {
    this.selectedItem = null;
    Blockly.WidgetDiv.hideIfOwner(this);
    Blockly.FieldDropdown.superClass_.dispose.call(this);
};
Blockly.Field.register('field_dropdown', Blockly.FieldDropdown);
'use strict';
goog.provide('Blockly.FieldIconMenu');
goog.require('Blockly.DropDownDiv');
Blockly.FieldIconMenu = function (icons) {
    this.icons_ = icons;
    var defaultValue = icons[0].value;
    Blockly.FieldIconMenu.superClass_.constructor.call(this, defaultValue);
    this.addArgType('iconmenu');
};
goog.inherits(Blockly.FieldIconMenu, Blockly.Field);
Blockly.FieldIconMenu.fromJson = function (element) {
    return new Blockly.FieldIconMenu(element['options']);
};
Blockly.FieldIconMenu.DROPDOWN_WIDTH = 168;
Blockly.FieldIconMenu.savedPrimary_ = null;
Blockly.FieldIconMenu.prototype.init = function (block) {
    if (this.fieldGroup_) {
        return;
    }
    var arrowSize = 12;
    this.arrowX_ = 18;
    this.arrowY_ = 10;
    if (block.RTL) {
        this.arrowX_ = -this.arrowX_ - arrowSize;
    }
    this.arrowIcon_ = Blockly.utils.createSvgElement('image', {
        'height': arrowSize + 'px',
        'width': arrowSize + 'px',
        'transform': 'translate(' + this.arrowX_ + ',' + this.arrowY_ + ')'
    });
    this.arrowIcon_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'dropdown-arrow.svg');
    block.getSvgRoot().appendChild(this.arrowIcon_);
    Blockly.FieldIconMenu.superClass_.init.call(this, block);
};
Blockly.FieldIconMenu.prototype.CURSOR = 'default';
Blockly.FieldIconMenu.prototype.setValue = function (newValue) {
    if (newValue === null || newValue === this.value_) {
        return;
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_, 'field', this.name, this.value_, newValue));
    }
    this.value_ = newValue;
    this.setParentFieldImage(this.getSrcForValue(this.value_));
};
Blockly.FieldIconMenu.prototype.setParentFieldImage = function (src) {
    if (this.sourceBlock_ && this.sourceBlock_.parentBlock_) {
        var parentBlock = this.sourceBlock_.parentBlock_;
        for (var i = 0, input; input = parentBlock.inputList[i]; i++) {
            for (var j = 0, field; field = input.fieldRow[j]; j++) {
                if (field instanceof Blockly.FieldImage) {
                    field.setValue(src);
                    return;
                }
            }
        }
    }
};
Blockly.FieldIconMenu.prototype.getValue = function () {
    return this.value_;
};
Blockly.FieldIconMenu.prototype.getSrcForValue = function (value) {
    for (var i = 0, icon; icon = this.icons_[i]; i++) {
        if (icon.value === value) {
            return icon.src;
        }
    }
};
Blockly.FieldIconMenu.prototype.showEditor_ = function () {
    if (Blockly.DropDownDiv.hideIfOwner(this)) {
        return;
    }
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var contentDiv = Blockly.DropDownDiv.getContentDiv();
    contentDiv.setAttribute('role', 'menu');
    contentDiv.setAttribute('aria-haspopup', 'true');
    for (var i = 0, icon; icon = this.icons_[i]; i++) {
        if (icon.type == 'placeholder') {
            var placeholder = document.createElement('span');
            placeholder.setAttribute('class', 'blocklyDropDownPlaceholder');
            placeholder.style.width = icon.width + 'px';
            placeholder.style.height = icon.height + 'px';
            contentDiv.appendChild(placeholder);
            continue;
        }
        var button = document.createElement('button');
        button.setAttribute('id', ':' + i);
        button.setAttribute('role', 'menuitem');
        button.setAttribute('class', 'blocklyDropDownButton');
        button.title = icon.alt;
        button.style.width = icon.width + 'px';
        button.style.height = icon.height + 'px';
        var backgroundColor = this.sourceBlock_.getColour();
        if (icon.value == this.getValue()) {
            backgroundColor = this.sourceBlock_.getColourTertiary();
            button.setAttribute('aria-selected', 'true');
        }
        button.style.backgroundColor = backgroundColor;
        button.style.borderColor = this.sourceBlock_.getColourTertiary();
        Blockly.bindEvent_(button, 'click', this, this.buttonClick_);
        Blockly.bindEvent_(button, 'mouseup', this, this.buttonClick_);
        Blockly.bindEvent_(button, 'mousedown', button, function (e) {
            this.setAttribute('class', 'blocklyDropDownButton blocklyDropDownButtonHover');
            e.preventDefault();
        });
        Blockly.bindEvent_(button, 'mouseover', button, function () {
            this.setAttribute('class', 'blocklyDropDownButton blocklyDropDownButtonHover');
            contentDiv.setAttribute('aria-activedescendant', this.id);
        });
        Blockly.bindEvent_(button, 'mouseout', button, function () {
            this.setAttribute('class', 'blocklyDropDownButton');
            contentDiv.removeAttribute('aria-activedescendant');
        });
        var buttonImg = document.createElement('img');
        buttonImg.src = icon.src;
        button.setAttribute('data-value', icon.value);
        buttonImg.setAttribute('data-value', icon.value);
        button.appendChild(buttonImg);
        contentDiv.appendChild(button);
    }
    contentDiv.style.width = Blockly.FieldIconMenu.DROPDOWN_WIDTH + 'px';
    Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), this.sourceBlock_.getColourTertiary());
    Blockly.DropDownDiv.setCategory(this.sourceBlock_.parentBlock_.getCategory());
    this.savedPrimary_ = this.sourceBlock_.getColour();
    this.sourceBlock_.setColour(this.sourceBlock_.getColourSecondary(), this.sourceBlock_.getColourSecondary(), this.sourceBlock_.getColourTertiary());
    var scale = this.sourceBlock_.workspace.scale;
    var secondaryYOffset = (-(Blockly.BlockSvg.MIN_BLOCK_Y * scale) - (Blockly.BlockSvg.FIELD_Y_OFFSET * scale));
    var renderedPrimary = Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_, this.onHide_.bind(this), secondaryYOffset);
    if (!renderedPrimary) {
        var arrowX = this.arrowX_ + Blockly.DropDownDiv.ARROW_SIZE / 1.5 + 1;
        var arrowY = this.arrowY_ + Blockly.DropDownDiv.ARROW_SIZE / 1.5;
        this.arrowIcon_.setAttribute('transform', 'translate(' + arrowX + ',' + arrowY + ') rotate(180)');
    }
};
Blockly.FieldIconMenu.prototype.buttonClick_ = function (e) {
    var value = e.target.getAttribute('data-value');
    this.setValue(value);
    Blockly.DropDownDiv.hide();
};
Blockly.FieldIconMenu.prototype.onHide_ = function () {
    if (this.sourceBlock_) {
        this.sourceBlock_.setColour(this.savedPrimary_, this.sourceBlock_.getColourSecondary(), this.sourceBlock_.getColourTertiary());
    }
    Blockly.DropDownDiv.content_.removeAttribute('role');
    Blockly.DropDownDiv.content_.removeAttribute('aria-haspopup');
    Blockly.DropDownDiv.content_.removeAttribute('aria-activedescendant');
    this.arrowIcon_.setAttribute('transform', 'translate(' + this.arrowX_ + ',' + this.arrowY_ + ')');
};
Blockly.Field.register('field_iconmenu', Blockly.FieldIconMenu);
'use strict';
goog.provide('Blockly.FieldImage');
goog.require('Blockly.Field');
goog.require('goog.dom');
goog.require('goog.math.Size');
goog.require('goog.userAgent');
Blockly.FieldImage = function (src, width, height, opt_alt, flip_rtl) {
    this.sourceBlock_ = null;
    this.height_ = Number(height);
    this.width_ = Number(width);
    this.size_ = new goog.math.Size(this.width_, this.height_);
    this.text_ = opt_alt || '';
    this.flipRTL_ = flip_rtl;
    this.setValue(src);
};
goog.inherits(Blockly.FieldImage, Blockly.Field);
Blockly.FieldImage.fromJson = function (options) {
    var src = Blockly.utils.replaceMessageReferences(options['src']);
    var width = Number(Blockly.utils.replaceMessageReferences(options['width']));
    var height = Number(Blockly.utils.replaceMessageReferences(options['height']));
    var alt = Blockly.utils.replaceMessageReferences(options['alt']);
    var flip_rtl = !!options['flip_rtl'] || !!options['flipRtl'];
    return new Blockly.FieldImage(src, width, height, alt, flip_rtl);
};
Blockly.FieldImage.prototype.EDITABLE = false;
Blockly.FieldImage.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    this.fieldGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    if (!this.visible_) {
        this.fieldGroup_.style.display = 'none';
    }
    this.imageElement_ = Blockly.utils.createSvgElement('image', {
        'height': this.height_ + 'px',
        'width': this.width_ + 'px'
    }, this.fieldGroup_);
    this.setValue(this.src_);
    this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);
    this.setTooltip(this.sourceBlock_);
    Blockly.Tooltip.bindMouseEvents(this.imageElement_);
};
Blockly.FieldImage.prototype.dispose = function () {
    goog.dom.removeNode(this.fieldGroup_);
    this.fieldGroup_ = null;
    this.imageElement_ = null;
};
Blockly.FieldImage.prototype.setTooltip = function (newTip) {
    this.imageElement_.tooltip = newTip;
};
Blockly.FieldImage.prototype.getValue = function () {
    return this.src_;
};
Blockly.FieldImage.prototype.setValue = function (src) {
    if (src === null) {
        return;
    }
    this.src_ = src;
    if (this.imageElement_) {
        this.imageElement_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', src || '');
    }
};
Blockly.FieldImage.prototype.getFlipRTL = function () {
    return this.flipRTL_;
};
Blockly.FieldImage.prototype.setText = function (alt) {
    if (alt === null) {
        return;
    }
    this.text_ = alt;
};
Blockly.FieldImage.prototype.render_ = function () {
};
Blockly.FieldImage.prototype.updateWidth = function () {
};
Blockly.Field.register('field_image', Blockly.FieldImage);
'use strict';
goog.provide('Blockly.FieldLabel');
goog.require('Blockly.Field');
goog.require('Blockly.Tooltip');
goog.require('goog.dom');
goog.require('goog.math.Size');
goog.require('goog.userAgent');
Blockly.FieldLabel = function (text, opt_class) {
    this.size_ = new goog.math.Size(0, 0);
    this.class_ = opt_class;
    this.setValue(text);
};
goog.inherits(Blockly.FieldLabel, Blockly.Field);
Blockly.FieldLabel.fromJson = function (options) {
    var text = Blockly.utils.replaceMessageReferences(options['text']);
    return new Blockly.FieldLabel(text, options['class']);
};
Blockly.FieldLabel.prototype.EDITABLE = false;
Blockly.FieldLabel.prototype.SERIALIZABLE = false;
Blockly.FieldLabel.prototype.init = function () {
    if (this.textElement_) {
        return;
    }
    this.textElement_ = Blockly.utils.createSvgElement('text', {
        'class': 'blocklyText',
        'y': Blockly.BlockSvg.FIELD_TOP_PADDING,
        'text-anchor': 'middle',
        'dominant-baseline': 'middle',
        'dy': goog.userAgent.EDGE_OR_IE ? Blockly.Field.IE_TEXT_OFFSET : '0'
    }, null);
    if (this.class_) {
        Blockly.utils.addClass(this.textElement_, this.class_);
    }
    if (!this.visible_) {
        this.textElement_.style.display = 'none';
    }
    this.sourceBlock_.getSvgRoot().appendChild(this.textElement_);
    this.textElement_.tooltip = this.sourceBlock_;
    Blockly.Tooltip.bindMouseEvents(this.textElement_);
    this.render_();
};
Blockly.FieldLabel.prototype.dispose = function () {
    goog.dom.removeNode(this.textElement_);
    this.textElement_ = null;
};
Blockly.FieldLabel.prototype.getSvgRoot = function () {
    return (this.textElement_);
};
Blockly.FieldLabel.prototype.setTooltip = function (newTip) {
    this.textElement_.tooltip = newTip;
};
Blockly.Field.register('field_label', Blockly.FieldLabel);
'use strict';
goog.provide('Blockly.FieldLabelSerializable');
goog.require('Blockly.FieldLabel');
Blockly.FieldLabelSerializable = function (text, opt_class) {
    Blockly.FieldLabelSerializable.superClass_.constructor.call(this, text, opt_class);
    this.arrowWidth_ = 0;
};
goog.inherits(Blockly.FieldLabelSerializable, Blockly.FieldLabel);
Blockly.FieldLabelSerializable.fromJson = function (options) {
    var text = Blockly.utils.replaceMessageReferences(options['text']);
    return new Blockly.FieldLabelSerializable(text, options['class']);
};
Blockly.FieldLabelSerializable.prototype.EDITABLE = false;
Blockly.FieldLabelSerializable.prototype.SERIALIZABLE = true;
Blockly.FieldLabelSerializable.prototype.updateWidth = function () {
    this.size_.width = Blockly.Field.getCachedWidth(this.textElement_);
};
Blockly.FieldLabelSerializable.prototype.render_ = function () {
    if (this.visible_ && this.textElement_) {
        goog.dom.removeChildren((this.textElement_));
        var textNode = document.createTextNode(this.getDisplayText_());
        this.textElement_.appendChild(textNode);
        this.updateWidth();
        var centerTextX = this.size_.width / 2;
        var minOffset = Blockly.BlockSvg.FIELD_WIDTH / 2;
        if (this.sourceBlock_.RTL) {
            var minCenter = this.size_.width - minOffset;
            centerTextX = Math.min(minCenter, centerTextX);
        }
        else {
            centerTextX = Math.max(minOffset, centerTextX);
        }
        this.textElement_.setAttribute('x', centerTextX);
    }
};
Blockly.Field.register('field_label_serializable', Blockly.FieldLabelSerializable);
'use strict';
goog.provide('Blockly.FieldMatrix');
goog.require('Blockly.DropDownDiv');
Blockly.FieldMatrix = function (matrix) {
    Blockly.FieldMatrix.superClass_.constructor.call(this, matrix);
    this.addArgType('matrix');
    this.ledThumbNodes_ = [];
    this.ledButtons_ = [];
    this.matrix_ = '';
    this.matrixStage_ = null;
    this.arrow_ = null;
    this.paintStyle_ = null;
    this.mouseDownWrapper_ = null;
    this.clearButtonWrapper_ = null;
    this.fillButtonWrapper_ = null;
    this.matrixTouchWrapper_ = null;
    this.matrixMoveWrapper_ = null;
    this.matrixReleaseWrapper_ = null;
};
goog.inherits(Blockly.FieldMatrix, Blockly.Field);
Blockly.FieldMatrix.fromJson = function (options) {
    return new Blockly.FieldMatrix(options['matrix']);
};
Blockly.FieldMatrix.THUMBNAIL_SIZE = 26;
Blockly.FieldMatrix.THUMBNAIL_NODE_SIZE = 4;
Blockly.FieldMatrix.THUMBNAIL_NODE_PAD = 1;
Blockly.FieldMatrix.ARROW_SIZE = 12;
Blockly.FieldMatrix.MATRIX_NODE_SIZE = 18;
Blockly.FieldMatrix.MATRIX_NODE_RADIUS = 4;
Blockly.FieldMatrix.MATRIX_NODE_PAD = 5;
Blockly.FieldMatrix.ZEROS = '0000000000000000000000000';
Blockly.FieldMatrix.ONES = '1111111111111111111111111';
Blockly.FieldMatrix.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    this.fieldGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    this.size_.width = Blockly.FieldMatrix.THUMBNAIL_SIZE +
        Blockly.FieldMatrix.ARROW_SIZE + (Blockly.BlockSvg.DROPDOWN_ARROW_PADDING * 1.5);
    this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);
    var thumbX = Blockly.BlockSvg.DROPDOWN_ARROW_PADDING / 2;
    var thumbY = (this.size_.height - Blockly.FieldMatrix.THUMBNAIL_SIZE) / 2;
    var thumbnail = Blockly.utils.createSvgElement('g', {
        'transform': 'translate(' + thumbX + ', ' + thumbY + ')',
        'pointer-events': 'bounding-box', 'cursor': 'pointer'
    }, this.fieldGroup_);
    this.ledThumbNodes_ = [];
    var nodeSize = Blockly.FieldMatrix.THUMBNAIL_NODE_SIZE;
    var nodePad = Blockly.FieldMatrix.THUMBNAIL_NODE_PAD;
    for (var i = 0; i < 5; i++) {
        for (var n = 0; n < 5; n++) {
            var attr = {
                'x': ((nodeSize + nodePad) * n) + nodePad,
                'y': ((nodeSize + nodePad) * i) + nodePad,
                'width': nodeSize, 'height': nodeSize,
                'rx': nodePad, 'ry': nodePad
            };
            this.ledThumbNodes_.push(Blockly.utils.createSvgElement('rect', attr, thumbnail));
        }
        thumbnail.style.cursor = 'default';
        this.updateMatrix_();
    }
    if (!this.arrow_) {
        var arrowX = Blockly.FieldMatrix.THUMBNAIL_SIZE +
            Blockly.BlockSvg.DROPDOWN_ARROW_PADDING * 1.5;
        var arrowY = (this.size_.height - Blockly.FieldMatrix.ARROW_SIZE) / 2;
        this.arrow_ = Blockly.utils.createSvgElement('image', {
            'height': Blockly.FieldMatrix.ARROW_SIZE + 'px',
            'width': Blockly.FieldMatrix.ARROW_SIZE + 'px',
            'transform': 'translate(' + arrowX + ', ' + arrowY + ')'
        }, this.fieldGroup_);
        this.arrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia +
            'dropdown-arrow.svg');
        this.arrow_.style.cursor = 'default';
    }
    this.mouseDownWrapper_ = Blockly.bindEventWithChecks_(this.getClickTarget_(), 'mousedown', this, this.onMouseDown_);
};
Blockly.FieldMatrix.prototype.setValue = function (matrix) {
    if (!matrix || matrix === this.matrix_) {
        return;
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.Change(this.sourceBlock_, 'field', this.name, this.matrix_, matrix));
    }
    matrix = matrix + Blockly.FieldMatrix.ZEROS.substr(0, 25 - matrix.length);
    this.matrix_ = matrix;
    this.updateMatrix_();
};
Blockly.FieldMatrix.prototype.getValue = function () {
    return String(this.matrix_);
};
Blockly.FieldMatrix.prototype.showEditor_ = function () {
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var div = Blockly.DropDownDiv.getContentDiv();
    var matrixSize = (Blockly.FieldMatrix.MATRIX_NODE_SIZE * 5) +
        (Blockly.FieldMatrix.MATRIX_NODE_PAD * 6);
    this.matrixStage_ = Blockly.utils.createSvgElement('svg', {
        'xmlns': 'http://www.w3.org/2000/svg',
        'xmlns:html': 'http://www.w3.org/1999/xhtml',
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'height': matrixSize + 'px',
        'width': matrixSize + 'px'
    }, div);
    this.ledButtons_ = [];
    for (var i = 0; i < 5; i++) {
        for (var n = 0; n < 5; n++) {
            var x = (Blockly.FieldMatrix.MATRIX_NODE_SIZE * n) +
                (Blockly.FieldMatrix.MATRIX_NODE_PAD * (n + 1));
            var y = (Blockly.FieldMatrix.MATRIX_NODE_SIZE * i) +
                (Blockly.FieldMatrix.MATRIX_NODE_PAD * (i + 1));
            var attr = {
                'x': x + 'px', 'y': y + 'px',
                'width': Blockly.FieldMatrix.MATRIX_NODE_SIZE,
                'height': Blockly.FieldMatrix.MATRIX_NODE_SIZE,
                'rx': Blockly.FieldMatrix.MATRIX_NODE_RADIUS,
                'ry': Blockly.FieldMatrix.MATRIX_NODE_RADIUS
            };
            var led = Blockly.utils.createSvgElement('rect', attr, this.matrixStage_);
            this.matrixStage_.appendChild(led);
            this.ledButtons_.push(led);
        }
    }
    var buttonDiv = document.createElement('div');
    var clearButtonDiv = document.createElement('div');
    clearButtonDiv.className = 'scratchMatrixButtonDiv';
    var clearButton = this.createButton_(this.sourceBlock_.colourSecondary_);
    clearButtonDiv.appendChild(clearButton);
    var fillButtonDiv = document.createElement('div');
    fillButtonDiv.className = 'scratchMatrixButtonDiv';
    var fillButton = this.createButton_('#FFFFFF');
    fillButtonDiv.appendChild(fillButton);
    buttonDiv.appendChild(clearButtonDiv);
    buttonDiv.appendChild(fillButtonDiv);
    div.appendChild(buttonDiv);
    Blockly.DropDownDiv.setColour(this.sourceBlock_.getColour(), this.sourceBlock_.getColourTertiary());
    Blockly.DropDownDiv.setCategory(this.sourceBlock_.getCategory());
    Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_);
    this.matrixTouchWrapper_ =
        Blockly.bindEvent_(this.matrixStage_, 'mousedown', this, this.onMouseDown);
    this.clearButtonWrapper_ =
        Blockly.bindEvent_(clearButton, 'click', this, this.clearMatrix_);
    this.fillButtonWrapper_ =
        Blockly.bindEvent_(fillButton, 'click', this, this.fillMatrix_);
    this.updateMatrix_();
};
Blockly.FieldMatrix.prototype.createButton_ = function (fill) {
    var button = Blockly.utils.createSvgElement('svg', {
        'xmlns': 'http://www.w3.org/2000/svg',
        'xmlns:html': 'http://www.w3.org/1999/xhtml',
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'height': Blockly.FieldMatrix.MATRIX_NODE_SIZE + 'px',
        'width': Blockly.FieldMatrix.MATRIX_NODE_SIZE + 'px'
    });
    var nodeSize = Blockly.FieldMatrix.MATRIX_NODE_SIZE / 4;
    var nodePad = Blockly.FieldMatrix.MATRIX_NODE_SIZE / 16;
    for (var i = 0; i < 3; i++) {
        for (var n = 0; n < 3; n++) {
            Blockly.utils.createSvgElement('rect', {
                'x': ((nodeSize + nodePad) * n) + nodePad,
                'y': ((nodeSize + nodePad) * i) + nodePad,
                'width': nodeSize, 'height': nodeSize,
                'rx': nodePad, 'ry': nodePad,
                'fill': fill
            }, button);
        }
    }
    return button;
};
Blockly.FieldMatrix.prototype.updateMatrix_ = function () {
    for (var i = 0; i < this.matrix_.length; i++) {
        if (this.matrix_[i] === '0') {
            this.fillMatrixNode_(this.ledButtons_, i, this.sourceBlock_.colourSecondary_);
            this.fillMatrixNode_(this.ledThumbNodes_, i, this.sourceBlock_.colour_);
        }
        else {
            this.fillMatrixNode_(this.ledButtons_, i, '#FFFFFF');
            this.fillMatrixNode_(this.ledThumbNodes_, i, '#FFFFFF');
        }
    }
};
Blockly.FieldMatrix.prototype.clearMatrix_ = function (e) {
    if (e.button != 0)
        return;
    this.setValue(Blockly.FieldMatrix.ZEROS);
};
Blockly.FieldMatrix.prototype.fillMatrix_ = function (e) {
    if (e.button != 0)
        return;
    this.setValue(Blockly.FieldMatrix.ONES);
};
Blockly.FieldMatrix.prototype.fillMatrixNode_ = function (node, index, fill) {
    if (!node || !node[index] || !fill)
        return;
    node[index].setAttribute('fill', fill);
};
Blockly.FieldMatrix.prototype.setLEDNode_ = function (led, state) {
    if (led < 0 || led > 24)
        return;
    var matrix = this.matrix_.substr(0, led) + state + this.matrix_.substr(led + 1);
    this.setValue(matrix);
};
Blockly.FieldMatrix.prototype.fillLEDNode_ = function (led) {
    if (led < 0 || led > 24)
        return;
    this.setLEDNode_(led, '1');
};
Blockly.FieldMatrix.prototype.clearLEDNode_ = function (led) {
    if (led < 0 || led > 24)
        return;
    this.setLEDNode_(led, '0');
};
Blockly.FieldMatrix.prototype.toggleLEDNode_ = function (led) {
    if (led < 0 || led > 24)
        return;
    if (this.matrix_.charAt(led) === '0') {
        this.setLEDNode_(led, '1');
    }
    else {
        this.setLEDNode_(led, '0');
    }
};
Blockly.FieldMatrix.prototype.onMouseDown = function (e) {
    this.matrixMoveWrapper_ =
        Blockly.bindEvent_(document.body, 'mousemove', this, this.onMouseMove);
    this.matrixReleaseWrapper_ =
        Blockly.bindEvent_(document.body, 'mouseup', this, this.onMouseUp);
    var ledHit = this.checkForLED_(e);
    if (ledHit > -1) {
        if (this.matrix_.charAt(ledHit) === '0') {
            this.paintStyle_ = 'fill';
        }
        else {
            this.paintStyle_ = 'clear';
        }
        this.toggleLEDNode_(ledHit);
        this.updateMatrix_();
    }
    else {
        this.paintStyle_ = null;
    }
};
Blockly.FieldMatrix.prototype.onMouseUp = function () {
    Blockly.unbindEvent_(this.matrixMoveWrapper_);
    Blockly.unbindEvent_(this.matrixReleaseWrapper_);
    this.paintStyle_ = null;
};
Blockly.FieldMatrix.prototype.onMouseMove = function (e) {
    e.preventDefault();
    if (this.paintStyle_) {
        var led = this.checkForLED_(e);
        if (led < 0)
            return;
        if (this.paintStyle_ === 'clear') {
            this.clearLEDNode_(led);
        }
        else if (this.paintStyle_ === 'fill') {
            this.fillLEDNode_(led);
        }
    }
};
Blockly.FieldMatrix.prototype.checkForLED_ = function (e) {
    var bBox = this.matrixStage_.getBoundingClientRect();
    var nodeSize = Blockly.FieldMatrix.MATRIX_NODE_SIZE;
    var nodePad = Blockly.FieldMatrix.MATRIX_NODE_PAD;
    var dx = e.clientX - bBox.left;
    var dy = e.clientY - bBox.top;
    var min = nodePad / 2;
    var max = bBox.width - (nodePad / 2);
    if (dx < min || dx > max || dy < min || dy > max) {
        return -1;
    }
    var xDiv = Math.trunc((dx - nodePad / 2) / (nodeSize + nodePad));
    var yDiv = Math.trunc((dy - nodePad / 2) / (nodeSize + nodePad));
    return xDiv + (yDiv * nodePad);
};
Blockly.FieldMatrix.prototype.dispose_ = function () {
    var thisField = this;
    return function () {
        Blockly.FieldMatrix.superClass_.dispose_.call(thisField)();
        thisField.matrixStage_ = null;
        if (thisField.mouseDownWrapper_) {
            Blockly.unbindEvent_(thisField.mouseDownWrapper_);
        }
        if (thisField.matrixTouchWrapper_) {
            Blockly.unbindEvent_(thisField.matrixTouchWrapper_);
        }
        if (thisField.matrixReleaseWrapper_) {
            Blockly.unbindEvent_(thisField.matrixReleaseWrapper_);
        }
        if (thisField.matrixMoveWrapper_) {
            Blockly.unbindEvent_(thisField.matrixMoveWrapper_);
        }
        if (thisField.clearButtonWrapper_) {
            Blockly.unbindEvent_(thisField.clearButtonWrapper_);
        }
        if (thisField.fillButtonWrapper_) {
            Blockly.unbindEvent_(thisField.fillButtonWrapper_);
        }
    };
};
Blockly.Field.register('field_matrix', Blockly.FieldMatrix);
'use strict';
goog.provide('Blockly.FieldNote');
goog.require('Blockly.DropDownDiv');
goog.require('Blockly.FieldTextInput');
goog.require('goog.math');
goog.require('goog.userAgent');
Blockly.FieldNote = function (opt_value, opt_validator) {
    opt_value = (opt_value && !isNaN(opt_value)) ? String(opt_value) : '0';
    Blockly.FieldNote.superClass_.constructor.call(this, opt_value, opt_validator);
    this.addArgType('note');
    this.fieldEditorWidth_ = 0;
    this.fieldEditorHeight_ = 0;
    this.pianoSVG_ = null;
    this.keySVGs_ = [];
    this.noteNameText_ = null;
    this.lowCText_ = null;
    this.highCText_ = null;
    this.displayedOctave_ = null;
    this.animationPos_ = 0;
    this.animationTarget_ = 0;
    this.mouseIsDown_ = false;
    this.mouseDownWrappers_ = [];
    this.mouseUpWrapper_ = null;
    this.mouseEnterWrappers_ = [];
    this.octaveDownMouseDownWrapper_ = null;
    this.octaveUpMouseDownWrapper_ = null;
};
goog.inherits(Blockly.FieldNote, Blockly.FieldTextInput);
Blockly.FieldNote.INSET = 5;
Blockly.FieldNote.TOP_MENU_HEIGHT = 32 - Blockly.FieldNote.INSET;
Blockly.FieldNote.EDGE_PADDING = 1;
Blockly.FieldNote.SHADOW_HEIGHT = 4;
Blockly.FieldNote.SHADOW_COLOR = '#000';
Blockly.FieldNote.SHADOW_OPACITY = .2;
Blockly.FieldNote.WHITE_KEY_COLOR = '#FFFFFF';
Blockly.FieldNote.BLACK_KEY_COLOR = '#323133';
Blockly.FieldNote.BLACK_KEY_STROKE = '#555555';
Blockly.FieldNote.KEY_SELECTED_COLOR = '#b0d6ff';
Blockly.FieldNote.NUM_WHITE_KEYS = 8;
Blockly.FieldNote.WHITE_KEY_HEIGHT = 72;
Blockly.FieldNote.WHITE_KEY_WIDTH = 40;
Blockly.FieldNote.BLACK_KEY_HEIGHT = 40;
Blockly.FieldNote.BLACK_KEY_WIDTH = 32;
Blockly.FieldNote.KEY_RADIUS = 6;
Blockly.FieldNote.KEY_LABEL_PADDING = 8;
Blockly.FieldNote.KEY_INFO = [
    { name: 'C', pitch: 0 },
    { name: 'C♯', pitch: 1, isBlack: true },
    { name: 'D', pitch: 2 },
    { name: 'E♭', pitch: 3, isBlack: true },
    { name: 'E', pitch: 4 },
    { name: 'F', pitch: 5 },
    { name: 'F♯', pitch: 6, isBlack: true },
    { name: 'G', pitch: 7 },
    { name: 'G♯', pitch: 8, isBlack: true },
    { name: 'A', pitch: 9 },
    { name: 'B♭', pitch: 10, isBlack: true },
    { name: 'B', pitch: 11 },
    { name: 'C', pitch: 12 }
];
Blockly.FieldNote.MAX_NOTE = 130;
Blockly.FieldNote.ANIMATION_FRACTION = 0.2;
Blockly.FieldNote.ARROW_SVG_PATH = 'icons/arrow_button.svg';
Blockly.FieldNote.OCTAVE_BUTTON_SIZE = 32;
Blockly.FieldNote.fromJson = function (options) {
    return new Blockly.FieldNote(options['note']);
};
Blockly.FieldNote.prototype.dispose_ = function () {
    var thisField = this;
    return function () {
        Blockly.FieldNote.superClass_.dispose_.call(thisField)();
        thisField.mouseDownWrappers_.forEach(function (wrapper) {
            Blockly.unbindEvent_(wrapper);
        });
        thisField.mouseEnterWrappers_.forEach(function (wrapper) {
            Blockly.unbindEvent_(wrapper);
        });
        if (thisField.mouseUpWrapper_) {
            Blockly.unbindEvent_(thisField.mouseUpWrapper_);
        }
        if (thisField.octaveDownMouseDownWrapper_) {
            Blockly.unbindEvent_(thisField.octaveDownMouseDownWrapper_);
        }
        if (thisField.octaveUpMouseDownWrapper_) {
            Blockly.unbindEvent_(thisField.octaveUpMouseDownWrapper_);
        }
        this.pianoSVG_ = null;
        this.keySVGs_.length = 0;
        this.noteNameText_ = null;
        this.lowCText_ = null;
        this.highCText_ = null;
    };
};
Blockly.FieldNote.prototype.showEditor_ = function () {
    Blockly.FieldNote.superClass_.showEditor_.call(this, this.useTouchInteraction_);
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var div = Blockly.DropDownDiv.getContentDiv();
    this.fieldEditorWidth_ = Blockly.FieldNote.NUM_WHITE_KEYS * Blockly.FieldNote.WHITE_KEY_WIDTH +
        Blockly.FieldNote.EDGE_PADDING;
    this.fieldEditorHeight_ = Blockly.FieldNote.TOP_MENU_HEIGHT +
        Blockly.FieldNote.WHITE_KEY_HEIGHT +
        Blockly.FieldNote.EDGE_PADDING;
    var svg = Blockly.utils.createSvgElement('svg', {
        'xmlns': 'http://www.w3.org/2000/svg',
        'xmlns:html': 'http://www.w3.org/1999/xhtml',
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'height': this.fieldEditorHeight_ + 'px',
        'width': this.fieldEditorWidth_ + 'px'
    }, div);
    this.pianoSVG_ = Blockly.utils.createSvgElement('g', {}, svg);
    var whiteKeyGroup = Blockly.utils.createSvgElement('g', {}, this.pianoSVG_);
    var blackKeyGroup = Blockly.utils.createSvgElement('g', {}, this.pianoSVG_);
    this.keySVGs_ = [];
    this.addPianoOctave_(-this.fieldEditorWidth_ + Blockly.FieldNote.EDGE_PADDING, whiteKeyGroup, blackKeyGroup, null);
    this.addPianoOctave_(0, whiteKeyGroup, blackKeyGroup, this.keySVGs_);
    this.addPianoOctave_(this.fieldEditorWidth_ - Blockly.FieldNote.EDGE_PADDING, whiteKeyGroup, blackKeyGroup, null);
    this.noteNameText_ = Blockly.utils.createSvgElement('text', {
        'x': this.fieldEditorWidth_ / 2,
        'y': Blockly.FieldNote.TOP_MENU_HEIGHT / 2,
        'class': 'blocklyText',
        'text-anchor': 'middle',
        'dominant-baseline': 'middle',
    }, svg);
    var lowCX = Blockly.FieldNote.WHITE_KEY_WIDTH / 2;
    this.lowCText_ = this.addCKeyLabel_(lowCX, svg);
    var highCX = lowCX + (Blockly.FieldNote.WHITE_KEY_WIDTH *
        (Blockly.FieldNote.NUM_WHITE_KEYS - 1));
    this.highCText_ = this.addCKeyLabel_(highCX, svg);
    Blockly.utils.createSvgElement('line', {
        'stroke': this.sourceBlock_.getColourTertiary(),
        'x1': 0,
        'y1': Blockly.FieldNote.TOP_MENU_HEIGHT,
        'x2': this.fieldEditorWidth_,
        'y2': Blockly.FieldNote.TOP_MENU_HEIGHT
    }, svg);
    Blockly.utils.createSvgElement('rect', {
        'x': 0,
        'y': Blockly.FieldNote.TOP_MENU_HEIGHT,
        'width': this.fieldEditorWidth_,
        'height': Blockly.FieldNote.SHADOW_HEIGHT,
        'fill': Blockly.FieldNote.SHADOW_COLOR,
        'fill-opacity': Blockly.FieldNote.SHADOW_OPACITY
    }, svg);
    this.octaveDownButton = this.addOctaveButton_(0, true, svg);
    this.octaveUpButton = this.addOctaveButton_((this.fieldEditorWidth_ + Blockly.FieldNote.INSET * 2) -
        Blockly.FieldNote.OCTAVE_BUTTON_SIZE, false, svg);
    this.octaveDownMouseDownWrapper_ =
        Blockly.bindEvent_(this.octaveDownButton, 'mousedown', this, function () {
            this.changeOctaveBy_(-1);
        });
    this.octaveUpMouseDownWrapper_ =
        Blockly.bindEvent_(this.octaveUpButton, 'mousedown', this, function () {
            this.changeOctaveBy_(1);
        });
    Blockly.DropDownDiv.setColour(this.sourceBlock_.parentBlock_.getColour(), this.sourceBlock_.getColourTertiary());
    Blockly.DropDownDiv.setCategory(this.sourceBlock_.parentBlock_.getCategory());
    Blockly.DropDownDiv.showPositionedByBlock(this, this.sourceBlock_);
    this.updateSelection_();
};
Blockly.FieldNote.prototype.addPianoOctave_ = function (x, whiteKeyGroup, blackKeyGroup, keySVGarray) {
    var xIncrement, width, height, fill, stroke, group;
    x += Blockly.FieldNote.EDGE_PADDING / 2;
    var y = Blockly.FieldNote.TOP_MENU_HEIGHT;
    for (var i = 0; i < Blockly.FieldNote.KEY_INFO.length; i++) {
        if (Blockly.FieldNote.KEY_INFO[i].isBlack) {
            x -= Blockly.FieldNote.BLACK_KEY_WIDTH / 2;
            xIncrement = Blockly.FieldNote.BLACK_KEY_WIDTH / 2;
            width = Blockly.FieldNote.BLACK_KEY_WIDTH;
            height = Blockly.FieldNote.BLACK_KEY_HEIGHT;
            fill = Blockly.FieldNote.BLACK_KEY_COLOR;
            stroke = Blockly.FieldNote.BLACK_KEY_STROKE;
            group = blackKeyGroup;
        }
        else {
            xIncrement = Blockly.FieldNote.WHITE_KEY_WIDTH;
            width = Blockly.FieldNote.WHITE_KEY_WIDTH;
            height = Blockly.FieldNote.WHITE_KEY_HEIGHT;
            fill = Blockly.FieldNote.WHITE_KEY_COLOR;
            stroke = this.sourceBlock_.getColourTertiary();
            group = whiteKeyGroup;
        }
        var attr = {
            'd': this.getPianoKeyPath_(x, y, width, height),
            'fill': fill,
            'stroke': stroke
        };
        x += xIncrement;
        var keySVG = Blockly.utils.createSvgElement('path', attr, group);
        if (keySVGarray) {
            keySVGarray[i] = keySVG;
            keySVG.setAttribute('data-pitch', Blockly.FieldNote.KEY_INFO[i].pitch);
            keySVG.setAttribute('data-name', Blockly.FieldNote.KEY_INFO[i].name);
            keySVG.setAttribute('data-isBlack', Blockly.FieldNote.KEY_INFO[i].isBlack);
            this.mouseDownWrappers_[i] =
                Blockly.bindEvent_(keySVG, 'mousedown', this, this.onMouseDownOnKey_);
            this.mouseEnterWrappers_[i] =
                Blockly.bindEvent_(keySVG, 'mouseenter', this, this.onMouseEnter_);
        }
    }
};
Blockly.FieldNote.prototype.getPianoKeyPath_ = function (x, y, width, height) {
    return 'M' + x + ' ' + y + ' ' +
        'L' + x + ' ' + (y + height - Blockly.FieldNote.KEY_RADIUS) + ' ' +
        'Q' + x + ' ' + (y + height) + ' ' +
        (x + Blockly.FieldNote.KEY_RADIUS) + ' ' + (y + height) + ' ' +
        'L' + (x + width - Blockly.FieldNote.KEY_RADIUS) + ' ' + (y + height) + ' ' +
        'Q' + (x + width) + ' ' + (y + height) + ' ' +
        (x + width) + ' ' + (y + height - Blockly.FieldNote.KEY_RADIUS) + ' ' +
        'L' + (x + width) + ' ' + y + ' ' +
        'L' + x + ' ' + y;
};
Blockly.FieldNote.prototype.addOctaveButton_ = function (x, flipped, svg) {
    var group = Blockly.utils.createSvgElement('g', {}, svg);
    var imageSize = Blockly.FieldNote.OCTAVE_BUTTON_SIZE;
    var arrow = Blockly.utils.createSvgElement('image', {
        'width': imageSize,
        'height': imageSize,
        'x': x - Blockly.FieldNote.INSET,
        'y': -1 * Blockly.FieldNote.INSET
    }, group);
    arrow.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + Blockly.FieldNote.ARROW_SVG_PATH);
    Blockly.utils.createSvgElement('line', {
        'stroke': this.sourceBlock_.getColourTertiary(),
        'x1': x - Blockly.FieldNote.INSET,
        'y1': 0,
        'x2': x - Blockly.FieldNote.INSET,
        'y2': Blockly.FieldNote.TOP_MENU_HEIGHT - Blockly.FieldNote.INSET
    }, group);
    if (flipped) {
        var translateX = -1 * Blockly.FieldNote.OCTAVE_BUTTON_SIZE + (Blockly.FieldNote.INSET * 2);
        group.setAttribute('transform', 'scale(-1, 1) ' +
            'translate(' + translateX + ', 0)');
    }
    return group;
};
Blockly.FieldNote.prototype.addCKeyLabel_ = function (x, svg) {
    return Blockly.utils.createSvgElement('text', {
        'x': x,
        'y': Blockly.FieldNote.TOP_MENU_HEIGHT + Blockly.FieldNote.WHITE_KEY_HEIGHT -
            Blockly.FieldNote.KEY_LABEL_PADDING,
        'class': 'scratchNotePickerKeyLabel',
        'text-anchor': 'middle'
    }, svg);
};
Blockly.FieldNote.prototype.setCKeyLabelsVisible_ = function (visible) {
    if (visible) {
        this.fadeSvgToOpacity_(this.lowCText_, 1);
        this.fadeSvgToOpacity_(this.highCText_, 1);
    }
    else {
        this.fadeSvgToOpacity_(this.lowCText_, 0);
        this.fadeSvgToOpacity_(this.highCText_, 0);
    }
};
Blockly.FieldNote.prototype.fadeSvgToOpacity_ = function (svg, opacity) {
    svg.setAttribute('style', 'opacity: ' + opacity + '; transition: opacity 0.1s;');
};
Blockly.FieldNote.prototype.onMouseDownOnKey_ = function (e) {
    this.mouseIsDown_ = true;
    this.mouseUpWrapper_ = Blockly.bindEvent_(document.body, 'mouseup', this, this.onMouseUp_);
    this.selectNoteWithMouseEvent_(e);
};
Blockly.FieldNote.prototype.onMouseUp_ = function () {
    this.mouseIsDown_ = false;
    Blockly.unbindEvent_(this.mouseUpWrapper_);
};
Blockly.FieldNote.prototype.onMouseEnter_ = function (e) {
    if (this.mouseIsDown_) {
        this.selectNoteWithMouseEvent_(e);
    }
};
Blockly.FieldNote.prototype.selectNoteWithMouseEvent_ = function (e) {
    var newNoteNum = Number(e.target.getAttribute('data-pitch')) + this.displayedOctave_ * 12;
    this.setNoteNum_(newNoteNum);
    this.playNoteInternal_();
};
Blockly.FieldNote.prototype.playNoteInternal_ = function () {
    if (Blockly.FieldNote.playNote_) {
        Blockly.FieldNote.playNote_(this.getValue(), this.sourceBlock_.parentBlock_.getCategory());
    }
};
Blockly.FieldNote.playNote_ = function () {
    return;
};
Blockly.FieldNote.prototype.changeOctaveBy_ = function (octaves) {
    this.displayedOctave_ += octaves;
    if (this.displayedOctave_ < 0) {
        this.displayedOctave_ = 0;
        return;
    }
    var maxOctave = Math.floor(Blockly.FieldNote.MAX_NOTE / 12);
    if (this.displayedOctave_ > maxOctave) {
        this.displayedOctave_ = maxOctave;
        return;
    }
    var newNote = Number(this.getText()) + (octaves * 12);
    this.setNoteNum_(newNote);
    this.animationTarget_ = this.fieldEditorWidth_ * octaves * -1;
    this.animationPos_ = 0;
    this.stepOctaveAnimation_();
    this.setCKeyLabelsVisible_(false);
};
Blockly.FieldNote.prototype.stepOctaveAnimation_ = function () {
    var absDiff = Math.abs(this.animationPos_ - this.animationTarget_);
    if (absDiff < 1) {
        this.pianoSVG_.setAttribute('transform', 'translate(0, 0)');
        this.setCKeyLabelsVisible_(true);
        this.playNoteInternal_();
        return;
    }
    this.animationPos_ += (this.animationTarget_ - this.animationPos_) *
        Blockly.FieldNote.ANIMATION_FRACTION;
    this.pianoSVG_.setAttribute('transform', 'translate(' + this.animationPos_ + ',0)');
    requestAnimationFrame(this.stepOctaveAnimation_.bind(this));
};
Blockly.FieldNote.prototype.setNoteNum_ = function (noteNum) {
    noteNum = this.callValidator(noteNum);
    this.setValue(noteNum);
    Blockly.FieldTextInput.htmlInput_.value = noteNum;
};
Blockly.FieldNote.prototype.setText = function (text) {
    Blockly.FieldNote.superClass_.setText.call(this, text);
    if (!this.textElement_) {
        return;
    }
    this.updateSelection_();
    this.size_.width = 0;
};
Blockly.FieldNote.prototype.noteNumToKeyIndex_ = function (noteNum) {
    return Math.floor(noteNum) - (this.displayedOctave_ * 12);
};
Blockly.FieldNote.prototype.updateSelection_ = function () {
    var noteNum = Number(this.getText());
    if (this.displayedOctave_ == null ||
        noteNum > ((this.displayedOctave_ * 12) + 12) ||
        noteNum < (this.displayedOctave_ * 12)) {
        this.displayedOctave_ = Math.floor(noteNum / 12);
    }
    var index = this.noteNumToKeyIndex_(noteNum);
    this.keySVGs_.forEach(function (svg) {
        var isBlack = svg.getAttribute('data-isBlack');
        if (isBlack === 'true') {
            svg.setAttribute('fill', Blockly.FieldNote.BLACK_KEY_COLOR);
        }
        else {
            svg.setAttribute('fill', Blockly.FieldNote.WHITE_KEY_COLOR);
        }
    });
    if (this.keySVGs_[index]) {
        this.keySVGs_[index].setAttribute('fill', Blockly.FieldNote.KEY_SELECTED_COLOR);
        var noteName = Blockly.FieldNote.KEY_INFO[index].name;
        this.noteNameText_.textContent = noteName + ' (' + Math.floor(noteNum) + ')';
        var lowCNum = this.displayedOctave_ * 12;
        this.lowCText_.textContent = 'C(' + lowCNum + ')';
        this.highCText_.textContent = 'C(' + (lowCNum + 12) + ')';
    }
};
Blockly.FieldNote.prototype.classValidator = function (text) {
    if (text === null) {
        return null;
    }
    var n = parseFloat(text || 0);
    if (isNaN(n)) {
        return null;
    }
    if (n < 0) {
        n = 0;
    }
    if (n > Blockly.FieldNote.MAX_NOTE) {
        n = Blockly.FieldNote.MAX_NOTE;
    }
    return String(n);
};
Blockly.Field.register('field_note', Blockly.FieldNote);
'use strict';
goog.provide('Blockly.FieldNumber');
goog.require('Blockly.FieldTextInput');
goog.require('Blockly.Touch');
goog.require('goog.math');
goog.require('goog.userAgent');
Blockly.FieldNumber = function (opt_value, opt_min, opt_max, opt_precision, opt_validator) {
    var numRestrictor = this.getNumRestrictor(opt_min, opt_max, opt_precision);
    opt_value = (opt_value && !isNaN(opt_value)) ? String(opt_value) : '0';
    Blockly.FieldNumber.superClass_.constructor.call(this, opt_value, opt_validator, numRestrictor);
    this.addArgType('number');
};
goog.inherits(Blockly.FieldNumber, Blockly.FieldTextInput);
Blockly.FieldNumber.fromJson = function (options) {
    return new Blockly.FieldNumber(options['value'], options['min'], options['max'], options['precision']);
};
Blockly.FieldNumber.DROPDOWN_WIDTH = 168;
Blockly.FieldNumber.NUMPAD_BUTTONS =
    ['7', '8', '9', '4', '5', '6', '1', '2', '3', '.', '0', '-', ' '];
Blockly.FieldNumber.NUMPAD_DELETE_ICON = 'data:image/svg+xml;utf8,' +
    '<svg ' +
    'xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40">' +
    '<path d="M28.89,11.45H16.79a2.86,2.86,0,0,0-2,.84L9.09,1' +
    '8a2.85,2.85,0,0,0,0,4l5.69,5.69a2.86,2.86,0,0,0,2,.84h12' +
    '.1a2.86,2.86,0,0,0,2.86-2.86V14.31A2.86,2.86,0,0,0,28.89' +
    ',11.45ZM27.15,22.73a1,1,0,0,1,0,1.41,1,1,0,0,1-.71.3,1,1' +
    ',0,0,1-.71-0.3L23,21.41l-2.73,2.73a1,1,0,0,1-1.41,0,1,1,' +
    '0,0,1,0-1.41L21.59,20l-2.73-2.73a1,1,0,0,1,0-1.41,1,1,0,' +
    '0,1,1.41,0L23,18.59l2.73-2.73a1,1,0,1,1,1.42,1.41L24.42,20Z" fill="' +
    Blockly.Colours.numPadText + '"/></svg>';
Blockly.FieldNumber.activeField_ = null;
Blockly.FieldNumber.prototype.getNumRestrictor = function (opt_min, opt_max, opt_precision) {
    this.setConstraints_(opt_min, opt_max, opt_precision);
    var pattern = "[\\d]";
    if (this.decimalAllowed_) {
        pattern += "|[\\.]";
    }
    if (this.negativeAllowed_) {
        pattern += "|[-]";
    }
    if (this.exponentialAllowed_) {
        pattern += "|[eE]";
    }
    return new RegExp(pattern);
};
Blockly.FieldNumber.prototype.setConstraints_ = function (opt_min, opt_max, opt_precision) {
    this.decimalAllowed_ = (typeof opt_precision == 'undefined') ||
        isNaN(opt_precision) || (opt_precision == 0) ||
        (Math.floor(opt_precision) != opt_precision);
    this.negativeAllowed_ = (typeof opt_min == 'undefined') || isNaN(opt_min) ||
        opt_min < 0;
    this.exponentialAllowed_ = this.decimalAllowed_;
};
Blockly.FieldNumber.prototype.showEditor_ = function () {
    Blockly.FieldNumber.activeField_ = this;
    var showNumPad = this.useTouchInteraction_;
    Blockly.FieldNumber.superClass_.showEditor_.call(this, false, showNumPad);
    if (showNumPad) {
        this.showNumPad_();
    }
};
Blockly.FieldNumber.prototype.showNumPad_ = function () {
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var contentDiv = Blockly.DropDownDiv.getContentDiv();
    contentDiv.setAttribute('role', 'menu');
    contentDiv.setAttribute('aria-haspopup', 'true');
    this.addButtons_(contentDiv);
    Blockly.DropDownDiv.setColour(this.sourceBlock_.parentBlock_.getColour(), this.sourceBlock_.getColourTertiary());
    contentDiv.style.width = Blockly.FieldNumber.DROPDOWN_WIDTH + 'px';
    this.position_();
};
Blockly.FieldNumber.prototype.position_ = function () {
    var scale = this.sourceBlock_.workspace.scale;
    var bBox = this.sourceBlock_.getHeightWidth();
    bBox.width *= scale;
    bBox.height *= scale;
    var position = this.getAbsoluteXY_();
    var primaryX = position.x + bBox.width / 2;
    var primaryY = position.y + bBox.height;
    var secondaryX = primaryX;
    var secondaryY = position.y;
    Blockly.DropDownDiv.setBoundsElement(this.sourceBlock_.workspace.getParentSvg().parentNode);
    Blockly.DropDownDiv.show(this, primaryX, primaryY, secondaryX, secondaryY, this.onHide_.bind(this));
};
Blockly.FieldNumber.prototype.addButtons_ = function (contentDiv) {
    var buttonColour = this.sourceBlock_.parentBlock_.getColour();
    var buttonBorderColour = this.sourceBlock_.parentBlock_.getColourTertiary();
    var buttons = Blockly.FieldNumber.NUMPAD_BUTTONS;
    for (var i = 0, buttonText; buttonText = buttons[i]; i++) {
        var button = document.createElement('button');
        button.setAttribute('role', 'menuitem');
        button.setAttribute('class', 'blocklyNumPadButton');
        button.setAttribute('style', 'background:' + buttonColour + ';' +
            'border: 1px solid ' + buttonBorderColour + ';');
        button.title = buttonText;
        button.innerHTML = buttonText;
        Blockly.bindEvent_(button, 'mousedown', button, Blockly.FieldNumber.numPadButtonTouch);
        if (buttonText == '.' && !this.decimalAllowed_) {
            button.setAttribute('style', 'visibility: hidden');
        }
        else if (buttonText == '-' && !this.negativeAllowed_) {
            continue;
        }
        else if (buttonText == ' ' && !this.negativeAllowed_) {
            continue;
        }
        else if (buttonText == ' ' && this.negativeAllowed_) {
            button.setAttribute('style', 'visibility: hidden');
        }
        contentDiv.appendChild(button);
    }
    var eraseButton = document.createElement('button');
    eraseButton.setAttribute('role', 'menuitem');
    eraseButton.setAttribute('class', 'blocklyNumPadButton');
    eraseButton.setAttribute('style', 'background:' + buttonColour + ';' +
        'border: 1px solid ' + buttonBorderColour + ';');
    eraseButton.title = 'Delete';
    var eraseImage = document.createElement('img');
    eraseImage.src = Blockly.FieldNumber.NUMPAD_DELETE_ICON;
    eraseButton.appendChild(eraseImage);
    Blockly.bindEvent_(eraseButton, 'mousedown', null, Blockly.FieldNumber.numPadEraseButtonTouch);
    contentDiv.appendChild(eraseButton);
};
Blockly.FieldNumber.numPadButtonTouch = function (e) {
    var spliceValue = this.innerHTML;
    var oldValue = Blockly.FieldTextInput.htmlInput_.value;
    var selectionStart = Blockly.FieldTextInput.htmlInput_.selectionStart;
    var selectionEnd = Blockly.FieldTextInput.htmlInput_.selectionEnd;
    var newValue = oldValue.slice(0, selectionStart) + spliceValue +
        oldValue.slice(selectionEnd);
    Blockly.FieldNumber.updateDisplay_(newValue, selectionStart + spliceValue.length);
    Blockly.Touch.clearTouchIdentifier();
    e.preventDefault();
};
Blockly.FieldNumber.numPadEraseButtonTouch = function (e) {
    var oldValue = Blockly.FieldTextInput.htmlInput_.value;
    var selectionStart = Blockly.FieldTextInput.htmlInput_.selectionStart;
    var selectionEnd = Blockly.FieldTextInput.htmlInput_.selectionEnd;
    if (selectionStart == selectionEnd) {
        selectionStart = Math.max(0, selectionStart - 1);
    }
    var newValue = oldValue.slice(0, selectionStart) +
        oldValue.slice(selectionEnd);
    Blockly.FieldNumber.updateDisplay_(newValue, selectionStart);
    Blockly.Touch.clearTouchIdentifier();
    e.preventDefault();
};
Blockly.FieldNumber.updateDisplay_ = function (newValue, newSelection) {
    var htmlInput = Blockly.FieldTextInput.htmlInput_;
    htmlInput.value = newValue;
    Blockly.FieldNumber.superClass_.resizeEditor_.call(Blockly.FieldNumber.activeField_);
    htmlInput.setSelectionRange(newSelection, newSelection);
    htmlInput.scrollLeft = htmlInput.scrollWidth;
    Blockly.FieldNumber.activeField_.validate_();
};
Blockly.FieldNumber.prototype.onHide_ = function () {
    Blockly.DropDownDiv.content_.removeAttribute('role');
    Blockly.DropDownDiv.content_.removeAttribute('aria-haspopup');
};
Blockly.Field.register('field_number', Blockly.FieldNumber);
'use strict';
goog.provide('Blockly.FieldTextDropdown');
goog.require('Blockly.DropDownDiv');
goog.require('Blockly.FieldDropdown');
goog.require('Blockly.FieldTextInput');
goog.require('goog.userAgent');
Blockly.FieldTextDropdown = function (text, menuGenerator, opt_validator, opt_restrictor) {
    this.menuGenerator_ = menuGenerator;
    Blockly.FieldDropdown.prototype.trimOptions_.call(this);
    Blockly.FieldTextDropdown.superClass_.constructor.call(this, text, opt_validator, opt_restrictor);
    this.addArgType('textdropdown');
};
goog.inherits(Blockly.FieldTextDropdown, Blockly.FieldTextInput);
Blockly.FieldTextDropdown.fromJson = function (element) {
    var field = new Blockly.FieldTextDropdown(element['text'], element['options']);
    if (typeof element['spellcheck'] == 'boolean') {
        field.setSpellcheck(element['spellcheck']);
    }
    return field;
};
Blockly.FieldTextDropdown.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    Blockly.FieldTextDropdown.superClass_.init.call(this);
    if (!this.arrow_) {
        this.arrowSize_ = 12;
        this.arrowX_ = 0;
        this.arrowY_ = 11;
        this.arrow_ = Blockly.utils.createSvgElement('image', {
            'height': this.arrowSize_ + 'px',
            'width': this.arrowSize_ + 'px'
        });
        this.arrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'dropdown-arrow-dark.svg');
        this.arrow_.style.cursor = 'pointer';
        this.fieldGroup_.appendChild(this.arrow_);
        this.mouseUpWrapper_ =
            Blockly.bindEvent_(this.arrow_, 'mouseup', this, this.showDropdown_);
    }
    this.disableColourChange_ = true;
};
Blockly.FieldTextDropdown.prototype.dispose = function () {
    if (this.mouseUpWrapper_) {
        Blockly.unbindEvent_(this.mouseUpWrapper_);
        this.mouseUpWrapper_ = null;
        Blockly.Touch.clearTouchIdentifier();
    }
    Blockly.FieldTextDropdown.superClass_.dispose.call(this);
};
Blockly.FieldTextDropdown.prototype.showEditor_ = function () {
    if (!this.dropDownOpen_) {
        Blockly.FieldTextDropdown.superClass_.showEditor_.call(this, null, null, true, function () {
            Blockly.WidgetDiv.hide();
            this.showDropdown_();
            Blockly.Touch.clearTouchIdentifier();
        });
    }
};
Blockly.FieldTextDropdown.prototype.getOptions_ = Blockly.FieldDropdown.prototype.getOptions_;
Blockly.FieldTextDropdown.prototype.positionArrow = Blockly.FieldDropdown.prototype.positionArrow;
Blockly.FieldTextDropdown.prototype.showDropdown_ = Blockly.FieldDropdown.prototype.showEditor_;
Blockly.FieldTextDropdown.prototype.onHide = Blockly.FieldDropdown.prototype.onHide;
Blockly.Field.register('field_textdropdown', Blockly.FieldTextDropdown);
'use strict';
goog.provide('Blockly.FieldNumberDropdown');
goog.require('Blockly.FieldTextDropdown');
goog.require('goog.userAgent');
Blockly.FieldNumberDropdown = function (value, menuGenerator, opt_min, opt_max, opt_precision, opt_validator) {
    this.setConstraints_ = Blockly.FieldNumber.prototype.setConstraints_;
    var numRestrictor = Blockly.FieldNumber.prototype.getNumRestrictor.call(this, opt_min, opt_max, opt_precision);
    Blockly.FieldNumberDropdown.superClass_.constructor.call(this, value, menuGenerator, opt_validator, numRestrictor);
    this.addArgType('numberdropdown');
};
goog.inherits(Blockly.FieldNumberDropdown, Blockly.FieldTextDropdown);
Blockly.FieldNumberDropdown.fromJson = function (element) {
    return new Blockly.FieldNumberDropdown(element['value'], element['options'], element['min'], element['max'], element['precision']);
};
Blockly.Field.register('field_numberdropdown', Blockly.FieldNumberDropdown);
'use strict';
goog.provide('Blockly.FieldTextInputRemovable');
goog.require('Blockly.BlockSvg.render');
goog.require('Blockly.Colours');
goog.require('Blockly.FieldTextInput');
goog.require('Blockly.Msg');
goog.require('Blockly.utils');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
Blockly.FieldTextInputRemovable = function (text, opt_validator, opt_restrictor) {
    Blockly.FieldTextInputRemovable.superClass_.constructor.call(this, text, opt_validator, opt_restrictor);
};
goog.inherits(Blockly.FieldTextInputRemovable, Blockly.FieldTextInput);
Blockly.FieldTextInputRemovable.prototype.showEditor_ = function () {
    Blockly.FieldTextInputRemovable.superClass_.showEditor_.call(this);
    var div = Blockly.WidgetDiv.DIV;
    div.className += ' removableTextInput';
    var removeButton = goog.dom.createDom(goog.dom.TagName.IMG, 'blocklyTextRemoveIcon');
    removeButton.setAttribute('src', Blockly.mainWorkspace.options.pathToMedia + 'icons/remove.svg');
    this.removeButtonMouseWrapper_ = Blockly.bindEvent_(removeButton, 'mousedown', this, this.removeCallback_);
    div.appendChild(removeButton);
};
Blockly.FieldTextInputRemovable.prototype.removeCallback_ = function () {
    if (this.sourceBlock_ && this.sourceBlock_.removeFieldCallback) {
        this.sourceBlock_.removeFieldCallback(this);
    }
    else {
        console.warn('Expected a source block with removeFieldCallback');
    }
};
Blockly.FieldTextInputRemovable.fromJson = function (options) {
    var text = Blockly.utils.replaceMessageReferences(options['text']);
    var field = new Blockly.FieldTextInputRemovable(text, options['class']);
    if (typeof options['spellcheck'] == 'boolean') {
        field.setSpellcheck(options['spellcheck']);
    }
    return field;
};
Blockly.Field.register('field_input_removable', Blockly.FieldTextInputRemovable);
'use strict';
goog.provide('Blockly.FieldVariable');
goog.require('Blockly.FieldDropdown');
goog.require('Blockly.Msg');
goog.require('Blockly.VariableModel');
goog.require('Blockly.Variables');
goog.require('goog.asserts');
goog.require('goog.string');
Blockly.FieldVariable = function (varname, opt_validator, opt_variableTypes) {
    this.menuGenerator_ = Blockly.FieldVariable.dropdownCreate;
    this.size_ = new goog.math.Size(Blockly.BlockSvg.FIELD_WIDTH, Blockly.BlockSvg.FIELD_HEIGHT);
    this.setValidator(opt_validator);
    this.defaultVariableName = (varname || '');
    var hasSingleVarType = opt_variableTypes && (opt_variableTypes.length == 1);
    this.defaultType_ = hasSingleVarType ? opt_variableTypes[0] : '';
    this.variableTypes = opt_variableTypes;
    this.addArgType('variable');
    this.value_ = null;
};
goog.inherits(Blockly.FieldVariable, Blockly.FieldDropdown);
Blockly.FieldVariable.fromJson = function (options) {
    var varname = Blockly.utils.replaceMessageReferences(options['variable']);
    var variableTypes = options['variableTypes'];
    return new Blockly.FieldVariable(varname, null, variableTypes);
};
Blockly.FieldVariable.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    Blockly.FieldVariable.superClass_.init.call(this);
    this.initModel();
};
Blockly.FieldVariable.prototype.initModel = function () {
    if (this.variable_) {
        return;
    }
    this.workspace_ = this.sourceBlock_.workspace;
    var variable = this.initFlyoutBroadcast_(this.workspace_);
    if (!variable) {
        var variable = Blockly.Variables.getOrCreateVariablePackage(this.workspace_, null, this.defaultVariableName, this.defaultType_);
    }
    Blockly.Events.disable();
    try {
        this.setValue(variable.getId());
    }
    finally {
        Blockly.Events.enable();
    }
};
Blockly.FieldVariable.prototype.initFlyoutBroadcast_ = function (workspace) {
    var broadcastMsgType = Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE;
    var broadcastVars = workspace.getVariablesOfType(broadcastMsgType);
    if (workspace.isFlyout && this.defaultType_ == broadcastMsgType &&
        broadcastVars.length != 0) {
        broadcastVars.sort(Blockly.VariableModel.compareByName);
        return broadcastVars[0];
    }
};
Blockly.FieldVariable.dispose = function () {
    Blockly.FieldVariable.superClass_.dispose.call(this);
    this.workspace_ = null;
    this.variableMap_ = null;
};
Blockly.FieldVariable.prototype.setSourceBlock = function (block) {
    goog.asserts.assert(!block.isShadow(), 'Variable fields are not allowed to exist on shadow blocks.');
    Blockly.FieldVariable.superClass_.setSourceBlock.call(this, block);
};
Blockly.FieldVariable.prototype.getValue = function () {
    return this.variable_ ? this.variable_.getId() : null;
};
Blockly.FieldVariable.prototype.getText = function () {
    return this.variable_ ? this.variable_.name : '';
};
Blockly.FieldVariable.prototype.getVariable = function () {
    return this.variable_;
};
Blockly.FieldVariable.prototype.setValue = function (id) {
    var workspace = this.sourceBlock_.workspace;
    var variable = Blockly.Variables.getVariable(workspace, id);
    if (!variable) {
        throw new Error('Variable id doesn\'t point to a real variable!  ID was ' +
            id);
    }
    var type = variable.type;
    if (!this.typeIsAllowed_(type)) {
        throw new Error('Variable type doesn\'t match this field!  Type was ' +
            type);
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        var oldValue = this.variable_ ? this.variable_.getId() : null;
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, oldValue, id));
    }
    this.variable_ = variable;
    this.value_ = id;
    this.setText(variable.name);
};
Blockly.FieldVariable.prototype.typeIsAllowed_ = function (type) {
    var typeList = this.getVariableTypes_();
    if (!typeList) {
        return true;
    }
    for (var i = 0; i < typeList.length; i++) {
        if (type == typeList[i]) {
            return true;
        }
    }
    return false;
};
Blockly.FieldVariable.prototype.getVariableTypes_ = function () {
    var variableTypes = this.variableTypes;
    if (variableTypes === null) {
        if (this.sourceBlock_) {
            var workspace = this.sourceBlock_.workspace;
            return workspace.getVariableTypes();
        }
    }
    variableTypes = variableTypes || [''];
    if (variableTypes.length == 0) {
        var name = this.getText();
        throw new Error('\'variableTypes\' of field variable ' +
            name + ' was an empty list');
    }
    return variableTypes;
};
Blockly.FieldVariable.dropdownCreate = function () {
    if (!this.variable_) {
        throw new Error('Tried to call dropdownCreate on a variable field with no' +
            ' variable selected.');
    }
    var variableModelList = [];
    var name = this.getText();
    var workspace = null;
    if (this.sourceBlock_) {
        workspace = this.sourceBlock_.workspace;
    }
    if (workspace) {
        var variableTypes = this.getVariableTypes_();
        var variableModelList = [];
        for (var i = 0; i < variableTypes.length; i++) {
            var variableType = variableTypes[i];
            var variables = workspace.getVariablesOfType(variableType);
            variableModelList = variableModelList.concat(variables);
            var potentialVarMap = workspace.getPotentialVariableMap();
            if (potentialVarMap) {
                var potentialVars = potentialVarMap.getVariablesOfType(variableType);
                variableModelList = variableModelList.concat(potentialVars);
            }
        }
    }
    variableModelList.sort(Blockly.VariableModel.compareByName);
    var options = [];
    for (var i = 0; i < variableModelList.length; i++) {
        options[i] = [variableModelList[i].name, variableModelList[i].getId()];
    }
    if (this.defaultType_ == Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE) {
        options.unshift([Blockly.Msg.NEW_BROADCAST_MESSAGE, Blockly.NEW_BROADCAST_MESSAGE_ID]);
    }
    else {
        if (this.defaultType_ == Blockly.LIST_VARIABLE_TYPE) {
            var renameText = Blockly.Msg.RENAME_LIST;
            var deleteText = Blockly.Msg.DELETE_LIST;
        }
        else {
            var renameText = Blockly.Msg.RENAME_VARIABLE;
            var deleteText = Blockly.Msg.DELETE_VARIABLE;
        }
        options.push([renameText, Blockly.RENAME_VARIABLE_ID]);
        if (deleteText) {
            options.push([
                deleteText.replace('%1', name),
                Blockly.DELETE_VARIABLE_ID
            ]);
        }
    }
    return options;
};
Blockly.FieldVariable.prototype.onItemSelected = function (menu, menuItem) {
    var id = menuItem.getValue();
    if (this.sourceBlock_ && this.sourceBlock_.workspace) {
        var workspace = this.sourceBlock_.workspace;
        if (id == Blockly.RENAME_VARIABLE_ID) {
            Blockly.Variables.renameVariable(workspace, this.variable_);
            return;
        }
        else if (id == Blockly.DELETE_VARIABLE_ID) {
            workspace.deleteVariableById(this.variable_.getId());
            return;
        }
        else if (id == Blockly.NEW_BROADCAST_MESSAGE_ID) {
            var thisField = this;
            var updateField = function (varId) {
                if (varId) {
                    thisField.setValue(varId);
                }
            };
            Blockly.Variables.createVariable(workspace, updateField, Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE);
            return;
        }
    }
    this.setValue(id);
};
Blockly.FieldVariable.prototype.referencesVariables = function () {
    return true;
};
Blockly.Field.register('field_variable', Blockly.FieldVariable);
'use strict';
goog.provide('Blockly.FieldVariableGetter');
goog.require('Blockly.Field');
Blockly.FieldVariableGetter = function (text, name, opt_varType) {
    this.size_ = new goog.math.Size(Blockly.BlockSvg.FIELD_WIDTH, Blockly.BlockSvg.FIELD_HEIGHT);
    this.text_ = text;
    this.maxDisplayLength = Blockly.BlockSvg.MAX_DISPLAY_LENGTH;
    this.name_ = name;
    this.variableType_ = opt_varType ? opt_varType : '';
};
goog.inherits(Blockly.FieldVariableGetter, Blockly.Field);
Blockly.FieldVariableGetter.fromJson = function (options) {
    var varname = Blockly.utils.replaceMessageReferences(options['text']);
    return new Blockly.FieldVariableGetter(varname, options['name'], options['class'], options['variableType']);
};
Blockly.FieldVariableGetter.prototype.EDITABLE = false;
Blockly.FieldVariableGetter.prototype.SERIALIZABLE = true;
Blockly.FieldVariableGetter.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    Blockly.FieldVariableGetter.superClass_.init.call(this);
    if (this.variable_) {
        return;
    }
    this.workspace_ = this.sourceBlock_.workspace;
    var variable = Blockly.Variables.getOrCreateVariablePackage(this.workspace_, null, this.text_, this.variableType_);
    this.setValue(variable.getId());
};
Blockly.FieldVariableGetter.prototype.getValue = function () {
    return this.variable_ ? this.variable_.getId() : '';
};
Blockly.FieldVariableGetter.prototype.getText = function () {
    return this.variable_ ? this.variable_.name : '';
};
Blockly.FieldVariableGetter.prototype.getVariable = function () {
    return this.variable_;
};
Blockly.FieldVariableGetter.prototype.setValue = function (id) {
    var workspace = this.sourceBlock_.workspace;
    var variable = Blockly.Variables.getVariable(workspace, id);
    if (!variable) {
        throw new Error('Variable id doesn\'t point to a real variable!  ID was ' +
            id);
    }
    if (this.sourceBlock_ && Blockly.Events.isEnabled()) {
        var oldValue = this.variable_ ? this.variable_.getId() : null;
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.sourceBlock_, 'field', this.name, oldValue, variable.getId()));
    }
    this.variable_ = variable;
    this.value_ = id;
    this.setText(variable.name);
};
Blockly.FieldVariableGetter.prototype.showEditor_ = function () {
};
Blockly.FieldVariableGetter.prototype.updateEditable = function () {
};
Blockly.FieldVariableGetter.prototype.referencesVariables = function () {
    return true;
};
Blockly.Field.register('field_variable_getter', Blockly.FieldVariableGetter);
'use strict';
goog.provide('Blockly.FieldVerticalSeparator');
goog.require('Blockly.Field');
goog.require('goog.dom');
goog.require('goog.math.Size');
Blockly.FieldVerticalSeparator = function () {
    this.sourceBlock_ = null;
    this.width_ = 1;
    this.height_ = Blockly.BlockSvg.ICON_SEPARATOR_HEIGHT;
    this.size_ = new goog.math.Size(this.width_, this.height_);
};
goog.inherits(Blockly.FieldVerticalSeparator, Blockly.Field);
Blockly.FieldVerticalSeparator.fromJson = function (_element) {
    return new Blockly.FieldVerticalSeparator();
};
Blockly.FieldVerticalSeparator.prototype.EDITABLE = false;
Blockly.FieldVerticalSeparator.prototype.init = function () {
    if (this.fieldGroup_) {
        return;
    }
    this.fieldGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    if (!this.visible_) {
        this.fieldGroup_.style.display = 'none';
    }
    this.lineElement_ = Blockly.utils.createSvgElement('line', {
        'stroke': this.sourceBlock_.getColourSecondary(),
        'stroke-linecap': 'round',
        'x1': 0,
        'y1': 0,
        'x2': 0,
        'y2': this.height_
    }, this.fieldGroup_);
    this.sourceBlock_.getSvgRoot().appendChild(this.fieldGroup_);
};
Blockly.FieldVerticalSeparator.prototype.setLineHeight = function (newHeight) {
    this.lineElement_.setAttribute('y2', newHeight);
};
Blockly.FieldVerticalSeparator.prototype.dispose = function () {
    goog.dom.removeNode(this.fieldGroup_);
    this.fieldGroup_ = null;
    this.lineElement_ = null;
};
Blockly.FieldVerticalSeparator.prototype.getValue = function () {
    return null;
};
Blockly.FieldVerticalSeparator.prototype.setValue = function (src) {
    return;
};
Blockly.FieldVerticalSeparator.prototype.setText = function (alt) {
    return;
};
Blockly.FieldVerticalSeparator.prototype.render_ = function () {
};
Blockly.FieldVerticalSeparator.prototype.updateWidth = function () {
};
Blockly.Field.register('field_vertical_separator', Blockly.FieldVerticalSeparator);
'use strict';
goog.provide('Blockly.Flyout');
goog.require('Blockly.Block');
goog.require('Blockly.Comment');
goog.require('Blockly.Events');
goog.require('Blockly.Events.BlockCreate');
goog.require('Blockly.Events.VarCreate');
goog.require('Blockly.FlyoutButton');
goog.require('Blockly.FlyoutExtensionCategoryHeader');
goog.require('Blockly.Gesture');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.Touch');
goog.require('Blockly.WorkspaceSvg');
goog.require('goog.dom');
goog.require('goog.events');
goog.require('goog.math.Rect');
goog.require('goog.userAgent');
Blockly.Flyout = function (workspaceOptions) {
    workspaceOptions.getMetrics = this.getMetrics_.bind(this);
    workspaceOptions.setMetrics = this.setMetrics_.bind(this);
    this.workspace_ = new Blockly.WorkspaceSvg(workspaceOptions);
    this.workspace_.isFlyout = true;
    var newBlock = this.workspace_.newBlock;
    this.workspace_.newBlock = function (type, id) {
        return newBlock.call(this, type, id || type);
    };
    this.RTL = !!workspaceOptions.RTL;
    this.horizontalLayout_ = workspaceOptions.horizontalLayout;
    this.toolboxPosition_ = workspaceOptions.toolboxPosition;
    this.eventWrappers_ = [];
    this.backgroundButtons_ = [];
    this.buttons_ = [];
    this.listeners_ = [];
    this.permanentlyDisabled_ = [];
    this.parentToolbox_ = null;
    this.scrollTarget = null;
    this.recycleBlocks_ = [];
};
Blockly.Flyout.prototype.autoClose = false;
Blockly.Flyout.prototype.isVisible_ = false;
Blockly.Flyout.prototype.containerVisible_ = true;
Blockly.Flyout.prototype.CORNER_RADIUS = 0;
Blockly.Flyout.prototype.MARGIN = 12;
Blockly.Flyout.prototype.GAP_X = Blockly.Flyout.prototype.MARGIN * 3;
Blockly.Flyout.prototype.GAP_Y = Blockly.Flyout.prototype.MARGIN;
Blockly.Flyout.prototype.SCROLLBAR_PADDING = 2;
Blockly.Flyout.prototype.width_ = 0;
Blockly.Flyout.prototype.height_ = 0;
Blockly.Flyout.prototype.contentWidth_ = 0;
Blockly.Flyout.prototype.contentHeight_ = 0;
Blockly.Flyout.prototype.verticalOffset_ = 0;
Blockly.Flyout.prototype.dragAngleRange_ = 70;
Blockly.Flyout.prototype.scrollAnimationFraction = 0.3;
Blockly.Flyout.prototype.recyclingEnabled_ = true;
Blockly.Flyout.prototype.createDom = function (tagName) {
    this.svgGroup_ = Blockly.utils.createSvgElement(tagName, { 'class': 'blocklyFlyout', 'style': 'display: none' }, null);
    this.svgBackground_ = Blockly.utils.createSvgElement('path', { 'class': 'blocklyFlyoutBackground' }, this.svgGroup_);
    this.svgGroup_.appendChild(this.workspace_.createDom());
    return this.svgGroup_;
};
Blockly.Flyout.prototype.init = function (targetWorkspace) {
    this.targetWorkspace_ = targetWorkspace;
    this.workspace_.targetWorkspace = targetWorkspace;
    this.scrollbar_ = new Blockly.Scrollbar(this.workspace_, this.horizontalLayout_, false, 'blocklyFlyoutScrollbar');
    this.position();
    Array.prototype.push.apply(this.eventWrappers_, Blockly.bindEventWithChecks_(this.svgGroup_, 'wheel', this, this.wheel_));
    Array.prototype.push.apply(this.eventWrappers_, Blockly.bindEventWithChecks_(this.svgGroup_, 'mousedown', this, this.onMouseDown_));
    this.workspace_.getGesture =
        this.targetWorkspace_.getGesture.bind(this.targetWorkspace_);
    this.workspace_.variableMap_ = this.targetWorkspace_.getVariableMap();
    this.workspace_.createPotentialVariableMap();
};
Blockly.Flyout.prototype.dispose = function () {
    this.hide();
    Blockly.unbindEvent_(this.eventWrappers_);
    if (this.scrollbar_) {
        this.scrollbar_.dispose();
        this.scrollbar_ = null;
    }
    if (this.workspace_) {
        this.workspace_.targetWorkspace = null;
        this.workspace_.dispose();
        this.workspace_ = null;
    }
    if (this.svgGroup_) {
        goog.dom.removeNode(this.svgGroup_);
        this.svgGroup_ = null;
    }
    this.parentToolbox_ = null;
    this.svgBackground_ = null;
    this.targetWorkspace_ = null;
};
Blockly.Flyout.prototype.setParentToolbox = function (toolbox) {
    this.parentToolbox_ = toolbox;
};
Blockly.Flyout.prototype.getWidth = function () {
    return this.DEFAULT_WIDTH;
};
Blockly.Flyout.prototype.getHeight = function () {
    return this.height_;
};
Blockly.Flyout.prototype.getWorkspace = function () {
    return this.workspace_;
};
Blockly.Flyout.prototype.isVisible = function () {
    return this.isVisible_;
};
Blockly.Flyout.prototype.setVisible = function (visible) {
    var visibilityChanged = (visible != this.isVisible());
    this.isVisible_ = visible;
    if (visibilityChanged) {
        this.updateDisplay_();
    }
};
Blockly.Flyout.prototype.setContainerVisible = function (visible) {
    var visibilityChanged = (visible != this.containerVisible_);
    this.containerVisible_ = visible;
    if (visibilityChanged) {
        this.updateDisplay_();
    }
};
Blockly.Flyout.prototype.updateDisplay_ = function () {
    var show = true;
    if (!this.containerVisible_) {
        show = false;
    }
    else {
        show = this.isVisible();
    }
    this.svgGroup_.style.display = show ? 'block' : 'none';
    this.scrollbar_.setContainerVisible(show);
};
Blockly.Flyout.prototype.hide = function () {
    if (!this.isVisible()) {
        return;
    }
    this.setVisible(false);
    for (var x = 0, listen; listen = this.listeners_[x]; x++) {
        Blockly.unbindEvent_(listen);
    }
    this.listeners_.length = 0;
    if (this.reflowWrapper_) {
        this.workspace_.removeChangeListener(this.reflowWrapper_);
        this.reflowWrapper_ = null;
    }
};
Blockly.Flyout.prototype.show = function (xmlList) {
    this.workspace_.setResizesEnabled(false);
    this.hide();
    this.clearOldBlocks_();
    this.setVisible(true);
    var contents = [];
    var gaps = [];
    this.permanentlyDisabled_.length = 0;
    for (var i = 0, xml; xml = xmlList[i]; i++) {
        if (typeof xml === 'string') {
            var fnToApply = this.workspace_.targetWorkspace.getToolboxCategoryCallback(xmlList[i]);
            var newList = fnToApply(this.workspace_.targetWorkspace);
            xmlList.splice.apply(xmlList, [i, 1].concat(newList));
            xml = xmlList[i];
        }
        if (xml.tagName) {
            var tagName = xml.tagName.toUpperCase();
            var default_gap = this.horizontalLayout_ ? this.GAP_X : this.GAP_Y;
            if (tagName == 'BLOCK') {
                var id = xml.getAttribute('id') || xml.getAttribute('type');
                var recycled = this.recycleBlocks_.findIndex(function (block) {
                    return block.id === id;
                });
                var curBlock;
                if (recycled > -1) {
                    curBlock = this.recycleBlocks_.splice(recycled, 1)[0];
                }
                else {
                    curBlock = Blockly.Xml.domToBlock(xml, this.workspace_);
                }
                if (curBlock.disabled) {
                    this.permanentlyDisabled_.push(curBlock);
                }
                contents.push({ type: 'block', block: curBlock });
                var gap = parseInt(xml.getAttribute('gap'), 10);
                gaps.push(isNaN(gap) ? default_gap : gap);
            }
            else if (xml.tagName.toUpperCase() == 'SEP') {
                var newGap = parseInt(xml.getAttribute('gap'), 10);
                if (!isNaN(newGap) && gaps.length > 0) {
                    gaps[gaps.length - 1] = newGap;
                }
                else {
                    gaps.push(default_gap);
                }
            }
            else if ((tagName == 'LABEL') && (xml.getAttribute('showStatusButton') == 'true')) {
                var curButton = new Blockly.FlyoutExtensionCategoryHeader(this.workspace_, this.targetWorkspace_, xml);
                contents.push({ type: 'button', button: curButton });
                gaps.push(default_gap);
            }
            else if (tagName == 'BUTTON' || tagName == 'LABEL') {
                var isLabel = tagName == 'LABEL';
                var curButton = new Blockly.FlyoutButton(this.workspace_, this.targetWorkspace_, xml, isLabel);
                contents.push({ type: 'button', button: curButton });
                gaps.push(default_gap);
            }
        }
    }
    this.emptyRecycleBlocks_();
    this.layout_(contents, gaps);
    var deselectAll = function () {
        var topBlocks = this.workspace_.getTopBlocks(false);
        for (var i = 0, block; block = topBlocks[i]; i++) {
            block.removeSelect();
        }
    };
    this.listeners_.push(Blockly.bindEvent_(this.svgBackground_, 'mouseover', this, deselectAll));
    this.workspace_.setResizesEnabled(true);
    this.reflow();
    this.position();
    this.reflowWrapper_ = this.reflow.bind(this);
    this.workspace_.addChangeListener(this.reflowWrapper_);
    this.recordCategoryScrollPositions_();
};
Blockly.Flyout.prototype.emptyRecycleBlocks_ = function () {
    var oldBlocks = this.recycleBlocks_;
    this.recycleBlocks_ = [];
    for (var i = 0; i < oldBlocks.length; i++) {
        oldBlocks[i].dispose(false, false);
    }
};
Blockly.Flyout.prototype.recordCategoryScrollPositions_ = function () {
    this.categoryScrollPositions = [];
    for (var i = 0; i < this.buttons_.length; i++) {
        if (this.buttons_[i].getIsCategoryLabel()) {
            var categoryLabel = this.buttons_[i];
            this.categoryScrollPositions.push({
                categoryName: categoryLabel.getText(),
                position: this.horizontalLayout_ ?
                    categoryLabel.getPosition().x : categoryLabel.getPosition().y
            });
        }
    }
    var numCategories = this.categoryScrollPositions.length;
    if (numCategories > 0) {
        for (var i = 0; i < numCategories - 1; i++) {
            var currentPos = this.categoryScrollPositions[i].position;
            var nextPos = this.categoryScrollPositions[i + 1].position;
            var length = nextPos - currentPos;
            this.categoryScrollPositions[i].length = length;
        }
        this.categoryScrollPositions[numCategories - 1].length = 0;
        for (var i = 0; i < numCategories; i++) {
            var category = this.parentToolbox_.getCategoryByIndex(i);
            if (category && category.id_) {
                this.categoryScrollPositions[i].categoryId = category.id_;
            }
        }
    }
};
Blockly.Flyout.prototype.selectCategoryByScrollPosition = function (pos) {
    if (this.scrollTarget) {
        return;
    }
    var workspacePos = Math.round(pos / this.workspace_.scale);
    for (var i = this.categoryScrollPositions.length - 1; i >= 0; i--) {
        if (workspacePos >= this.categoryScrollPositions[i].position) {
            this.parentToolbox_.selectCategoryById(this.categoryScrollPositions[i].categoryId);
            return;
        }
    }
};
Blockly.Flyout.prototype.stepScrollAnimation = function () {
    if (!this.scrollTarget) {
        return;
    }
    var scrollPos = this.horizontalLayout_ ?
        -this.workspace_.scrollX : -this.workspace_.scrollY;
    var diff = this.scrollTarget - scrollPos;
    if (Math.abs(diff) < 1) {
        this.scrollbar_.set(this.scrollTarget);
        this.scrollTarget = null;
        return;
    }
    this.scrollbar_.set(scrollPos + diff * this.scrollAnimationFraction);
    requestAnimationFrame(this.stepScrollAnimation.bind(this));
};
Blockly.Flyout.prototype.getScrollPos = function () {
    var pos = this.horizontalLayout_ ?
        -this.workspace_.scrollX : -this.workspace_.scrollY;
    return pos / this.workspace_.scale;
};
Blockly.Flyout.prototype.setScrollPos = function (pos) {
    this.scrollbar_.set(pos * this.workspace_.scale);
};
Blockly.Flyout.prototype.setRecyclingEnabled = function (recycle) {
    this.recyclingEnabled_ = recycle;
};
Blockly.Flyout.prototype.clearOldBlocks_ = function () {
    var oldBlocks = this.workspace_.getTopBlocks(false);
    for (var i = 0, block; block = oldBlocks[i]; i++) {
        if (block.workspace == this.workspace_) {
            if (this.recyclingEnabled_ &&
                Blockly.scratchBlocksUtils.blockIsRecyclable(block)) {
                this.recycleBlock_(block);
            }
            else {
                block.dispose(false, false);
            }
        }
    }
    for (var j = 0; j < this.backgroundButtons_.length; j++) {
        var rect = this.backgroundButtons_[j];
        if (rect)
            goog.dom.removeNode(rect);
    }
    this.backgroundButtons_.length = 0;
    for (var i = 0, button; button = this.buttons_[i]; i++) {
        button.dispose();
    }
    this.buttons_.length = 0;
    this.workspace_.getPotentialVariableMap().clear();
};
Blockly.Flyout.prototype.addBlockListeners_ = function (root, block, rect) {
    this.listeners_.push(Blockly.bindEventWithChecks_(root, 'mousedown', null, this.blockMouseDown_(block)));
    this.listeners_.push(Blockly.bindEventWithChecks_(rect, 'mousedown', null, this.blockMouseDown_(block)));
    this.listeners_.push(Blockly.bindEvent_(root, 'mouseover', block, block.addSelect));
    this.listeners_.push(Blockly.bindEvent_(root, 'mouseout', block, block.removeSelect));
    this.listeners_.push(Blockly.bindEvent_(rect, 'mouseover', block, block.addSelect));
    this.listeners_.push(Blockly.bindEvent_(rect, 'mouseout', block, block.removeSelect));
};
Blockly.Flyout.prototype.blockMouseDown_ = function (block) {
    var flyout = this;
    return function (e) {
        var gesture = flyout.targetWorkspace_.getGesture(e);
        if (gesture) {
            gesture.setStartBlock(block);
            gesture.handleFlyoutStart(e, flyout);
        }
    };
};
Blockly.Flyout.prototype.onMouseDown_ = function (e) {
    var gesture = this.targetWorkspace_.getGesture(e);
    if (gesture) {
        gesture.handleFlyoutStart(e, this);
    }
};
Blockly.Flyout.prototype.createBlock = function (originalBlock) {
    var newBlock = null;
    Blockly.Events.disable();
    var variablesBeforeCreation = this.targetWorkspace_.getAllVariables();
    this.targetWorkspace_.setResizesEnabled(false);
    try {
        newBlock = this.placeNewBlock_(originalBlock);
        Blockly.hideChaff();
    }
    finally {
        Blockly.Events.enable();
    }
    var newVariables = Blockly.Variables.getAddedVariables(this.targetWorkspace_, variablesBeforeCreation);
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.setGroup(true);
        Blockly.Events.fire(new Blockly.Events.Create(newBlock));
        for (var i = 0; i < newVariables.length; i++) {
            var thisVariable = newVariables[i];
            Blockly.Events.fire(new Blockly.Events.VarCreate(thisVariable));
        }
    }
    if (this.autoClose) {
        this.hide();
    }
    return newBlock;
};
Blockly.Flyout.prototype.reflow = function () {
    if (this.reflowWrapper_) {
        this.workspace_.removeChangeListener(this.reflowWrapper_);
    }
    var blocks = this.workspace_.getTopBlocks(false);
    this.reflowInternal_(blocks);
    if (this.reflowWrapper_) {
        this.workspace_.addChangeListener(this.reflowWrapper_);
    }
};
Blockly.Flyout.prototype.isScrollable = function () {
    return this.scrollbar_ ? this.scrollbar_.isVisible() : false;
};
Blockly.Flyout.prototype.placeNewBlock_ = function (oldBlock) {
    var targetWorkspace = this.targetWorkspace_;
    var svgRootOld = oldBlock.getSvgRoot();
    if (!svgRootOld) {
        throw 'oldBlock is not rendered.';
    }
    var xml = Blockly.Xml.blockToDom(oldBlock);
    targetWorkspace.setResizesEnabled(false);
    var block = Blockly.Xml.domToBlock(xml, targetWorkspace);
    var svgRootNew = block.getSvgRoot();
    if (!svgRootNew) {
        throw 'block is not rendered.';
    }
    var mainOffsetPixels = targetWorkspace.getOriginOffsetInPixels();
    var flyoutOffsetPixels = this.workspace_.getOriginOffsetInPixels();
    var oldBlockPosWs = oldBlock.getRelativeToSurfaceXY();
    var oldBlockPosPixels = oldBlockPosWs.scale(this.workspace_.scale);
    var oldBlockOffsetPixels = goog.math.Coordinate.sum(flyoutOffsetPixels, oldBlockPosPixels);
    var finalOffsetPixels = goog.math.Coordinate.difference(oldBlockOffsetPixels, mainOffsetPixels);
    var finalOffsetMainWs = finalOffsetPixels.scale(1 / targetWorkspace.scale);
    block.moveBy(finalOffsetMainWs.x, finalOffsetMainWs.y);
    return block;
};
Blockly.Flyout.prototype.recycleBlock_ = function (block) {
    var xy = block.getRelativeToSurfaceXY();
    block.moveBy(-xy.x, -xy.y);
    this.recycleBlocks_.push(block);
};
'use strict';
goog.provide('Blockly.VerticalFlyout');
goog.require('Blockly.Block');
goog.require('Blockly.Comment');
goog.require('Blockly.Events');
goog.require('Blockly.Flyout');
goog.require('Blockly.FlyoutButton');
goog.require('Blockly.utils');
goog.require('Blockly.WorkspaceSvg');
goog.require('goog.dom');
goog.require('goog.dom.animationFrame.polyfill');
goog.require('goog.events');
goog.require('goog.math.Rect');
goog.require('goog.userAgent');
Blockly.VerticalFlyout = function (workspaceOptions) {
    workspaceOptions.getMetrics = this.getMetrics_.bind(this);
    workspaceOptions.setMetrics = this.setMetrics_.bind(this);
    Blockly.VerticalFlyout.superClass_.constructor.call(this, workspaceOptions);
    this.horizontalLayout_ = false;
    this.checkboxes_ = [];
};
goog.inherits(Blockly.VerticalFlyout, Blockly.Flyout);
Blockly.VerticalFlyout.prototype.autoClose = false;
Blockly.VerticalFlyout.prototype.DEFAULT_WIDTH = 250;
Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE = 25;
Blockly.VerticalFlyout.prototype.CHECKBOX_TOUCH_PADDING = 12;
Blockly.VerticalFlyout.prototype.CHECKMARK_PATH =
    'M' + Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE / 4 +
        ' ' + Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE / 2 +
        'L' + 5 * Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE / 12 +
        ' ' + 2 * Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE / 3 +
        'L' + 3 * Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE / 4 +
        ' ' + Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE / 3;
Blockly.VerticalFlyout.prototype.CHECKBOX_CORNER_RADIUS = 5;
Blockly.VerticalFlyout.prototype.CHECKBOX_MARGIN = Blockly.Flyout.prototype.MARGIN;
Blockly.VerticalFlyout.prototype.CHECKBOX_SPACE_X =
    Blockly.VerticalFlyout.prototype.CHECKBOX_SIZE +
        2 * Blockly.VerticalFlyout.prototype.CHECKBOX_MARGIN;
Blockly.VerticalFlyout.prototype.init = function (targetWorkspace) {
    Blockly.VerticalFlyout.superClass_.init.call(this, targetWorkspace);
    this.workspace_.scale = targetWorkspace.scale;
};
Blockly.VerticalFlyout.prototype.createDom = function (tagName) {
    Blockly.VerticalFlyout.superClass_.createDom.call(this, tagName);
    this.defs_ = Blockly.utils.createSvgElement('defs', {}, this.svgGroup_);
    var clipPath = Blockly.utils.createSvgElement('clipPath', { 'id': 'blocklyBlockMenuClipPath' }, this.defs_);
    this.clipRect_ = Blockly.utils.createSvgElement('rect', {
        'id': 'blocklyBlockMenuClipRect',
        'height': '0',
        'width': '0',
        'y': '0',
        'x': '0'
    }, clipPath);
    this.workspace_.svgGroup_.setAttribute('clip-path', 'url(#blocklyBlockMenuClipPath)');
    return this.svgGroup_;
};
Blockly.VerticalFlyout.prototype.getContentBoundingBox_ = function () {
    var contentBounds = this.workspace_.getBlocksBoundingBox();
    var bounds = {
        xMin: contentBounds.x,
        yMin: contentBounds.y,
        xMax: contentBounds.x + contentBounds.width,
        yMax: contentBounds.y + contentBounds.height
    };
    for (var i = 0; i < this.buttons_.length; i++) {
        var button = this.buttons_[i];
        var buttonPosition = button.getPosition();
        if (buttonPosition.x < bounds.xMin) {
            bounds.xMin = buttonPosition.x;
        }
        if (buttonPosition.y < bounds.yMin) {
            bounds.yMin = buttonPosition.y;
        }
        if (buttonPosition.x + button.width > bounds.xMax) {
            bounds.xMax = buttonPosition.x + button.width;
        }
        if (buttonPosition.y + button.height > bounds.yMax) {
            bounds.yMax = buttonPosition.y + button.height;
        }
    }
    return {
        x: bounds.xMin,
        y: bounds.yMin,
        width: bounds.xMax - bounds.xMin,
        height: bounds.yMax - bounds.yMin,
    };
};
Blockly.VerticalFlyout.prototype.getMetrics_ = function () {
    if (!this.isVisible()) {
        return null;
    }
    var optionBox = this.getContentBoundingBox_();
    var absoluteTop = this.SCROLLBAR_PADDING;
    var absoluteLeft = 0;
    var viewHeight = this.height_ - 2 * this.SCROLLBAR_PADDING;
    var viewWidth = this.getWidth() - this.SCROLLBAR_PADDING;
    var contentHeight = optionBox.height * this.workspace_.scale;
    this.recordCategoryScrollPositions_();
    var bottomPadding = this.MARGIN;
    if (this.categoryScrollPositions.length > 0) {
        var lastLabel = this.categoryScrollPositions[this.categoryScrollPositions.length - 1];
        var lastPos = lastLabel.position * this.workspace_.scale;
        var lastCategoryHeight = contentHeight - lastPos;
        if (lastCategoryHeight < viewHeight) {
            bottomPadding = viewHeight - lastCategoryHeight;
        }
    }
    var metrics = {
        viewHeight: viewHeight,
        viewWidth: viewWidth,
        contentHeight: contentHeight + bottomPadding,
        contentWidth: optionBox.width * this.workspace_.scale + 2 * this.MARGIN,
        viewTop: -this.workspace_.scrollY + optionBox.y,
        viewLeft: -this.workspace_.scrollX,
        contentTop: optionBox.y,
        contentLeft: optionBox.x,
        absoluteTop: absoluteTop,
        absoluteLeft: absoluteLeft
    };
    return metrics;
};
Blockly.VerticalFlyout.prototype.setMetrics_ = function (xyRatio) {
    var metrics = this.getMetrics_();
    if (!metrics) {
        return;
    }
    if (goog.isNumber(xyRatio.y)) {
        this.workspace_.scrollY = -metrics.contentHeight * xyRatio.y;
    }
    this.workspace_.translate(this.workspace_.scrollX + metrics.absoluteLeft, this.workspace_.scrollY + metrics.absoluteTop);
    this.clipRect_.setAttribute('height', Math.max(0, metrics.viewHeight) + 'px');
    this.clipRect_.setAttribute('width', metrics.viewWidth + 'px');
    if (this.categoryScrollPositions) {
        this.selectCategoryByScrollPosition(-this.workspace_.scrollY);
    }
};
Blockly.VerticalFlyout.prototype.position = function () {
    if (!this.isVisible()) {
        return;
    }
    var targetWorkspaceMetrics = this.targetWorkspace_.getMetrics();
    if (!targetWorkspaceMetrics) {
        return;
    }
    this.width_ = this.getWidth();
    if (this.parentToolbox_) {
        var toolboxWidth = this.parentToolbox_.getWidth();
        var categoryWidth = toolboxWidth - this.width_;
        var x = this.toolboxPosition_ == Blockly.TOOLBOX_AT_RIGHT ?
            targetWorkspaceMetrics.viewWidth : categoryWidth;
        var y = 0;
    }
    else {
        var x = this.toolboxPosition_ == Blockly.TOOLBOX_AT_RIGHT ?
            targetWorkspaceMetrics.viewWidth - this.width_ : 0;
        var y = 0;
    }
    this.height_ = Math.max(0, targetWorkspaceMetrics.viewHeight - y);
    this.setBackgroundPath_(this.width_, this.height_);
    this.svgGroup_.setAttribute("width", this.width_);
    this.svgGroup_.setAttribute("height", this.height_);
    var transform = 'translate(' + x + 'px,' + y + 'px)';
    Blockly.utils.setCssTransform(this.svgGroup_, transform);
    if (this.scrollbar_) {
        this.scrollbar_.setOrigin(x, y);
        this.scrollbar_.resize();
    }
    this.svgGroup_.style.opacity = 1;
};
Blockly.VerticalFlyout.prototype.setBackgroundPath_ = function (width, height) {
    var atRight = this.toolboxPosition_ == Blockly.TOOLBOX_AT_RIGHT;
    var path = ['M ' + 0 + ',0'];
    path.push('h', width);
    path.push('a', this.CORNER_RADIUS, this.CORNER_RADIUS, 0, 0, atRight ? 0 : 1, atRight ? -this.CORNER_RADIUS : this.CORNER_RADIUS, this.CORNER_RADIUS);
    path.push('v', Math.max(0, height - this.CORNER_RADIUS * 2));
    path.push('a', this.CORNER_RADIUS, this.CORNER_RADIUS, 0, 0, atRight ? 0 : 1, atRight ? this.CORNER_RADIUS : -this.CORNER_RADIUS, this.CORNER_RADIUS);
    path.push('h', -width);
    path.push('z');
    this.svgBackground_.setAttribute('d', path.join(' '));
};
Blockly.VerticalFlyout.prototype.scrollToStart = function () {
    this.scrollbar_.set(0);
};
Blockly.VerticalFlyout.prototype.scrollTo = function (pos) {
    this.scrollTarget = pos * this.workspace_.scale;
    var metrics = this.workspace_.getMetrics();
    var contentHeight = metrics.contentHeight;
    var viewHeight = metrics.viewHeight;
    this.scrollTarget = Math.min(this.scrollTarget, contentHeight - viewHeight);
    this.stepScrollAnimation();
};
Blockly.VerticalFlyout.prototype.wheel_ = function (e) {
    this.scrollTarget = null;
    var delta = e.deltaY;
    if (delta) {
        if (goog.userAgent.GECKO && (e.deltaMode === 1)) {
            delta *= 10;
        }
        var metrics = this.getMetrics_();
        var pos = (metrics.viewTop - metrics.contentTop) + delta;
        var limit = metrics.contentHeight - metrics.viewHeight;
        pos = Math.min(pos, limit);
        pos = Math.max(pos, 0);
        this.scrollbar_.set(pos);
        Blockly.WidgetDiv.hide(true);
        Blockly.DropDownDiv.hideWithoutAnimation();
    }
    e.preventDefault();
    e.stopPropagation();
};
Blockly.VerticalFlyout.prototype.clearOldBlocks_ = function () {
    Blockly.VerticalFlyout.superClass_.clearOldBlocks_.call(this);
    for (var i = 0, elem; elem = this.checkboxes_[i]; i++) {
        elem.block.flyoutCheckbox = null;
        goog.dom.removeNode(elem.svgRoot);
    }
    this.checkboxes_ = [];
};
Blockly.VerticalFlyout.prototype.addBlockListeners_ = function (root, block, rect) {
    Blockly.VerticalFlyout.superClass_.addBlockListeners_.call(this, root, block, rect);
    if (block.flyoutCheckbox) {
        this.listeners_.push(Blockly.bindEvent_(block.flyoutCheckbox.svgRoot, 'mousedown', null, this.checkboxClicked_(block.flyoutCheckbox)));
    }
};
Blockly.VerticalFlyout.prototype.layout_ = function (contents, gaps) {
    var margin = this.MARGIN;
    var flyoutWidth = this.getWidth() / this.workspace_.scale;
    var cursorX = margin;
    var cursorY = margin;
    for (var i = 0, item; item = contents[i]; i++) {
        if (item.type == 'block') {
            var block = item.block;
            var allBlocks = block.getDescendants(false);
            for (var j = 0, child; child = allBlocks[j]; j++) {
                child.isInFlyout = true;
            }
            var root = block.getSvgRoot();
            var blockHW = block.getHeightWidth();
            var oldX = block.getRelativeToSurfaceXY().x;
            var newX = flyoutWidth - this.MARGIN;
            var moveX = this.RTL ? newX - oldX : margin;
            if (block.hasCheckboxInFlyout()) {
                this.createCheckbox_(block, cursorX, cursorY, blockHW);
                if (this.RTL) {
                    moveX -= (this.CHECKBOX_SIZE + this.CHECKBOX_MARGIN);
                }
                else {
                    moveX += this.CHECKBOX_SIZE + this.CHECKBOX_MARGIN;
                }
            }
            block.moveBy(moveX, cursorY + (block.startHat_ ? Blockly.BlockSvg.START_HAT_HEIGHT : 0));
            var rect = this.createRect_(block, this.RTL ? moveX - blockHW.width : moveX, cursorY, blockHW, i);
            this.addBlockListeners_(root, block, rect);
            cursorY += blockHW.height + gaps[i] + (block.startHat_ ? Blockly.BlockSvg.START_HAT_HEIGHT : 0);
        }
        else if (item.type == 'button') {
            var button = item.button;
            var buttonSvg = button.createDom();
            if (this.RTL) {
                button.moveTo(flyoutWidth - this.MARGIN - button.width, cursorY);
            }
            else {
                button.moveTo(cursorX, cursorY);
            }
            button.show();
            this.listeners_.push(Blockly.bindEventWithChecks_(buttonSvg, 'mousedown', this, this.onMouseDown_));
            this.buttons_.push(button);
            cursorY += button.height + gaps[i];
        }
    }
};
Blockly.VerticalFlyout.prototype.createRect_ = function (block, x, y, blockHW, index) {
    var rect = Blockly.utils.createSvgElement('rect', {
        'fill-opacity': 0,
        'x': x,
        'y': y,
        'height': blockHW.height,
        'width': blockHW.width
    }, null);
    rect.tooltip = block;
    Blockly.Tooltip.bindMouseEvents(rect);
    this.workspace_.getCanvas().insertBefore(rect, block.getSvgRoot());
    block.flyoutRect_ = rect;
    this.backgroundButtons_[index] = rect;
    return rect;
};
Blockly.VerticalFlyout.prototype.createCheckbox_ = function (block, cursorX, cursorY, blockHW) {
    var checkboxState = Blockly.VerticalFlyout.getCheckboxState(block.id);
    var svgRoot = block.getSvgRoot();
    var extraSpace = this.CHECKBOX_SIZE + this.CHECKBOX_MARGIN;
    var width = this.RTL ? this.getWidth() / this.workspace_.scale - extraSpace : cursorX;
    var height = cursorY + blockHW.height / 2 - this.CHECKBOX_SIZE / 2;
    var touchMargin = this.CHECKBOX_TOUCH_PADDING;
    var checkboxGroup = Blockly.utils.createSvgElement('g', {
        'transform': 'translate(' + width + ', ' + height + ')'
    }, null);
    Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyFlyoutCheckbox',
        'height': this.CHECKBOX_SIZE,
        'width': this.CHECKBOX_SIZE,
        'rx': this.CHECKBOX_CORNER_RADIUS,
        'ry': this.CHECKBOX_CORNER_RADIUS
    }, checkboxGroup);
    Blockly.utils.createSvgElement('path', {
        'class': 'blocklyFlyoutCheckboxPath',
        'd': this.CHECKMARK_PATH
    }, checkboxGroup);
    Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyTouchTargetBackground',
        'x': -touchMargin + 'px',
        'y': -touchMargin + 'px',
        'height': this.CHECKBOX_SIZE + 2 * touchMargin,
        'width': this.CHECKBOX_SIZE + 2 * touchMargin,
    }, checkboxGroup);
    var checkboxObj = { svgRoot: checkboxGroup, clicked: checkboxState, block: block };
    if (checkboxState) {
        Blockly.utils.addClass((checkboxObj.svgRoot), 'checked');
    }
    block.flyoutCheckbox = checkboxObj;
    this.workspace_.getCanvas().insertBefore(checkboxGroup, svgRoot);
    this.checkboxes_.push(checkboxObj);
};
Blockly.VerticalFlyout.prototype.checkboxClicked_ = function (checkboxObj) {
    return function (e) {
        this.setCheckboxState(checkboxObj.block.id, !checkboxObj.clicked);
        e.stopPropagation();
        e.preventDefault();
    }.bind(this);
};
Blockly.VerticalFlyout.prototype.setCheckboxState = function (blockId, value) {
    for (var i = 0; i < this.checkboxes_.length; i++) {
        var checkboxObj = this.checkboxes_[i];
        if (checkboxObj.block.id === blockId) {
            if (checkboxObj.clicked === value)
                return;
            var oldValue = checkboxObj.clicked;
            checkboxObj.clicked = value;
            if (checkboxObj.clicked) {
                Blockly.utils.addClass((checkboxObj.svgRoot), 'checked');
            }
            else {
                Blockly.utils.removeClass((checkboxObj.svgRoot), 'checked');
            }
            Blockly.Events.fire(new Blockly.Events.Change(checkboxObj.block, 'checkbox', null, oldValue, value));
            return;
        }
    }
};
Blockly.VerticalFlyout.prototype.isDragTowardWorkspace = function (currentDragDeltaXY) {
    var dx = currentDragDeltaXY.x;
    var dy = currentDragDeltaXY.y;
    var dragDirection = Math.atan2(dy, dx) / Math.PI * 180;
    var draggingTowardWorkspace = false;
    var range = this.dragAngleRange_;
    if (this.toolboxPosition_ == Blockly.TOOLBOX_AT_LEFT) {
        if (dragDirection < range && dragDirection > -range) {
            draggingTowardWorkspace = true;
        }
    }
    else {
        if (dragDirection < -180 + range || dragDirection > 180 - range) {
            draggingTowardWorkspace = true;
        }
    }
    return draggingTowardWorkspace;
};
Blockly.VerticalFlyout.prototype.getClientRect = function () {
    if (!this.svgGroup_) {
        return null;
    }
    var flyoutRect = this.svgGroup_.getBoundingClientRect();
    var BIG_NUM = 1000000000;
    var x = flyoutRect.left;
    var y = flyoutRect.top;
    var width = flyoutRect.width;
    var height = flyoutRect.height;
    if (this.toolboxPosition_ == Blockly.TOOLBOX_AT_LEFT) {
        return new goog.math.Rect(x - BIG_NUM, y, BIG_NUM + width, height);
    }
    else {
        return new goog.math.Rect(x, y, BIG_NUM + width, height);
    }
};
Blockly.VerticalFlyout.prototype.reflowInternal_ = function () {
    return;
};
Blockly.VerticalFlyout.getCheckboxState = function () {
    return false;
};
'use strict';
goog.provide('Blockly.FlyoutButton');
goog.require('goog.dom');
goog.require('goog.math.Coordinate');
Blockly.FlyoutButton = function (workspace, targetWorkspace, xml, isLabel) {
    this.init(workspace, targetWorkspace, xml, isLabel);
    this.callback_ = null;
    var callbackKey = xml.getAttribute('callbackKey');
    if (this.isLabel_ && callbackKey) {
        console.warn('Labels should not have callbacks. Label text: ' + this.text_);
    }
    else if (!this.isLabel_ &&
        !(callbackKey && targetWorkspace.getButtonCallback(callbackKey))) {
        console.warn('Buttons should have callbacks. Button text: ' + this.text_);
    }
    else {
        this.callback_ = targetWorkspace.getButtonCallback(callbackKey);
    }
};
Blockly.FlyoutButton.MARGIN = 40;
Blockly.FlyoutButton.prototype.width = 0;
Blockly.FlyoutButton.prototype.height = 40;
Blockly.FlyoutButton.prototype.onMouseUpWrapper_ = null;
Blockly.FlyoutButton.prototype.init = function (workspace, targetWorkspace, xml, isLabel) {
    this.workspace_ = workspace;
    this.targetWorkspace_ = targetWorkspace;
    this.text_ = xml.getAttribute('text');
    this.position_ = new goog.math.Coordinate(0, 0);
    this.isLabel_ = isLabel;
    this.isCategoryLabel_ = xml.getAttribute('category-label') === 'true';
    this.cssClass_ = xml.getAttribute('web-class') || null;
};
Blockly.FlyoutButton.prototype.createDom = function () {
    var cssClass = this.isLabel_ ? 'blocklyFlyoutLabel' : 'blocklyFlyoutButton';
    if (this.cssClass_) {
        cssClass += ' ' + this.cssClass_;
    }
    this.svgGroup_ = Blockly.utils.createSvgElement('g', { 'class': cssClass }, this.workspace_.getCanvas());
    this.addTextSvg(this.isLabel_);
    this.mouseUpWrapper_ = Blockly.bindEventWithChecks_(this.svgGroup_, 'mouseup', this, this.onMouseUp_);
    return this.svgGroup_;
};
Blockly.FlyoutButton.prototype.addTextSvg = function (isLabel) {
    if (!isLabel) {
        var shadow = Blockly.utils.createSvgElement('rect', {
            'class': 'blocklyFlyoutButtonShadow',
            'rx': 4,
            'ry': 4,
            'x': 1,
            'y': 1
        }, this.svgGroup_);
    }
    var rect = Blockly.utils.createSvgElement('rect', {
        'class': isLabel ?
            'blocklyFlyoutLabelBackground' : 'blocklyFlyoutButtonBackground',
        'rx': 4, 'ry': 4
    }, this.svgGroup_);
    var svgText = Blockly.utils.createSvgElement('text', {
        'class': isLabel ? 'blocklyFlyoutLabelText' : 'blocklyText',
        'x': 0,
        'y': 0,
        'text-anchor': 'middle'
    }, this.svgGroup_);
    svgText.textContent = Blockly.utils.replaceMessageReferences(this.text_);
    this.width = Blockly.Field.getCachedWidth(svgText);
    if (!isLabel) {
        this.width += 2 * Blockly.FlyoutButton.MARGIN;
        shadow.setAttribute('width', this.width);
        shadow.setAttribute('height', this.height);
    }
    rect.setAttribute('width', this.width);
    rect.setAttribute('height', this.height);
    svgText.setAttribute('text-anchor', 'middle');
    svgText.setAttribute('dominant-baseline', 'central');
    svgText.setAttribute('dy', goog.userAgent.EDGE_OR_IE ?
        Blockly.Field.IE_TEXT_OFFSET : '0');
    svgText.setAttribute('x', this.width / 2);
    svgText.setAttribute('y', this.height / 2);
};
Blockly.FlyoutButton.prototype.show = function () {
    this.updateTransform_();
    this.svgGroup_.setAttribute('display', 'block');
};
Blockly.FlyoutButton.prototype.updateTransform_ = function () {
    this.svgGroup_.setAttribute('transform', 'translate(' + this.position_.x + ',' + this.position_.y + ')');
};
Blockly.FlyoutButton.prototype.moveTo = function (x, y) {
    this.position_.x = x;
    this.position_.y = y;
    this.updateTransform_();
};
Blockly.FlyoutButton.prototype.getTargetWorkspace = function () {
    return this.targetWorkspace_;
};
Blockly.FlyoutButton.prototype.getIsCategoryLabel = function () {
    return this.isCategoryLabel_;
};
Blockly.FlyoutButton.prototype.getText = function () {
    return this.text_;
};
Blockly.FlyoutButton.prototype.getPosition = function () {
    return this.position_;
};
Blockly.FlyoutButton.prototype.dispose = function () {
    if (this.onMouseUpWrapper_) {
        Blockly.unbindEvent_(this.onMouseUpWrapper_);
    }
    if (this.svgGroup_) {
        goog.dom.removeNode(this.svgGroup_);
        this.svgGroup_ = null;
    }
    this.workspace_ = null;
    this.targetWorkspace_ = null;
};
Blockly.FlyoutButton.prototype.onMouseUp_ = function (e) {
    var gesture = this.targetWorkspace_.getGesture(e);
    if (gesture) {
        if (gesture.isDragging()) {
            return;
        }
        gesture.cancel();
    }
    if (this.callback_) {
        this.callback_(this);
    }
};
'use strict';
goog.provide('Blockly.FlyoutExtensionCategoryHeader');
goog.require('Blockly.FlyoutButton');
Blockly.FlyoutExtensionCategoryHeader = function (workspace, targetWorkspace, xml) {
    this.init(workspace, targetWorkspace, xml, false);
    this.flyoutWidth_ = this.targetWorkspace_.getFlyout().getWidth();
    this.extensionId = xml.getAttribute('id');
    this.isCategoryLabel_ = true;
};
goog.inherits(Blockly.FlyoutExtensionCategoryHeader, Blockly.FlyoutButton);
Blockly.FlyoutExtensionCategoryHeader.prototype.createDom = function () {
    var cssClass = 'blocklyFlyoutLabel';
    this.svgGroup_ = Blockly.utils.createSvgElement('g', { 'class': cssClass }, this.workspace_.getCanvas());
    this.addTextSvg(true);
    this.refreshStatus();
    var statusButtonWidth = 30;
    var marginX = 20;
    var marginY = 5;
    var touchPadding = 16;
    var statusButtonX = this.workspace_.RTL ? (marginX - this.flyoutWidth_ + statusButtonWidth) :
        (this.flyoutWidth_ - statusButtonWidth - marginX) / this.workspace_.scale;
    if (this.imageSrc_) {
        this.imageElement_ = Blockly.utils.createSvgElement('image', {
            'class': 'blocklyFlyoutButton',
            'height': statusButtonWidth + 'px',
            'width': statusButtonWidth + 'px',
            'x': statusButtonX + 'px',
            'y': marginY + 'px'
        }, this.svgGroup_);
        this.imageElementBackground_ = Blockly.utils.createSvgElement('rect', {
            'class': 'blocklyTouchTargetBackground',
            'height': statusButtonWidth + 2 * touchPadding + 'px',
            'width': statusButtonWidth + 2 * touchPadding + 'px',
            'x': (statusButtonX - touchPadding) + 'px',
            'y': (marginY - touchPadding) + 'px'
        }, this.svgGroup_);
        this.setImageSrc(this.imageSrc_);
    }
    this.callback_ = Blockly.statusButtonCallback.bind(this, this.extensionId);
    this.mouseUpWrapper_ = Blockly.bindEventWithChecks_(this.imageElementBackground_, 'mouseup', this, this.onMouseUp_);
    return this.svgGroup_;
};
Blockly.FlyoutExtensionCategoryHeader.prototype.refreshStatus = function () {
    var status = Blockly.FlyoutExtensionCategoryHeader.getExtensionState(this.extensionId);
    var basePath = Blockly.mainWorkspace.options.pathToMedia;
    if (status == Blockly.StatusButtonState.READY) {
        this.setImageSrc(basePath + 'status-ready.svg');
    }
    if (status == Blockly.StatusButtonState.NOT_READY) {
        this.setImageSrc(basePath + 'status-not-ready.svg');
    }
};
Blockly.FlyoutExtensionCategoryHeader.prototype.setImageSrc = function (src) {
    if (src === null) {
        return;
    }
    this.imageSrc_ = src;
    if (this.imageElement_) {
        this.imageElement_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', this.imageSrc_ || '');
    }
};
Blockly.FlyoutExtensionCategoryHeader.getExtensionState = function () {
    return Blockly.StatusButtonState.NOT_READY;
};
'use strict';
goog.provide('Blockly.Generator');
goog.require('Blockly.Block');
goog.require('goog.asserts');
Blockly.Generator = function (name) {
    this.name_ = name;
    this.FUNCTION_NAME_PLACEHOLDER_REGEXP_ =
        new RegExp(this.FUNCTION_NAME_PLACEHOLDER_, 'g');
};
Blockly.Generator.NAME_TYPE = 'generated_function';
Blockly.Generator.prototype.INFINITE_LOOP_TRAP = null;
Blockly.Generator.prototype.STATEMENT_PREFIX = null;
Blockly.Generator.prototype.INDENT = '  ';
Blockly.Generator.prototype.COMMENT_WRAP = 60;
Blockly.Generator.prototype.ORDER_OVERRIDES = [];
Blockly.Generator.prototype.workspaceToCode = function (workspace) {
    if (!workspace) {
        console.warn('No workspace specified in workspaceToCode call.  Guessing.');
        workspace = Blockly.getMainWorkspace();
    }
    var code = [];
    this.init(workspace);
    var blocks = workspace.getTopBlocks(true);
    for (var x = 0, block; block = blocks[x]; x++) {
        var line = this.blockToCode(block);
        if (goog.isArray(line)) {
            line = line[0];
        }
        if (line) {
            if (block.outputConnection && this.scrubNakedValue) {
                line = this.scrubNakedValue(line);
            }
            code.push(line);
        }
    }
    code = code.join('\n');
    code = this.finish(code);
    code = code.replace(/^\s+\n/, '');
    code = code.replace(/\n\s+$/, '\n');
    code = code.replace(/[ \t]+\n/g, '\n');
    return code;
};
Blockly.Generator.prototype.prefixLines = function (text, prefix) {
    return prefix + text.replace(/(?!\n$)\n/g, '\n' + prefix);
};
Blockly.Generator.prototype.allNestedComments = function (block) {
    var comments = [];
    var blocks = block.getDescendants(true);
    for (var i = 0; i < blocks.length; i++) {
        var comment = blocks[i].getCommentText();
        if (comment) {
            comments.push(comment);
        }
    }
    if (comments.length) {
        comments.push('');
    }
    return comments.join('\n');
};
Blockly.Generator.prototype.blockToCode = function (block) {
    if (!block) {
        return '';
    }
    if (block.disabled) {
        return this.blockToCode(block.getNextBlock());
    }
    var func = this[block.type];
    if (!func && Blockly.Generator.getDynamicFunc) {
        func = Blockly.Generator.getDynamicFunc(block.type);
    }
    goog.asserts.assertFunction(func, 'Language "%s" does not know how to generate code for block type "%s".', this.name_, block.type);
    var code = func.call(block, block);
    if (goog.isArray(code)) {
        goog.asserts.assert(block.outputConnection, 'Expecting string from statement block "%s".', block.type);
        return [this.scrub_(block, code[0]), code[1]];
    }
    else if (goog.isString(code)) {
        var id = block.id.replace(/\$/g, '$$$$');
        if (this.STATEMENT_PREFIX) {
            code = this.STATEMENT_PREFIX.replace(/%1/g, '\'' + id + '\'') +
                code;
        }
        return this.scrub_(block, code);
    }
    else if (code === null) {
        return '';
    }
    else {
        goog.asserts.fail('Invalid code generated: %s', code);
    }
};
Blockly.Generator.prototype.valueToCode = function (block, name, outerOrder) {
    if (isNaN(outerOrder)) {
        goog.asserts.fail('Expecting valid order from block "%s".', block.type);
    }
    var targetBlock = block.getInputTargetBlock(name);
    if (!targetBlock) {
        return '';
    }
    var tuple = this.blockToCode(targetBlock);
    if (tuple === '') {
        return '';
    }
    goog.asserts.assertArray(tuple, 'Expecting tuple from value block "%s".', targetBlock.type);
    var code = tuple[0];
    var innerOrder = tuple[1];
    if (isNaN(innerOrder)) {
        goog.asserts.fail('Expecting valid order from value block "%s".', targetBlock.type);
    }
    if (!code) {
        return '';
    }
    var parensNeeded = false;
    var outerOrderClass = Math.floor(outerOrder);
    var innerOrderClass = Math.floor(innerOrder);
    if (outerOrderClass <= innerOrderClass) {
        if (outerOrderClass == innerOrderClass &&
            (outerOrderClass == 0 || outerOrderClass == 99)) {
        }
        else {
            parensNeeded = true;
            for (var i = 0; i < this.ORDER_OVERRIDES.length; i++) {
                if (this.ORDER_OVERRIDES[i][0] == outerOrder &&
                    this.ORDER_OVERRIDES[i][1] == innerOrder) {
                    parensNeeded = false;
                    break;
                }
            }
        }
    }
    if (parensNeeded) {
        code = '(' + code + ')';
    }
    return code;
};
Blockly.Generator.prototype.statementToCode = function (block, name) {
    var targetBlock = block.getInputTargetBlock(name);
    var code = this.blockToCode(targetBlock);
    goog.asserts.assertString(code, 'Expecting code from statement block "%s".', targetBlock && targetBlock.type);
    if (code) {
        code = this.prefixLines((code), this.INDENT);
    }
    return code;
};
Blockly.Generator.prototype.addLoopTrap = function (branch, id) {
    id = id.replace(/\$/g, '$$$$');
    if (this.INFINITE_LOOP_TRAP) {
        branch = this.INFINITE_LOOP_TRAP.replace(/%1/g, '\'' + id + '\'') + branch;
    }
    if (this.STATEMENT_PREFIX) {
        branch += this.prefixLines(this.STATEMENT_PREFIX.replace(/%1/g, '\'' + id + '\''), this.INDENT);
    }
    return branch;
};
Blockly.Generator.prototype.RESERVED_WORDS_ = '';
Blockly.Generator.prototype.addReservedWords = function (words) {
    this.RESERVED_WORDS_ += words + ',';
};
Blockly.Generator.prototype.FUNCTION_NAME_PLACEHOLDER_ = '{leCUI8hutHZI4480Dc}';
Blockly.Generator.prototype.provideFunction_ = function (desiredName, code) {
    if (!this.definitions_[desiredName]) {
        var functionName = this.variableDB_.getDistinctName(desiredName, Blockly.Procedures.NAME_TYPE);
        this.functionNames_[desiredName] = functionName;
        var codeText = code.join('\n').replace(this.FUNCTION_NAME_PLACEHOLDER_REGEXP_, functionName);
        var oldCodeText;
        while (oldCodeText != codeText) {
            oldCodeText = codeText;
            codeText = codeText.replace(/^(( {2})*) {2}/gm, '$1\0');
        }
        codeText = codeText.replace(/\0/g, this.INDENT);
        this.definitions_[desiredName] = codeText;
    }
    return this.functionNames_[desiredName];
};
Blockly.Generator.prototype.init = function (_workspace) {
};
Blockly.Generator.prototype.scrub_ = function (_block, code) {
    return code;
};
Blockly.Generator.prototype.finish = function (code) {
    return code;
};
Blockly.Generator.prototype.scrubNakedValue = function (line) {
    return line;
};
'use strict';
goog.provide('Blockly.Gesture');
goog.require('Blockly.BlockAnimations');
goog.require('Blockly.BlockDragger');
goog.require('Blockly.BubbleDragger');
goog.require('Blockly.constants');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.FlyoutDragger');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.Tooltip');
goog.require('Blockly.Touch');
goog.require('Blockly.WorkspaceDragger');
goog.require('goog.asserts');
goog.require('goog.math.Coordinate');
Blockly.Gesture = function (e, creatorWorkspace) {
    this.mouseDownXY_ = null;
    this.currentDragDeltaXY_ = null;
    this.startBubble_ = null;
    this.startField_ = null;
    this.startBlock_ = null;
    this.targetBlock_ = null;
    this.startWorkspace_ = null;
    this.creatorWorkspace_ = creatorWorkspace;
    this.hasExceededDragRadius_ = false;
    this.isDraggingWorkspace_ = false;
    this.isDraggingBlock_ = false;
    this.isDraggingBubble_ = false;
    this.mostRecentEvent_ = e;
    this.onMoveWrapper_ = null;
    this.onUpWrapper_ = null;
    this.bubbleDragger_ = null;
    this.blockDragger_ = null;
    this.workspaceDragger_ = null;
    this.flyout_ = null;
    this.calledUpdateIsDragging_ = false;
    this.hasStarted_ = false;
    this.isEnding_ = false;
    this.shouldDuplicateOnDrag_ = false;
};
Blockly.Gesture.prototype.dispose = function () {
    Blockly.Touch.clearTouchIdentifier();
    Blockly.Tooltip.unblock();
    this.creatorWorkspace_.clearGesture();
    if (this.onMoveWrapper_) {
        Blockly.unbindEvent_(this.onMoveWrapper_);
    }
    if (this.onUpWrapper_) {
        Blockly.unbindEvent_(this.onUpWrapper_);
    }
    this.startField_ = null;
    this.startBlock_ = null;
    this.targetBlock_ = null;
    this.startWorkspace_ = null;
    this.flyout_ = null;
    if (this.blockDragger_) {
        this.blockDragger_.dispose();
        this.blockDragger_ = null;
    }
    if (this.workspaceDragger_) {
        this.workspaceDragger_.dispose();
        this.workspaceDragger_ = null;
    }
    if (this.bubbleDragger_) {
        this.bubbleDragger_.dispose();
        this.bubbleDragger_ = null;
    }
};
Blockly.Gesture.prototype.updateFromEvent_ = function (e) {
    var currentXY = new goog.math.Coordinate(e.clientX, e.clientY);
    var changed = this.updateDragDelta_(currentXY);
    if (changed) {
        this.updateIsDragging_();
        Blockly.longStop_();
    }
    this.mostRecentEvent_ = e;
};
Blockly.Gesture.prototype.updateDragDelta_ = function (currentXY) {
    this.currentDragDeltaXY_ = goog.math.Coordinate.difference(currentXY, this.mouseDownXY_);
    if (!this.hasExceededDragRadius_) {
        var currentDragDelta = goog.math.Coordinate.magnitude(this.currentDragDeltaXY_);
        var limitRadius = this.flyout_ ? Blockly.FLYOUT_DRAG_RADIUS :
            Blockly.DRAG_RADIUS;
        this.hasExceededDragRadius_ = currentDragDelta > limitRadius;
        return this.hasExceededDragRadius_;
    }
    return false;
};
Blockly.Gesture.prototype.updateIsDraggingFromFlyout_ = function () {
    if (this.targetBlock_.disabled) {
        return false;
    }
    if (!this.flyout_.isScrollable() ||
        this.flyout_.isDragTowardWorkspace(this.currentDragDeltaXY_)) {
        this.startWorkspace_ = this.flyout_.targetWorkspace_;
        this.startWorkspace_.updateScreenCalculationsIfScrolled();
        if (!Blockly.Events.getGroup()) {
            Blockly.Events.setGroup(true);
        }
        this.startBlock_ = null;
        this.targetBlock_ = this.flyout_.createBlock(this.targetBlock_);
        this.targetBlock_.select();
        return true;
    }
    return false;
};
Blockly.Gesture.prototype.updateIsDraggingBubble_ = function () {
    if (!this.startBubble_) {
        return false;
    }
    this.isDraggingBubble_ = true;
    this.startDraggingBubble_();
    return true;
};
Blockly.Gesture.prototype.updateIsDraggingBlock_ = function () {
    if (!this.targetBlock_) {
        return false;
    }
    if (this.flyout_) {
        this.isDraggingBlock_ = this.updateIsDraggingFromFlyout_();
    }
    else if (this.targetBlock_.isMovable() || this.shouldDuplicateOnDrag_) {
        this.isDraggingBlock_ = true;
    }
    if (this.isDraggingBlock_) {
        this.startDraggingBlock_();
        return true;
    }
    return false;
};
Blockly.Gesture.prototype.updateIsDraggingWorkspace_ = function () {
    var wsMovable = this.flyout_ ? this.flyout_.isScrollable() :
        this.startWorkspace_ && this.startWorkspace_.isDraggable();
    if (!wsMovable) {
        return;
    }
    if (this.flyout_) {
        this.workspaceDragger_ = new Blockly.FlyoutDragger(this.flyout_);
    }
    else {
        this.workspaceDragger_ = new Blockly.WorkspaceDragger(this.startWorkspace_);
    }
    this.isDraggingWorkspace_ = true;
    this.workspaceDragger_.startDrag();
};
Blockly.Gesture.prototype.updateIsDragging_ = function () {
    goog.asserts.assert(!this.calledUpdateIsDragging_, 'updateIsDragging_ should only be called once per gesture.');
    this.calledUpdateIsDragging_ = true;
    if (this.updateIsDraggingBubble_()) {
        return;
    }
    if (this.updateIsDraggingBlock_()) {
        return;
    }
    this.updateIsDraggingWorkspace_();
};
Blockly.Gesture.prototype.startDraggingBlock_ = function () {
    if (this.shouldDuplicateOnDrag_) {
        this.duplicateOnDrag_();
    }
    this.blockDragger_ = new Blockly.BlockDragger(this.targetBlock_, this.startWorkspace_);
    this.blockDragger_.startBlockDrag(this.currentDragDeltaXY_);
    this.blockDragger_.dragBlock(this.mostRecentEvent_, this.currentDragDeltaXY_);
};
Blockly.Gesture.prototype.startDraggingBubble_ = function () {
    this.bubbleDragger_ = new Blockly.BubbleDragger(this.startBubble_, this.startWorkspace_);
    this.bubbleDragger_.startBubbleDrag();
    this.bubbleDragger_.dragBubble(this.mostRecentEvent_, this.currentDragDeltaXY_);
};
Blockly.Gesture.prototype.doStart = function (e) {
    if (Blockly.utils.isTargetInput(e)) {
        this.cancel();
        return;
    }
    this.hasStarted_ = true;
    Blockly.BlockAnimations.disconnectUiStop();
    this.startWorkspace_.updateScreenCalculationsIfScrolled();
    if (this.startWorkspace_.isMutator) {
        this.startWorkspace_.resize();
    }
    this.startWorkspace_.markFocused();
    this.mostRecentEvent_ = e;
    Blockly.hideChaff(!!this.flyout_);
    Blockly.Tooltip.block();
    if (this.targetBlock_) {
        this.targetBlock_.select();
    }
    if (Blockly.utils.isRightButton(e)) {
        this.handleRightClick(e);
        return;
    }
    if (goog.string.caseInsensitiveEquals(e.type, 'touchstart')) {
        Blockly.longStart_(e, this);
    }
    this.mouseDownXY_ = new goog.math.Coordinate(e.clientX, e.clientY);
    this.currentDragDeltaXY_ = new goog.math.Coordinate(0, 0);
    this.bindMouseEvents(e);
};
Blockly.Gesture.prototype.bindMouseEvents = function (e) {
    this.onMoveWrapper_ = Blockly.bindEventWithChecks_(document, 'mousemove', null, this.handleMove.bind(this));
    this.onUpWrapper_ = Blockly.bindEventWithChecks_(document, 'mouseup', null, this.handleUp.bind(this));
    e.preventDefault();
    e.stopPropagation();
};
Blockly.Gesture.prototype.handleMove = function (e) {
    var stopPropagation = true;
    this.updateFromEvent_(e);
    if (this.isDraggingWorkspace_) {
        this.workspaceDragger_.drag(this.currentDragDeltaXY_);
    }
    else if (this.isDraggingBlock_) {
        if (this.blockDragger_.dragBlock(this.mostRecentEvent_, this.currentDragDeltaXY_)) {
            stopPropagation = false;
        }
    }
    else if (this.isDraggingBubble_) {
        this.bubbleDragger_.dragBubble(this.mostRecentEvent_, this.currentDragDeltaXY_);
    }
    if (stopPropagation) {
        e.preventDefault();
        e.stopPropagation();
    }
};
Blockly.Gesture.prototype.handleUp = function (e) {
    this.updateFromEvent_(e);
    Blockly.longStop_();
    if (this.isEnding_) {
        return;
    }
    this.isEnding_ = true;
    if (this.isDraggingBubble_) {
        this.bubbleDragger_.endBubbleDrag(e, this.currentDragDeltaXY_);
    }
    else if (this.isDraggingBlock_) {
        this.blockDragger_.endBlockDrag(e, this.currentDragDeltaXY_);
    }
    else if (this.isDraggingWorkspace_) {
        this.workspaceDragger_.endDrag(this.currentDragDeltaXY_);
    }
    else if (this.isBubbleClick_()) {
        this.doBubbleClick_();
    }
    else if (this.isFieldClick_()) {
        this.doFieldClick_();
    }
    else if (this.isBlockClick_()) {
        this.doBlockClick_();
    }
    else if (this.isWorkspaceClick_()) {
        this.doWorkspaceClick_();
    }
    e.preventDefault();
    e.stopPropagation();
    this.dispose();
};
Blockly.Gesture.prototype.cancel = function () {
    if (this.isEnding_) {
        console.log('Trying to cancel a gesture recursively.');
        return;
    }
    this.isEnding_ = true;
    Blockly.longStop_();
    if (this.isDraggingBubble_) {
        this.bubbleDragger_.endBubbleDrag(this.mostRecentEvent_, this.currentDragDeltaXY_);
    }
    else if (this.isDraggingBlock_) {
        this.blockDragger_.endBlockDrag(this.mostRecentEvent_, this.currentDragDeltaXY_);
    }
    else if (this.isDraggingWorkspace_) {
        this.workspaceDragger_.endDrag(this.currentDragDeltaXY_);
    }
    this.dispose();
};
Blockly.Gesture.prototype.handleRightClick = function (e) {
    if (this.targetBlock_) {
        this.bringBlockToFront_();
        Blockly.hideChaff(this.flyout_);
        this.targetBlock_.showContextMenu_(e);
    }
    else if (this.startBubble_) {
        this.startBubble_.showContextMenu_(e);
    }
    else if (this.startWorkspace_ && !this.flyout_) {
        Blockly.hideChaff();
        this.startWorkspace_.showContextMenu_(e);
    }
    e.preventDefault();
    e.stopPropagation();
    this.dispose();
};
Blockly.Gesture.prototype.handleWsStart = function (e, ws) {
    goog.asserts.assert(!this.hasStarted_, 'Tried to call gesture.handleWsStart, but the gesture had already been ' +
        'started.');
    this.setStartWorkspace_(ws);
    this.mostRecentEvent_ = e;
    this.doStart(e);
};
Blockly.Gesture.prototype.handleFlyoutStart = function (e, flyout) {
    goog.asserts.assert(!this.hasStarted_, 'Tried to call gesture.handleFlyoutStart, but the gesture had already ' +
        'been started.');
    this.setStartFlyout_(flyout);
    this.handleWsStart(e, flyout.getWorkspace());
};
Blockly.Gesture.prototype.handleBlockStart = function (e, block) {
    goog.asserts.assert(!this.hasStarted_, 'Tried to call gesture.handleBlockStart, but the gesture had already ' +
        'been started.');
    this.setStartBlock(block);
    this.mostRecentEvent_ = e;
};
Blockly.Gesture.prototype.handleBubbleStart = function (e, bubble) {
    goog.asserts.assert(!this.hasStarted_, 'Tried to call gesture.handleBubbleStart, but the gesture had already ' +
        'been started.');
    this.setStartBubble(bubble);
    this.mostRecentEvent_ = e;
};
Blockly.Gesture.prototype.doBubbleClick_ = function () {
    this.startBubble_.setFocus && this.startBubble_.setFocus();
    this.startBubble_.select && this.startBubble_.select();
};
Blockly.Gesture.prototype.doFieldClick_ = function () {
    this.startField_.showEditor_();
    this.bringBlockToFront_();
};
Blockly.Gesture.prototype.doBlockClick_ = function () {
    if (this.flyout_ && this.flyout_.autoClose) {
        if (!this.targetBlock_.disabled) {
            if (!Blockly.Events.getGroup()) {
                Blockly.Events.setGroup(true);
            }
            var newBlock = this.flyout_.createBlock(this.targetBlock_);
            newBlock.scheduleSnapAndBump();
        }
    }
    else {
        var fieldEditing = Blockly.WidgetDiv.isVisible() || Blockly.DropDownDiv.isVisible();
        if (!fieldEditing) {
            Blockly.Events.fire(new Blockly.Events.Ui(this.startBlock_, 'click', undefined, undefined));
            var rootBlock = this.startBlock_.getRootBlock();
            Blockly.Events.fire(new Blockly.Events.Ui(rootBlock, 'stackclick', undefined, undefined));
        }
    }
    this.bringBlockToFront_();
    Blockly.Events.setGroup(false);
};
Blockly.Gesture.prototype.doWorkspaceClick_ = function () {
    if (Blockly.selected) {
        Blockly.selected.unselect();
    }
};
Blockly.Gesture.prototype.bringBlockToFront_ = function () {
    if (this.targetBlock_ && !this.flyout_) {
        this.targetBlock_.bringToFront();
    }
};
Blockly.Gesture.prototype.setStartField = function (field) {
    goog.asserts.assert(!this.hasStarted_, 'Tried to call gesture.setStartField, but the gesture had already been ' +
        'started.');
    if (!this.startField_) {
        this.startField_ = field;
    }
};
Blockly.Gesture.prototype.setStartBubble = function (bubble) {
    if (!this.startBubble_) {
        this.startBubble_ = bubble;
    }
};
Blockly.Gesture.prototype.setStartBlock = function (block) {
    if (!this.startBlock_ && !this.startBubble_) {
        this.startBlock_ = block;
        this.shouldDuplicateOnDrag_ =
            Blockly.scratchBlocksUtils.isShadowArgumentReporter(block);
        if (block.isInFlyout && block != block.getRootBlock()) {
            this.setTargetBlock_(block.getRootBlock());
        }
        else {
            this.setTargetBlock_(block);
        }
    }
};
Blockly.Gesture.prototype.setTargetBlock_ = function (block) {
    if (block.isShadow() && !this.shouldDuplicateOnDrag_) {
        this.setTargetBlock_(block.getParent());
    }
    else {
        this.targetBlock_ = block;
    }
};
Blockly.Gesture.prototype.setStartWorkspace_ = function (ws) {
    if (!this.startWorkspace_) {
        this.startWorkspace_ = ws;
    }
};
Blockly.Gesture.prototype.setStartFlyout_ = function (flyout) {
    if (!this.flyout_) {
        this.flyout_ = flyout;
    }
};
Blockly.Gesture.prototype.isBubbleClick_ = function () {
    var hasStartBubble = !!this.startBubble_;
    return hasStartBubble && !this.hasExceededDragRadius_;
};
Blockly.Gesture.prototype.isBlockClick_ = function () {
    var hasStartBlock = !!this.startBlock_;
    return hasStartBlock && !this.hasExceededDragRadius_ && !this.isFieldClick_();
};
Blockly.Gesture.prototype.isFieldClick_ = function () {
    var fieldEditable = this.startField_ ?
        this.startField_.isCurrentlyEditable() : false;
    return fieldEditable && !this.hasExceededDragRadius_;
};
Blockly.Gesture.prototype.isWorkspaceClick_ = function () {
    var onlyTouchedWorkspace = !this.startBlock_ && !this.startBubble_ &&
        !this.startField_;
    return onlyTouchedWorkspace && !this.hasExceededDragRadius_;
};
Blockly.Gesture.prototype.isDragging = function () {
    return this.isDraggingWorkspace_ || this.isDraggingBlock_ ||
        this.isDraggingBubble_;
};
Blockly.Gesture.prototype.hasStarted = function () {
    return this.hasStarted_;
};
Blockly.Gesture.prototype.forceStartBlockDrag = function (fakeEvent, block) {
    this.handleBlockStart(fakeEvent, block);
    this.handleWsStart(fakeEvent, block.workspace);
    this.isDraggingBlock_ = true;
    this.hasExceededDragRadius_ = true;
    this.startDraggingBlock_();
};
Blockly.Gesture.prototype.duplicateOnDrag_ = function () {
    var newBlock = null;
    Blockly.Events.disable();
    try {
        this.startWorkspace_.setResizesEnabled(false);
        var xmlBlock = Blockly.Xml.blockToDom(this.targetBlock_);
        newBlock = Blockly.Xml.domToBlock(xmlBlock, this.startWorkspace_);
        var xy = this.targetBlock_.getRelativeToSurfaceXY();
        newBlock.moveBy(xy.x, xy.y);
        newBlock.setShadow(false);
    }
    finally {
        Blockly.Events.enable();
    }
    if (!newBlock) {
        console.error('Something went wrong while duplicating a block.');
        return;
    }
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.BlockCreate(newBlock));
    }
    newBlock.select();
    this.targetBlock_ = newBlock;
};
'use strict';
goog.provide('Blockly.Grid');
goog.require('Blockly.utils');
goog.require('goog.userAgent');
Blockly.Grid = function (pattern, options) {
    this.gridPattern_ = pattern;
    this.spacing_ = options['spacing'];
    this.length_ = options['length'];
    this.line1_ = pattern.firstChild;
    this.line2_ = this.line1_ && this.line1_.nextSibling;
    this.snapToGrid_ = options['snap'];
};
Blockly.Grid.prototype.scale_ = 1;
Blockly.Grid.prototype.dispose = function () {
    this.gridPattern_ = null;
};
Blockly.Grid.prototype.shouldSnap = function () {
    return this.snapToGrid_;
};
Blockly.Grid.prototype.getSpacing = function () {
    return this.spacing_;
};
Blockly.Grid.prototype.getPatternId = function () {
    return this.gridPattern_.id;
};
Blockly.Grid.prototype.update = function (scale) {
    this.scale_ = scale;
    var safeSpacing = (this.spacing_ * scale) || 100;
    this.gridPattern_.setAttribute('width', safeSpacing);
    this.gridPattern_.setAttribute('height', safeSpacing);
    var half = Math.floor(this.spacing_ / 2) + 0.5;
    var start = half - this.length_ / 2;
    var end = half + this.length_ / 2;
    half *= scale;
    start *= scale;
    end *= scale;
    this.setLineAttributes_(this.line1_, scale, start, end, half, half);
    this.setLineAttributes_(this.line2_, scale, half, half, start, end);
};
Blockly.Grid.prototype.setLineAttributes_ = function (line, width, x1, x2, y1, y2) {
    if (line) {
        line.setAttribute('stroke-width', width);
        line.setAttribute('x1', x1);
        line.setAttribute('y1', y1);
        line.setAttribute('x2', x2);
        line.setAttribute('y2', y2);
    }
};
Blockly.Grid.prototype.moveTo = function (x, y) {
    this.gridPattern_.setAttribute('x', x);
    this.gridPattern_.setAttribute('y', y);
    if (goog.userAgent.IE || goog.userAgent.EDGE) {
        this.update(this.scale_);
    }
};
Blockly.Grid.createDom = function (rnd, gridOptions, defs) {
    var gridPattern = Blockly.utils.createSvgElement('pattern', {
        'id': 'blocklyGridPattern' + rnd,
        'patternUnits': 'userSpaceOnUse'
    }, defs);
    if (gridOptions['length'] > 0 && gridOptions['spacing'] > 0) {
        Blockly.utils.createSvgElement('line', { 'stroke': gridOptions['colour'] }, gridPattern);
        if (gridOptions['length'] > 1) {
            Blockly.utils.createSvgElement('line', { 'stroke': gridOptions['colour'] }, gridPattern);
        }
    }
    else {
        Blockly.utils.createSvgElement('line', {}, gridPattern);
    }
    return gridPattern;
};
'use strict';
goog.provide('Blockly.inject');
goog.require('Blockly.BlockDragSurfaceSvg');
goog.require('Blockly.Css');
goog.require('Blockly.constants');
goog.require('Blockly.DropDownDiv');
goog.require('Blockly.Grid');
goog.require('Blockly.Options');
goog.require('Blockly.WorkspaceSvg');
goog.require('Blockly.WorkspaceDragSurfaceSvg');
goog.require('goog.dom');
goog.require('goog.ui.Component');
goog.require('goog.userAgent');
Blockly.inject = function (container, opt_options) {
    if (goog.isString(container)) {
        container = document.getElementById(container) ||
            document.querySelector(container);
    }
    if (!goog.dom.contains(document, container)) {
        throw 'Error: container is not in current document.';
    }
    var options = new Blockly.Options(opt_options || {});
    var subContainer = goog.dom.createDom('div', 'injectionDiv');
    container.appendChild(subContainer);
    Blockly.Field.startCache();
    var svg = Blockly.createDom_(subContainer, options);
    var blockDragSurface = new Blockly.BlockDragSurfaceSvg(subContainer);
    var workspaceDragSurface = new Blockly.WorkspaceDragSurfaceSvg(subContainer);
    var workspace = Blockly.createMainWorkspace_(svg, options, blockDragSurface, workspaceDragSurface);
    Blockly.init_(workspace);
    Blockly.mainWorkspace = workspace;
    Blockly.svgResize(workspace);
    return workspace;
};
Blockly.createDom_ = function (container, options) {
    container.setAttribute('dir', 'LTR');
    goog.ui.Component.setDefaultRightToLeft(options.RTL);
    Blockly.Css.inject(options.hasCss, options.pathToMedia);
    var svg = Blockly.utils.createSvgElement('svg', {
        'xmlns': 'http://www.w3.org/2000/svg',
        'xmlns:html': 'http://www.w3.org/1999/xhtml',
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'class': 'blocklySvg'
    }, container);
    var defs = Blockly.utils.createSvgElement('defs', {}, svg);
    var rnd = String(Math.random()).substring(2);
    var stackGlowFilter = Blockly.utils.createSvgElement('filter', {
        'id': 'blocklyStackGlowFilter' + rnd,
        'height': '160%',
        'width': '180%',
        y: '-30%',
        x: '-40%'
    }, defs);
    options.stackGlowBlur = Blockly.utils.createSvgElement('feGaussianBlur', {
        'in': 'SourceGraphic',
        'stdDeviation': Blockly.Colours.stackGlowSize
    }, stackGlowFilter);
    var componentTransfer = Blockly.utils.createSvgElement('feComponentTransfer', { 'result': 'outBlur' }, stackGlowFilter);
    Blockly.utils.createSvgElement('feFuncA', {
        'type': 'table',
        'tableValues': '0' + goog.string.repeat(' 1', 16)
    }, componentTransfer);
    Blockly.utils.createSvgElement('feFlood', {
        'flood-color': Blockly.Colours.stackGlow,
        'flood-opacity': Blockly.Colours.stackGlowOpacity,
        'result': 'outColor'
    }, stackGlowFilter);
    Blockly.utils.createSvgElement('feComposite', {
        'in': 'outColor',
        'in2': 'outBlur',
        'operator': 'in',
        'result': 'outGlow'
    }, stackGlowFilter);
    Blockly.utils.createSvgElement('feComposite', {
        'in': 'SourceGraphic',
        'in2': 'outGlow',
        'operator': 'over'
    }, stackGlowFilter);
    var replacementGlowFilter = Blockly.utils.createSvgElement('filter', {
        'id': 'blocklyReplacementGlowFilter' + rnd,
        'height': '160%',
        'width': '180%',
        y: '-30%',
        x: '-40%'
    }, defs);
    Blockly.utils.createSvgElement('feGaussianBlur', {
        'in': 'SourceGraphic',
        'stdDeviation': Blockly.Colours.replacementGlowSize
    }, replacementGlowFilter);
    var componentTransfer = Blockly.utils.createSvgElement('feComponentTransfer', { 'result': 'outBlur' }, replacementGlowFilter);
    Blockly.utils.createSvgElement('feFuncA', {
        'type': 'table',
        'tableValues': '0' + goog.string.repeat(' 1', 16)
    }, componentTransfer);
    Blockly.utils.createSvgElement('feFlood', {
        'flood-color': Blockly.Colours.replacementGlow,
        'flood-opacity': Blockly.Colours.replacementGlowOpacity,
        'result': 'outColor'
    }, replacementGlowFilter);
    Blockly.utils.createSvgElement('feComposite', {
        'in': 'outColor',
        'in2': 'outBlur',
        'operator': 'in',
        'result': 'outGlow'
    }, replacementGlowFilter);
    Blockly.utils.createSvgElement('feComposite', {
        'in': 'SourceGraphic',
        'in2': 'outGlow',
        'operator': 'over'
    }, replacementGlowFilter);
    var disabledPattern = Blockly.utils.createSvgElement('pattern', {
        'id': 'blocklyDisabledPattern' + rnd,
        'patternUnits': 'userSpaceOnUse',
        'width': 10,
        'height': 10
    }, defs);
    Blockly.utils.createSvgElement('rect', {
        'width': 10,
        'height': 10,
        'fill': '#aaa'
    }, disabledPattern);
    Blockly.utils.createSvgElement('path', {
        'd': 'M 0 0 L 10 10 M 10 0 L 0 10',
        'stroke': '#cc0'
    }, disabledPattern);
    options.stackGlowFilterId = stackGlowFilter.id;
    options.replacementGlowFilterId = replacementGlowFilter.id;
    options.disabledPatternId = disabledPattern.id;
    options.gridPattern = Blockly.Grid.createDom(rnd, options.gridOptions, defs);
    return svg;
};
Blockly.createMainWorkspace_ = function (svg, options, blockDragSurface, workspaceDragSurface) {
    options.parentWorkspace = null;
    var mainWorkspace = new Blockly.WorkspaceSvg(options, blockDragSurface, workspaceDragSurface);
    mainWorkspace.scale = options.zoomOptions.startScale;
    svg.appendChild(mainWorkspace.createDom('blocklyMainBackground'));
    if (!options.hasCategories && options.languageTree) {
        var flyout = mainWorkspace.addFlyout_('svg');
        Blockly.utils.insertAfter(flyout, svg);
    }
    mainWorkspace.translate(0, 0);
    Blockly.mainWorkspace = mainWorkspace;
    if (!options.readOnly && !options.hasScrollbars) {
        var workspaceChanged = function () {
            if (!mainWorkspace.isDragging()) {
                var metrics = mainWorkspace.getMetrics();
                var edgeLeft = metrics.viewLeft + metrics.absoluteLeft;
                var edgeTop = metrics.viewTop + metrics.absoluteTop;
                if (metrics.contentTop < edgeTop ||
                    metrics.contentTop + metrics.contentHeight >
                        metrics.viewHeight + edgeTop ||
                    metrics.contentLeft <
                        (options.RTL ? metrics.viewLeft : edgeLeft) ||
                    metrics.contentLeft + metrics.contentWidth > (options.RTL ?
                        metrics.viewWidth : metrics.viewWidth + edgeLeft)) {
                    var MARGIN = 25;
                    var blocks = mainWorkspace.getTopBlocks(false);
                    for (var b = 0, block; block = blocks[b]; b++) {
                        var blockXY = block.getRelativeToSurfaceXY();
                        var blockHW = block.getHeightWidth();
                        var overflowTop = edgeTop + MARGIN - blockHW.height - blockXY.y;
                        if (overflowTop > 0) {
                            block.moveBy(0, overflowTop);
                        }
                        var overflowBottom = edgeTop + metrics.viewHeight - MARGIN - blockXY.y;
                        if (overflowBottom < 0) {
                            block.moveBy(0, overflowBottom);
                        }
                        var overflowLeft = MARGIN + edgeLeft -
                            blockXY.x - (options.RTL ? 0 : blockHW.width);
                        if (overflowLeft > 0) {
                            block.moveBy(overflowLeft, 0);
                        }
                        var overflowRight = edgeLeft + metrics.viewWidth - MARGIN -
                            blockXY.x + (options.RTL ? blockHW.width : 0);
                        if (overflowRight < 0) {
                            block.moveBy(overflowRight, 0);
                        }
                    }
                }
            }
        };
        mainWorkspace.addChangeListener(workspaceChanged);
    }
    Blockly.svgResize(mainWorkspace);
    Blockly.WidgetDiv.createDom();
    Blockly.DropDownDiv.createDom();
    Blockly.Tooltip.createDom();
    return mainWorkspace;
};
Blockly.init_ = function (mainWorkspace) {
    var options = mainWorkspace.options;
    var svg = mainWorkspace.getParentSvg();
    Blockly.bindEventWithChecks_(svg.parentNode, 'contextmenu', null, function (e) {
        if (!Blockly.utils.isTargetInput(e)) {
            e.preventDefault();
        }
    });
    var workspaceResizeHandler = Blockly.bindEventWithChecks_(window, 'resize', null, function () {
        Blockly.hideChaffOnResize(true);
        Blockly.svgResize(mainWorkspace);
    });
    mainWorkspace.setResizeHandlerWrapper(workspaceResizeHandler);
    Blockly.inject.bindDocumentEvents_();
    if (options.languageTree) {
        if (mainWorkspace.toolbox_) {
            mainWorkspace.toolbox_.init(mainWorkspace);
        }
        else if (mainWorkspace.flyout_) {
            mainWorkspace.flyout_.init(mainWorkspace);
            mainWorkspace.flyout_.show(options.languageTree.childNodes);
            mainWorkspace.flyout_.scrollToStart();
            if (options.horizontalLayout) {
                mainWorkspace.scrollY = mainWorkspace.flyout_.height_;
                if (options.toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM) {
                    mainWorkspace.scrollY *= -1;
                }
            }
            else {
                mainWorkspace.scrollX = mainWorkspace.flyout_.width_;
                if (options.toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {
                    mainWorkspace.scrollX *= -1;
                }
            }
            mainWorkspace.translate(mainWorkspace.scrollX, mainWorkspace.scrollY);
        }
    }
    if (options.hasScrollbars) {
        mainWorkspace.scrollbar = new Blockly.ScrollbarPair(mainWorkspace);
        mainWorkspace.scrollbar.resize();
    }
    if (options.hasSounds) {
        Blockly.inject.loadSounds_(options.pathToMedia, mainWorkspace);
    }
};
Blockly.inject.bindDocumentEvents_ = function () {
    if (!Blockly.documentEventsBound_) {
        Blockly.bindEventWithChecks_(document, 'keydown', null, Blockly.onKeyDown_);
        Blockly.bindEvent_(document, 'touchend', null, Blockly.longStop_);
        Blockly.bindEvent_(document, 'touchcancel', null, Blockly.longStop_);
        if (goog.userAgent.IPAD) {
            Blockly.bindEventWithChecks_(window, 'orientationchange', document, function () {
                Blockly.svgResize(Blockly.getMainWorkspace());
            });
        }
    }
    Blockly.documentEventsBound_ = true;
};
Blockly.inject.loadSounds_ = function (pathToMedia, workspace) {
    var audioMgr = workspace.getAudioManager();
    audioMgr.load([
        pathToMedia + 'click.mp3',
        pathToMedia + 'click.wav',
        pathToMedia + 'click.ogg'
    ], 'click');
    audioMgr.load([
        pathToMedia + 'delete.mp3',
        pathToMedia + 'delete.ogg',
        pathToMedia + 'delete.wav'
    ], 'delete');
    var soundBinds = [];
    var unbindSounds = function () {
        while (soundBinds.length) {
            Blockly.unbindEvent_(soundBinds.pop());
        }
        audioMgr.preload();
    };
    soundBinds.push(Blockly.bindEventWithChecks_(document, 'mousemove', null, unbindSounds, true));
    soundBinds.push(Blockly.bindEventWithChecks_(document, 'touchstart', null, unbindSounds, true));
};
Blockly.updateToolbox = function (tree) {
    console.warn('Deprecated call to Blockly.updateToolbox, ' +
        'use workspace.updateToolbox instead.');
    Blockly.getMainWorkspace().updateToolbox(tree);
};
'use strict';
goog.provide('Blockly.Input');
goog.require('Blockly.Connection');
goog.require('Blockly.FieldLabel');
goog.require('goog.asserts');
Blockly.Input = function (type, name, block, connection) {
    if (type != Blockly.DUMMY_INPUT && !name) {
        throw 'Value inputs and statement inputs must have non-empty name.';
    }
    this.type = type;
    this.name = name;
    this.sourceBlock_ = block;
    this.connection = connection;
    this.fieldRow = [];
    this.outlinePath = null;
};
Blockly.Input.prototype.align = Blockly.ALIGN_LEFT;
Blockly.Input.prototype.visible_ = true;
Blockly.Input.prototype.appendField = function (field, opt_name) {
    this.insertFieldAt(this.fieldRow.length, field, opt_name);
    return this;
};
Blockly.Input.prototype.insertFieldAt = function (index, field, opt_name) {
    if (index < 0 || index > this.fieldRow.length) {
        throw new Error('index ' + index + ' out of bounds.');
    }
    if (!field && !opt_name) {
        return this;
    }
    if (goog.isString(field)) {
        field = new Blockly.FieldLabel((field));
    }
    field.setSourceBlock(this.sourceBlock_);
    if (this.sourceBlock_.rendered) {
        field.init();
    }
    field.name = opt_name;
    if (field.prefixField) {
        index = this.insertFieldAt(index, field.prefixField);
    }
    this.fieldRow.splice(index, 0, field);
    ++index;
    if (field.suffixField) {
        index = this.insertFieldAt(index, field.suffixField);
    }
    if (this.sourceBlock_.rendered) {
        this.sourceBlock_.render();
        this.sourceBlock_.bumpNeighbours_();
    }
    return index;
};
Blockly.Input.prototype.removeField = function (name) {
    for (var i = 0, field; field = this.fieldRow[i]; i++) {
        if (field.name === name) {
            field.dispose();
            this.fieldRow.splice(i, 1);
            if (this.sourceBlock_.rendered) {
                this.sourceBlock_.render();
                this.sourceBlock_.bumpNeighbours_();
            }
            return;
        }
    }
    goog.asserts.fail('Field "%s" not found.', name);
};
Blockly.Input.prototype.isVisible = function () {
    return this.visible_;
};
Blockly.Input.prototype.setVisible = function (visible) {
    var renderList = [];
    if (this.visible_ == visible) {
        return renderList;
    }
    this.visible_ = visible;
    var display = visible ? 'block' : 'none';
    for (var y = 0, field; field = this.fieldRow[y]; y++) {
        field.setVisible(visible);
    }
    if (this.connection) {
        if (visible) {
            renderList = this.connection.unhideAll();
        }
        else {
            this.connection.hideAll();
        }
        var child = this.connection.targetBlock();
        if (child) {
            child.getSvgRoot().style.display = display;
            if (!visible) {
                child.rendered = false;
            }
        }
    }
    return renderList;
};
Blockly.Input.prototype.setCheck = function (check) {
    if (!this.connection) {
        throw 'This input does not have a connection.';
    }
    this.connection.setCheck(check);
    return this;
};
Blockly.Input.prototype.setAlign = function (align) {
    this.align = align;
    if (this.sourceBlock_.rendered) {
        this.sourceBlock_.render();
    }
    return this;
};
Blockly.Input.prototype.init = function () {
    if (!this.sourceBlock_.workspace.rendered) {
        return;
    }
    for (var i = 0; i < this.fieldRow.length; i++) {
        this.fieldRow[i].init(this.sourceBlock_);
    }
};
Blockly.Input.prototype.dispose = function () {
    if (this.outlinePath) {
        goog.dom.removeNode(this.outlinePath);
    }
    for (var i = 0, field; field = this.fieldRow[i]; i++) {
        field.dispose();
    }
    if (this.connection) {
        this.connection.dispose();
    }
    this.sourceBlock_ = null;
};
Blockly.Input.prototype.initOutlinePath = function (svgRoot) {
    if (!this.sourceBlock_.workspace.rendered) {
        return;
    }
    if (this.outlinePath) {
        return;
    }
    if (this.type == Blockly.INPUT_VALUE) {
        this.outlinePath = Blockly.utils.createSvgElement('path', {
            'class': 'blocklyPath',
            'style': 'visibility: hidden',
            'd': ''
        }, svgRoot);
    }
};
'use strict';
goog.provide('Blockly.InsertionMarkerManager');
goog.require('Blockly.BlockAnimations');
goog.require('Blockly.Events.BlockMove');
goog.require('Blockly.RenderedConnection');
goog.require('goog.math.Coordinate');
Blockly.InsertionMarkerManager = function (block) {
    Blockly.selected = block;
    this.topBlock_ = block;
    this.workspace_ = block.workspace;
    this.lastOnStack_ = null;
    this.lastMarker_ = null;
    this.firstMarker_ = this.createMarkerBlock_(this.topBlock_);
    this.closestConnection_ = null;
    this.localConnection_ = null;
    this.wouldDeleteBlock_ = false;
    this.markerConnection_ = null;
    this.highlightingBlock_ = false;
    this.highlightedBlock_ = null;
    this.availableConnections_ = this.initAvailableConnections_();
};
Blockly.InsertionMarkerManager.prototype.dispose = function () {
    this.topBlock_ = null;
    this.workspace_ = null;
    this.availableConnections_.length = 0;
    this.closestConnection_ = null;
    this.localConnection_ = null;
    Blockly.Events.disable();
    try {
        if (this.firstMarker_) {
            this.firstMarker_.dispose();
            this.firstMarker_ = null;
        }
        if (this.lastMarker_) {
            this.lastMarker_.dispose();
            this.lastMarker_ = null;
        }
    }
    finally {
        Blockly.Events.enable();
    }
    this.highlightedBlock_ = null;
};
Blockly.InsertionMarkerManager.prototype.wouldDeleteBlock = function () {
    return this.wouldDeleteBlock_;
};
Blockly.InsertionMarkerManager.prototype.applyConnections = function () {
    if (this.closestConnection_) {
        Blockly.Events.disable();
        this.hidePreview_();
        Blockly.Events.enable();
        this.localConnection_.connect(this.closestConnection_);
        if (this.topBlock_.rendered) {
            var inferiorConnection = this.localConnection_.isSuperior() ?
                this.closestConnection_ : this.localConnection_;
            Blockly.BlockAnimations.connectionUiEffect(inferiorConnection.getSourceBlock());
            var rootBlock = this.topBlock_.getRootBlock();
            rootBlock.bringToFront();
        }
    }
};
Blockly.InsertionMarkerManager.prototype.update = function (dxy, deleteArea) {
    var candidate = this.getCandidate_(dxy);
    this.wouldDeleteBlock_ = this.shouldDelete_(candidate, deleteArea);
    var shouldUpdate = this.wouldDeleteBlock_ ||
        this.shouldUpdatePreviews_(candidate, dxy);
    if (shouldUpdate) {
        Blockly.Events.disable();
        this.maybeHidePreview_(candidate);
        this.maybeShowPreview_(candidate);
        Blockly.Events.enable();
    }
};
Blockly.InsertionMarkerManager.prototype.createMarkerBlock_ = function (sourceBlock) {
    var imType = sourceBlock.type;
    Blockly.Events.disable();
    try {
        var result = this.workspace_.newBlock(imType);
        result.setInsertionMarker(true, sourceBlock.width);
        if (sourceBlock.mutationToDom) {
            var oldMutationDom = sourceBlock.mutationToDom();
            if (oldMutationDom) {
                result.domToMutation(oldMutationDom);
            }
        }
        result.initSvg();
    }
    finally {
        Blockly.Events.enable();
    }
    return result;
};
Blockly.InsertionMarkerManager.prototype.initAvailableConnections_ = function () {
    var available = this.topBlock_.getConnections_(false);
    var lastOnStack = this.topBlock_.lastConnectionInStack();
    if (lastOnStack && lastOnStack != this.topBlock_.nextConnection) {
        available.push(lastOnStack);
        this.lastOnStack_ = lastOnStack;
        this.lastMarker_ = this.createMarkerBlock_(lastOnStack.sourceBlock_);
    }
    return available;
};
Blockly.InsertionMarkerManager.prototype.shouldUpdatePreviews_ = function (candidate, dxy) {
    var candidateLocal = candidate.local;
    var candidateClosest = candidate.closest;
    var radius = candidate.radius;
    if (candidateLocal && candidateClosest) {
        if (candidateLocal.type == Blockly.OUTPUT_VALUE) {
            return true;
        }
        if (this.localConnection_ && this.closestConnection_) {
            if (this.closestConnection_ == candidateClosest) {
                return false;
            }
            var xDiff = this.localConnection_.x_ + dxy.x - this.closestConnection_.x_;
            var yDiff = this.localConnection_.y_ + dxy.y - this.closestConnection_.y_;
            var curDistance = Math.sqrt(xDiff * xDiff + yDiff * yDiff);
            return !(candidateClosest && radius > curDistance -
                Blockly.CURRENT_CONNECTION_PREFERENCE);
        }
        else if (!this.localConnection_ && !this.closestConnection_) {
            return true;
        }
        else {
            console.error('Only one of localConnection_ and closestConnection_ was set.');
        }
    }
    else {
        return !!(this.localConnection_ && this.closestConnection_);
    }
    console.error('Returning true from shouldUpdatePreviews, but it\'s not clear why.');
    return true;
};
Blockly.InsertionMarkerManager.prototype.getCandidate_ = function (dxy) {
    var radius = this.getStartRadius_();
    var candidateClosest = null;
    var candidateLocal = null;
    for (var i = 0; i < this.availableConnections_.length; i++) {
        var myConnection = this.availableConnections_[i];
        var neighbour = myConnection.closest(radius, dxy);
        if (neighbour.connection) {
            candidateClosest = neighbour.connection;
            candidateLocal = myConnection;
            radius = neighbour.radius;
        }
    }
    return {
        closest: candidateClosest,
        local: candidateLocal,
        radius: radius
    };
};
Blockly.InsertionMarkerManager.prototype.getStartRadius_ = function () {
    if (this.closestConnection_ && this.localConnection_) {
        return Blockly.CONNECTING_SNAP_RADIUS;
    }
    return Blockly.SNAP_RADIUS;
};
Blockly.InsertionMarkerManager.prototype.shouldReplace_ = function () {
    var closest = this.closestConnection_;
    var local = this.localConnection_;
    if (local.type == Blockly.OUTPUT_VALUE) {
        return true;
    }
    if (local == local.sourceBlock_.getFirstStatementConnection()) {
        return false;
    }
    var isTerminalBlock = !this.topBlock_.nextConnection;
    var isConnectedTerminal = isTerminalBlock &&
        local.type == Blockly.PREVIOUS_STATEMENT && closest.isConnected();
    if (isConnectedTerminal) {
        return true;
    }
    return false;
};
Blockly.InsertionMarkerManager.prototype.shouldDelete_ = function (candidate, deleteArea) {
    var wouldConnect = candidate && !!candidate.closest &&
        deleteArea != Blockly.DELETE_AREA_TOOLBOX;
    var wouldDelete = !!deleteArea && !this.topBlock_.getParent() &&
        this.topBlock_.isDeletable();
    return wouldDelete && !wouldConnect;
};
Blockly.InsertionMarkerManager.prototype.maybeShowPreview_ = function (candidate) {
    if (this.wouldDeleteBlock_) {
        return;
    }
    var closest = candidate.closest;
    var local = candidate.local;
    if (!closest) {
        return;
    }
    if (closest == this.closestConnection_ ||
        closest.sourceBlock_.isInsertionMarker()) {
        return;
    }
    this.closestConnection_ = closest;
    this.localConnection_ = local;
    this.showPreview_();
};
Blockly.InsertionMarkerManager.prototype.showPreview_ = function () {
    if (this.shouldReplace_()) {
        this.highlightBlock_();
    }
    else {
        this.connectMarker_();
    }
};
Blockly.InsertionMarkerManager.prototype.maybeHidePreview_ = function (candidate) {
    if (!candidate.closest) {
        this.hidePreview_();
    }
    var hadPreview = this.closestConnection_ && this.localConnection_;
    var closestChanged = this.closestConnection_ != candidate.closest;
    var localChanged = this.localConnection_ != candidate.local;
    if (hadPreview && (closestChanged || localChanged || this.wouldDeleteBlock_)) {
        this.hidePreview_();
    }
    this.markerConnection_ = null;
    this.closestConnection_ = null;
    this.localConnection_ = null;
};
Blockly.InsertionMarkerManager.prototype.hidePreview_ = function () {
    if (this.highlightingBlock_) {
        this.unhighlightBlock_();
    }
    else if (this.markerConnection_) {
        this.disconnectMarker_();
    }
};
Blockly.InsertionMarkerManager.prototype.highlightBlock_ = function () {
    var closest = this.closestConnection_;
    var local = this.localConnection_;
    if (closest.targetBlock()) {
        this.highlightedBlock_ = closest.targetBlock();
        closest.targetBlock().highlightForReplacement(true);
    }
    else if (local.type == Blockly.OUTPUT_VALUE) {
        this.highlightedBlock_ = closest.sourceBlock_;
        closest.sourceBlock_.highlightShapeForInput(closest, true);
    }
    this.highlightingBlock_ = true;
};
Blockly.InsertionMarkerManager.prototype.unhighlightBlock_ = function () {
    var closest = this.closestConnection_;
    if (closest.type == Blockly.INPUT_VALUE && !closest.isConnected()) {
        this.highlightedBlock_.highlightShapeForInput(closest, false);
    }
    else {
        this.highlightedBlock_.highlightForReplacement(false);
    }
    this.highlightedBlock_ = null;
    this.highlightingBlock_ = false;
};
Blockly.InsertionMarkerManager.prototype.disconnectMarker_ = function () {
    if (!this.markerConnection_) {
        console.log('No insertion marker connection to disconnect');
        return;
    }
    var imConn = this.markerConnection_;
    var imBlock = imConn.sourceBlock_;
    var markerNext = imBlock.nextConnection;
    var markerPrev = imBlock.previousConnection;
    if (imConn == markerNext && !(markerPrev && markerPrev.targetConnection)) {
        imConn.targetBlock().unplug(false);
    }
    else if (imConn.type == Blockly.NEXT_STATEMENT && imConn != markerNext) {
        var innerConnection = imConn.targetConnection;
        innerConnection.sourceBlock_.unplug(false);
        var previousBlockNextConnection = markerPrev ? markerPrev.targetConnection : null;
        imBlock.unplug(true);
        if (previousBlockNextConnection) {
            previousBlockNextConnection.connect(innerConnection);
        }
    }
    else {
        imBlock.unplug(true);
    }
    if (imConn.targetConnection) {
        throw 'markerConnection_ still connected at the end of disconnectInsertionMarker';
    }
    this.markerConnection_ = null;
    imBlock.getSvgRoot().setAttribute('visibility', 'hidden');
};
Blockly.InsertionMarkerManager.prototype.connectMarker_ = function () {
    var local = this.localConnection_;
    var closest = this.closestConnection_;
    var isLastInStack = this.lastOnStack_ && local == this.lastOnStack_;
    var imBlock = isLastInStack ? this.lastMarker_ : this.firstMarker_;
    var imConn = imBlock.getMatchingConnection(local.sourceBlock_, local);
    goog.asserts.assert(imConn != this.markerConnection_, 'Made it to connectMarker_ even though the marker isn\'t changing');
    imBlock.render();
    imBlock.rendered = true;
    imBlock.getSvgRoot().setAttribute('visibility', 'visible');
    imBlock.positionNewBlock(imBlock, imConn, closest);
    imConn.connect(closest);
    this.markerConnection_ = imConn;
};
'use strict';
goog.provide('Blockly.Names');
Blockly.Names = function (reservedWords, opt_variablePrefix) {
    this.variablePrefix_ = opt_variablePrefix || '';
    this.reservedDict_ = Object.create(null);
    if (reservedWords) {
        var splitWords = reservedWords.split(',');
        for (var i = 0; i < splitWords.length; i++) {
            this.reservedDict_[splitWords[i]] = true;
        }
    }
    this.reset();
};
Blockly.Names.DEVELOPER_VARIABLE_TYPE = 'DEVELOPER_VARIABLE';
Blockly.Names.prototype.reset = function () {
    this.db_ = Object.create(null);
    this.dbReverse_ = Object.create(null);
    this.variableMap_ = null;
};
Blockly.Names.prototype.setVariableMap = function (map) {
    this.variableMap_ = map;
};
Blockly.Names.prototype.getNameForUserVariable_ = function (id) {
    if (!this.variableMap_) {
        console.log('Deprecated call to Blockly.Names.prototype.getName without ' +
            'defining a variable map. To fix, add the folowing code in your ' +
            'generator\'s init() function:\n' +
            'Blockly.YourGeneratorName.variableDB_.setVariableMap(' +
            'workspace.getVariableMap());');
        return null;
    }
    var variable = this.variableMap_.getVariableById(id);
    if (variable) {
        return variable.name;
    }
    else {
        return null;
    }
};
Blockly.Names.prototype.getName = function (name, type) {
    if (type == Blockly.Variables.NAME_TYPE) {
        var varName = this.getNameForUserVariable_(name);
        if (varName) {
            name = varName;
        }
    }
    var normalized = name.toLowerCase() + '_' + type;
    var isVarType = type == Blockly.Variables.NAME_TYPE ||
        type == Blockly.Names.DEVELOPER_VARIABLE_TYPE;
    var prefix = isVarType ? this.variablePrefix_ : '';
    if (normalized in this.db_) {
        return prefix + this.db_[normalized];
    }
    var safeName = this.getDistinctName(name, type);
    this.db_[normalized] = safeName.substr(prefix.length);
    return safeName;
};
Blockly.Names.prototype.getDistinctName = function (name, type) {
    var safeName = this.safeName_(name);
    var i = '';
    while (this.dbReverse_[safeName + i] ||
        (safeName + i) in this.reservedDict_) {
        i = i ? i + 1 : 2;
    }
    safeName += i;
    this.dbReverse_[safeName] = true;
    var isVarType = type == Blockly.Variables.NAME_TYPE ||
        type == Blockly.Names.DEVELOPER_VARIABLE_TYPE;
    var prefix = isVarType ? this.variablePrefix_ : '';
    return prefix + safeName;
};
Blockly.Names.prototype.safeName_ = function (name) {
    if (!name) {
        name = 'unnamed';
    }
    else {
        name = encodeURI(name.replace(/ /g, '_')).replace(/[^\w]/g, '_');
        if ('0123456789'.indexOf(name[0]) != -1) {
            name = 'my_' + name;
        }
    }
    return name;
};
Blockly.Names.equals = function (name1, name2) {
    return name1.toLowerCase() == name2.toLowerCase();
};
'use strict';
goog.provide('Blockly.Options');
goog.require('Blockly.Colours');
Blockly.Options = function (options) {
    var readOnly = !!options['readOnly'];
    if (readOnly) {
        var languageTree = null;
        var hasCategories = false;
        var hasTrashcan = false;
        var hasCollapse = false;
        var hasComments = false;
        var hasDisable = false;
        var hasSounds = false;
    }
    else {
        if (!options['toolbox'] && Blockly.Blocks.defaultToolbox) {
            var oParser = new DOMParser();
            var dom = oParser.parseFromString(Blockly.Blocks.defaultToolbox, 'text/xml');
            options['toolbox'] = dom.documentElement;
        }
        var languageTree = Blockly.Options.parseToolboxTree(options['toolbox']);
        var hasCategories = Boolean(languageTree &&
            languageTree.getElementsByTagName('category').length);
        var hasTrashcan = options['trashcan'];
        if (hasTrashcan === undefined) {
            hasTrashcan = false;
        }
        var hasCollapse = options['collapse'];
        if (hasCollapse === undefined) {
            hasCollapse = hasCategories;
        }
        var hasComments = options['comments'];
        if (hasComments === undefined) {
            hasComments = hasCategories;
        }
        var hasDisable = options['disable'];
        if (hasDisable === undefined) {
            hasDisable = hasCategories;
        }
        var hasSounds = options['sounds'];
        if (hasSounds === undefined) {
            hasSounds = true;
        }
    }
    var rtl = !!options['rtl'];
    var horizontalLayout = options['horizontalLayout'];
    if (horizontalLayout === undefined) {
        horizontalLayout = false;
    }
    var toolboxAtStart = options['toolboxPosition'];
    if (toolboxAtStart === 'end') {
        toolboxAtStart = false;
    }
    else {
        toolboxAtStart = true;
    }
    if (horizontalLayout) {
        var toolboxPosition = toolboxAtStart ?
            Blockly.TOOLBOX_AT_TOP : Blockly.TOOLBOX_AT_BOTTOM;
    }
    else {
        var toolboxPosition = (toolboxAtStart == rtl) ?
            Blockly.TOOLBOX_AT_RIGHT : Blockly.TOOLBOX_AT_LEFT;
    }
    var hasScrollbars = options['scrollbars'];
    if (hasScrollbars === undefined) {
        hasScrollbars = hasCategories;
    }
    var hasCss = options['css'];
    if (hasCss === undefined) {
        hasCss = true;
    }
    var pathToMedia = 'https://blockly-demo.appspot.com/static/media/';
    if (options['media']) {
        pathToMedia = options['media'];
    }
    else if (options['path']) {
        pathToMedia = options['path'] + 'media/';
    }
    if (options['oneBasedIndex'] === undefined) {
        var oneBasedIndex = true;
    }
    else {
        var oneBasedIndex = !!options['oneBasedIndex'];
    }
    Blockly.Colours.overrideColours(options['colours']);
    this.RTL = rtl;
    this.oneBasedIndex = oneBasedIndex;
    this.collapse = hasCollapse;
    this.comments = hasComments;
    this.disable = hasDisable;
    this.readOnly = readOnly;
    this.pathToMedia = pathToMedia;
    this.hasCategories = hasCategories;
    this.hasScrollbars = hasScrollbars;
    this.hasTrashcan = hasTrashcan;
    this.hasSounds = hasSounds;
    this.hasCss = hasCss;
    this.horizontalLayout = horizontalLayout;
    this.languageTree = languageTree;
    this.gridOptions = Blockly.Options.parseGridOptions_(options);
    this.zoomOptions = Blockly.Options.parseZoomOptions_(options);
    this.toolboxPosition = toolboxPosition;
};
Blockly.Options.prototype.parentWorkspace = null;
Blockly.Options.prototype.setMetrics = null;
Blockly.Options.prototype.getMetrics = null;
Blockly.Options.parseZoomOptions_ = function (options) {
    var zoom = options['zoom'] || {};
    var zoomOptions = {};
    if (zoom['controls'] === undefined) {
        zoomOptions.controls = false;
    }
    else {
        zoomOptions.controls = !!zoom['controls'];
    }
    if (zoom['wheel'] === undefined) {
        zoomOptions.wheel = false;
    }
    else {
        zoomOptions.wheel = !!zoom['wheel'];
    }
    if (zoom['startScale'] === undefined) {
        zoomOptions.startScale = 1;
    }
    else {
        zoomOptions.startScale = parseFloat(zoom['startScale']);
    }
    if (zoom['maxScale'] === undefined) {
        zoomOptions.maxScale = 3;
    }
    else {
        zoomOptions.maxScale = parseFloat(zoom['maxScale']);
    }
    if (zoom['minScale'] === undefined) {
        zoomOptions.minScale = 0.3;
    }
    else {
        zoomOptions.minScale = parseFloat(zoom['minScale']);
    }
    if (zoom['scaleSpeed'] === undefined) {
        zoomOptions.scaleSpeed = 1.2;
    }
    else {
        zoomOptions.scaleSpeed = parseFloat(zoom['scaleSpeed']);
    }
    return zoomOptions;
};
Blockly.Options.parseGridOptions_ = function (options) {
    var grid = options['grid'] || {};
    var gridOptions = {};
    gridOptions.spacing = parseFloat(grid['spacing']) || 0;
    gridOptions.colour = grid['colour'] || '#888';
    gridOptions.length = parseFloat(grid['length']) || 1;
    gridOptions.snap = gridOptions.spacing > 0 && !!grid['snap'];
    return gridOptions;
};
Blockly.Options.parseToolboxTree = function (tree) {
    if (tree) {
        if (typeof tree != 'string') {
            if (typeof XSLTProcessor == 'undefined' && tree.outerHTML) {
                tree = tree.outerHTML;
            }
            else if (!(tree instanceof Element)) {
                tree = null;
            }
        }
        if (typeof tree == 'string') {
            tree = Blockly.Xml.textToDom(tree);
        }
    }
    else {
        tree = null;
    }
    return tree;
};
'use strict';
goog.provide('Blockly.Procedures');
goog.require('Blockly.Blocks');
goog.require('Blockly.constants');
goog.require('Blockly.Events.BlockChange');
goog.require('Blockly.Field');
goog.require('Blockly.Names');
goog.require('Blockly.Workspace');
Blockly.Procedures.NAME_TYPE = Blockly.PROCEDURE_CATEGORY_NAME;
Blockly.Procedures.allProcedures = function (root) {
    var blocks = root.getAllBlocks();
    var proceduresReturn = [];
    var proceduresNoReturn = [];
    for (var i = 0; i < blocks.length; i++) {
        if (blocks[i].getProcedureDef) {
            var tuple = blocks[i].getProcedureDef();
            if (tuple) {
                if (tuple[2]) {
                    proceduresReturn.push(tuple);
                }
                else {
                    proceduresNoReturn.push(tuple);
                }
            }
        }
    }
    proceduresNoReturn.sort(Blockly.Procedures.procTupleComparator_);
    proceduresReturn.sort(Blockly.Procedures.procTupleComparator_);
    return [proceduresNoReturn, proceduresReturn];
};
Blockly.Procedures.allProcedureMutations = function (root) {
    var blocks = root.getAllBlocks();
    var mutations = [];
    for (var i = 0; i < blocks.length; i++) {
        if (blocks[i].type == Blockly.PROCEDURES_PROTOTYPE_BLOCK_TYPE) {
            var mutation = blocks[i].mutationToDom(true);
            if (mutation) {
                mutations.push(mutation);
            }
        }
    }
    return mutations;
};
Blockly.Procedures.sortProcedureMutations_ = function (mutations) {
    var newMutations = mutations.slice();
    newMutations.sort(function (a, b) {
        var procCodeA = a.getAttribute('proccode');
        var procCodeB = b.getAttribute('proccode');
        return Blockly.scratchBlocksUtils.compareStrings(procCodeA, procCodeB);
    });
    return newMutations;
};
Blockly.Procedures.procTupleComparator_ = function (ta, tb) {
    return Blockly.scratchBlocksUtils.compareStrings(ta[0], tb[0]);
};
Blockly.Procedures.findLegalName = function (name, block) {
    if (block.isInFlyout) {
        return name;
    }
    while (!Blockly.Procedures.isLegalName_(name, block.workspace, block)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += '2';
        }
        else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
};
Blockly.Procedures.isLegalName_ = function (name, workspace, opt_exclude) {
    return !Blockly.Procedures.isNameUsed(name, workspace, opt_exclude);
};
Blockly.Procedures.isNameUsed = function (name, workspace, opt_exclude) {
    var blocks = workspace.getAllBlocks();
    for (var i = 0; i < blocks.length; i++) {
        if (blocks[i] == opt_exclude) {
            continue;
        }
        if (blocks[i].getProcedureDef) {
            var procName = blocks[i].getProcedureDef();
            if (Blockly.Names.equals(procName[0], name)) {
                return false;
            }
        }
    }
    return true;
};
Blockly.Procedures.rename = function (name) {
    name = name.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
    var legalName = Blockly.Procedures.findLegalName(name, this.sourceBlock_);
    var oldName = this.text_;
    if (oldName != name && oldName != legalName) {
        var blocks = this.sourceBlock_.workspace.getAllBlocks();
        for (var i = 0; i < blocks.length; i++) {
            if (blocks[i].renameProcedure) {
                blocks[i].renameProcedure(oldName, legalName);
            }
        }
    }
    return legalName;
};
Blockly.Procedures.flyoutCategory = function (workspace) {
    var xmlList = [];
    Blockly.Procedures.addCreateButton_(workspace, xmlList);
    var mutations = Blockly.Procedures.allProcedureMutations(workspace);
    mutations = Blockly.Procedures.sortProcedureMutations_(mutations);
    for (var i = 0; i < mutations.length; i++) {
        var mutation = mutations[i];
        var block = goog.dom.createDom('block');
        block.setAttribute('type', 'procedures_call');
        block.setAttribute('gap', 16);
        block.appendChild(mutation);
        xmlList.push(block);
    }
    return xmlList;
};
Blockly.Procedures.addCreateButton_ = function (workspace, xmlList) {
    var button = goog.dom.createDom('button');
    var msg = Blockly.Msg.NEW_PROCEDURE;
    var callbackKey = 'CREATE_PROCEDURE';
    var callback = function () {
        Blockly.Procedures.createProcedureDefCallback_(workspace);
    };
    button.setAttribute('text', msg);
    button.setAttribute('callbackKey', callbackKey);
    workspace.registerButtonCallback(callbackKey, callback);
    xmlList.push(button);
};
Blockly.Procedures.getCallers = function (name, ws, definitionRoot, allowRecursive) {
    var allBlocks = [];
    var topBlocks = ws.getTopBlocks();
    for (var i = 0; i < topBlocks.length; i++) {
        var block = topBlocks[i];
        if (block.id == definitionRoot.id && !allowRecursive) {
            continue;
        }
        allBlocks.push.apply(allBlocks, block.getDescendants(false));
    }
    var callers = [];
    for (var i = 0; i < allBlocks.length; i++) {
        var block = allBlocks[i];
        if (block.type == Blockly.PROCEDURES_CALL_BLOCK_TYPE) {
            var procCode = block.getProcCode();
            if (procCode && procCode == name) {
                callers.push(block);
            }
        }
    }
    return callers;
};
Blockly.Procedures.mutateCallersAndPrototype = function (name, ws, mutation) {
    var defineBlock = Blockly.Procedures.getDefineBlock(name, ws);
    var prototypeBlock = Blockly.Procedures.getPrototypeBlock(name, ws);
    if (defineBlock && prototypeBlock) {
        var callers = Blockly.Procedures.getCallers(name, defineBlock.workspace, defineBlock, true);
        callers.push(prototypeBlock);
        Blockly.Events.setGroup(true);
        for (var i = 0, caller; caller = callers[i]; i++) {
            var oldMutationDom = caller.mutationToDom();
            var oldMutation = oldMutationDom && Blockly.Xml.domToText(oldMutationDom);
            caller.domToMutation(mutation);
            var newMutationDom = caller.mutationToDom();
            var newMutation = newMutationDom && Blockly.Xml.domToText(newMutationDom);
            if (oldMutation != newMutation) {
                Blockly.Events.fire(new Blockly.Events.BlockChange(caller, 'mutation', null, oldMutation, newMutation));
            }
        }
        Blockly.Events.setGroup(false);
    }
    else {
        alert('No define block on workspace');
    }
};
Blockly.Procedures.getDefineBlock = function (procCode, workspace) {
    var blocks = workspace.getTopBlocks(false);
    for (var i = 0; i < blocks.length; i++) {
        if (blocks[i].type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE) {
            var prototypeBlock = blocks[i].getInput('custom_block').connection.targetBlock();
            if (prototypeBlock.getProcCode && prototypeBlock.getProcCode() == procCode) {
                return blocks[i];
            }
        }
    }
    return null;
};
Blockly.Procedures.getPrototypeBlock = function (procCode, workspace) {
    var defineBlock = Blockly.Procedures.getDefineBlock(procCode, workspace);
    if (defineBlock) {
        return defineBlock.getInput('custom_block').connection.targetBlock();
    }
    return null;
};
Blockly.Procedures.newProcedureMutation = function () {
    var mutationText = '<xml>' +
        '<mutation' +
        ' proccode="' + Blockly.Msg['PROCEDURE_DEFAULT_NAME'] + '"' +
        ' argumentids="[]"' +
        ' argumentnames="[]"' +
        ' argumentdefaults="[]"' +
        ' warp="false">' +
        '</mutation>' +
        '</xml>';
    return Blockly.Xml.textToDom(mutationText).firstChild;
};
Blockly.Procedures.createProcedureDefCallback_ = function (workspace) {
    Blockly.Procedures.externalProcedureDefCallback(Blockly.Procedures.newProcedureMutation(), Blockly.Procedures.createProcedureCallbackFactory_(workspace));
};
Blockly.Procedures.createProcedureCallbackFactory_ = function (workspace) {
    return function (mutation) {
        if (mutation) {
            var blockText = '<xml>' +
                '<block type="procedures_definition">' +
                '<statement name="custom_block">' +
                '<shadow type="procedures_prototype">' +
                Blockly.Xml.domToText(mutation) +
                '</shadow>' +
                '</statement>' +
                '</block>' +
                '</xml>';
            var blockDom = Blockly.Xml.textToDom(blockText).firstChild;
            Blockly.Events.setGroup(true);
            var block = Blockly.Xml.domToBlock(blockDom, workspace);
            var scale = workspace.scale;
            var posX = -workspace.scrollX;
            if (workspace.RTL) {
                posX += workspace.getMetrics().contentWidth - 30;
            }
            else {
                posX += 30;
            }
            block.moveBy(posX / scale, (-workspace.scrollY + 30) / scale);
            block.scheduleSnapAndBump();
            Blockly.Events.setGroup(false);
            workspace.refreshToolboxSelection_();
        }
    };
};
Blockly.Procedures.editProcedureCallback_ = function (block) {
    if (block.type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE) {
        var input = block.getInput('custom_block');
        if (!input) {
            alert('Bad input');
            return;
        }
        var conn = input.connection;
        if (!conn) {
            alert('Bad connection');
            return;
        }
        var innerBlock = conn.targetBlock();
        if (!innerBlock ||
            !innerBlock.type == Blockly.PROCEDURES_PROTOTYPE_BLOCK_TYPE) {
            alert('Bad inner block');
            return;
        }
        block = innerBlock;
    }
    else if (block.type == Blockly.PROCEDURES_CALL_BLOCK_TYPE) {
        var workspaceToSearch = block.workspace.isFlyout ?
            block.workspace.targetWorkspace : block.workspace;
        block = Blockly.Procedures.getPrototypeBlock(block.getProcCode(), workspaceToSearch);
    }
    Blockly.Procedures.externalProcedureDefCallback(block.mutationToDom(), Blockly.Procedures.editProcedureCallbackFactory_(block));
};
Blockly.Procedures.editProcedureCallbackFactory_ = function (block) {
    return function (mutation) {
        if (mutation) {
            Blockly.Procedures.mutateCallersAndPrototype(block.getProcCode(), block.workspace, mutation);
            var workspace = block.workspace.isFlyout ?
                block.workspace.targetWorkspace : block.workspace;
            workspace.refreshToolboxSelection_();
        }
    };
};
Blockly.Procedures.externalProcedureDefCallback = function () {
    alert('External procedure editor must be override Blockly.Procedures.externalProcedureDefCallback');
};
Blockly.Procedures.makeEditOption = function (block) {
    var editOption = {
        enabled: true,
        text: Blockly.Msg.EDIT_PROCEDURE,
        callback: function () {
            Blockly.Procedures.editProcedureCallback_(block);
        }
    };
    return editOption;
};
Blockly.Procedures.showProcedureDefCallback_ = function (block) {
    alert('TODO(#1136): implement showing procedure definition (procCode was "' +
        block.procCode_ + '")');
};
Blockly.Procedures.makeShowDefinitionOption = function (block) {
    var option = {
        enabled: true,
        text: Blockly.Msg.SHOW_PROCEDURE_DEFINITION,
        callback: function () {
            Blockly.Procedures.showProcedureDefCallback_(block);
        }
    };
    return option;
};
Blockly.Procedures.deleteProcedureDefCallback = function (procCode, definitionRoot) {
    var callers = Blockly.Procedures.getCallers(procCode, definitionRoot.workspace, definitionRoot, false);
    if (callers.length > 0) {
        return false;
    }
    var workspace = definitionRoot.workspace;
    Blockly.Events.setGroup(true);
    definitionRoot.dispose();
    Blockly.Events.setGroup(false);
    workspace.refreshToolboxSelection_();
    return true;
};
'use strict';
goog.provide('Blockly.RenderedConnection');
goog.require('Blockly.Connection');
Blockly.RenderedConnection = function (source, type) {
    Blockly.RenderedConnection.superClass_.constructor.call(this, source, type);
    this.offsetInBlock_ = new goog.math.Coordinate(0, 0);
};
goog.inherits(Blockly.RenderedConnection, Blockly.Connection);
Blockly.RenderedConnection.prototype.distanceFrom = function (otherConnection) {
    var xDiff = this.x_ - otherConnection.x_;
    var yDiff = this.y_ - otherConnection.y_;
    return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
};
Blockly.RenderedConnection.prototype.bumpAwayFrom_ = function (staticConnection) {
    if (this.sourceBlock_.workspace.isDragging()) {
        return;
    }
    var rootBlock = this.sourceBlock_.getRootBlock();
    if (rootBlock.isInFlyout) {
        return;
    }
    var reverse = false;
    if (!rootBlock.isMovable()) {
        rootBlock = staticConnection.getSourceBlock().getRootBlock();
        if (!rootBlock.isMovable()) {
            return;
        }
        staticConnection = this;
        reverse = true;
    }
    var selected = Blockly.selected == rootBlock;
    selected || rootBlock.addSelect();
    var dx = (staticConnection.x_ + Blockly.SNAP_RADIUS) - this.x_;
    var dy = (staticConnection.y_ + Blockly.SNAP_RADIUS) - this.y_;
    if (reverse) {
        dy = -dy;
    }
    if (rootBlock.RTL) {
        dx = -dx;
    }
    rootBlock.moveBy(dx, dy);
    selected || rootBlock.removeSelect();
};
Blockly.RenderedConnection.prototype.moveTo = function (x, y) {
    if (this.inDB_) {
        this.db_.removeConnection_(this);
    }
    this.x_ = x;
    this.y_ = y;
    if (!this.hidden_) {
        this.db_.addConnection(this);
    }
};
Blockly.RenderedConnection.prototype.moveBy = function (dx, dy) {
    this.moveTo(this.x_ + dx, this.y_ + dy);
};
Blockly.RenderedConnection.prototype.moveToOffset = function (blockTL) {
    this.moveTo(blockTL.x + this.offsetInBlock_.x, blockTL.y + this.offsetInBlock_.y);
};
Blockly.RenderedConnection.prototype.setOffsetInBlock = function (x, y) {
    this.offsetInBlock_.x = x;
    this.offsetInBlock_.y = y;
};
Blockly.RenderedConnection.prototype.tighten_ = function () {
    var dx = this.targetConnection.x_ - this.x_;
    var dy = this.targetConnection.y_ - this.y_;
    if (dx != 0 || dy != 0) {
        var block = this.targetBlock();
        var svgRoot = block.getSvgRoot();
        if (!svgRoot) {
            throw 'block is not rendered.';
        }
        var xy = Blockly.utils.getRelativeXY(svgRoot);
        block.getSvgRoot().setAttribute('transform', 'translate(' + (xy.x - dx) + ',' + (xy.y - dy) + ')');
        block.moveConnections_(-dx, -dy);
    }
};
Blockly.RenderedConnection.prototype.closest = function (maxLimit, dxy) {
    return this.dbOpposite_.searchForClosest(this, maxLimit, dxy);
};
Blockly.RenderedConnection.prototype.highlight = function () {
    var steps;
    steps = 'm -20,0 h 5 ' + Blockly.BlockSvg.NOTCH_PATH_LEFT + ' h 5';
    var xy = this.sourceBlock_.getRelativeToSurfaceXY();
    var x = this.x_ - xy.x;
    var y = this.y_ - xy.y;
    Blockly.Connection.highlightedPath_ = Blockly.utils.createSvgElement('path', {
        'class': 'blocklyHighlightedConnectionPath',
        'd': steps,
        transform: 'translate(' + x + ',' + y + ')' +
            (this.sourceBlock_.RTL ? ' scale(-1 1)' : '')
    }, this.sourceBlock_.getSvgRoot());
};
Blockly.RenderedConnection.prototype.unhideAll = function () {
    this.setHidden(false);
    var renderList = [];
    if (this.type != Blockly.INPUT_VALUE && this.type != Blockly.NEXT_STATEMENT) {
        return renderList;
    }
    var block = this.targetBlock();
    if (block) {
        var connections;
        if (block.isCollapsed()) {
            connections = [];
            block.outputConnection && connections.push(block.outputConnection);
            block.nextConnection && connections.push(block.nextConnection);
            block.previousConnection && connections.push(block.previousConnection);
        }
        else {
            connections = block.getConnections_(true);
        }
        for (var i = 0; i < connections.length; i++) {
            renderList.push.apply(renderList, connections[i].unhideAll());
        }
        if (!renderList.length) {
            renderList[0] = block;
        }
    }
    return renderList;
};
Blockly.RenderedConnection.prototype.unhighlight = function () {
    goog.dom.removeNode(Blockly.Connection.highlightedPath_);
    delete Blockly.Connection.highlightedPath_;
};
Blockly.RenderedConnection.prototype.setHidden = function (hidden) {
    this.hidden_ = hidden;
    if (hidden && this.inDB_) {
        this.db_.removeConnection_(this);
    }
    else if (!hidden && !this.inDB_) {
        this.db_.addConnection(this);
    }
};
Blockly.RenderedConnection.prototype.hideAll = function () {
    this.setHidden(true);
    if (this.targetConnection) {
        var blocks = this.targetBlock().getDescendants(false);
        for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];
            var connections = block.getConnections_(true);
            for (var j = 0; j < connections.length; j++) {
                connections[j].setHidden(true);
            }
            var icons = block.getIcons();
            for (var j = 0; j < icons.length; j++) {
                icons[j].setVisible(false);
            }
        }
    }
};
Blockly.RenderedConnection.prototype.isConnectionAllowed = function (candidate, maxRadius) {
    if (this.distanceFrom(candidate) > maxRadius) {
        return false;
    }
    return Blockly.RenderedConnection.superClass_.isConnectionAllowed.call(this, candidate);
};
Blockly.RenderedConnection.prototype.disconnectInternal_ = function (parentBlock, childBlock) {
    Blockly.RenderedConnection.superClass_.disconnectInternal_.call(this, parentBlock, childBlock);
    if (parentBlock.rendered) {
        parentBlock.render();
    }
    if (childBlock.rendered) {
        childBlock.updateDisabled();
        childBlock.render();
    }
};
Blockly.RenderedConnection.prototype.respawnShadow_ = function () {
    var parentBlock = this.getSourceBlock();
    var shadow = this.getShadowDom();
    if (parentBlock.workspace && shadow && Blockly.Events.recordUndo) {
        Blockly.RenderedConnection.superClass_.respawnShadow_.call(this);
        var blockShadow = this.targetBlock();
        if (!blockShadow) {
            throw 'Couldn\'t respawn the shadow block that should exist here.';
        }
        blockShadow.initSvg();
        blockShadow.render(false);
        if (parentBlock.rendered) {
            parentBlock.render();
        }
    }
};
Blockly.RenderedConnection.prototype.neighbours_ = function (maxLimit) {
    return this.dbOpposite_.getNeighbours(this, maxLimit);
};
Blockly.RenderedConnection.prototype.connect_ = function (childConnection) {
    Blockly.RenderedConnection.superClass_.connect_.call(this, childConnection);
    var parentConnection = this;
    var parentBlock = parentConnection.getSourceBlock();
    var childBlock = childConnection.getSourceBlock();
    if (parentBlock.rendered) {
        parentBlock.updateDisabled();
    }
    if (childBlock.rendered) {
        childBlock.updateDisabled();
    }
    if (parentBlock.rendered && childBlock.rendered) {
        if (parentConnection.type == Blockly.NEXT_STATEMENT ||
            parentConnection.type == Blockly.PREVIOUS_STATEMENT) {
            childBlock.render();
        }
        else {
            parentBlock.render();
        }
    }
};
Blockly.RenderedConnection.prototype.onCheckChanged_ = function () {
    if (this.isConnected() && !this.checkType_(this.targetConnection)) {
        var child = this.isSuperior() ? this.targetBlock() : this.sourceBlock_;
        child.unplug();
        this.sourceBlock_.bumpNeighbours_();
    }
};
'use strict';
goog.provide('Blockly.scratchBlocksUtils');
Blockly.scratchBlocksUtils.measureText = function (fontSize, fontFamily, fontWeight, text) {
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    context.font = fontWeight + ' ' + fontSize + ' ' + fontFamily;
    return context.measureText(text).width;
};
Blockly.scratchBlocksUtils.encodeEntities = function (rawStr) {
    return rawStr.replace(/[\u00A0-\u9999<>&]/gim, function (i) {
        return '&#' + i.charCodeAt(0) + ';';
    });
};
Blockly.scratchBlocksUtils.changeObscuredShadowIds = function (block) {
    var blocks = block.getDescendants(false);
    for (var i = blocks.length - 1; i >= 0; i--) {
        var descendant = blocks[i];
        for (var j = 0; j < descendant.inputList.length; j++) {
            var connection = descendant.inputList[j].connection;
            if (connection) {
                var shadowDom = connection.getShadowDom();
                if (shadowDom) {
                    shadowDom.setAttribute('id', Blockly.utils.genUid());
                    connection.setShadowDom(shadowDom);
                }
            }
        }
    }
};
Blockly.scratchBlocksUtils.isShadowArgumentReporter = function (block) {
    return (block.isShadow() && (block.type == 'argument_reporter_boolean' ||
        block.type == 'argument_reporter_string_number'));
};
Blockly.scratchBlocksUtils.compareStrings = function (str1, str2) {
    return str1.localeCompare(str2, [], {
        sensitivity: 'base',
        numeric: true
    });
};
Blockly.scratchBlocksUtils.blockIsRecyclable = function (block) {
    if (block.mutationToDom && block.domToMutation) {
        return false;
    }
    for (var i = 0; i < block.inputList.length; i++) {
        var input = block.inputList[i];
        for (var j = 0; j < input.fieldRow.length; j++) {
            var field = input.fieldRow[j];
            if (field instanceof Blockly.FieldVariable ||
                field instanceof Blockly.FieldVariableGetter) {
                return false;
            }
            if (field instanceof Blockly.FieldDropdown ||
                field instanceof Blockly.FieldNumberDropdown ||
                field instanceof Blockly.FieldTextDropdown) {
                if (field.isOptionListDynamic()) {
                    return false;
                }
            }
        }
        if (input.connection) {
            var child = input.connection.targetBlock();
            if (child && !Blockly.scratchBlocksUtils.blockIsRecyclable(child)) {
                return false;
            }
        }
    }
    return true;
};
Blockly.scratchBlocksUtils.duplicateAndDragCallback = function (oldBlock, event) {
    var isMouseEvent = Blockly.Touch.getTouchIdentifierFromEvent(event) === 'mouse';
    return function (e) {
        setTimeout(function () {
            var ws = oldBlock.workspace;
            var svgRootOld = oldBlock.getSvgRoot();
            if (!svgRootOld) {
                throw new Error('oldBlock is not rendered.');
            }
            var xml = Blockly.Xml.blockToDom(oldBlock);
            ws.setResizesEnabled(false);
            Blockly.Events.disable();
            try {
                var newBlock = Blockly.Xml.domToBlock(xml, ws);
                Blockly.scratchBlocksUtils.changeObscuredShadowIds(newBlock);
                var svgRootNew = newBlock.getSvgRoot();
                if (!svgRootNew) {
                    throw new Error('newBlock is not rendered.');
                }
                var oldBlockPosWs = oldBlock.getRelativeToSurfaceXY();
                newBlock.moveBy(oldBlockPosWs.x, oldBlockPosWs.y);
                if (!isMouseEvent) {
                    var offsetX = ws.RTL ? -100 : 100;
                    var offsetY = 100;
                    newBlock.moveBy(offsetX, offsetY);
                }
            }
            finally {
                Blockly.Events.enable();
            }
            if (Blockly.Events.isEnabled()) {
                Blockly.Events.fire(new Blockly.Events.BlockCreate(newBlock));
            }
            if (isMouseEvent) {
                var fakeEvent = {
                    clientX: event.clientX,
                    clientY: event.clientY,
                    type: 'mousedown',
                    preventDefault: function () {
                        e.preventDefault();
                    },
                    stopPropagation: function () {
                        e.stopPropagation();
                    },
                    target: e.target
                };
                ws.startDragWithFakeEvent(fakeEvent, newBlock);
            }
        }, 0);
    };
};
'use strict';
goog.provide('Blockly.Bubble');
goog.require('Blockly.Touch');
goog.require('Blockly.Workspace');
goog.require('goog.dom');
goog.require('goog.math.Coordinate');
goog.require('goog.userAgent');
Blockly.Bubble = function (workspace, content, shape, anchorXY, bubbleWidth, bubbleHeight) {
    this.workspace_ = workspace;
    this.content_ = content;
    this.shape_ = shape;
    var angle = Blockly.Bubble.ARROW_ANGLE;
    if (this.workspace_.RTL) {
        angle = -angle;
    }
    this.arrow_radians_ = Blockly.utils.toRadians(angle);
    var canvas = workspace.getBubbleCanvas();
    canvas.appendChild(this.createDom_(content, !!(bubbleWidth && bubbleHeight)));
    this.setAnchorLocation(anchorXY);
    if (!bubbleWidth || !bubbleHeight) {
        var bBox = (this.content_).getBBox();
        bubbleWidth = bBox.width + 2 * Blockly.Bubble.BORDER_WIDTH;
        bubbleHeight = bBox.height + 2 * Blockly.Bubble.BORDER_WIDTH;
    }
    this.setBubbleSize(bubbleWidth, bubbleHeight);
    this.positionBubble_();
    this.renderArrow_();
    this.rendered_ = true;
    if (!workspace.options.readOnly) {
        Blockly.bindEventWithChecks_(this.bubbleBack_, 'mousedown', this, this.bubbleMouseDown_);
        if (this.resizeGroup_) {
            Blockly.bindEventWithChecks_(this.resizeGroup_, 'mousedown', this, this.resizeMouseDown_);
        }
    }
};
Blockly.Bubble.BORDER_WIDTH = 6;
Blockly.Bubble.ARROW_THICKNESS = 5;
Blockly.Bubble.ARROW_ANGLE = 20;
Blockly.Bubble.ARROW_BEND = 4;
Blockly.Bubble.ANCHOR_RADIUS = 8;
Blockly.Bubble.onMouseUpWrapper_ = null;
Blockly.Bubble.onMouseMoveWrapper_ = null;
Blockly.Bubble.prototype.resizeCallback_ = null;
Blockly.Bubble.unbindDragEvents_ = function () {
    if (Blockly.Bubble.onMouseUpWrapper_) {
        Blockly.unbindEvent_(Blockly.Bubble.onMouseUpWrapper_);
        Blockly.Bubble.onMouseUpWrapper_ = null;
    }
    if (Blockly.Bubble.onMouseMoveWrapper_) {
        Blockly.unbindEvent_(Blockly.Bubble.onMouseMoveWrapper_);
        Blockly.Bubble.onMouseMoveWrapper_ = null;
    }
};
Blockly.Bubble.bubbleMouseUp_ = function () {
    Blockly.Touch.clearTouchIdentifier();
    Blockly.Bubble.unbindDragEvents_();
};
Blockly.Bubble.prototype.rendered_ = false;
Blockly.Bubble.prototype.anchorXY_ = null;
Blockly.Bubble.prototype.relativeLeft_ = 0;
Blockly.Bubble.prototype.relativeTop_ = 0;
Blockly.Bubble.prototype.width_ = 0;
Blockly.Bubble.prototype.height_ = 0;
Blockly.Bubble.prototype.autoLayout_ = true;
Blockly.Bubble.prototype.createDom_ = function (content, hasResize) {
    this.bubbleGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    var filter = { 'filter': 'url(#' + this.workspace_.options.embossFilterId + ')' };
    if (goog.userAgent.getUserAgentString().indexOf('JavaFX') != -1) {
        filter = {};
    }
    var bubbleEmboss = Blockly.utils.createSvgElement('g', filter, this.bubbleGroup_);
    this.bubbleArrow_ = Blockly.utils.createSvgElement('path', {}, bubbleEmboss);
    this.bubbleBack_ = Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyDraggable',
        'x': 0,
        'y': 0,
        'rx': Blockly.Bubble.BORDER_WIDTH,
        'ry': Blockly.Bubble.BORDER_WIDTH
    }, bubbleEmboss);
    if (hasResize) {
        this.resizeGroup_ = Blockly.utils.createSvgElement('g', { 'class': this.workspace_.RTL ?
                'blocklyResizeSW' : 'blocklyResizeSE' }, this.bubbleGroup_);
        var resizeSize = 2 * Blockly.Bubble.BORDER_WIDTH;
        Blockly.utils.createSvgElement('polygon', { 'points': '0,x x,x x,0'.replace(/x/g, resizeSize.toString()) }, this.resizeGroup_);
        Blockly.utils.createSvgElement('line', {
            'class': 'blocklyResizeLine',
            'x1': resizeSize / 3, 'y1': resizeSize - 1,
            'x2': resizeSize - 1, 'y2': resizeSize / 3
        }, this.resizeGroup_);
        Blockly.utils.createSvgElement('line', {
            'class': 'blocklyResizeLine',
            'x1': resizeSize * 2 / 3,
            'y1': resizeSize - 1,
            'x2': resizeSize - 1,
            'y2': resizeSize * 2 / 3
        }, this.resizeGroup_);
    }
    else {
        this.resizeGroup_ = null;
    }
    this.bubbleGroup_.appendChild(content);
    return this.bubbleGroup_;
};
Blockly.Bubble.prototype.getSvgRoot = function () {
    return this.bubbleGroup_;
};
Blockly.Bubble.prototype.setSvgId = function (id) {
    if (this.bubbleGroup_.dataset) {
        this.bubbleGroup_.dataset.blockId = id;
    }
};
Blockly.Bubble.prototype.bubbleMouseDown_ = function (e) {
    var gesture = this.workspace_.getGesture(e);
    if (gesture) {
        gesture.handleBubbleStart(e, this);
    }
};
Blockly.Bubble.prototype.showContextMenu_ = function (_e) {
};
Blockly.Bubble.prototype.isDeletable = function () {
    return false;
};
Blockly.Bubble.prototype.resizeMouseDown_ = function (e) {
    this.promote_();
    Blockly.Bubble.unbindDragEvents_();
    if (Blockly.utils.isRightButton(e)) {
        e.stopPropagation();
        return;
    }
    this.workspace_.startDrag(e, new goog.math.Coordinate(this.workspace_.RTL ? -this.width_ : this.width_, this.height_));
    Blockly.Bubble.onMouseUpWrapper_ = Blockly.bindEventWithChecks_(document, 'mouseup', this, Blockly.Bubble.bubbleMouseUp_);
    Blockly.Bubble.onMouseMoveWrapper_ = Blockly.bindEventWithChecks_(document, 'mousemove', this, this.resizeMouseMove_);
    Blockly.hideChaff();
    e.stopPropagation();
};
Blockly.Bubble.prototype.resizeMouseMove_ = function (e) {
    this.autoLayout_ = false;
    var newXY = this.workspace_.moveDrag(e);
    this.setBubbleSize(this.workspace_.RTL ? -newXY.x : newXY.x, newXY.y);
    if (this.workspace_.RTL) {
        this.positionBubble_();
    }
};
Blockly.Bubble.prototype.registerResizeEvent = function (callback) {
    this.resizeCallback_ = callback;
};
Blockly.Bubble.prototype.promote_ = function () {
    var svgGroup = this.bubbleGroup_.parentNode;
    if (svgGroup.lastChild !== this.bubbleGroup_) {
        svgGroup.appendChild(this.bubbleGroup_);
        return true;
    }
    return false;
};
Blockly.Bubble.prototype.setAnchorLocation = function (xy) {
    this.anchorXY_ = xy;
    if (this.rendered_) {
        this.positionBubble_();
    }
};
Blockly.Bubble.prototype.layoutBubble_ = function () {
    var relativeLeft = -this.width_ / 4;
    var relativeTop = -this.height_ - Blockly.BlockSvg.MIN_BLOCK_Y;
    var metrics = this.workspace_.getMetrics();
    metrics.viewWidth /= this.workspace_.scale;
    metrics.viewLeft /= this.workspace_.scale;
    var anchorX = this.anchorXY_.x;
    if (this.workspace_.RTL) {
        if (anchorX - metrics.viewLeft - relativeLeft - this.width_ <
            Blockly.Scrollbar.scrollbarThickness) {
            relativeLeft = anchorX - metrics.viewLeft - this.width_ -
                Blockly.Scrollbar.scrollbarThickness;
        }
        else if (anchorX - metrics.viewLeft - relativeLeft >
            metrics.viewWidth) {
            relativeLeft = anchorX - metrics.viewLeft - metrics.viewWidth;
        }
    }
    else {
        if (anchorX + relativeLeft < metrics.viewLeft) {
            relativeLeft = metrics.viewLeft - anchorX;
        }
        else if (metrics.viewLeft + metrics.viewWidth <
            anchorX + relativeLeft + this.width_ +
                Blockly.BlockSvg.SEP_SPACE_X +
                Blockly.Scrollbar.scrollbarThickness) {
            relativeLeft = metrics.viewLeft + metrics.viewWidth - anchorX -
                this.width_ - Blockly.Scrollbar.scrollbarThickness;
        }
    }
    if (this.anchorXY_.y + relativeTop < metrics.viewTop) {
        var bBox = (this.shape_).getBBox();
        relativeTop = bBox.height;
    }
    this.relativeLeft_ = relativeLeft;
    this.relativeTop_ = relativeTop;
};
Blockly.Bubble.prototype.positionBubble_ = function () {
    var left = this.anchorXY_.x;
    if (this.workspace_.RTL) {
        left -= this.relativeLeft_;
    }
    else {
        left += this.relativeLeft_;
    }
    var top = this.relativeTop_ + this.anchorXY_.y;
    this.moveTo(left, top);
};
Blockly.Bubble.prototype.moveTo = function (x, y) {
    this.bubbleGroup_.setAttribute('transform', 'translate(' + x + ',' + y + ')');
};
Blockly.Bubble.prototype.getBubbleSize = function () {
    return { width: this.width_, height: this.height_ };
};
Blockly.Bubble.prototype.setBubbleSize = function (width, height) {
    var doubleBorderWidth = 2 * Blockly.Bubble.BORDER_WIDTH;
    width = Math.max(width, doubleBorderWidth + 45);
    height = Math.max(height, doubleBorderWidth + 20);
    this.width_ = width;
    this.height_ = height;
    this.bubbleBack_.setAttribute('width', width);
    this.bubbleBack_.setAttribute('height', height);
    if (this.resizeGroup_) {
        if (this.workspace_.RTL) {
            var resizeSize = 2 * Blockly.Bubble.BORDER_WIDTH;
            this.resizeGroup_.setAttribute('transform', 'translate(' +
                resizeSize + ',' + (height - doubleBorderWidth) + ') scale(-1 1)');
        }
        else {
            this.resizeGroup_.setAttribute('transform', 'translate(' +
                (width - doubleBorderWidth) + ',' +
                (height - doubleBorderWidth) + ')');
        }
    }
    if (this.rendered_) {
        if (this.autoLayout_) {
            this.layoutBubble_();
        }
        this.positionBubble_();
        this.renderArrow_();
    }
    if (this.resizeCallback_) {
        this.resizeCallback_();
    }
};
Blockly.Bubble.prototype.renderArrow_ = function () {
    var steps = [];
    var relBubbleX = this.width_ / 2;
    var relBubbleY = this.height_ / 2;
    var relAnchorX = -this.relativeLeft_;
    var relAnchorY = -this.relativeTop_;
    if (relBubbleX == relAnchorX && relBubbleY == relAnchorY) {
        steps.push('M ' + relBubbleX + ',' + relBubbleY);
    }
    else {
        var rise = relAnchorY - relBubbleY;
        var run = relAnchorX - relBubbleX;
        if (this.workspace_.RTL) {
            run *= -1;
        }
        var hypotenuse = Math.sqrt(rise * rise + run * run);
        var angle = Math.acos(run / hypotenuse);
        if (rise < 0) {
            angle = 2 * Math.PI - angle;
        }
        var rightAngle = angle + Math.PI / 2;
        if (rightAngle > Math.PI * 2) {
            rightAngle -= Math.PI * 2;
        }
        var rightRise = Math.sin(rightAngle);
        var rightRun = Math.cos(rightAngle);
        var bubbleSize = this.getBubbleSize();
        var thickness = (bubbleSize.width + bubbleSize.height) /
            Blockly.Bubble.ARROW_THICKNESS;
        thickness = Math.min(thickness, bubbleSize.width, bubbleSize.height) / 4;
        var backoffRatio = 1 - Blockly.Bubble.ANCHOR_RADIUS / hypotenuse;
        relAnchorX = relBubbleX + backoffRatio * run;
        relAnchorY = relBubbleY + backoffRatio * rise;
        var baseX1 = relBubbleX + thickness * rightRun;
        var baseY1 = relBubbleY + thickness * rightRise;
        var baseX2 = relBubbleX - thickness * rightRun;
        var baseY2 = relBubbleY - thickness * rightRise;
        var swirlAngle = angle + this.arrow_radians_;
        if (swirlAngle > Math.PI * 2) {
            swirlAngle -= Math.PI * 2;
        }
        var swirlRise = Math.sin(swirlAngle) *
            hypotenuse / Blockly.Bubble.ARROW_BEND;
        var swirlRun = Math.cos(swirlAngle) *
            hypotenuse / Blockly.Bubble.ARROW_BEND;
        steps.push('M' + baseX1 + ',' + baseY1);
        steps.push('C' + (baseX1 + swirlRun) + ',' + (baseY1 + swirlRise) +
            ' ' + relAnchorX + ',' + relAnchorY +
            ' ' + relAnchorX + ',' + relAnchorY);
        steps.push('C' + relAnchorX + ',' + relAnchorY +
            ' ' + (baseX2 + swirlRun) + ',' + (baseY2 + swirlRise) +
            ' ' + baseX2 + ',' + baseY2);
    }
    steps.push('z');
    this.bubbleArrow_.setAttribute('d', steps.join(' '));
};
Blockly.Bubble.prototype.setColour = function (hexColour) {
    this.bubbleBack_.setAttribute('fill', hexColour);
    this.bubbleArrow_.setAttribute('fill', hexColour);
};
Blockly.Bubble.prototype.dispose = function () {
    Blockly.Bubble.unbindDragEvents_();
    goog.dom.removeNode(this.bubbleGroup_);
    this.bubbleGroup_ = null;
    this.bubbleArrow_ = null;
    this.bubbleBack_ = null;
    this.resizeGroup_ = null;
    this.workspace_ = null;
    this.content_ = null;
    this.shape_ = null;
};
Blockly.Bubble.prototype.moveDuringDrag = function (dragSurface, newLoc) {
    if (dragSurface) {
        dragSurface.translateSurface(newLoc.x, newLoc.y);
    }
    else {
        this.moveTo(newLoc.x, newLoc.y);
    }
    if (this.workspace_.RTL) {
        this.relativeLeft_ = this.anchorXY_.x - newLoc.x - this.width_;
    }
    else {
        this.relativeLeft_ = newLoc.x - this.anchorXY_.x;
    }
    this.relativeTop_ = newLoc.y - this.anchorXY_.y;
    this.renderArrow_();
};
Blockly.Bubble.prototype.getRelativeToSurfaceXY = function () {
    return new goog.math.Coordinate(this.workspace_.RTL ? this.anchorXY_.x - this.relativeLeft_ : this.anchorXY_.x + this.relativeLeft_, this.anchorXY_.y + this.relativeTop_);
};
Blockly.Bubble.prototype.setAutoLayout = function (enable) {
    this.autoLayout_ = enable;
};
'use strict';
goog.provide('Blockly.ScratchBubble');
goog.require('Blockly.Touch');
goog.require('Blockly.Workspace');
goog.require('goog.dom');
goog.require('goog.math');
goog.require('goog.math.Coordinate');
goog.require('goog.userAgent');
Blockly.ScratchBubble = function (comment, workspace, content, anchorXY, bubbleWidth, bubbleHeight, bubbleX, bubbleY, minimized) {
    this.comment = comment;
    this.workspace_ = workspace;
    this.content_ = content;
    this.x = bubbleX;
    this.y = bubbleY;
    this.isMinimized_ = minimized || false;
    var canvas = workspace.getBubbleCanvas();
    canvas.appendChild(this.createDom_(content, !!(bubbleWidth && bubbleHeight), this.isMinimized_));
    this.setAnchorLocation(anchorXY);
    if (!bubbleWidth || !bubbleHeight) {
        var bBox = (this.content_).getBBox();
        bubbleWidth = bBox.width + 2 * Blockly.ScratchBubble.BORDER_WIDTH;
        bubbleHeight = bBox.height + 2 * Blockly.ScratchBubble.BORDER_WIDTH;
    }
    this.setBubbleSize(bubbleWidth, bubbleHeight);
    this.positionBubble_();
    this.renderArrow_();
    this.rendered_ = true;
    if (!workspace.options.readOnly) {
        Blockly.bindEventWithChecks_(this.minimizeArrow_, 'mousedown', this, this.minimizeArrowMouseDown_, true);
        Blockly.bindEventWithChecks_(this.minimizeArrow_, 'mouseout', this, this.minimizeArrowMouseOut_, true);
        Blockly.bindEventWithChecks_(this.minimizeArrow_, 'mouseup', this, this.minimizeArrowMouseUp_, true);
        Blockly.bindEventWithChecks_(this.deleteIcon_, 'mousedown', this, this.deleteMouseDown_, true);
        Blockly.bindEventWithChecks_(this.deleteIcon_, 'mouseout', this, this.deleteMouseOut_, true);
        Blockly.bindEventWithChecks_(this.deleteIcon_, 'mouseup', this, this.deleteMouseUp_, true);
        Blockly.bindEventWithChecks_(this.commentTopBar_, 'mousedown', this, this.bubbleMouseDown_);
        Blockly.bindEventWithChecks_(this.bubbleBack_, 'mousedown', this, this.bubbleMouseDown_);
        if (this.resizeGroup_) {
            Blockly.bindEventWithChecks_(this.resizeGroup_, 'mousedown', this, this.resizeMouseDown_);
            Blockly.bindEventWithChecks_(this.resizeGroup_, 'mouseup', this, this.resizeMouseUp_);
        }
    }
    this.setAutoLayout(false);
    this.moveTo(this.x, this.y);
};
goog.inherits(Blockly.ScratchBubble, Blockly.Bubble);
Blockly.ScratchBubble.BORDER_WIDTH = 1;
Blockly.ScratchBubble.LINE_THICKNESS = 1;
Blockly.ScratchBubble.TOP_BAR_HEIGHT = 32;
Blockly.ScratchBubble.MINIMIZE_ICON_SIZE = 32;
Blockly.ScratchBubble.DELETE_ICON_SIZE = 32;
Blockly.ScratchBubble.TOP_BAR_ICON_INSET = 0;
Blockly.ScratchBubble.RESIZE_SIZE = 16;
Blockly.ScratchBubble.RESIZE_CORNER_PAD = 4;
Blockly.ScratchBubble.RESIZE_OUTER_PAD = 8;
Blockly.ScratchBubble.prototype.createDom_ = function (content, hasResize, minimized) {
    this.bubbleGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    this.bubbleArrow_ = Blockly.utils.createSvgElement('line', { 'stroke-linecap': 'round' }, this.bubbleGroup_);
    this.bubbleBack_ = Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyDraggable scratchCommentRect',
        'x': 0,
        'y': 0,
        'rx': 4 * Blockly.ScratchBubble.BORDER_WIDTH,
        'ry': 4 * Blockly.ScratchBubble.BORDER_WIDTH
    }, this.bubbleGroup_);
    this.labelText_ = content.labelText;
    this.createCommentTopBar_();
    this.commentEditor_ = content.commentEditor;
    this.bubbleGroup_.appendChild(this.commentEditor_);
    if (hasResize) {
        this.createResizeHandle_();
    }
    else {
        this.resizeGroup_ = null;
    }
    if (minimized) {
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-up.svg');
        this.commentEditor_.setAttribute('display', 'none');
        this.resizeGroup_.setAttribute('display', 'none');
    }
    else {
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-down.svg');
        this.topBarLabel_.setAttribute('display', 'none');
    }
    return this.bubbleGroup_;
};
Blockly.ScratchBubble.prototype.createCommentTopBar_ = function () {
    this.commentTopBar_ = Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyDraggable scratchCommentTopBar',
        'rx': Blockly.ScratchBubble.BORDER_WIDTH,
        'ry': Blockly.ScratchBubble.BORDER_WIDTH,
        'height': Blockly.ScratchBubble.TOP_BAR_HEIGHT
    }, this.bubbleGroup_);
    this.createTopBarIcons_();
    this.createTopBarLabel_();
};
Blockly.ScratchBubble.prototype.createTopBarIcons_ = function () {
    var topBarMiddleY = (Blockly.ScratchBubble.TOP_BAR_HEIGHT / 2) +
        Blockly.ScratchBubble.BORDER_WIDTH;
    var xInset = Blockly.ScratchBubble.TOP_BAR_ICON_INSET;
    this.minimizeArrow_ = Blockly.utils.createSvgElement('image', {
        'x': xInset,
        'y': topBarMiddleY - Blockly.ScratchBubble.MINIMIZE_ICON_SIZE / 2,
        'width': Blockly.ScratchBubble.MINIMIZE_ICON_SIZE,
        'height': Blockly.ScratchBubble.MINIMIZE_ICON_SIZE
    }, this.bubbleGroup_);
    this.deleteIcon_ = Blockly.utils.createSvgElement('image', {
        'x': xInset,
        'y': topBarMiddleY - Blockly.ScratchBubble.DELETE_ICON_SIZE / 2,
        'width': Blockly.ScratchBubble.DELETE_ICON_SIZE,
        'height': Blockly.ScratchBubble.DELETE_ICON_SIZE
    }, this.bubbleGroup_);
    this.deleteIcon_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'delete-x.svg');
};
Blockly.ScratchBubble.prototype.createTopBarLabel_ = function () {
    this.topBarLabel_ = Blockly.utils.createSvgElement('text', {
        'class': 'scratchCommentText',
        'x': this.width_ / 2,
        'y': (Blockly.ScratchBubble.TOP_BAR_HEIGHT / 2) + Blockly.ScratchBubble.BORDER_WIDTH,
        'text-anchor': 'middle',
        'dominant-baseline': 'middle'
    }, this.bubbleGroup_);
    var labelTextNode = document.createTextNode(this.labelText_);
    this.topBarLabel_.appendChild(labelTextNode);
};
Blockly.ScratchBubble.prototype.createResizeHandle_ = function () {
    this.resizeGroup_ = Blockly.utils.createSvgElement('g', { 'class': this.workspace_.RTL ?
            'scratchCommentResizeSW' : 'scratchCommentResizeSE' }, this.bubbleGroup_);
    var resizeSize = Blockly.ScratchBubble.RESIZE_SIZE;
    var outerPad = Blockly.ScratchBubble.RESIZE_OUTER_PAD;
    var cornerPad = Blockly.ScratchBubble.RESIZE_CORNER_PAD;
    Blockly.utils.createSvgElement('polygon', {
        'points': [
            -outerPad, resizeSize + cornerPad,
            resizeSize + cornerPad, resizeSize + cornerPad,
            resizeSize + cornerPad, -outerPad
        ].join(' ')
    }, this.resizeGroup_);
    Blockly.utils.createSvgElement('line', {
        'class': 'blocklyResizeLine',
        'x1': resizeSize / 3, 'y1': resizeSize - 1,
        'x2': resizeSize - 1, 'y2': resizeSize / 3
    }, this.resizeGroup_);
    Blockly.utils.createSvgElement('line', {
        'class': 'blocklyResizeLine',
        'x1': resizeSize * 2 / 3,
        'y1': resizeSize - 1,
        'x2': resizeSize - 1,
        'y2': resizeSize * 2 / 3
    }, this.resizeGroup_);
};
Blockly.ScratchBubble.prototype.showContextMenu_ = function (e) {
    if (this.workspace_.options.readOnly) {
        return;
    }
    if (this.contextMenuCallback_) {
        this.contextMenuCallback_(e);
    }
};
Blockly.ScratchBubble.prototype.minimizeArrowMouseDown_ = function (e) {
    this.shouldToggleMinimize_ = true;
    e.stopPropagation();
};
Blockly.ScratchBubble.prototype.minimizeArrowMouseOut_ = function (_e) {
    this.shouldToggleMinimize_ = false;
};
Blockly.ScratchBubble.prototype.minimizeArrowMouseUp_ = function (e) {
    if (this.shouldToggleMinimize_) {
        this.shouldToggleMinimize_ = false;
        if (this.minimizeToggleCallback_) {
            this.minimizeToggleCallback_.call(this);
        }
    }
    e.stopPropagation();
};
Blockly.ScratchBubble.prototype.deleteMouseDown_ = function (e) {
    this.shouldDelete_ = true;
    e.stopPropagation();
};
Blockly.ScratchBubble.prototype.deleteMouseOut_ = function (_e) {
    this.shouldDelete_ = false;
};
Blockly.ScratchBubble.prototype.deleteMouseUp_ = function (e) {
    if (this.shouldDelete_) {
        this.shouldDelete_ = false;
        if (this.deleteCallback_) {
            this.deleteCallback_.call(this);
        }
    }
    e.stopPropagation();
};
Blockly.ScratchBubble.prototype.resizeMouseDown_ = function (e) {
    this.resizeStartSize_ = { width: this.width_, height: this.height_ };
    this.workspace_.setResizesEnabled(false);
    Blockly.ScratchBubble.superClass_.resizeMouseDown_.call(this, e);
};
Blockly.ScratchBubble.prototype.resizeMouseUp_ = function (_e) {
    var oldHW = this.resizeStartSize_;
    this.resizeStartSize_ = null;
    if (this.width_ == oldHW.width && this.height_ == oldHW.height) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.CommentChange(this.comment, { width: oldHW.width, height: oldHW.height }, { width: this.width_, height: this.height_ }));
    this.workspace_.setResizesEnabled(true);
};
Blockly.ScratchBubble.prototype.setMinimized = function (minimize, labelText) {
    if (minimize == this.isMinimized_) {
        return;
    }
    if (minimize) {
        this.isMinimized_ = true;
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-up.svg');
        this.commentEditor_.setAttribute('display', 'none');
        if (this.resizeGroup_) {
            this.resizeGroup_.setAttribute('display', 'none');
        }
        if (labelText && this.labelText_ != labelText) {
            this.topBarLabel_.textContent = labelText;
        }
        Blockly.utils.removeAttribute(this.topBarLabel_, 'display');
    }
    else {
        this.isMinimized_ = false;
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-down.svg');
        this.topBarLabel_.setAttribute('display', 'none');
        Blockly.utils.removeAttribute(this.commentEditor_, 'display');
        if (this.resizeGroup_) {
            Blockly.utils.removeAttribute(this.resizeGroup_, 'display');
        }
    }
};
Blockly.ScratchBubble.prototype.registerMinimizeToggleEvent = function (callback) {
    this.minimizeToggleCallback_ = callback;
};
Blockly.ScratchBubble.prototype.registerDeleteEvent = function (callback) {
    this.deleteCallback_ = callback;
};
Blockly.ScratchBubble.prototype.registerContextMenuCallback = function (callback) {
    this.contextMenuCallback_ = callback;
};
Blockly.ScratchBubble.prototype.setAnchorLocation = function (xy) {
    this.anchorXY_ = xy;
    if (this.rendered_) {
        this.positionBubble_();
    }
};
Blockly.ScratchBubble.prototype.moveTo = function (x, y) {
    Blockly.ScratchBubble.superClass_.moveTo.call(this, x, y);
    this.updatePosition_(x, y);
};
Blockly.ScratchBubble.prototype.setBubbleSize = function (width, height) {
    var doubleBorderWidth = 2 * Blockly.ScratchBubble.BORDER_WIDTH;
    width = Math.max(width, doubleBorderWidth + 50);
    height = Math.max(height, Blockly.ScratchBubble.TOP_BAR_HEIGHT);
    this.width_ = width;
    this.height_ = height;
    this.bubbleBack_.setAttribute('width', width);
    this.bubbleBack_.setAttribute('height', height);
    this.commentTopBar_.setAttribute('width', width);
    this.commentTopBar_.setAttribute('height', Blockly.ScratchBubble.TOP_BAR_HEIGHT);
    if (this.workspace_.RTL) {
        this.minimizeArrow_.setAttribute('x', width -
            (Blockly.ScratchBubble.MINIMIZE_ICON_SIZE) -
            Blockly.ScratchBubble.TOP_BAR_ICON_INSET);
    }
    else {
        this.deleteIcon_.setAttribute('x', width -
            Blockly.ScratchBubble.DELETE_ICON_SIZE -
            Blockly.ScratchBubble.TOP_BAR_ICON_INSET);
    }
    if (this.resizeGroup_) {
        var resizeSize = Blockly.ScratchBubble.RESIZE_SIZE;
        if (this.workspace_.RTL) {
            this.resizeGroup_.setAttribute('transform', 'translate(' +
                (resizeSize + doubleBorderWidth) + ',' +
                (this.height_ - doubleBorderWidth - resizeSize) + ') scale(-1, 1)');
        }
        else {
            this.resizeGroup_.setAttribute('transform', 'translate(' +
                (this.width_ - doubleBorderWidth - resizeSize) + ',' +
                (this.height_ - doubleBorderWidth - resizeSize) + ')');
        }
    }
    if (this.isMinimized_) {
        this.topBarLabel_.setAttribute('x', this.width_ / 2);
        this.topBarLabel_.setAttribute('y', this.height_ / 2);
    }
    if (this.rendered_) {
        this.positionBubble_();
        this.renderArrow_();
    }
    if (this.resizeCallback_) {
        this.resizeCallback_();
    }
};
Blockly.ScratchBubble.prototype.renderArrow_ = function () {
    var relBubbleX = this.width_ / 2;
    var relBubbleY = Blockly.ScratchBubble.TOP_BAR_HEIGHT / 2;
    var relAnchorX = -this.relativeLeft_;
    var relAnchorY = -this.relativeTop_;
    if (relBubbleX != relAnchorX || relBubbleY != relAnchorY) {
        var rise = relAnchorY - relBubbleY;
        var run = relAnchorX - relBubbleX;
        if (this.workspace_.RTL) {
            run *= -1;
            run -= this.width_;
        }
        var baseX1 = relBubbleX;
        var baseY1 = relBubbleY;
        this.bubbleArrow_.setAttribute('x1', baseX1);
        this.bubbleArrow_.setAttribute('y1', baseY1);
        this.bubbleArrow_.setAttribute('x2', baseX1 + run);
        this.bubbleArrow_.setAttribute('y2', baseY1 + rise);
        this.bubbleArrow_.setAttribute('stroke-width', Blockly.ScratchBubble.LINE_THICKNESS);
    }
};
Blockly.ScratchBubble.prototype.setColour = function (hexColour) {
    this.bubbleBack_.setAttribute('stroke', hexColour);
    this.bubbleArrow_.setAttribute('stroke', hexColour);
};
Blockly.ScratchBubble.prototype.moveDuringDrag = function (dragSurface, newLoc) {
    if (dragSurface) {
        dragSurface.translateSurface(newLoc.x, newLoc.y);
        this.updatePosition_(newLoc.x, newLoc.y);
    }
    else {
        this.moveTo(newLoc.x, newLoc.y);
    }
};
Blockly.ScratchBubble.prototype.updatePosition_ = function (x, y) {
    if (this.workspace_.RTL) {
        this.relativeLeft_ = this.anchorXY_.x - x;
    }
    else {
        this.relativeLeft_ = x - this.anchorXY_.x;
    }
    this.relativeTop_ = y - this.anchorXY_.y;
    this.renderArrow_();
};
Blockly.ScratchBubble.prototype.dispose = function () {
    Blockly.ScratchBubble.superClass_.dispose.call(this);
    this.topBarLabel_ = null;
    this.commentTopBar_ = null;
    this.minimizeArrow_ = null;
    this.deleteIcon_ = null;
};
'use strict';
goog.provide('Blockly.VariableMap');
goog.require('Blockly.Events.VarDelete');
goog.require('Blockly.Events.VarRename');
goog.require('Blockly.VariableModel');
Blockly.VariableMap = function (workspace) {
    this.variableMap_ = {};
    this.workspace = workspace;
};
Blockly.VariableMap.prototype.clear = function () {
    this.variableMap_ = new Object(null);
};
Blockly.VariableMap.prototype.renameVariable = function (variable, newName) {
    var type = variable.type;
    var conflictVar = this.getVariable(newName, type);
    var blocks = this.workspace.getAllBlocks();
    Blockly.Events.setGroup(true);
    try {
        if (!conflictVar) {
            this.renameVariableAndUses_(variable, newName, blocks);
        }
        else {
            console.warn('Unexpected conflict when attempting to rename ' +
                'variable with name: ' + variable.name + ' and id: ' + variable.getId() +
                ' to new name: ' + newName + '. A variable with the new name already exists' +
                ' and has id: ' + conflictVar.getId());
        }
    }
    finally {
        Blockly.Events.setGroup(false);
    }
};
Blockly.VariableMap.prototype.renameVariableById = function (id, newName) {
    var variable = this.getVariableById(id);
    if (!variable) {
        throw new Error('Tried to rename a variable that didn\'t exist. ID: ' + id);
    }
    this.renameVariable(variable, newName);
};
Blockly.VariableMap.prototype.renameVariableAndUses_ = function (variable, newName, blocks) {
    Blockly.Events.fire(new Blockly.Events.VarRename(variable, newName));
    variable.name = newName;
    for (var i = 0; i < blocks.length; i++) {
        blocks[i].updateVarName(variable);
    }
};
Blockly.VariableMap.prototype.renameVariableWithConflict_ = function (variable, newName, conflictVar, blocks) {
    var type = variable.type;
    var oldCase = conflictVar.name;
    if (newName != oldCase) {
        this.renameVariableAndUses_(conflictVar, newName, blocks);
    }
    for (var i = 0; i < blocks.length; i++) {
        blocks[i].renameVarById(variable.getId(), conflictVar.getId());
    }
    Blockly.Events.fire(new Blockly.Events.VarDelete(variable));
    var variableList = this.getVariablesOfType(type);
    var variableIndex = variableList.indexOf(variable);
    this.variableMap_[type].splice(variableIndex, 1);
};
Blockly.VariableMap.prototype.createVariable = function (name, opt_type, opt_id, opt_isLocal, opt_isCloud) {
    var variable = this.getVariable(name, opt_type);
    if (variable) {
        if (opt_id && variable.getId() != opt_id) {
            console.warn('Variable "' + name + '" is already in use and its id is "'
                + variable.getId() + '" which conflicts with the passed in ' +
                'id, "' + opt_id + '".');
        }
        return variable;
    }
    if (opt_id) {
        variable = this.getVariableById(opt_id);
        if (variable) {
            console.warn('Variable id, "' + opt_id + '", is already in use.');
            return variable;
        }
    }
    opt_id = opt_id || Blockly.utils.genUid();
    opt_type = opt_type || '';
    variable = new Blockly.VariableModel(this.workspace, name, opt_type, opt_id, opt_isLocal, opt_isCloud);
    if (!this.variableMap_[opt_type]) {
        this.variableMap_[opt_type] = [variable];
    }
    else {
        this.variableMap_[opt_type].push(variable);
    }
    return variable;
};
Blockly.VariableMap.prototype.deleteVariable = function (variable) {
    var variableList = this.variableMap_[variable.type];
    for (var i = 0, tempVar; tempVar = variableList[i]; i++) {
        if (tempVar.getId() == variable.getId()) {
            variableList.splice(i, 1);
            Blockly.Events.fire(new Blockly.Events.VarDelete(variable));
            return;
        }
    }
};
Blockly.VariableMap.prototype.deleteVariableById = function (id) {
    var variable = this.getVariableById(id);
    if (variable) {
        var variableName = variable.name;
        var uses = this.getVariableUsesById(id);
        for (var i = 0, block; block = uses[i]; i++) {
            if (block.type == Blockly.PROCEDURES_DEFINITION_BLOCK_TYPE ||
                block.type == 'procedures_defreturn') {
                var procedureName = block.getFieldValue('NAME');
                var deleteText = Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE.
                    replace('%1', variableName).
                    replace('%2', procedureName);
                Blockly.alert(deleteText);
                return;
            }
        }
        var map = this;
        if (uses.length > 1) {
            var confirmText = Blockly.Msg.DELETE_VARIABLE_CONFIRMATION.
                replace('%1', String(uses.length)).
                replace('%2', variableName);
            Blockly.confirm(confirmText, function (ok) {
                if (ok) {
                    map.deleteVariableInternal_(variable, uses);
                }
            });
        }
        else {
            map.deleteVariableInternal_(variable, uses);
        }
    }
    else {
        console.warn("Can't delete non-existent variable: " + id);
    }
};
Blockly.VariableMap.prototype.deleteVariableInternal_ = function (variable, uses) {
    var existingGroup = Blockly.Events.getGroup();
    if (!existingGroup) {
        Blockly.Events.setGroup(true);
    }
    try {
        for (var i = 0; i < uses.length; i++) {
            uses[i].dispose(true, false);
        }
        this.deleteVariable(variable);
    }
    finally {
        if (!existingGroup) {
            Blockly.Events.setGroup(false);
        }
    }
};
Blockly.VariableMap.prototype.getVariable = function (name, opt_type) {
    var type = opt_type || '';
    var list = this.variableMap_[type];
    if (list) {
        for (var j = 0, variable; variable = list[j]; j++) {
            if (variable.name == name) {
                return variable;
            }
        }
    }
    return null;
};
Blockly.VariableMap.prototype.getVariableById = function (id) {
    var keys = Object.keys(this.variableMap_);
    for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        for (var j = 0, variable; variable = this.variableMap_[key][j]; j++) {
            if (variable.getId() == id) {
                return variable;
            }
        }
    }
    return null;
};
Blockly.VariableMap.prototype.getVariablesOfType = function (type) {
    type = type || '';
    var variable_list = this.variableMap_[type];
    if (variable_list) {
        return variable_list.slice();
    }
    return [];
};
Blockly.VariableMap.prototype.getVariableTypes = function () {
    var types = Object.keys(this.variableMap_);
    var hasEmpty = false;
    for (var i = 0; i < types.length; i++) {
        if (types[i] == '') {
            hasEmpty = true;
        }
    }
    if (!hasEmpty) {
        types.push('');
    }
    return types;
};
Blockly.VariableMap.prototype.getAllVariables = function () {
    var all_variables = [];
    var keys = Object.keys(this.variableMap_);
    for (var i = 0; i < keys.length; i++) {
        all_variables = all_variables.concat(this.variableMap_[keys[i]]);
    }
    return all_variables;
};
Blockly.VariableMap.prototype.getVariableUsesById = function (id) {
    var uses = [];
    var blocks = this.workspace.getAllBlocks();
    for (var i = 0; i < blocks.length; i++) {
        var blockVariables = blocks[i].getVarModels();
        if (blockVariables) {
            for (var j = 0; j < blockVariables.length; j++) {
                if (blockVariables[j].getId() == id) {
                    uses.push(blocks[i]);
                }
            }
        }
    }
    return uses;
};
'use strict';
goog.provide('Blockly.VariableModel');
goog.require('Blockly.Events.VarCreate');
goog.require('goog.string');
Blockly.VariableModel = function (workspace, name, opt_type, opt_id, opt_isLocal, opt_isCloud) {
    this.workspace = workspace;
    this.name = name;
    this.type = opt_type || '';
    this.id_ = opt_id || Blockly.utils.genUid();
    this.isLocal = opt_isLocal || false;
    this.isCloud = opt_isCloud || false;
    Blockly.Events.fire(new Blockly.Events.VarCreate(this));
};
Blockly.VariableModel.prototype.getId = function () {
    return this.id_;
};
Blockly.VariableModel.compareByName = function (var1, var2) {
    return Blockly.scratchBlocksUtils.compareStrings(var1.name, var2.name);
};
'use strict';
goog.provide('Blockly.Variables');
goog.require('Blockly.Blocks');
goog.require('Blockly.constants');
goog.require('Blockly.VariableModel');
goog.require('Blockly.Workspace');
goog.require('goog.string');
Blockly.Variables.NAME_TYPE = Blockly.VARIABLE_CATEGORY_NAME;
Blockly.Variables.CLOUD_PREFIX = '☁ ';
Blockly.Variables.allUsedVariables = function (root) {
    var blocks;
    if (root instanceof Blockly.Block) {
        blocks = root.getDescendants(false);
    }
    else if (root instanceof Blockly.Workspace ||
        root instanceof Blockly.WorkspaceSvg) {
        blocks = root.getAllBlocks();
    }
    else {
        throw 'Not Block or Workspace: ' + root;
    }
    var ignorableName = Blockly.Variables.noVariableText();
    var variableHash = Object.create(null);
    for (var x = 0; x < blocks.length; x++) {
        var blockVariables = blocks[x].getVarModels();
        if (blockVariables) {
            for (var y = 0; y < blockVariables.length; y++) {
                var variable = blockVariables[y];
                if (variable.getId() && variable.name.toLowerCase() != ignorableName) {
                    variableHash[variable.name.toLowerCase()] = variable.name;
                }
            }
        }
    }
    var variableList = [];
    for (var name in variableHash) {
        variableList.push(variableHash[name]);
    }
    return variableList;
};
Blockly.Variables.allVariables = function (root) {
    if (root instanceof Blockly.Block) {
        console.warn('Deprecated call to Blockly.Variables.allVariables ' +
            'with a block instead of a workspace.  You may want ' +
            'Blockly.Variables.allUsedVariables');
        return {};
    }
    return root.getAllVariables();
};
Blockly.Variables.allDeveloperVariables = function (workspace) {
    var blocks = workspace.getAllBlocks();
    var hash = {};
    for (var i = 0; i < blocks.length; i++) {
        var block = blocks[i];
        if (block.getDeveloperVars) {
            var devVars = block.getDeveloperVars();
            for (var j = 0; j < devVars.length; j++) {
                hash[devVars[j]] = devVars[j];
            }
        }
    }
    var list = [];
    for (var name in hash) {
        list.push(hash[name]);
    }
    return list;
};
Blockly.Variables.noVariableText = function () {
    return "No variable selected";
};
Blockly.Variables.generateUniqueName = function (workspace) {
    var variableList = workspace.getAllVariables();
    var newName = '';
    if (variableList.length) {
        var nameSuffix = 1;
        var letters = 'ijkmnopqrstuvwxyzabcdefgh';
        var letterIndex = 0;
        var potName = letters.charAt(letterIndex);
        while (!newName) {
            var inUse = false;
            for (var i = 0; i < variableList.length; i++) {
                if (variableList[i].name.toLowerCase() == potName) {
                    inUse = true;
                    break;
                }
            }
            if (inUse) {
                letterIndex++;
                if (letterIndex == letters.length) {
                    letterIndex = 0;
                    nameSuffix++;
                }
                potName = letters.charAt(letterIndex);
                if (nameSuffix > 1) {
                    potName += nameSuffix;
                }
            }
            else {
                newName = potName;
            }
        }
    }
    else {
        newName = 'i';
    }
    return newName;
};
Blockly.Variables.realizePotentialVar = function (varName, varType, potentialVarWs, checkReal) {
    var potentialVarMap = potentialVarWs.getPotentialVariableMap();
    var realWs = potentialVarWs.targetWorkspace;
    if (!potentialVarMap) {
        console.warn('Called Blockly.Variables.realizePotentialVar with incorrect ' +
            'workspace. The provided workspace does not have a potential variable map.');
        return;
    }
    var realVar;
    if (checkReal) {
        realVar = Blockly.Variables.getVariable(realWs, null, varName, varType);
    }
    var potentialVar = potentialVarMap.getVariable(varName, varType);
    if (!potentialVar) {
        return null;
    }
    var id = potentialVar.getId();
    potentialVarMap.deleteVariable(potentialVar);
    if (realVar) {
        return realVar;
    }
    return realWs.createVariable(varName, varType, id);
};
Blockly.Variables.createVariable = function (workspace, opt_callback, opt_type) {
    var newMsg, modalTitle;
    if (opt_type == Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE) {
        newMsg = Blockly.Msg.NEW_BROADCAST_MESSAGE_TITLE;
        modalTitle = Blockly.Msg.BROADCAST_MODAL_TITLE;
    }
    else if (opt_type == Blockly.LIST_VARIABLE_TYPE) {
        newMsg = Blockly.Msg.NEW_LIST_TITLE;
        modalTitle = Blockly.Msg.LIST_MODAL_TITLE;
    }
    else {
        opt_type = opt_type ? opt_type : '';
        newMsg = Blockly.Msg.NEW_VARIABLE_TITLE;
        modalTitle = Blockly.Msg.VARIABLE_MODAL_TITLE;
    }
    var validate = Blockly.Variables.nameValidator_.bind(null, opt_type);
    Blockly.prompt(newMsg, '', function (text, additionalVars, variableOptions) {
        variableOptions = variableOptions || {};
        var scope = variableOptions.scope;
        var isLocal = (scope === 'local') || false;
        var isCloud = variableOptions.isCloud || false;
        additionalVars = additionalVars || [];
        var additionalVarNames = isLocal ? [] : additionalVars;
        var validatedText = validate(text, workspace, additionalVarNames, isCloud, opt_callback);
        if (validatedText) {
            var potentialVarMap = workspace.getPotentialVariableMap();
            var variable;
            if (potentialVarMap && opt_type) {
                variable = Blockly.Variables.realizePotentialVar(validatedText, opt_type, workspace, false);
            }
            if (!variable) {
                variable = workspace.createVariable(validatedText, opt_type, null, isLocal, isCloud);
            }
            var flyout = workspace.isFlyout ? workspace : workspace.getFlyout();
            var variableBlockId = variable.getId();
            if (flyout.setCheckboxState) {
                flyout.setCheckboxState(variableBlockId, true);
            }
            if (opt_callback) {
                opt_callback(variableBlockId);
            }
        }
        else {
            if (opt_callback) {
                opt_callback(null);
            }
        }
    }, modalTitle, opt_type);
};
Blockly.Variables.nameValidator_ = function (type, text, workspace, additionalVars, isCloud, opt_callback) {
    if (type == Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE) {
        return Blockly.Variables.validateBroadcastMessageName_(text, workspace, opt_callback);
    }
    else if (type == Blockly.LIST_VARIABLE_TYPE) {
        return Blockly.Variables.validateScalarVarOrListName_(text, workspace, additionalVars, false, type, Blockly.Msg.LIST_ALREADY_EXISTS);
    }
    else {
        return Blockly.Variables.validateScalarVarOrListName_(text, workspace, additionalVars, isCloud, type, Blockly.Msg.VARIABLE_ALREADY_EXISTS);
    }
};
Blockly.Variables.validateBroadcastMessageName_ = function (name, workspace, opt_callback) {
    if (!name) {
        return null;
    }
    var variable = workspace.getVariable(name, Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE);
    if (variable) {
        if (opt_callback) {
            opt_callback(variable.getId());
        }
        return null;
    }
    else {
        return name;
    }
};
Blockly.Variables.validateScalarVarOrListName_ = function (name, workspace, additionalVars, isCloud, type, errorMsg) {
    name = Blockly.Variables.trimName_(name);
    if (!name) {
        return null;
    }
    if (isCloud) {
        name = Blockly.Variables.CLOUD_PREFIX + name;
    }
    if (workspace.getVariable(name, type) || additionalVars.indexOf(name) >= 0) {
        Blockly.alert(errorMsg.replace('%1', name));
        return null;
    }
    else {
        return name;
    }
};
Blockly.Variables.renameVariable = function (workspace, variable, opt_callback) {
    var promptMsg, modalTitle;
    var varType = variable.type;
    if (varType == Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE) {
        console.warn('Unexpected attempt to rename a broadcast message with ' +
            'id: ' + variable.getId() + ' and name: ' + variable.name);
        return;
    }
    if (varType == Blockly.LIST_VARIABLE_TYPE) {
        promptMsg = Blockly.Msg.RENAME_LIST_TITLE;
        modalTitle = Blockly.Msg.RENAME_LIST_MODAL_TITLE;
    }
    else {
        promptMsg = Blockly.Msg.RENAME_VARIABLE_TITLE;
        modalTitle = Blockly.Msg.RENAME_VARIABLE_MODAL_TITLE;
    }
    var validate = Blockly.Variables.nameValidator_.bind(null, varType);
    var promptText = promptMsg.replace('%1', variable.name);
    var promptDefaultText = variable.name;
    if (variable.isCloud && variable.name.indexOf(Blockly.Variables.CLOUD_PREFIX) == 0) {
        promptDefaultText = promptDefaultText.substring(Blockly.Variables.CLOUD_PREFIX.length);
    }
    Blockly.prompt(promptText, promptDefaultText, function (newName, additionalVars) {
        if (variable.isCloud &&
            newName.length > 0 && newName.indexOf(Blockly.Variables.CLOUD_PREFIX) == 0) {
            newName = newName.substring(Blockly.Variables.CLOUD_PREFIX.length);
        }
        additionalVars = additionalVars || [];
        var additionalVarNames = variable.isLocal ? [] : additionalVars;
        var validatedText = validate(newName, workspace, additionalVarNames, variable.isCloud);
        if (validatedText) {
            workspace.renameVariableById(variable.getId(), validatedText);
            if (opt_callback) {
                opt_callback(newName);
            }
        }
        else {
            if (opt_callback) {
                opt_callback(null);
            }
        }
    }, modalTitle, varType);
};
Blockly.Variables.trimName_ = function (name) {
    if (name) {
        return goog.string.trim(name);
    }
    else {
        return name;
    }
};
Blockly.Variables.generateVariableFieldXml_ = function (variableModel, opt_name) {
    var typeString = variableModel.type;
    if (typeString == '') {
        typeString = '\'\'';
    }
    var fieldName = opt_name || 'VARIABLE';
    var text = '<field name="' + fieldName + '" id="' + variableModel.getId() +
        '" variabletype="' + goog.string.htmlEscape(typeString) +
        '">' + goog.string.htmlEscape(variableModel.name) + '</field>';
    return text;
};
Blockly.Variables.getOrCreateVariablePackage = function (workspace, id, opt_name, opt_type) {
    var variable = Blockly.Variables.getVariable(workspace, id, opt_name, opt_type);
    if (!variable) {
        variable = Blockly.Variables.createVariable_(workspace, id, opt_name, opt_type);
    }
    return variable;
};
Blockly.Variables.getVariable = function (workspace, id, opt_name, opt_type) {
    var potentialVariableMap = workspace.getPotentialVariableMap();
    if (id) {
        var variable = workspace.getVariableById(id);
        if (!variable && potentialVariableMap) {
            variable = potentialVariableMap.getVariableById(id);
        }
    }
    else if (opt_name) {
        if (opt_type == undefined) {
            throw new Error('Tried to look up a variable by name without a type');
        }
        var variable = workspace.getVariable(opt_name, opt_type);
        if (!variable && potentialVariableMap) {
            variable = potentialVariableMap.getVariable(opt_name, opt_type);
        }
    }
    return variable;
};
Blockly.Variables.createVariable_ = function (workspace, id, opt_name, opt_type) {
    var potentialVariableMap = workspace.getPotentialVariableMap();
    if (!opt_name) {
        var ws = workspace.isFlyout ? workspace.targetWorkspace : workspace;
        opt_name = Blockly.Variables.generateUniqueName(ws);
    }
    if (potentialVariableMap) {
        var variable = potentialVariableMap.createVariable(opt_name, opt_type, id);
    }
    else {
        var variable = workspace.createVariable(opt_name, opt_type, id);
    }
    return variable;
};
Blockly.Variables.getAddedVariables = function (workspace, originalVariables) {
    var allCurrentVariables = workspace.getAllVariables();
    var addedVariables = [];
    if (originalVariables.length != allCurrentVariables.length) {
        for (var i = 0; i < allCurrentVariables.length; i++) {
            var variable = allCurrentVariables[i];
            if (!originalVariables.includes(variable)) {
                addedVariables.push(variable);
            }
        }
    }
    return addedVariables;
};
'use strict';
goog.provide('Blockly.Icon');
goog.require('goog.dom');
goog.require('goog.math.Coordinate');
Blockly.Icon = function (block) {
    this.block_ = block;
};
Blockly.Icon.prototype.collapseHidden = true;
Blockly.Icon.prototype.SIZE = 17;
Blockly.Icon.prototype.bubble_ = null;
Blockly.Icon.prototype.iconXY_ = null;
Blockly.Icon.prototype.createIcon = function () {
    if (this.iconGroup_) {
        return;
    }
    this.iconGroup_ = Blockly.utils.createSvgElement('g', { 'class': 'blocklyIconGroup' }, null);
    if (this.block_.isInFlyout) {
        Blockly.utils.addClass((this.iconGroup_), 'blocklyIconGroupReadonly');
    }
    this.drawIcon_(this.iconGroup_);
    this.block_.getSvgRoot().appendChild(this.iconGroup_);
    Blockly.bindEventWithChecks_(this.iconGroup_, 'mouseup', this, this.iconClick_);
    this.updateEditable();
};
Blockly.Icon.prototype.dispose = function () {
    goog.dom.removeNode(this.iconGroup_);
    this.iconGroup_ = null;
    this.setVisible(false);
    this.block_ = null;
};
Blockly.Icon.prototype.updateEditable = function () {
};
Blockly.Icon.prototype.isVisible = function () {
    return !!this.bubble_;
};
Blockly.Icon.prototype.iconClick_ = function (e) {
    if (this.block_.workspace.isDragging()) {
        return;
    }
    if (!this.block_.isInFlyout && !Blockly.utils.isRightButton(e)) {
        this.setVisible(!this.isVisible());
    }
};
Blockly.Icon.prototype.updateColour = function () {
    if (this.isVisible()) {
        this.bubble_.setColour(this.block_.getColour());
    }
};
Blockly.Icon.prototype.renderIcon = function (cursorX) {
    if (this.collapseHidden && this.block_.isCollapsed()) {
        this.iconGroup_.setAttribute('display', 'none');
        return cursorX;
    }
    this.iconGroup_.setAttribute('display', 'block');
    var TOP_MARGIN = 5;
    var width = this.SIZE;
    if (this.block_.RTL) {
        cursorX -= width;
    }
    this.iconGroup_.setAttribute('transform', 'translate(' + cursorX + ',' + TOP_MARGIN + ')');
    this.computeIconLocation();
    if (this.block_.RTL) {
        cursorX -= Blockly.BlockSvg.SEP_SPACE_X;
    }
    else {
        cursorX += width + Blockly.BlockSvg.SEP_SPACE_X;
    }
    return cursorX;
};
Blockly.Icon.prototype.setIconLocation = function (xy) {
    this.iconXY_ = xy;
    if (this.isVisible()) {
        this.bubble_.setAnchorLocation(xy);
    }
};
Blockly.Icon.prototype.computeIconLocation = function () {
    var blockXY = this.block_.getRelativeToSurfaceXY();
    var iconXY = Blockly.utils.getRelativeXY(this.iconGroup_);
    var newXY = new goog.math.Coordinate(blockXY.x + iconXY.x + this.SIZE / 2, blockXY.y + iconXY.y + this.SIZE / 2);
    if (!goog.math.Coordinate.equals(this.getIconLocation(), newXY)) {
        this.setIconLocation(newXY);
    }
};
Blockly.Icon.prototype.getIconLocation = function () {
    return this.iconXY_;
};
'use strict';
goog.provide('Blockly.Comment');
goog.require('Blockly.Bubble');
goog.require('Blockly.Events.BlockChange');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.Icon');
goog.require('goog.userAgent');
Blockly.Comment = function (block) {
    Blockly.Comment.superClass_.constructor.call(this, block);
    this.createIcon();
};
goog.inherits(Blockly.Comment, Blockly.Icon);
Blockly.Comment.prototype.text_ = '';
Blockly.Comment.prototype.width_ = 160;
Blockly.Comment.prototype.height_ = 80;
Blockly.Comment.prototype.drawIcon_ = function (group) {
    Blockly.utils.createSvgElement('circle', { 'class': 'blocklyIconShape', 'r': '8', 'cx': '8', 'cy': '8' }, group);
    Blockly.utils.createSvgElement('path', {
        'class': 'blocklyIconSymbol',
        'd': 'm6.8,10h2c0.003,-0.617 0.271,-0.962 0.633,-1.266 2.875,-2.405' +
            '0.607,-5.534 -3.765,-3.874v1.7c3.12,-1.657 3.698,0.118 2.336,1.25' +
            '-1.201,0.998 -1.201,1.528 -1.204,2.19z'
    }, group);
    Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyIconSymbol',
        'x': '6.8',
        'y': '10.78',
        'height': '2',
        'width': '2'
    }, group);
};
Blockly.Comment.prototype.createEditor_ = function () {
    this.foreignObject_ = Blockly.utils.createSvgElement('foreignObject', { 'x': Blockly.Bubble.BORDER_WIDTH, 'y': Blockly.Bubble.BORDER_WIDTH }, null);
    var body = document.createElementNS(Blockly.HTML_NS, 'body');
    body.setAttribute('xmlns', Blockly.HTML_NS);
    body.className = 'blocklyMinimalBody';
    var textarea = document.createElementNS(Blockly.HTML_NS, 'textarea');
    textarea.className = 'blocklyCommentTextarea';
    textarea.setAttribute('dir', this.block_.RTL ? 'RTL' : 'LTR');
    body.appendChild(textarea);
    this.textarea_ = textarea;
    this.foreignObject_.appendChild(body);
    Blockly.bindEventWithChecks_(textarea, 'mouseup', this, this.textareaFocus_);
    Blockly.bindEventWithChecks_(textarea, 'wheel', this, function (e) {
        e.stopPropagation();
    });
    Blockly.bindEventWithChecks_(textarea, 'change', this, function (_e) {
        if (this.text_ != textarea.value) {
            Blockly.Events.fire(new Blockly.Events.BlockChange(this.block_, 'comment', null, this.text_, textarea.value));
            this.text_ = textarea.value;
        }
    });
    setTimeout(function () {
        textarea.focus();
    }, 0);
    return this.foreignObject_;
};
Blockly.Comment.prototype.updateEditable = function () {
    if (this.isVisible()) {
        this.setVisible(false);
        this.setVisible(true);
    }
    Blockly.Icon.prototype.updateEditable.call(this);
};
Blockly.Comment.prototype.resizeBubble_ = function () {
    if (this.isVisible()) {
        var size = this.bubble_.getBubbleSize();
        var doubleBorderWidth = 2 * Blockly.Bubble.BORDER_WIDTH;
        this.foreignObject_.setAttribute('width', size.width - doubleBorderWidth);
        this.foreignObject_.setAttribute('height', size.height - doubleBorderWidth);
        this.textarea_.style.width = (size.width - doubleBorderWidth - 4) + 'px';
        this.textarea_.style.height = (size.height - doubleBorderWidth - 4) + 'px';
    }
};
Blockly.Comment.prototype.setVisible = function (visible) {
    if (visible == this.isVisible()) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.Ui(this.block_, 'commentOpen', !visible, visible));
    if ((!this.block_.isEditable() && !this.textarea_) || goog.userAgent.IE) {
        Blockly.Warning.prototype.setVisible.call(this, visible);
        return;
    }
    var text = this.getText();
    var size = this.getBubbleSize();
    if (visible) {
        this.bubble_ = new Blockly.Bubble((this.block_.workspace), this.createEditor_(), this.block_.svgPath_, this.iconXY_, this.width_, this.height_);
        this.bubble_.setSvgId(this.block_.id);
        this.bubble_.registerResizeEvent(this.resizeBubble_.bind(this));
        this.updateColour();
    }
    else {
        this.bubble_.dispose();
        this.bubble_ = null;
        this.textarea_ = null;
        this.foreignObject_ = null;
    }
    this.setText(text);
    this.setBubbleSize(size.width, size.height);
};
Blockly.Comment.prototype.textareaFocus_ = function (_e) {
    if (this.bubble_.promote_()) {
        this.textarea_.focus();
    }
};
Blockly.Comment.prototype.getBubbleSize = function () {
    if (this.isVisible()) {
        return this.bubble_.getBubbleSize();
    }
    else {
        return { width: this.width_, height: this.height_ };
    }
};
Blockly.Comment.prototype.setBubbleSize = function (width, height) {
    if (this.textarea_) {
        this.bubble_.setBubbleSize(width, height);
    }
    else {
        this.width_ = width;
        this.height_ = height;
    }
};
Blockly.Comment.prototype.getText = function () {
    return this.textarea_ ? this.textarea_.value : this.text_;
};
Blockly.Comment.prototype.setText = function (text) {
    if (this.text_ != text) {
        Blockly.Events.fire(new Blockly.Events.BlockChange(this.block_, 'comment', null, this.text_, text));
        this.text_ = text;
    }
    if (this.textarea_) {
        this.textarea_.value = text;
    }
};
Blockly.Comment.prototype.dispose = function () {
    if (Blockly.Events.isEnabled()) {
        this.setText('');
    }
    this.block_.comment = null;
    Blockly.Icon.prototype.dispose.call(this);
};
'use strict';
goog.provide('Blockly.ScratchBlockComment');
goog.require('Blockly.Comment');
goog.require('Blockly.Events.BlockChange');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.Icon');
goog.require('Blockly.ScratchBubble');
goog.require('goog.math.Coordinate');
goog.require('goog.userAgent');
Blockly.ScratchBlockComment = function (block, text, id, x, y, minimized) {
    Blockly.ScratchBlockComment.superClass_.constructor.call(this, block);
    this.text_ = text;
    var xIsValidNumber = typeof x == 'number' && !isNaN(x);
    var yIsValidNumber = typeof y == 'number' && !isNaN(y);
    this.needsAutoPositioning_ = !xIsValidNumber && !yIsValidNumber;
    this.x_ = xIsValidNumber ? x : 0;
    this.y_ = yIsValidNumber ? y : 0;
    this.isMinimized_ = minimized || false;
    this.workspace = block.workspace;
    this.id = goog.isString(id) && !this.workspace.getCommentById(id) ?
        id : Blockly.utils.genUid();
    this.workspace.addTopComment(this);
    this.blockId = block.id;
    if (!block.rendered) {
        Blockly.ScratchBlockComment.fireCreateEvent(this);
    }
};
goog.inherits(Blockly.ScratchBlockComment, Blockly.Comment);
Blockly.ScratchBlockComment.prototype.width_ = 200;
Blockly.ScratchBlockComment.prototype.height_ = 200;
Blockly.ScratchBlockComment.prototype.SIZE = 0;
Blockly.ScratchBlockComment.TEXTAREA_OFFSET = 12;
Blockly.ScratchBlockComment.MAX_LABEL_LENGTH = 12;
Blockly.ScratchBlockComment.COMMENT_TEXT_LIMIT = 8000;
Blockly.ScratchBlockComment.MINIMIZE_WIDTH = 200;
Blockly.ScratchBlockComment.prototype.drawIcon_ = function (_group) {
};
Blockly.ScratchBlockComment.prototype.renderIcon = function (cursorX, topMargin) {
    if (this.collapseHidden && this.block_.isCollapsed()) {
        this.iconGroup_.setAttribute('display', 'none');
        return cursorX;
    }
    this.iconGroup_.setAttribute('display', 'block');
    var width = this.SIZE;
    if (this.block_.RTL) {
        cursorX -= width;
    }
    this.iconGroup_.setAttribute('transform', 'translate(' + cursorX + ',' + topMargin + ')');
    this.computeIconLocation();
    if (this.block_.RTL) {
        cursorX -= Blockly.BlockSvg.SEP_SPACE_X;
    }
    else {
        cursorX += width + Blockly.BlockSvg.SEP_SPACE_X;
    }
    return cursorX;
};
Blockly.ScratchBlockComment.prototype.createEditor_ = function () {
    this.foreignObject_ = Blockly.utils.createSvgElement('foreignObject', {
        'x': Blockly.ScratchBubble.BORDER_WIDTH,
        'y': Blockly.ScratchBubble.BORDER_WIDTH + Blockly.ScratchBubble.TOP_BAR_HEIGHT,
        'class': 'scratchCommentForeignObject'
    }, null);
    var body = document.createElementNS(Blockly.HTML_NS, 'body');
    body.setAttribute('xmlns', Blockly.HTML_NS);
    body.className = 'blocklyMinimalBody scratchCommentBody';
    var textarea = document.createElementNS(Blockly.HTML_NS, 'textarea');
    textarea.className = 'scratchCommentTextarea scratchCommentText';
    textarea.setAttribute('dir', this.block_.RTL ? 'RTL' : 'LTR');
    textarea.setAttribute('maxlength', Blockly.ScratchBlockComment.COMMENT_TEXT_LIMIT);
    textarea.setAttribute('placeholder', Blockly.Msg.WORKSPACE_COMMENT_DEFAULT_TEXT);
    body.appendChild(textarea);
    this.textarea_ = textarea;
    this.textarea_.style.margin = (Blockly.ScratchBlockComment.TEXTAREA_OFFSET) + 'px';
    this.foreignObject_.appendChild(body);
    Blockly.bindEventWithChecks_(textarea, 'mousedown', this, this.textareaFocus_, true, true);
    Blockly.bindEventWithChecks_(textarea, 'wheel', this, function (e) {
        e.stopPropagation();
    });
    Blockly.bindEventWithChecks_(textarea, 'change', this, function (_e) {
        if (this.text_ != textarea.value) {
            Blockly.Events.fire(new Blockly.Events.CommentChange(this, { text: this.text_ }, { text: textarea.value }));
            this.text_ = textarea.value;
        }
    });
    this.label_ = this.getLabelText();
    return {
        commentEditor: this.foreignObject_,
        labelText: this.label_
    };
};
Blockly.ScratchBlockComment.prototype.textareaFocus_ = function (e) {
    Blockly.ScratchBlockComment.superClass_.textareaFocus_.call(this, e);
    e.stopPropagation();
};
Blockly.ScratchBlockComment.prototype.resizeBubble_ = function () {
    if (this.isVisible() && !this.isMinimized_) {
        var size = this.bubble_.getBubbleSize();
        var doubleBorderWidth = 2 * Blockly.ScratchBubble.BORDER_WIDTH;
        var textOffset = Blockly.ScratchBlockComment.TEXTAREA_OFFSET * 2;
        this.foreignObject_.setAttribute('width', size.width - doubleBorderWidth);
        this.foreignObject_.setAttribute('height', size.height - doubleBorderWidth - Blockly.ScratchBubble.TOP_BAR_HEIGHT);
        this.textarea_.style.width = (size.width - textOffset) + 'px';
        this.textarea_.style.height = (size.height - doubleBorderWidth -
            Blockly.ScratchBubble.TOP_BAR_HEIGHT - textOffset) + 'px';
        this.width_ = size.width;
        this.height_ = size.height;
    }
};
Blockly.ScratchBlockComment.prototype.updateColour = function () {
    if (this.isVisible()) {
        this.bubble_.setColour(this.block_.getColourTertiary());
    }
};
Blockly.ScratchBlockComment.prototype.autoPosition_ = function () {
    if (!this.needsAutoPositioning_)
        return;
    if (this.isMinimized_) {
        var minimizedOffset = 4 * Blockly.BlockSvg.GRID_UNIT;
        this.x_ = this.block_.RTL ?
            this.iconXY_.x - this.getBubbleSize().width - minimizedOffset :
            this.iconXY_.x + minimizedOffset;
        this.y_ = this.iconXY_.y - (Blockly.ScratchBubble.TOP_BAR_HEIGHT / 2);
    }
    else {
        var thisBlockWidth = Math.floor(this.block_.svgPath_.getBBox().width);
        var fullStackWidth = Math.floor(this.block_.getHeightWidth().width);
        var overhang = fullStackWidth - thisBlockWidth;
        var offset = 8 * Blockly.BlockSvg.GRID_UNIT;
        this.x_ = this.block_.RTL ?
            this.iconXY_.x - this.width_ - overhang - offset :
            this.iconXY_.x + overhang + offset;
        this.y_ = this.iconXY_.y - (Blockly.ScratchBubble.TOP_BAR_HEIGHT / 2);
    }
};
Blockly.ScratchBlockComment.prototype.setVisible = function (visible) {
    if (visible == this.isVisible()) {
        return;
    }
    if ((!this.block_.isEditable() && !this.textarea_) || goog.userAgent.IE) {
        Blockly.Warning.prototype.setVisible.call(this, visible);
        return;
    }
    var text = this.getText();
    var size = this.getBubbleSize();
    if (visible) {
        if (this.needsAutoPositioning_) {
            this.autoPosition_();
            this.needsAutoPositioning_ = false;
        }
        this.bubble_ = new Blockly.ScratchBubble(this, (this.block_.workspace), this.createEditor_(), this.iconXY_, this.width_, this.height_, this.x_, this.y_, this.isMinimized_);
        this.bubble_.setAutoLayout(false);
        this.bubble_.registerResizeEvent(this.resizeBubble_.bind(this));
        this.bubble_.registerMinimizeToggleEvent(this.toggleMinimize_.bind(this));
        this.bubble_.registerDeleteEvent(this.dispose.bind(this));
        this.bubble_.registerContextMenuCallback(this.showContextMenu_.bind(this));
        this.updateColour();
    }
    else {
        this.bubble_.dispose();
        this.bubble_ = null;
        this.textarea_ = null;
        this.foreignObject_ = null;
        this.label_ = null;
    }
    this.setText(text);
    this.setBubbleSize(size.width, size.height);
    if (visible) {
        Blockly.ScratchBlockComment.fireCreateEvent(this);
    }
};
Blockly.ScratchBlockComment.prototype.toggleMinimize_ = function () {
    this.setMinimized(!this.isMinimized_);
};
Blockly.ScratchBlockComment.prototype.setMinimized = function (minimize) {
    if (this.isMinimized_ == minimize) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.CommentChange(this, { minimized: this.isMinimized_ }, { minimized: minimize }));
    this.isMinimized_ = minimize;
    if (minimize) {
        this.bubble_.setMinimized(true, this.getLabelText());
        this.setBubbleSize(Blockly.ScratchBlockComment.MINIMIZE_WIDTH, Blockly.ScratchBubble.TOP_BAR_HEIGHT);
    }
    else {
        this.bubble_.setMinimized(false);
        this.setText(this.text_);
        this.setBubbleSize(this.width_, this.height_);
    }
};
Blockly.ScratchBlockComment.prototype.setBubbleSize = function (width, height) {
    if (this.bubble_) {
        if (this.isMinimized_) {
            this.bubble_.setBubbleSize(Blockly.ScratchBlockComment.MINIMIZE_WIDTH, Blockly.ScratchBubble.TOP_BAR_HEIGHT);
        }
        else {
            this.bubble_.setBubbleSize(width, height);
        }
    }
};
Blockly.ScratchBlockComment.prototype.setSize = function (width, height) {
    var oldWidth = this.width_;
    var oldHeight = this.height_;
    if (!this.isMinimized_) {
        this.setBubbleSize(width, height);
    }
    this.height_ = height;
    this.width_ = width;
    if (oldWidth != this.width_ || oldHeight != this.height_) {
        Blockly.Events.fire(new Blockly.Events.CommentChange(this, { width: oldWidth, height: oldHeight }, { width: this.width_, height: this.height_ }));
    }
};
Blockly.ScratchBlockComment.prototype.getLabelText = function () {
    if (this.text_.length > Blockly.ScratchBlockComment.MAX_LABEL_LENGTH) {
        if (this.block_.RTL) {
            return '\u2026' + this.text_.slice(0, Blockly.ScratchBlockComment.MAX_LABEL_LENGTH);
        }
        return this.text_.slice(0, Blockly.ScratchBlockComment.MAX_LABEL_LENGTH) + '\u2026';
    }
    else {
        return this.text_;
    }
};
Blockly.ScratchBlockComment.prototype.setText = function (text) {
    if (this.text_ != text) {
        Blockly.Events.fire(new Blockly.Events.CommentChange(this, { text: this.text_ }, { text: text }));
        this.text_ = text;
    }
    if (this.textarea_) {
        this.textarea_.value = text;
    }
};
Blockly.ScratchBlockComment.prototype.moveTo = function (x, y) {
    var event = new Blockly.Events.CommentMove(this);
    if (this.bubble_) {
        this.bubble_.moveTo(x, y);
    }
    this.x_ = x;
    this.y_ = y;
    event.recordNew();
    Blockly.Events.fire(event);
};
Blockly.ScratchBlockComment.prototype.getXY = function () {
    if (this.bubble_) {
        return this.bubble_.getRelativeToSurfaceXY();
    }
    if (this.needsAutoPositioning_ && this.iconXY_) {
        this.autoPosition_();
    }
    return new goog.math.Coordinate(this.x_, this.y_);
};
Blockly.ScratchBlockComment.prototype.getHeightWidth = function () {
    return { height: this.height_, width: this.width_ };
};
Blockly.ScratchBlockComment.prototype.getBoundingRectangle = function () {
    var commentXY = this.getXY();
    var commentBounds = this.getBubbleSize();
    var topLeft;
    var bottomRight;
    if (this.workspace.RTL) {
        topLeft = new goog.math.Coordinate(commentXY.x - commentBounds.width, commentXY.y);
        bottomRight = new goog.math.Coordinate(commentXY.x, commentXY.y + commentBounds.height);
    }
    else {
        topLeft = new goog.math.Coordinate(commentXY.x, commentXY.y);
        bottomRight = new goog.math.Coordinate(commentXY.x + commentBounds.width, commentXY.y + commentBounds.height);
    }
    return { topLeft: topLeft, bottomRight: bottomRight };
};
Blockly.ScratchBlockComment.prototype.isMinimized = function () {
    return this.isMinimized_;
};
Blockly.ScratchBlockComment.prototype.showContextMenu_ = function (e) {
    var menuOptions = [];
    menuOptions.push(Blockly.ContextMenu.commentDeleteOption(this, Blockly.Msg.DELETE));
    Blockly.ContextMenu.show(e, menuOptions, this.block_.RTL);
};
Blockly.ScratchBlockComment.prototype.toXmlWithXY = function () {
    var element = goog.dom.createDom('comment');
    element.setAttribute('id', this.id);
    element.textContent = this.text_;
    element.setAttribute('x', Math.round(this.workspace.RTL ? this.workspace.getWidth() - this.x_ : this.x_));
    element.setAttribute('y', Math.round(this.y_));
    element.setAttribute('h', this.height_);
    element.setAttribute('w', this.width_);
    return element;
};
Blockly.ScratchBlockComment.fireCreateEvent = function (comment) {
    if (Blockly.Events.isEnabled()) {
        var existingGroup = Blockly.Events.getGroup();
        if (!existingGroup) {
            Blockly.Events.setGroup(true);
        }
        try {
            Blockly.Events.fire(new Blockly.Events.CommentCreate(comment));
        }
        finally {
            if (!existingGroup) {
                Blockly.Events.setGroup(false);
            }
        }
    }
};
Blockly.ScratchBlockComment.prototype.dispose = function () {
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.CommentDelete(this));
    }
    this.block_.comment = null;
    this.workspace.removeTopComment(this);
    Blockly.Icon.prototype.dispose.call(this);
};
Blockly.ScratchBlockComment.prototype.focus = function () {
    this.textarea_.focus();
};
'use strict';
goog.provide('Blockly.Mutator');
goog.require('Blockly.Bubble');
goog.require('Blockly.Events.BlockChange');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.Icon');
goog.require('Blockly.WorkspaceSvg');
goog.require('goog.dom');
Blockly.Mutator = function (quarkNames) {
    Blockly.Mutator.superClass_.constructor.call(this, null);
    this.quarkNames_ = quarkNames;
};
goog.inherits(Blockly.Mutator, Blockly.Icon);
Blockly.Mutator.prototype.workspaceWidth_ = 0;
Blockly.Mutator.prototype.workspaceHeight_ = 0;
Blockly.Mutator.prototype.drawIcon_ = function (group) {
    Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyIconShape',
        'rx': '4',
        'ry': '4',
        'height': '16',
        'width': '16'
    }, group);
    Blockly.utils.createSvgElement('path', {
        'class': 'blocklyIconSymbol',
        'd': 'm4.203,7.296 0,1.368 -0.92,0.677 -0.11,0.41 0.9,1.559 0.41,' +
            '0.11 1.043,-0.457 1.187,0.683 0.127,1.134 0.3,0.3 1.8,0 0.3,' +
            '-0.299 0.127,-1.138 1.185,-0.682 1.046,0.458 0.409,-0.11 0.9,' +
            '-1.559 -0.11,-0.41 -0.92,-0.677 0,-1.366 0.92,-0.677 0.11,' +
            '-0.41 -0.9,-1.559 -0.409,-0.109 -1.046,0.458 -1.185,-0.682 ' +
            '-0.127,-1.138 -0.3,-0.299 -1.8,0 -0.3,0.3 -0.126,1.135 -1.187,' +
            '0.682 -1.043,-0.457 -0.41,0.11 -0.899,1.559 0.108,0.409z'
    }, group);
    Blockly.utils.createSvgElement('circle', {
        'class': 'blocklyIconShape',
        'r': '2.7',
        'cx': '8',
        'cy': '8'
    }, group);
};
Blockly.Mutator.prototype.iconClick_ = function (e) {
    if (this.block_.isEditable()) {
        Blockly.Icon.prototype.iconClick_.call(this, e);
    }
};
Blockly.Mutator.prototype.createEditor_ = function () {
    this.svgDialog_ = Blockly.utils.createSvgElement('svg', { 'x': Blockly.Bubble.BORDER_WIDTH, 'y': Blockly.Bubble.BORDER_WIDTH }, null);
    if (this.quarkNames_.length) {
        var quarkXml = goog.dom.createDom('xml');
        for (var i = 0, quarkName; quarkName = this.quarkNames_[i]; i++) {
            quarkXml.appendChild(goog.dom.createDom('block', { 'type': quarkName }));
        }
    }
    else {
        var quarkXml = null;
    }
    var workspaceOptions = {
        languageTree: quarkXml,
        parentWorkspace: this.block_.workspace,
        pathToMedia: this.block_.workspace.options.pathToMedia,
        RTL: this.block_.RTL,
        toolboxPosition: this.block_.RTL ? Blockly.TOOLBOX_AT_RIGHT :
            Blockly.TOOLBOX_AT_LEFT,
        horizontalLayout: false,
        getMetrics: this.getFlyoutMetrics_.bind(this),
        setMetrics: null
    };
    this.workspace_ = new Blockly.WorkspaceSvg(workspaceOptions, this.block_.workspace.dragSurface);
    this.workspace_.isMutator = true;
    var flyoutSvg = this.workspace_.addFlyout_('g');
    var background = this.workspace_.createDom('blocklyMutatorBackground');
    background.insertBefore(flyoutSvg, this.workspace_.svgBlockCanvas_);
    this.svgDialog_.appendChild(background);
    return this.svgDialog_;
};
Blockly.Mutator.prototype.updateEditable = function () {
    if (!this.block_.isInFlyout) {
        if (this.block_.isEditable()) {
            if (this.iconGroup_) {
                Blockly.utils.removeClass((this.iconGroup_), 'blocklyIconGroupReadonly');
            }
        }
        else {
            this.setVisible(false);
            if (this.iconGroup_) {
                Blockly.utils.addClass((this.iconGroup_), 'blocklyIconGroupReadonly');
            }
        }
    }
    Blockly.Icon.prototype.updateEditable.call(this);
};
Blockly.Mutator.prototype.resizeBubble_ = function () {
    var doubleBorderWidth = 2 * Blockly.Bubble.BORDER_WIDTH;
    var workspaceSize = this.workspace_.getCanvas().getBBox();
    var width;
    if (this.block_.RTL) {
        width = -workspaceSize.x;
    }
    else {
        width = workspaceSize.width + workspaceSize.x;
    }
    var height = workspaceSize.height + doubleBorderWidth * 3;
    if (this.workspace_.flyout_) {
        var flyoutMetrics = this.workspace_.flyout_.getMetrics_();
        height = Math.max(height, flyoutMetrics.contentHeight + 20);
    }
    width += doubleBorderWidth * 3;
    if (Math.abs(this.workspaceWidth_ - width) > doubleBorderWidth ||
        Math.abs(this.workspaceHeight_ - height) > doubleBorderWidth) {
        this.workspaceWidth_ = width;
        this.workspaceHeight_ = height;
        this.bubble_.setBubbleSize(width + doubleBorderWidth, height + doubleBorderWidth);
        this.svgDialog_.setAttribute('width', this.workspaceWidth_);
        this.svgDialog_.setAttribute('height', this.workspaceHeight_);
    }
    if (this.block_.RTL) {
        var translation = 'translate(' + this.workspaceWidth_ + ',0)';
        this.workspace_.getCanvas().setAttribute('transform', translation);
    }
    this.workspace_.resize();
};
Blockly.Mutator.prototype.setVisible = function (visible) {
    if (visible == this.isVisible()) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.Ui(this.block_, 'mutatorOpen', !visible, visible));
    if (visible) {
        this.bubble_ = new Blockly.Bubble((this.block_.workspace), this.createEditor_(), this.block_.svgPath_, this.iconXY_, null, null);
        var tree = this.workspace_.options.languageTree;
        if (tree) {
            this.workspace_.flyout_.init(this.workspace_);
            this.workspace_.flyout_.show(tree.childNodes);
        }
        this.rootBlock_ = this.block_.decompose(this.workspace_);
        var blocks = this.rootBlock_.getDescendants(false);
        for (var i = 0, child; child = blocks[i]; i++) {
            child.render();
        }
        this.rootBlock_.setMovable(false);
        this.rootBlock_.setDeletable(false);
        if (this.workspace_.flyout_) {
            var margin = this.workspace_.flyout_.CORNER_RADIUS * 2;
            var x = this.workspace_.flyout_.width_ + margin;
        }
        else {
            var margin = 16;
            var x = margin;
        }
        if (this.block_.RTL) {
            x = -x;
        }
        this.rootBlock_.moveBy(x, margin);
        if (this.block_.saveConnections) {
            var thisMutator = this;
            this.block_.saveConnections(this.rootBlock_);
            this.sourceListener_ = function () {
                thisMutator.block_.saveConnections(thisMutator.rootBlock_);
            };
            this.block_.workspace.addChangeListener(this.sourceListener_);
        }
        this.resizeBubble_();
        this.workspace_.addChangeListener(this.workspaceChanged_.bind(this));
        this.updateColour();
    }
    else {
        this.svgDialog_ = null;
        this.workspace_.dispose();
        this.workspace_ = null;
        this.rootBlock_ = null;
        this.bubble_.dispose();
        this.bubble_ = null;
        this.workspaceWidth_ = 0;
        this.workspaceHeight_ = 0;
        if (this.sourceListener_) {
            this.block_.workspace.removeChangeListener(this.sourceListener_);
            this.sourceListener_ = null;
        }
    }
};
Blockly.Mutator.prototype.workspaceChanged_ = function () {
    if (!this.workspace_.isDragging()) {
        var blocks = this.workspace_.getTopBlocks(false);
        var MARGIN = 20;
        for (var b = 0, block; block = blocks[b]; b++) {
            var blockXY = block.getRelativeToSurfaceXY();
            var blockHW = block.getHeightWidth();
            if (blockXY.y + blockHW.height < MARGIN) {
                block.moveBy(0, MARGIN - blockHW.height - blockXY.y);
            }
        }
    }
    if (this.rootBlock_.workspace == this.workspace_) {
        Blockly.Events.setGroup(true);
        var block = this.block_;
        var oldMutationDom = block.mutationToDom();
        var oldMutation = oldMutationDom && Blockly.Xml.domToText(oldMutationDom);
        var savedRendered = block.rendered;
        block.rendered = false;
        block.compose(this.rootBlock_);
        block.rendered = savedRendered;
        block.initSvg();
        var newMutationDom = block.mutationToDom();
        var newMutation = newMutationDom && Blockly.Xml.domToText(newMutationDom);
        if (oldMutation != newMutation) {
            Blockly.Events.fire(new Blockly.Events.BlockChange(block, 'mutation', null, oldMutation, newMutation));
            var group = Blockly.Events.getGroup();
            setTimeout(function () {
                Blockly.Events.setGroup(group);
                block.bumpNeighbours_();
                Blockly.Events.setGroup(false);
            }, Blockly.BUMP_DELAY);
        }
        if (block.rendered) {
            block.render();
        }
        if (!this.workspace_.isDragging()) {
            this.resizeBubble_();
        }
        Blockly.Events.setGroup(false);
    }
};
Blockly.Mutator.prototype.getFlyoutMetrics_ = function () {
    return {
        viewHeight: this.workspaceHeight_,
        viewWidth: this.workspaceWidth_,
        absoluteTop: 0,
        absoluteLeft: 0
    };
};
Blockly.Mutator.prototype.dispose = function () {
    this.block_.mutator = null;
    Blockly.Icon.prototype.dispose.call(this);
};
Blockly.Mutator.reconnect = function (connectionChild, block, inputName) {
    if (!connectionChild || !connectionChild.getSourceBlock().workspace) {
        return false;
    }
    var connectionParent = block.getInput(inputName).connection;
    var currentParent = connectionChild.targetBlock();
    if ((!currentParent || currentParent == block) &&
        connectionParent.targetConnection != connectionChild) {
        if (connectionParent.isConnected()) {
            connectionParent.disconnect();
        }
        connectionParent.connect(connectionChild);
        return true;
    }
    return false;
};
if (!goog.global['Blockly']) {
    goog.global['Blockly'] = {};
}
if (!goog.global['Blockly']['Mutator']) {
    goog.global['Blockly']['Mutator'] = {};
}
goog.global['Blockly']['Mutator']['reconnect'] = Blockly.Mutator.reconnect;
'use strict';
goog.provide('Blockly.Warning');
goog.require('Blockly.Bubble');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.Icon');
Blockly.Warning = function (block) {
    Blockly.Warning.superClass_.constructor.call(this, block);
    this.createIcon();
    this.text_ = {};
};
goog.inherits(Blockly.Warning, Blockly.Icon);
Blockly.Warning.prototype.collapseHidden = false;
Blockly.Warning.prototype.drawIcon_ = function (group) {
    Blockly.utils.createSvgElement('path', {
        'class': 'blocklyIconShape',
        'd': 'M2,15Q-1,15 0.5,12L6.5,1.7Q8,-1 9.5,1.7L15.5,12Q17,15 14,15z'
    }, group);
    Blockly.utils.createSvgElement('path', {
        'class': 'blocklyIconSymbol',
        'd': 'm7,4.8v3.16l0.27,2.27h1.46l0.27,-2.27v-3.16z'
    }, group);
    Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyIconSymbol',
        'x': '7',
        'y': '11',
        'height': '2',
        'width': '2'
    }, group);
};
Blockly.Warning.textToDom_ = function (text) {
    var paragraph = (Blockly.utils.createSvgElement('text', {
        'class': 'blocklyText blocklyBubbleText',
        'y': Blockly.Bubble.BORDER_WIDTH
    }, null));
    var lines = text.split('\n');
    for (var i = 0; i < lines.length; i++) {
        var tspanElement = Blockly.utils.createSvgElement('tspan', { 'dy': '1em', 'x': Blockly.Bubble.BORDER_WIDTH }, paragraph);
        var textNode = document.createTextNode(lines[i]);
        tspanElement.appendChild(textNode);
    }
    return paragraph;
};
Blockly.Warning.prototype.setVisible = function (visible) {
    if (visible == this.isVisible()) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.Ui(this.block_, 'warningOpen', !visible, visible));
    if (visible) {
        var paragraph = Blockly.Warning.textToDom_(this.getText());
        this.bubble_ = new Blockly.Bubble((this.block_.workspace), paragraph, this.block_.svgPath_, this.iconXY_, null, null);
        if (this.block_.RTL) {
            var maxWidth = paragraph.getBBox().width;
            for (var i = 0, textElement; textElement = paragraph.childNodes[i]; i++) {
                textElement.setAttribute('text-anchor', 'end');
                textElement.setAttribute('x', maxWidth + Blockly.Bubble.BORDER_WIDTH);
            }
        }
        this.updateColour();
        var size = this.bubble_.getBubbleSize();
        this.bubble_.setBubbleSize(size.width, size.height);
    }
    else {
        this.bubble_.dispose();
        this.bubble_ = null;
        this.body_ = null;
    }
};
Blockly.Warning.prototype.bodyFocus_ = function (_e) {
    this.bubble_.promote_();
};
Blockly.Warning.prototype.setText = function (text, id) {
    if (this.text_[id] == text) {
        return;
    }
    if (text) {
        this.text_[id] = text;
    }
    else {
        delete this.text_[id];
    }
    if (this.isVisible()) {
        this.setVisible(false);
        this.setVisible(true);
    }
};
Blockly.Warning.prototype.getText = function () {
    var allWarnings = [];
    for (var id in this.text_) {
        allWarnings.push(this.text_[id]);
    }
    return allWarnings.join('\n');
};
Blockly.Warning.prototype.dispose = function () {
    this.block_.warning = null;
    Blockly.Icon.prototype.dispose.call(this);
};
'use strict';
goog.provide('Blockly.Events');
goog.require('goog.array');
goog.require('goog.math.Coordinate');
Blockly.Events.group_ = '';
Blockly.Events.recordUndo = true;
Blockly.Events.disabled_ = 0;
Blockly.Events.CREATE = 'create';
Blockly.Events.BLOCK_CREATE = Blockly.Events.CREATE;
Blockly.Events.DELETE = 'delete';
Blockly.Events.BLOCK_DELETE = Blockly.Events.DELETE;
Blockly.Events.CHANGE = 'change';
Blockly.Events.BLOCK_CHANGE = Blockly.Events.CHANGE;
Blockly.Events.MOVE = 'move';
Blockly.Events.DRAG_OUTSIDE = 'dragOutside';
Blockly.Events.END_DRAG = 'endDrag';
Blockly.Events.BLOCK_MOVE = Blockly.Events.MOVE;
Blockly.Events.VAR_CREATE = 'var_create';
Blockly.Events.VAR_DELETE = 'var_delete';
Blockly.Events.VAR_RENAME = 'var_rename';
Blockly.Events.COMMENT_CREATE = 'comment_create';
Blockly.Events.COMMENT_MOVE = 'comment_move';
Blockly.Events.COMMENT_CHANGE = 'comment_change';
Blockly.Events.COMMENT_DELETE = 'comment_delete';
Blockly.Events.UI = 'ui';
Blockly.Events.FIRE_QUEUE_ = [];
Blockly.Events.fire = function (event) {
    if (!Blockly.Events.isEnabled()) {
        return;
    }
    if (!Blockly.Events.FIRE_QUEUE_.length) {
        setTimeout(Blockly.Events.fireNow_, 0);
    }
    Blockly.Events.FIRE_QUEUE_.push(event);
};
Blockly.Events.fireNow_ = function () {
    var queue = Blockly.Events.filter(Blockly.Events.FIRE_QUEUE_, true);
    Blockly.Events.FIRE_QUEUE_.length = 0;
    for (var i = 0, event; event = queue[i]; i++) {
        var workspace = Blockly.Workspace.getById(event.workspaceId);
        if (workspace) {
            workspace.fireChangeListener(event);
        }
    }
};
Blockly.Events.filter = function (queueIn, forward) {
    var queue = goog.array.clone(queueIn);
    if (!forward) {
        queue.reverse();
    }
    var mergedQueue = [];
    var hash = Object.create(null);
    for (var i = 0, event; event = queue[i]; i++) {
        if (!event.isNull()) {
            var key = [event.type, event.blockId, event.workspaceId].join(' ');
            var lastEvent = hash[key];
            if (!lastEvent) {
                hash[key] = event;
                mergedQueue.push(event);
            }
            else if (event.type == Blockly.Events.MOVE) {
                lastEvent.newParentId = event.newParentId;
                lastEvent.newInputName = event.newInputName;
                lastEvent.newCoordinate = event.newCoordinate;
            }
            else if (event.type == Blockly.Events.CHANGE &&
                event.element == lastEvent.element &&
                event.name == lastEvent.name) {
                lastEvent.newValue = event.newValue;
            }
            else if (event.type == Blockly.Events.UI &&
                event.element == 'click' &&
                (lastEvent.element == 'commentOpen' ||
                    lastEvent.element == 'mutatorOpen' ||
                    lastEvent.element == 'warningOpen')) {
                lastEvent.newValue = event.newValue;
            }
            else {
                hash[key] = event;
                mergedQueue.push(event);
            }
        }
    }
    queue = mergedQueue.filter(function (e) { return !e.isNull(); });
    if (!forward) {
        queue.reverse();
    }
    for (var i = 1, event; event = queue[i]; i++) {
        if (event.type == Blockly.Events.CHANGE &&
            event.element == 'mutation') {
            queue.unshift(queue.splice(i, 1)[0]);
        }
    }
    return queue;
};
Blockly.Events.clearPendingUndo = function () {
    for (var i = 0, event; event = Blockly.Events.FIRE_QUEUE_[i]; i++) {
        event.recordUndo = false;
    }
};
Blockly.Events.disable = function () {
    Blockly.Events.disabled_++;
};
Blockly.Events.enable = function () {
    Blockly.Events.disabled_--;
};
Blockly.Events.isEnabled = function () {
    return Blockly.Events.disabled_ == 0;
};
Blockly.Events.getGroup = function () {
    return Blockly.Events.group_;
};
Blockly.Events.setGroup = function (state) {
    if (typeof state == 'boolean') {
        Blockly.Events.group_ = state ? Blockly.utils.genUid() : '';
    }
    else {
        Blockly.Events.group_ = state;
    }
};
Blockly.Events.getDescendantIds_ = function (block) {
    var ids = [];
    var descendants = block.getDescendants(false);
    for (var i = 0, descendant; descendant = descendants[i]; i++) {
        ids[i] = descendant.id;
    }
    return ids;
};
Blockly.Events.fromJson = function (json, workspace) {
    var event;
    switch (json.type) {
        case Blockly.Events.CREATE:
            event = new Blockly.Events.Create(null);
            break;
        case Blockly.Events.DELETE:
            event = new Blockly.Events.Delete(null);
            break;
        case Blockly.Events.CHANGE:
            event = new Blockly.Events.Change(null);
            break;
        case Blockly.Events.MOVE:
            event = new Blockly.Events.Move(null);
            break;
        case Blockly.Events.VAR_CREATE:
            event = new Blockly.Events.VarCreate(null);
            break;
        case Blockly.Events.VAR_DELETE:
            event = new Blockly.Events.VarDelete(null);
            break;
        case Blockly.Events.VAR_RENAME:
            event = new Blockly.Events.VarRename(null);
            break;
        case Blockly.Events.COMMENT_CREATE:
            event = new Blockly.Events.CommentCreate(null);
            break;
        case Blockly.Events.COMMENT_CHANGE:
            event = new Blockly.Events.CommentChange(null);
            break;
        case Blockly.Events.COMMENT_MOVE:
            event = new Blockly.Events.CommentMove(null);
            break;
        case Blockly.Events.COMMENT_DELETE:
            event = new Blockly.Events.CommentDelete(null);
            break;
        case Blockly.Events.UI:
            event = new Blockly.Events.Ui(null);
            break;
        case Blockly.Events.DRAG_OUTSIDE:
            event = new Blockly.Events.DragBlockOutside(null);
            break;
        case Blockly.Events.END_DRAG:
            event = new Blockly.Events.EndBlockDrag(null, false);
            break;
        default:
            throw 'Unknown event type.';
    }
    event.fromJson(json);
    event.workspaceId = workspace.id;
    return event;
};
Blockly.Events.disableOrphans = function (event) {
    if (event.type == Blockly.Events.MOVE ||
        event.type == Blockly.Events.CREATE) {
        Blockly.Events.disable();
        var workspace = Blockly.Workspace.getById(event.workspaceId);
        var block = workspace.getBlockById(event.blockId);
        if (block) {
            if (block.getParent() && !block.getParent().disabled) {
                var children = block.getDescendants(false);
                for (var i = 0, child; child = children[i]; i++) {
                    child.setDisabled(false);
                }
            }
            else if ((block.outputConnection || block.previousConnection) &&
                !workspace.isDragging()) {
                do {
                    block.setDisabled(true);
                    block = block.getNextBlock();
                } while (block);
            }
        }
        Blockly.Events.enable();
    }
};
'use strict';
goog.provide('Blockly.Events.Abstract');
goog.require('Blockly.Events');
goog.require('goog.array');
goog.require('goog.math.Coordinate');
Blockly.Events.Abstract = function () {
    this.workspaceId = undefined;
    this.group = Blockly.Events.group_;
    this.recordUndo = Blockly.Events.recordUndo;
};
Blockly.Events.Abstract.prototype.toJson = function () {
    var json = {
        'type': this.type
    };
    if (this.group) {
        json['group'] = this.group;
    }
    return json;
};
Blockly.Events.Abstract.prototype.fromJson = function (json) {
    this.group = json['group'];
};
Blockly.Events.Abstract.prototype.isNull = function () {
    return false;
};
Blockly.Events.Abstract.prototype.run = function (_forward) {
};
Blockly.Events.Abstract.prototype.getEventWorkspace_ = function () {
    var workspace = Blockly.Workspace.getById(this.workspaceId);
    if (!workspace) {
        throw Error('Workspace is null. Event must have been generated from real' +
            ' Blockly events.');
    }
    return workspace;
};
'use strict';
goog.provide('Blockly.Events.BlockBase');
goog.provide('Blockly.Events.BlockChange');
goog.provide('Blockly.Events.BlockCreate');
goog.provide('Blockly.Events.BlockDelete');
goog.provide('Blockly.Events.BlockMove');
goog.provide('Blockly.Events.Change');
goog.provide('Blockly.Events.Create');
goog.provide('Blockly.Events.Delete');
goog.provide('Blockly.Events.Move');
goog.require('Blockly.Events');
goog.require('Blockly.Events.Abstract');
goog.require('goog.array');
goog.require('goog.math.Coordinate');
Blockly.Events.BlockBase = function (block) {
    Blockly.Events.BlockBase.superClass_.constructor.call(this);
    this.blockId = block.id;
    this.workspaceId = block.workspace.id;
};
goog.inherits(Blockly.Events.BlockBase, Blockly.Events.Abstract);
Blockly.Events.BlockBase.prototype.toJson = function () {
    var json = Blockly.Events.BlockBase.superClass_.toJson.call(this);
    json['blockId'] = this.blockId;
    return json;
};
Blockly.Events.BlockBase.prototype.fromJson = function (json) {
    Blockly.Events.BlockBase.superClass_.toJson.call(this);
    this.blockId = json['blockId'];
};
Blockly.Events.Change = function (block, element, name, oldValue, newValue) {
    if (!block) {
        return;
    }
    Blockly.Events.Change.superClass_.constructor.call(this, block);
    this.element = element;
    this.name = name;
    this.oldValue = oldValue;
    this.newValue = newValue;
};
goog.inherits(Blockly.Events.Change, Blockly.Events.BlockBase);
Blockly.Events.BlockChange = Blockly.Events.Change;
Blockly.Events.Change.prototype.type = Blockly.Events.CHANGE;
Blockly.Events.Change.prototype.toJson = function () {
    var json = Blockly.Events.Change.superClass_.toJson.call(this);
    json['element'] = this.element;
    if (this.name) {
        json['name'] = this.name;
    }
    json['newValue'] = this.newValue;
    return json;
};
Blockly.Events.Change.prototype.fromJson = function (json) {
    Blockly.Events.Change.superClass_.fromJson.call(this, json);
    this.element = json['element'];
    this.name = json['name'];
    this.newValue = json['newValue'];
};
Blockly.Events.Change.prototype.isNull = function () {
    return this.oldValue == this.newValue;
};
Blockly.Events.Change.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    var block = workspace.getBlockById(this.blockId);
    if (!block) {
        console.warn("Can't change non-existent block: " + this.blockId);
        return;
    }
    if (block.mutator) {
        block.mutator.setVisible(false);
    }
    var value = forward ? this.newValue : this.oldValue;
    switch (this.element) {
        case 'field':
            var field = block.getField(this.name);
            if (field) {
                field.callValidator(value);
                field.setValue(value);
            }
            else {
                console.warn("Can't set non-existent field: " + this.name);
            }
            break;
        case 'comment':
            block.setCommentText(value || null);
            break;
        case 'collapsed':
            block.setCollapsed(value);
            break;
        case 'disabled':
            block.setDisabled(value);
            break;
        case 'inline':
            block.setInputsInline(value);
            break;
        case 'mutation':
            var oldMutation = '';
            if (block.mutationToDom) {
                var oldMutationDom = block.mutationToDom();
                oldMutation = oldMutationDom && Blockly.Xml.domToText(oldMutationDom);
            }
            if (block.domToMutation) {
                value = value || '<mutation></mutation>';
                var dom = Blockly.Xml.textToDom('<xml>' + value + '</xml>');
                block.domToMutation(dom.firstChild);
            }
            Blockly.Events.fire(new Blockly.Events.Change(block, 'mutation', null, oldMutation, value));
            break;
        default:
            console.warn('Unknown change type: ' + this.element);
    }
};
Blockly.Events.Create = function (block) {
    if (!block) {
        return;
    }
    Blockly.Events.Create.superClass_.constructor.call(this, block);
    if (block.workspace.rendered) {
        this.xml = Blockly.Xml.blockToDomWithXY(block);
    }
    else {
        this.xml = Blockly.Xml.blockToDom(block);
    }
    this.ids = Blockly.Events.getDescendantIds_(block);
};
goog.inherits(Blockly.Events.Create, Blockly.Events.BlockBase);
Blockly.Events.BlockCreate = Blockly.Events.Create;
Blockly.Events.Create.prototype.type = Blockly.Events.CREATE;
Blockly.Events.Create.prototype.toJson = function () {
    var json = Blockly.Events.Create.superClass_.toJson.call(this);
    json['xml'] = Blockly.Xml.domToText(this.xml);
    json['ids'] = this.ids;
    return json;
};
Blockly.Events.Create.prototype.fromJson = function (json) {
    Blockly.Events.Create.superClass_.fromJson.call(this, json);
    this.xml = Blockly.Xml.textToDom('<xml>' + json['xml'] + '</xml>').firstChild;
    this.ids = json['ids'];
};
Blockly.Events.Create.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    if (forward) {
        var xml = goog.dom.createDom('xml');
        xml.appendChild(this.xml);
        Blockly.Xml.domToWorkspace(xml, workspace);
    }
    else {
        for (var i = 0, id; id = this.ids[i]; i++) {
            var block = workspace.getBlockById(id);
            if (block) {
                block.dispose(false, false);
            }
            else if (id == this.blockId) {
                console.warn("Can't uncreate non-existent block: " + id);
            }
        }
    }
};
Blockly.Events.Delete = function (block) {
    if (!block) {
        return;
    }
    if (block.getParent()) {
        throw 'Connected blocks cannot be deleted.';
    }
    Blockly.Events.Delete.superClass_.constructor.call(this, block);
    if (block.workspace.rendered) {
        this.oldXml = Blockly.Xml.blockToDomWithXY(block);
    }
    else {
        this.oldXml = Blockly.Xml.blockToDom(block);
    }
    this.ids = Blockly.Events.getDescendantIds_(block);
};
goog.inherits(Blockly.Events.Delete, Blockly.Events.BlockBase);
Blockly.Events.BlockDelete = Blockly.Events.Delete;
Blockly.Events.Delete.prototype.type = Blockly.Events.DELETE;
Blockly.Events.Delete.prototype.toJson = function () {
    var json = Blockly.Events.Delete.superClass_.toJson.call(this);
    json['ids'] = this.ids;
    return json;
};
Blockly.Events.Delete.prototype.fromJson = function (json) {
    Blockly.Events.Delete.superClass_.fromJson.call(this, json);
    this.ids = json['ids'];
};
Blockly.Events.Delete.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    if (forward) {
        for (var i = 0, id; id = this.ids[i]; i++) {
            var block = workspace.getBlockById(id);
            if (block) {
                block.dispose(false, false);
            }
            else if (id == this.blockId) {
                console.warn("Can't delete non-existent block: " + id);
            }
        }
    }
    else {
        var xml = goog.dom.createDom('xml');
        xml.appendChild(this.oldXml);
        Blockly.Xml.domToWorkspace(xml, workspace);
    }
};
Blockly.Events.Move = function (block) {
    if (!block) {
        return;
    }
    Blockly.Events.Move.superClass_.constructor.call(this, block);
    var location = this.currentLocation_();
    this.oldParentId = location.parentId;
    this.oldInputName = location.inputName;
    this.oldCoordinate = location.coordinate;
};
goog.inherits(Blockly.Events.Move, Blockly.Events.BlockBase);
Blockly.Events.BlockMove = Blockly.Events.Move;
Blockly.Events.Move.prototype.type = Blockly.Events.MOVE;
Blockly.Events.Move.prototype.toJson = function () {
    var json = Blockly.Events.Move.superClass_.toJson.call(this);
    if (this.newParentId) {
        json['newParentId'] = this.newParentId;
    }
    if (this.newInputName) {
        json['newInputName'] = this.newInputName;
    }
    if (this.newCoordinate) {
        json['newCoordinate'] = Math.round(this.newCoordinate.x) + ',' +
            Math.round(this.newCoordinate.y);
    }
    return json;
};
Blockly.Events.Move.prototype.fromJson = function (json) {
    Blockly.Events.Move.superClass_.fromJson.call(this, json);
    this.newParentId = json['newParentId'];
    this.newInputName = json['newInputName'];
    if (json['newCoordinate']) {
        var xy = json['newCoordinate'].split(',');
        this.newCoordinate =
            new goog.math.Coordinate(parseFloat(xy[0]), parseFloat(xy[1]));
    }
};
Blockly.Events.Move.prototype.recordNew = function () {
    var location = this.currentLocation_();
    this.newParentId = location.parentId;
    this.newInputName = location.inputName;
    this.newCoordinate = location.coordinate;
};
Blockly.Events.Move.prototype.currentLocation_ = function () {
    var workspace = Blockly.Workspace.getById(this.workspaceId);
    var block = workspace.getBlockById(this.blockId);
    var location = {};
    var parent = block.getParent();
    if (parent) {
        location.parentId = parent.id;
        var input = parent.getInputWithBlock(block);
        if (input) {
            location.inputName = input.name;
        }
    }
    else {
        var blockXY = block.getRelativeToSurfaceXY();
        var rtlAwareX = workspace.RTL ? workspace.getWidth() - blockXY.x : blockXY.x;
        location.coordinate = new goog.math.Coordinate(rtlAwareX, blockXY.y);
    }
    return location;
};
Blockly.Events.Move.prototype.isNull = function () {
    return this.oldParentId == this.newParentId &&
        this.oldInputName == this.newInputName &&
        goog.math.Coordinate.equals(this.oldCoordinate, this.newCoordinate);
};
Blockly.Events.Move.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    var block = workspace.getBlockById(this.blockId);
    if (!block) {
        console.warn("Can't move non-existent block: " + this.blockId);
        return;
    }
    var parentId = forward ? this.newParentId : this.oldParentId;
    var inputName = forward ? this.newInputName : this.oldInputName;
    var coordinate = forward ? this.newCoordinate : this.oldCoordinate;
    var parentBlock = null;
    if (parentId) {
        parentBlock = workspace.getBlockById(parentId);
        if (!parentBlock) {
            console.warn("Can't connect to non-existent block: " + parentId);
            return;
        }
    }
    if (block.getParent()) {
        block.unplug();
    }
    if (coordinate) {
        var xy = block.getRelativeToSurfaceXY();
        var rtlAwareX = workspace.RTL ? workspace.getWidth() - coordinate.x : coordinate.x;
        block.moveBy(rtlAwareX - xy.x, coordinate.y - xy.y);
    }
    else {
        var blockConnection = block.outputConnection || block.previousConnection;
        var parentConnection;
        if (inputName) {
            var input = parentBlock.getInput(inputName);
            if (input) {
                parentConnection = input.connection;
            }
        }
        else if (blockConnection.type == Blockly.PREVIOUS_STATEMENT) {
            parentConnection = parentBlock.nextConnection;
        }
        if (parentConnection) {
            blockConnection.connect(parentConnection);
        }
        else {
            console.warn("Can't connect to non-existent input: " + inputName);
        }
    }
};
'use strict';
goog.provide('Blockly.Events.DragBlockOutside');
goog.provide('Blockly.Events.EndBlockDrag');
goog.require('Blockly.Events');
goog.require('Blockly.Events.BlockBase');
goog.require('goog.array');
goog.require('goog.math.Coordinate');
Blockly.Events.DragBlockOutside = function (block) {
    if (!block) {
        return;
    }
    Blockly.Events.DragBlockOutside.superClass_.constructor.call(this, block);
    this.recordUndo = false;
};
goog.inherits(Blockly.Events.DragBlockOutside, Blockly.Events.BlockBase);
Blockly.Events.DragBlockOutside.prototype.type = Blockly.Events.DRAG_OUTSIDE;
Blockly.Events.DragBlockOutside.prototype.toJson = function () {
    var json = Blockly.Events.DragBlockOutside.superClass_.toJson.call(this);
    if (this.isOutside) {
        json['isOutside'] = this.isOutside;
    }
    return json;
};
Blockly.Events.DragBlockOutside.prototype.fromJson = function (json) {
    Blockly.Events.DragBlockOutside.superClass_.fromJson.call(this, json);
    this.isOutside = json['isOutside'];
};
Blockly.Events.EndBlockDrag = function (block, isOutside) {
    if (!block) {
        return;
    }
    Blockly.Events.EndBlockDrag.superClass_.constructor.call(this, block);
    this.isOutside = isOutside;
    if (isOutside) {
        this.xml = Blockly.Xml.blockToDom(block, true);
    }
    this.recordUndo = false;
};
goog.inherits(Blockly.Events.EndBlockDrag, Blockly.Events.BlockBase);
Blockly.Events.EndBlockDrag.prototype.type = Blockly.Events.END_DRAG;
Blockly.Events.EndBlockDrag.prototype.toJson = function () {
    var json = Blockly.Events.EndBlockDrag.superClass_.toJson.call(this);
    if (this.isOutside) {
        json['isOutside'] = this.isOutside;
    }
    if (this.xml) {
        json['xml'] = this.xml;
    }
    return json;
};
Blockly.Events.EndBlockDrag.prototype.fromJson = function (json) {
    Blockly.Events.EndBlockDrag.superClass_.fromJson.call(this, json);
    this.isOutside = json['isOutside'];
    this.xml = json['xml'];
};
'use strict';
goog.provide('Blockly.Events.CommentBase');
goog.provide('Blockly.Events.CommentChange');
goog.provide('Blockly.Events.CommentCreate');
goog.provide('Blockly.Events.CommentDelete');
goog.provide('Blockly.Events.CommentMove');
goog.require('Blockly.Events');
goog.require('Blockly.Events.Abstract');
goog.require('goog.math.Coordinate');
Blockly.Events.CommentBase = function (comment) {
    this.commentId = comment.id;
    this.workspaceId = comment.workspace.id;
    this.blockId = comment.blockId || null;
    this.group = Blockly.Events.group_;
    this.recordUndo = Blockly.Events.recordUndo;
};
goog.inherits(Blockly.Events.CommentBase, Blockly.Events.Abstract);
Blockly.Events.CommentBase.prototype.toJson = function () {
    var json = {
        'type': this.type
    };
    if (this.group) {
        json['group'] = this.group;
    }
    if (this.commentId) {
        json['commentId'] = this.commentId;
    }
    if (this.blockId) {
        json['blockId'] = this.blockId;
    }
    return json;
};
Blockly.Events.CommentBase.prototype.fromJson = function (json) {
    this.commentId = json['commentId'];
    this.group = json['group'];
    this.blockId = json['blockId'];
};
Blockly.Events.CommentBase.prototype.getComment_ = function () {
    var workspace = this.getEventWorkspace_();
    return workspace.getCommentById(this.commentId);
};
Blockly.Events.CommentChange = function (comment, oldContents, newContents) {
    if (!comment) {
        return;
    }
    Blockly.Events.CommentChange.superClass_.constructor.call(this, comment);
    this.oldContents_ = oldContents;
    this.newContents_ = newContents;
};
goog.inherits(Blockly.Events.CommentChange, Blockly.Events.CommentBase);
Blockly.Events.CommentChange.prototype.type = Blockly.Events.COMMENT_CHANGE;
Blockly.Events.CommentChange.prototype.toJson = function () {
    var json = Blockly.Events.CommentChange.superClass_.toJson.call(this);
    json['newContents'] = this.newContents_;
    return json;
};
Blockly.Events.CommentChange.prototype.fromJson = function (json) {
    Blockly.Events.CommentChange.superClass_.fromJson.call(this, json);
    this.newContents_ = json['newValue'];
};
Blockly.Events.CommentChange.prototype.isNull = function () {
    return this.oldContents_ == this.newContents_;
};
Blockly.Events.CommentChange.prototype.run = function (forward) {
    var comment = this.getComment_();
    if (!comment) {
        console.warn('Can\'t change non-existent comment: ' + this.commentId);
        return;
    }
    var contents = forward ? this.newContents_ : this.oldContents_;
    if (contents.hasOwnProperty('minimized')) {
        comment.setMinimized(contents.minimized);
    }
    if (contents.hasOwnProperty('width') && contents.hasOwnProperty('height')) {
        comment.setSize(contents.width, contents.height);
    }
    if (contents.hasOwnProperty('text')) {
        comment.setText(contents.text);
    }
};
Blockly.Events.CommentCreate = function (comment) {
    if (!comment) {
        return;
    }
    Blockly.Events.CommentCreate.superClass_.constructor.call(this, comment);
    this.text = comment.getText();
    this.xy = comment.getXY();
    var hw = comment.getHeightWidth();
    this.width = hw.width;
    this.height = hw.height;
    this.minimized = comment.isMinimized() || false;
    this.xml = comment.toXmlWithXY();
};
goog.inherits(Blockly.Events.CommentCreate, Blockly.Events.CommentBase);
Blockly.Events.CommentCreate.prototype.type = Blockly.Events.COMMENT_CREATE;
Blockly.Events.CommentCreate.prototype.toJson = function () {
    var json = Blockly.Events.CommentCreate.superClass_.toJson.call(this);
    json['xml'] = Blockly.Xml.domToText(this.xml);
    return json;
};
Blockly.Events.CommentCreate.prototype.fromJson = function (json) {
    Blockly.Events.CommentCreate.superClass_.fromJson.call(this, json);
    this.xml = Blockly.Xml.textToDom('<xml>' + json['xml'] + '</xml>').firstChild;
};
Blockly.Events.CommentCreate.prototype.run = function (forward) {
    if (forward) {
        var workspace = this.getEventWorkspace_();
        if (this.blockId) {
            var block = workspace.getBlockById(this.blockId);
            if (block) {
                block.setCommentText('', this.commentId, this.xy.x, this.xy.y, this.minimized);
            }
        }
        else {
            var xml = goog.dom.createDom('xml');
            xml.appendChild(this.xml);
            Blockly.Xml.domToWorkspace(xml, workspace);
        }
    }
    else {
        var comment = this.getComment_();
        if (comment) {
            comment.dispose(false, false);
        }
        else {
            console.warn("Can't uncreate non-existent comment: " + this.commentId);
        }
    }
};
Blockly.Events.CommentDelete = function (comment) {
    if (!comment) {
        return;
    }
    Blockly.Events.CommentDelete.superClass_.constructor.call(this, comment);
    this.xy = comment.getXY();
    this.minimized = comment.isMinimized() || false;
    this.text = comment.getText();
    var hw = comment.getHeightWidth();
    this.height = hw.height;
    this.width = hw.width;
    this.xml = comment.toXmlWithXY();
};
goog.inherits(Blockly.Events.CommentDelete, Blockly.Events.CommentBase);
Blockly.Events.CommentDelete.prototype.type = Blockly.Events.COMMENT_DELETE;
Blockly.Events.CommentDelete.prototype.toJson = function () {
    var json = Blockly.Events.CommentDelete.superClass_.toJson.call(this);
    return json;
};
Blockly.Events.CommentDelete.prototype.fromJson = function (json) {
    Blockly.Events.CommentDelete.superClass_.fromJson.call(this, json);
};
Blockly.Events.CommentDelete.prototype.run = function (forward) {
    if (forward) {
        var comment = this.getComment_();
        if (comment) {
            comment.dispose(false, false);
        }
        else {
            console.warn("Can't delete non-existent comment: " + this.commentId);
        }
    }
    else {
        var workspace = this.getEventWorkspace_();
        if (this.blockId) {
            var block = workspace.getBlockById(this.blockId);
            block.setCommentText(this.text, this.commentId, this.xy.x, this.xy.y, this.minimized);
            block.comment.setSize(this.width, this.height);
        }
        else {
            var xml = goog.dom.createDom('xml');
            xml.appendChild(this.xml);
            Blockly.Xml.domToWorkspace(xml, workspace);
        }
    }
};
Blockly.Events.CommentMove = function (comment) {
    if (!comment) {
        return;
    }
    Blockly.Events.CommentMove.superClass_.constructor.call(this, comment);
    this.comment_ = comment;
    this.workspaceWidth_ = comment.workspace.getWidth();
    this.oldCoordinate_ = this.currentLocation_();
    this.newCoordinate_ = null;
};
goog.inherits(Blockly.Events.CommentMove, Blockly.Events.CommentBase);
Blockly.Events.CommentMove.prototype.currentLocation_ = function () {
    var xy = this.comment_.getXY();
    if (!this.comment_.workspace.RTL) {
        return xy;
    }
    var rtlAwareX;
    if (this.comment_ instanceof Blockly.ScratchBlockComment) {
        var commentWidth = this.comment_.getBubbleSize().width;
        rtlAwareX = this.workspaceWidth_ - xy.x - commentWidth;
    }
    else {
        rtlAwareX = this.workspaceWidth_ - xy.x;
    }
    return new goog.math.Coordinate(rtlAwareX, xy.y);
};
Blockly.Events.CommentMove.prototype.recordNew = function () {
    if (!this.comment_) {
        throw new Error('Tried to record the new position of a comment on the ' +
            'same event twice.');
    }
    this.newCoordinate_ = this.currentLocation_();
    this.comment_ = null;
};
Blockly.Events.CommentMove.prototype.type = Blockly.Events.COMMENT_MOVE;
Blockly.Events.CommentMove.prototype.setOldCoordinate = function (xy) {
    this.oldCoordinate_ = new goog.math.Coordinate(this.comment_.workspace.RTL ?
        this.workspaceWidth_ - xy.x : xy.x, xy.y);
};
Blockly.Events.CommentMove.prototype.toJson = function () {
    var json = Blockly.Events.CommentMove.superClass_.toJson.call(this);
    if (this.newCoordinate_) {
        json['newCoordinate'] = Math.round(this.newCoordinate_.x) + ',' +
            Math.round(this.newCoordinate_.y);
    }
    return json;
};
Blockly.Events.CommentMove.prototype.fromJson = function (json) {
    Blockly.Events.CommentMove.superClass_.fromJson.call(this, json);
    if (json['newCoordinate']) {
        var xy = json['newCoordinate'].split(',');
        this.newCoordinate_ =
            new goog.math.Coordinate(parseFloat(xy[0]), parseFloat(xy[1]));
    }
};
Blockly.Events.CommentMove.prototype.isNull = function () {
    return goog.math.Coordinate.equals(this.oldCoordinate_, this.newCoordinate_);
};
Blockly.Events.CommentMove.prototype.run = function (forward) {
    var comment = this.getComment_();
    if (!comment) {
        console.warn('Can\'t move non-existent comment: ' + this.commentId);
        return;
    }
    var target = forward ? this.newCoordinate_ : this.oldCoordinate_;
    if (comment instanceof Blockly.ScratchBlockComment) {
        if (comment.workspace.RTL) {
            comment.moveTo(this.workspaceWidth_ - target.x, target.y);
        }
        else {
            comment.moveTo(target.x, target.y);
        }
    }
    else {
        var current = comment.getXY();
        if (comment.workspace.RTL) {
            var deltaX = target.x - (this.workspaceWidth_ - current.x);
            comment.moveBy(-deltaX, target.y - current.y);
        }
        else {
            comment.moveBy(target.x - current.x, target.y - current.y);
        }
    }
};
'use strict';
goog.provide('Blockly.Events.Ui');
goog.require('Blockly.Events');
goog.require('Blockly.Events.Abstract');
goog.require('goog.array');
goog.require('goog.math.Coordinate');
Blockly.Events.Ui = function (block, element, oldValue, newValue) {
    Blockly.Events.Ui.superClass_.constructor.call(this);
    this.blockId = block ? block.id : null;
    this.workspaceId = block ? block.workspace.id : null;
    this.element = element;
    this.oldValue = oldValue;
    this.newValue = newValue;
    this.recordUndo = false;
};
goog.inherits(Blockly.Events.Ui, Blockly.Events.Abstract);
Blockly.Events.Ui.prototype.type = Blockly.Events.UI;
Blockly.Events.Ui.prototype.toJson = function () {
    var json = Blockly.Events.Ui.superClass_.toJson.call(this);
    json['element'] = this.element;
    if (this.newValue !== undefined) {
        json['newValue'] = this.newValue;
    }
    if (this.blockId) {
        json['blockId'] = this.blockId;
    }
    return json;
};
Blockly.Events.Ui.prototype.fromJson = function (json) {
    Blockly.Events.Ui.superClass_.fromJson.call(this, json);
    this.element = json['element'];
    this.newValue = json['newValue'];
    this.blockId = json['blockId'];
};
'use strict';
goog.provide('Blockly.Events.VarBase');
goog.provide('Blockly.Events.VarCreate');
goog.provide('Blockly.Events.VarDelete');
goog.provide('Blockly.Events.VarRename');
goog.require('Blockly.Events');
goog.require('Blockly.Events.Abstract');
goog.require('goog.array');
goog.require('goog.math.Coordinate');
Blockly.Events.VarBase = function (variable) {
    Blockly.Events.VarBase.superClass_.constructor.call(this);
    this.varId = variable.getId();
    this.workspaceId = variable.workspace.id;
};
goog.inherits(Blockly.Events.VarBase, Blockly.Events.Abstract);
Blockly.Events.VarBase.prototype.toJson = function () {
    var json = Blockly.Events.VarBase.superClass_.toJson.call(this);
    json['varId'] = this.varId;
    return json;
};
Blockly.Events.VarBase.prototype.fromJson = function (json) {
    Blockly.Events.VarBase.superClass_.toJson.call(this);
    this.varId = json['varId'];
};
Blockly.Events.VarCreate = function (variable) {
    if (!variable) {
        return;
    }
    Blockly.Events.VarCreate.superClass_.constructor.call(this, variable);
    this.varType = variable.type;
    this.varName = variable.name;
    this.isLocal = variable.isLocal;
    this.isCloud = variable.isCloud;
};
goog.inherits(Blockly.Events.VarCreate, Blockly.Events.VarBase);
Blockly.Events.VarCreate.prototype.type = Blockly.Events.VAR_CREATE;
Blockly.Events.VarCreate.prototype.toJson = function () {
    var json = Blockly.Events.VarCreate.superClass_.toJson.call(this);
    json['varType'] = this.varType;
    json['varName'] = this.varName;
    json['isLocal'] = this.isLocal;
    json['isCloud'] = this.isCloud;
    return json;
};
Blockly.Events.VarCreate.prototype.fromJson = function (json) {
    Blockly.Events.VarCreate.superClass_.fromJson.call(this, json);
    this.varType = json['varType'];
    this.varName = json['varName'];
    this.isLocal = json['isLocal'];
    this.isCloud = json['isCloud'];
};
Blockly.Events.VarCreate.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    if (forward) {
        workspace.createVariable(this.varName, this.varType, this.varId, this.isLocal, this.isCloud);
    }
    else {
        workspace.deleteVariableById(this.varId);
    }
};
Blockly.Events.VarDelete = function (variable) {
    if (!variable) {
        return;
    }
    Blockly.Events.VarDelete.superClass_.constructor.call(this, variable);
    this.varType = variable.type;
    this.varName = variable.name;
    this.isLocal = variable.isLocal;
    this.isCloud = variable.isCloud;
};
goog.inherits(Blockly.Events.VarDelete, Blockly.Events.VarBase);
Blockly.Events.VarDelete.prototype.type = Blockly.Events.VAR_DELETE;
Blockly.Events.VarDelete.prototype.toJson = function () {
    var json = Blockly.Events.VarDelete.superClass_.toJson.call(this);
    json['varType'] = this.varType;
    json['varName'] = this.varName;
    json['isLocal'] = this.isLocal;
    json['isCloud'] = this.isCloud;
    return json;
};
Blockly.Events.VarDelete.prototype.fromJson = function (json) {
    Blockly.Events.VarDelete.superClass_.fromJson.call(this, json);
    this.varType = json['varType'];
    this.varName = json['varName'];
    this.isLocal = json['isLocal'];
    this.isCloud = json['isCloud'];
};
Blockly.Events.VarDelete.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    if (forward) {
        workspace.deleteVariableById(this.varId);
    }
    else {
        workspace.createVariable(this.varName, this.varType, this.varId, this.isLocal, this.isCloud);
    }
};
Blockly.Events.VarRename = function (variable, newName) {
    if (!variable) {
        return;
    }
    Blockly.Events.VarRename.superClass_.constructor.call(this, variable);
    this.oldName = variable.name;
    this.newName = newName;
};
goog.inherits(Blockly.Events.VarRename, Blockly.Events.VarBase);
Blockly.Events.VarRename.prototype.type = Blockly.Events.VAR_RENAME;
Blockly.Events.VarRename.prototype.toJson = function () {
    var json = Blockly.Events.VarRename.superClass_.toJson.call(this);
    json['oldName'] = this.oldName;
    json['newName'] = this.newName;
    return json;
};
Blockly.Events.VarRename.prototype.fromJson = function (json) {
    Blockly.Events.VarRename.superClass_.fromJson.call(this, json);
    this.oldName = json['oldName'];
    this.newName = json['newName'];
};
Blockly.Events.VarRename.prototype.run = function (forward) {
    var workspace = this.getEventWorkspace_();
    if (forward) {
        workspace.renameVariableById(this.varId, this.newName);
    }
    else {
        workspace.renameVariableById(this.varId, this.oldName);
    }
};
'use strict';
goog.provide('Blockly.Msg');
goog.getMsgOrig = goog.getMsg;
goog.getMsg = function (str, opt_values) {
    var key = goog.getMsg.blocklyMsgMap[str];
    if (key) {
        str = Blockly.Msg[key];
    }
    return goog.getMsgOrig(str, opt_values);
};
goog.getMsg.blocklyMsgMap = {
    'Today': 'TODAY'
};
'use strict';
goog.provide('Blockly.ScratchMsgs');
goog.require('Blockly.Msg');
Blockly.ScratchMsgs.locales = {};
Blockly.ScratchMsgs.currentLocale_ = 'en';
Blockly.ScratchMsgs.setLocale = function (locale) {
    if (Object.keys(Blockly.ScratchMsgs.locales).includes(locale)) {
        Blockly.ScratchMsgs.currentLocale_ = locale;
        Blockly.Msg = Object.assign({}, Blockly.Msg, Blockly.ScratchMsgs.locales[locale]);
    }
    else {
        console.warn('Ignoring unrecognized locale: ' + locale);
    }
};
Blockly.ScratchMsgs.translate = function (msgId, defaultMsg, useLocale) {
    var locale = useLocale || Blockly.ScratchMsgs.currentLocale_;
    if (Object.keys(Blockly.ScratchMsgs.locales).includes(locale)) {
        var messages = Blockly.ScratchMsgs.locales[locale];
        if (Object.keys(messages).includes(msgId)) {
            return messages[msgId];
        }
    }
    return defaultMsg;
};
'use strict';
goog.provide('Blockly.Scrollbar');
goog.provide('Blockly.ScrollbarPair');
goog.require('goog.dom');
goog.require('goog.events');
Blockly.ScrollbarPair = function (workspace) {
    this.workspace_ = workspace;
    this.hScroll = new Blockly.Scrollbar(workspace, true, true, 'blocklyMainWorkspaceScrollbar');
    this.vScroll = new Blockly.Scrollbar(workspace, false, true, 'blocklyMainWorkspaceScrollbar');
    this.corner_ = Blockly.utils.createSvgElement('rect', {
        'height': Blockly.Scrollbar.scrollbarThickness,
        'width': Blockly.Scrollbar.scrollbarThickness,
        'class': 'blocklyScrollbarBackground'
    }, null);
    Blockly.utils.insertAfter(this.corner_, workspace.getBubbleCanvas());
};
Blockly.ScrollbarPair.prototype.oldHostMetrics_ = null;
Blockly.ScrollbarPair.prototype.dispose = function () {
    goog.dom.removeNode(this.corner_);
    this.corner_ = null;
    this.workspace_ = null;
    this.oldHostMetrics_ = null;
    this.hScroll.dispose();
    this.hScroll = null;
    this.vScroll.dispose();
    this.vScroll = null;
};
Blockly.ScrollbarPair.prototype.resize = function () {
    var hostMetrics = this.workspace_.getMetrics();
    if (!hostMetrics) {
        return;
    }
    var resizeH = false;
    var resizeV = false;
    if (!this.oldHostMetrics_ ||
        this.oldHostMetrics_.viewWidth != hostMetrics.viewWidth ||
        this.oldHostMetrics_.viewHeight != hostMetrics.viewHeight ||
        this.oldHostMetrics_.absoluteTop != hostMetrics.absoluteTop ||
        this.oldHostMetrics_.absoluteLeft != hostMetrics.absoluteLeft) {
        resizeH = true;
        resizeV = true;
    }
    else {
        if (!this.oldHostMetrics_ ||
            this.oldHostMetrics_.contentWidth != hostMetrics.contentWidth ||
            this.oldHostMetrics_.viewLeft != hostMetrics.viewLeft ||
            this.oldHostMetrics_.contentLeft != hostMetrics.contentLeft) {
            resizeH = true;
        }
        if (!this.oldHostMetrics_ ||
            this.oldHostMetrics_.contentHeight != hostMetrics.contentHeight ||
            this.oldHostMetrics_.viewTop != hostMetrics.viewTop ||
            this.oldHostMetrics_.contentTop != hostMetrics.contentTop) {
            resizeV = true;
        }
    }
    if (resizeH) {
        this.hScroll.resize(hostMetrics);
    }
    if (resizeV) {
        this.vScroll.resize(hostMetrics);
    }
    if (!this.oldHostMetrics_ ||
        this.oldHostMetrics_.viewWidth != hostMetrics.viewWidth ||
        this.oldHostMetrics_.absoluteLeft != hostMetrics.absoluteLeft) {
        this.corner_.setAttribute('x', this.vScroll.position_.x);
    }
    if (!this.oldHostMetrics_ ||
        this.oldHostMetrics_.viewHeight != hostMetrics.viewHeight ||
        this.oldHostMetrics_.absoluteTop != hostMetrics.absoluteTop) {
        this.corner_.setAttribute('y', this.hScroll.position_.y);
    }
    this.oldHostMetrics_ = hostMetrics;
};
Blockly.ScrollbarPair.prototype.set = function (x, y) {
    var xyRatio = {};
    var hHandlePosition = x * this.hScroll.ratio_;
    var vHandlePosition = y * this.vScroll.ratio_;
    var hBarLength = this.hScroll.scrollViewSize_;
    var vBarLength = this.vScroll.scrollViewSize_;
    xyRatio.x = this.getRatio_(hHandlePosition, hBarLength);
    xyRatio.y = this.getRatio_(vHandlePosition, vBarLength);
    this.workspace_.setMetrics(xyRatio);
    this.hScroll.setHandlePosition(hHandlePosition);
    this.vScroll.setHandlePosition(vHandlePosition);
};
Blockly.ScrollbarPair.prototype.getRatio_ = function (handlePosition, viewSize) {
    var ratio = handlePosition / viewSize;
    if (isNaN(ratio)) {
        return 0;
    }
    return ratio;
};
Blockly.Scrollbar = function (workspace, horizontal, opt_pair, opt_class) {
    this.workspace_ = workspace;
    this.pair_ = opt_pair || false;
    this.horizontal_ = horizontal;
    this.oldHostMetrics_ = null;
    this.createDom_(opt_class);
    this.position_ = new goog.math.Coordinate(0, 0);
    var scrollbarThickness = Blockly.Scrollbar.scrollbarThickness;
    if (horizontal) {
        this.svgBackground_.setAttribute('height', scrollbarThickness);
        this.outerSvg_.setAttribute('height', scrollbarThickness);
        this.svgHandle_.setAttribute('height', scrollbarThickness - 5);
        this.svgHandle_.setAttribute('y', 2.5);
        this.lengthAttribute_ = 'width';
        this.positionAttribute_ = 'x';
    }
    else {
        this.svgBackground_.setAttribute('width', scrollbarThickness);
        this.outerSvg_.setAttribute('width', scrollbarThickness);
        this.svgHandle_.setAttribute('width', scrollbarThickness - 5);
        this.svgHandle_.setAttribute('x', 2.5);
        this.lengthAttribute_ = 'height';
        this.positionAttribute_ = 'y';
    }
    var scrollbar = this;
    this.onMouseDownBarWrapper_ = Blockly.bindEventWithChecks_(this.svgBackground_, 'mousedown', scrollbar, scrollbar.onMouseDownBar_);
    this.onMouseDownHandleWrapper_ = Blockly.bindEventWithChecks_(this.svgHandle_, 'mousedown', scrollbar, scrollbar.onMouseDownHandle_);
};
Blockly.Scrollbar.prototype.origin_ = new goog.math.Coordinate(0, 0);
Blockly.Scrollbar.prototype.originHasChanged_ = true;
Blockly.Scrollbar.prototype.scrollViewSize_ = 0;
Blockly.Scrollbar.prototype.handleLength_ = 0;
Blockly.Scrollbar.prototype.handlePosition_ = 0;
Blockly.Scrollbar.prototype.isVisible_ = true;
Blockly.Scrollbar.prototype.containerVisible_ = true;
Blockly.Scrollbar.scrollbarThickness = 11;
if (goog.events.BrowserFeature.TOUCH_ENABLED) {
    Blockly.Scrollbar.scrollbarThickness = 14;
}
Blockly.Scrollbar.metricsAreEquivalent_ = function (first, second) {
    if (!(first && second)) {
        return false;
    }
    if (first.viewWidth != second.viewWidth ||
        first.viewHeight != second.viewHeight ||
        first.viewLeft != second.viewLeft ||
        first.viewTop != second.viewTop ||
        first.absoluteTop != second.absoluteTop ||
        first.absoluteLeft != second.absoluteLeft ||
        first.contentWidth != second.contentWidth ||
        first.contentHeight != second.contentHeight ||
        first.contentLeft != second.contentLeft ||
        first.contentTop != second.contentTop) {
        return false;
    }
    return true;
};
Blockly.Scrollbar.prototype.dispose = function () {
    this.cleanUp_();
    Blockly.unbindEvent_(this.onMouseDownBarWrapper_);
    this.onMouseDownBarWrapper_ = null;
    Blockly.unbindEvent_(this.onMouseDownHandleWrapper_);
    this.onMouseDownHandleWrapper_ = null;
    goog.dom.removeNode(this.outerSvg_);
    this.outerSvg_ = null;
    this.svgGroup_ = null;
    this.svgBackground_ = null;
    this.svgHandle_ = null;
    this.workspace_ = null;
};
Blockly.Scrollbar.prototype.setHandleLength_ = function (newLength) {
    this.handleLength_ = newLength;
    this.svgHandle_.setAttribute(this.lengthAttribute_, this.handleLength_);
};
Blockly.Scrollbar.prototype.setHandlePosition = function (newPosition) {
    this.handlePosition_ = newPosition;
    this.svgHandle_.setAttribute(this.positionAttribute_, this.handlePosition_);
};
Blockly.Scrollbar.prototype.setScrollViewSize_ = function (newSize) {
    this.scrollViewSize_ = newSize;
    this.outerSvg_.setAttribute(this.lengthAttribute_, this.scrollViewSize_);
    this.svgBackground_.setAttribute(this.lengthAttribute_, this.scrollViewSize_);
};
Blockly.ScrollbarPair.prototype.setContainerVisible = function (visible) {
    this.hScroll.setContainerVisible(visible);
    this.vScroll.setContainerVisible(visible);
};
Blockly.Scrollbar.prototype.setPosition_ = function (x, y) {
    this.position_.x = x;
    this.position_.y = y;
    var tempX = this.position_.x + this.origin_.x;
    var tempY = this.position_.y + this.origin_.y;
    var transform = 'translate(' + tempX + 'px,' + tempY + 'px)';
    Blockly.utils.setCssTransform(this.outerSvg_, transform);
};
Blockly.Scrollbar.prototype.resize = function (opt_metrics) {
    var hostMetrics = opt_metrics;
    if (!hostMetrics) {
        hostMetrics = this.workspace_.getMetrics();
        if (!hostMetrics) {
            return;
        }
    }
    if (this.originHasChanged_) {
        this.originHasChanged_ = false;
    }
    else if (Blockly.Scrollbar.metricsAreEquivalent_(hostMetrics, this.oldHostMetrics_)) {
        return;
    }
    this.oldHostMetrics_ = hostMetrics;
    if (this.horizontal_) {
        this.resizeHorizontal_(hostMetrics);
    }
    else {
        this.resizeVertical_(hostMetrics);
    }
    this.onScroll_();
};
Blockly.Scrollbar.prototype.resizeHorizontal_ = function (hostMetrics) {
    this.resizeViewHorizontal(hostMetrics);
};
Blockly.Scrollbar.prototype.resizeViewHorizontal = function (hostMetrics) {
    var viewSize = hostMetrics.viewWidth - 1;
    if (this.pair_) {
        viewSize -= Blockly.Scrollbar.scrollbarThickness;
    }
    this.setScrollViewSize_(Math.max(0, viewSize));
    var xCoordinate = hostMetrics.absoluteLeft + 0.5;
    if (this.pair_ && this.workspace_.RTL) {
        xCoordinate += Blockly.Scrollbar.scrollbarThickness;
    }
    var yCoordinate = hostMetrics.absoluteTop + hostMetrics.viewHeight -
        Blockly.Scrollbar.scrollbarThickness - 0.5;
    this.setPosition_(xCoordinate, yCoordinate);
    this.resizeContentHorizontal(hostMetrics);
};
Blockly.Scrollbar.prototype.resizeContentHorizontal = function (hostMetrics) {
    if (!this.pair_) {
        this.setVisible(this.scrollViewSize_ < hostMetrics.contentWidth);
    }
    this.ratio_ = this.scrollViewSize_ / hostMetrics.contentWidth;
    if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||
        isNaN(this.ratio_)) {
        this.ratio_ = 0;
    }
    var handleLength = hostMetrics.viewWidth * this.ratio_;
    this.setHandleLength_(Math.max(0, handleLength));
    var handlePosition = (hostMetrics.viewLeft - hostMetrics.contentLeft) *
        this.ratio_;
    this.setHandlePosition(this.constrainHandle_(handlePosition));
};
Blockly.Scrollbar.prototype.resizeVertical_ = function (hostMetrics) {
    this.resizeViewVertical(hostMetrics);
};
Blockly.Scrollbar.prototype.resizeViewVertical = function (hostMetrics) {
    var viewSize = hostMetrics.viewHeight - 1;
    if (this.pair_) {
        viewSize -= Blockly.Scrollbar.scrollbarThickness;
    }
    this.setScrollViewSize_(Math.max(0, viewSize));
    var xCoordinate = hostMetrics.absoluteLeft + 0.5;
    if (!this.workspace_.RTL) {
        xCoordinate += hostMetrics.viewWidth -
            Blockly.Scrollbar.scrollbarThickness - 1;
    }
    var yCoordinate = hostMetrics.absoluteTop + 0.5;
    this.setPosition_(xCoordinate, yCoordinate);
    this.resizeContentVertical(hostMetrics);
};
Blockly.Scrollbar.prototype.resizeContentVertical = function (hostMetrics) {
    if (!this.pair_) {
        this.setVisible(this.scrollViewSize_ < hostMetrics.contentHeight);
    }
    this.ratio_ = this.scrollViewSize_ / hostMetrics.contentHeight;
    if (this.ratio_ == -Infinity || this.ratio_ == Infinity ||
        isNaN(this.ratio_)) {
        this.ratio_ = 0;
    }
    var handleLength = hostMetrics.viewHeight * this.ratio_;
    this.setHandleLength_(Math.max(0, handleLength));
    var handlePosition = (hostMetrics.viewTop - hostMetrics.contentTop) *
        this.ratio_;
    this.setHandlePosition(this.constrainHandle_(handlePosition));
};
Blockly.Scrollbar.prototype.createDom_ = function (opt_class) {
    var className = 'blocklyScrollbar' +
        (this.horizontal_ ? 'Horizontal' : 'Vertical');
    if (opt_class) {
        className += ' ' + opt_class;
    }
    this.outerSvg_ = Blockly.utils.createSvgElement('svg', { 'class': className }, null);
    this.svgGroup_ = Blockly.utils.createSvgElement('g', {}, this.outerSvg_);
    this.svgBackground_ = Blockly.utils.createSvgElement('rect', { 'class': 'blocklyScrollbarBackground' }, this.svgGroup_);
    var radius = Math.floor((Blockly.Scrollbar.scrollbarThickness - 5) / 2);
    this.svgHandle_ = Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyScrollbarHandle',
        'rx': radius,
        'ry': radius
    }, this.svgGroup_);
    Blockly.utils.insertAfter(this.outerSvg_, this.workspace_.getParentSvg());
};
Blockly.Scrollbar.prototype.isVisible = function () {
    return this.isVisible_;
};
Blockly.Scrollbar.prototype.setContainerVisible = function (visible) {
    var visibilityChanged = (visible != this.containerVisible_);
    this.containerVisible_ = visible;
    if (visibilityChanged) {
        this.updateDisplay_();
    }
};
Blockly.Scrollbar.prototype.setVisible = function (visible) {
    var visibilityChanged = (visible != this.isVisible());
    if (this.pair_) {
        throw 'Unable to toggle visibility of paired scrollbars.';
    }
    this.isVisible_ = visible;
    if (visibilityChanged) {
        this.updateDisplay_();
    }
};
Blockly.Scrollbar.prototype.updateDisplay_ = function () {
    var show = true;
    if (!this.containerVisible_) {
        show = false;
    }
    else {
        show = this.isVisible();
    }
    if (show) {
        this.outerSvg_.setAttribute('display', 'block');
    }
    else {
        this.outerSvg_.setAttribute('display', 'none');
    }
};
Blockly.Scrollbar.prototype.onMouseDownBar_ = function (e) {
    this.workspace_.markFocused();
    Blockly.Touch.clearTouchIdentifier();
    this.cleanUp_();
    if (Blockly.utils.isRightButton(e)) {
        e.stopPropagation();
        return;
    }
    var mouseXY = Blockly.utils.mouseToSvg(e, this.workspace_.getParentSvg(), this.workspace_.getInverseScreenCTM());
    var mouseLocation = this.horizontal_ ? mouseXY.x : mouseXY.y;
    var handleXY = Blockly.utils.getInjectionDivXY_(this.svgHandle_);
    var handleStart = this.horizontal_ ? handleXY.x : handleXY.y;
    var handlePosition = this.handlePosition_;
    var pageLength = this.handleLength_ * 0.95;
    if (mouseLocation <= handleStart) {
        handlePosition -= pageLength;
    }
    else if (mouseLocation >= handleStart + this.handleLength_) {
        handlePosition += pageLength;
    }
    Blockly.WidgetDiv.hide(true);
    Blockly.DropDownDiv.hideWithoutAnimation();
    this.setHandlePosition(this.constrainHandle_(handlePosition));
    this.onScroll_();
    e.stopPropagation();
    e.preventDefault();
};
Blockly.Scrollbar.prototype.onMouseDownHandle_ = function (e) {
    this.workspace_.markFocused();
    this.cleanUp_();
    if (Blockly.utils.isRightButton(e)) {
        e.stopPropagation();
        return;
    }
    this.startDragHandle = this.handlePosition_;
    this.workspace_.setupDragSurface();
    this.startDragMouse_ = this.horizontal_ ? e.clientX : e.clientY;
    Blockly.Scrollbar.onMouseUpWrapper_ = Blockly.bindEventWithChecks_(document, 'mouseup', this, this.onMouseUpHandle_);
    Blockly.Scrollbar.onMouseMoveWrapper_ = Blockly.bindEventWithChecks_(document, 'mousemove', this, this.onMouseMoveHandle_);
    Blockly.WidgetDiv.hide(true);
    Blockly.DropDownDiv.hideWithoutAnimation();
    e.stopPropagation();
    e.preventDefault();
};
Blockly.Scrollbar.prototype.onMouseMoveHandle_ = function (e) {
    var currentMouse = this.horizontal_ ? e.clientX : e.clientY;
    var mouseDelta = currentMouse - this.startDragMouse_;
    var handlePosition = this.startDragHandle + mouseDelta;
    this.setHandlePosition(this.constrainHandle_(handlePosition));
    this.onScroll_();
};
Blockly.Scrollbar.prototype.onMouseUpHandle_ = function () {
    this.workspace_.resetDragSurface();
    Blockly.Touch.clearTouchIdentifier();
    this.cleanUp_();
};
Blockly.Scrollbar.prototype.cleanUp_ = function () {
    Blockly.hideChaff(true);
    if (Blockly.Scrollbar.onMouseUpWrapper_) {
        Blockly.unbindEvent_(Blockly.Scrollbar.onMouseUpWrapper_);
        Blockly.Scrollbar.onMouseUpWrapper_ = null;
    }
    if (Blockly.Scrollbar.onMouseMoveWrapper_) {
        Blockly.unbindEvent_(Blockly.Scrollbar.onMouseMoveWrapper_);
        Blockly.Scrollbar.onMouseMoveWrapper_ = null;
    }
};
Blockly.Scrollbar.prototype.constrainHandle_ = function (value) {
    if (value <= 0 || isNaN(value) || this.scrollViewSize_ < this.handleLength_) {
        value = 0;
    }
    else {
        value = Math.min(value, this.scrollViewSize_ - this.handleLength_);
    }
    return value;
};
Blockly.Scrollbar.prototype.onScroll_ = function () {
    var ratio = this.handlePosition_ / this.scrollViewSize_;
    if (isNaN(ratio)) {
        ratio = 0;
    }
    var xyRatio = {};
    if (this.horizontal_) {
        xyRatio.x = ratio;
    }
    else {
        xyRatio.y = ratio;
    }
    this.workspace_.setMetrics(xyRatio);
};
Blockly.Scrollbar.prototype.set = function (value) {
    this.setHandlePosition(this.constrainHandle_(value * this.ratio_));
    this.onScroll_();
};
Blockly.Scrollbar.prototype.setOrigin = function (x, y) {
    if (x != this.origin_.x || y != this.origin_.y) {
        this.origin_ = new goog.math.Coordinate(x, y);
        this.originHasChanged_ = true;
    }
};
'use strict';
goog.provide('Blockly.Toolbox');
goog.require('Blockly.Events.Ui');
goog.require('Blockly.HorizontalFlyout');
goog.require('Blockly.Touch');
goog.require('Blockly.VerticalFlyout');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.events');
goog.require('goog.events.BrowserFeature');
goog.require('goog.html.SafeHtml');
goog.require('goog.html.SafeStyle');
goog.require('goog.math.Rect');
goog.require('goog.style');
goog.require('goog.ui.tree.TreeControl');
goog.require('goog.ui.tree.TreeNode');
Blockly.Toolbox = function (workspace) {
    this.workspace_ = workspace;
    this.iconic_ = false;
    this.RTL = workspace.options.RTL;
    this.horizontalLayout_ = workspace.options.horizontalLayout;
    this.toolboxPosition = workspace.options.toolboxPosition;
};
Blockly.Toolbox.prototype.width = 310;
Blockly.Toolbox.prototype.height = 0;
Blockly.Toolbox.prototype.selectedItem_ = null;
Blockly.Toolbox.prototype.init = function () {
    var workspace = this.workspace_;
    var svg = this.workspace_.getParentSvg();
    this.HtmlDiv =
        goog.dom.createDom(goog.dom.TagName.DIV, 'blocklyToolboxDiv');
    this.HtmlDiv.setAttribute('dir', workspace.RTL ? 'RTL' : 'LTR');
    svg.parentNode.insertBefore(this.HtmlDiv, svg);
    Blockly.bindEventWithChecks_(this.HtmlDiv, 'mousedown', this, function (e) {
        this.workspace_.cancelCurrentGesture();
        if (Blockly.utils.isRightButton(e) || e.target == this.HtmlDiv) {
            Blockly.hideChaff(false);
        }
        else {
            Blockly.hideChaff(true);
        }
        Blockly.Touch.clearTouchIdentifier();
    }, false, true);
    this.createFlyout_();
    this.categoryMenu_ = new Blockly.Toolbox.CategoryMenu(this, this.HtmlDiv);
    this.populate_(workspace.options.languageTree);
    this.position();
};
Blockly.Toolbox.prototype.dispose = function () {
    this.flyout_.dispose();
    this.categoryMenu_.dispose();
    this.categoryMenu_ = null;
    goog.dom.removeNode(this.HtmlDiv);
    this.workspace_ = null;
    this.lastCategory_ = null;
};
Blockly.Toolbox.prototype.createFlyout_ = function () {
    var workspace = this.workspace_;
    var options = {
        disabledPatternId: workspace.options.disabledPatternId,
        parentWorkspace: workspace,
        RTL: workspace.RTL,
        oneBasedIndex: workspace.options.oneBasedIndex,
        horizontalLayout: workspace.horizontalLayout,
        toolboxPosition: workspace.options.toolboxPosition,
        stackGlowFilterId: workspace.options.stackGlowFilterId
    };
    if (workspace.horizontalLayout) {
        this.flyout_ = new Blockly.HorizontalFlyout(options);
    }
    else {
        this.flyout_ = new Blockly.VerticalFlyout(options);
    }
    this.flyout_.setParentToolbox(this);
    goog.dom.insertSiblingAfter(this.flyout_.createDom('svg'), this.workspace_.getParentSvg());
    this.flyout_.init(workspace);
};
Blockly.Toolbox.prototype.populate_ = function (newTree) {
    this.categoryMenu_.populate(newTree);
    this.showAll_();
    this.setSelectedItem(this.categoryMenu_.categories_[0], false);
};
Blockly.Toolbox.prototype.showAll_ = function () {
    var allContents = [];
    for (var i = 0; i < this.categoryMenu_.categories_.length; i++) {
        var category = this.categoryMenu_.categories_[i];
        var labelString = '<xml><label text="' + category.name_ + '"' +
            ' id="' + category.id_ + '"' +
            ' category-label="true"' +
            ' showStatusButton="' + category.showStatusButton_ + '"' +
            ' web-class="categoryLabel">' +
            '</label></xml>';
        var labelXML = Blockly.Xml.textToDom(labelString);
        allContents.push(labelXML.firstChild);
        allContents = allContents.concat(category.getContents());
    }
    this.flyout_.show(allContents);
};
Blockly.Toolbox.prototype.getWidth = function () {
    return this.width;
};
Blockly.Toolbox.prototype.getHeight = function () {
    return this.categoryMenu_ ? this.categoryMenu_.getHeight() : 0;
};
Blockly.Toolbox.prototype.position = function () {
    var treeDiv = this.HtmlDiv;
    if (!treeDiv) {
        return;
    }
    var svg = this.workspace_.getParentSvg();
    var svgSize = Blockly.svgSize(svg);
    if (this.horizontalLayout_) {
        treeDiv.style.left = '0';
        treeDiv.style.height = 'auto';
        treeDiv.style.width = svgSize.width + 'px';
        this.height = treeDiv.offsetHeight;
        if (this.toolboxPosition == Blockly.TOOLBOX_AT_TOP) {
            treeDiv.style.top = '0';
        }
        else {
            treeDiv.style.bottom = '0';
        }
    }
    else {
        if (this.toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {
            treeDiv.style.right = '0';
        }
        else {
            treeDiv.style.left = '0';
        }
        treeDiv.style.height = '100%';
    }
    this.flyout_.position();
};
Blockly.Toolbox.prototype.clearSelection = function () {
    this.setSelectedItem(null);
};
Blockly.Toolbox.prototype.addStyle = function (style) {
    Blockly.utils.addClass((this.HtmlDiv), style);
};
Blockly.Toolbox.prototype.removeStyle = function (style) {
    Blockly.utils.removeClass((this.HtmlDiv), style);
};
Blockly.Toolbox.prototype.getClientRect = function () {
    if (!this.HtmlDiv) {
        return null;
    }
    if (!this.flyout_.autoClose) {
        return this.flyout_.getClientRect();
    }
    var BIG_NUM = 10000000;
    var toolboxRect = this.HtmlDiv.getBoundingClientRect();
    var x = toolboxRect.left;
    var y = toolboxRect.top;
    var width = toolboxRect.width;
    var height = toolboxRect.height;
    if (this.toolboxPosition == Blockly.TOOLBOX_AT_LEFT) {
        return new goog.math.Rect(-BIG_NUM, -BIG_NUM, BIG_NUM + x + width, 2 * BIG_NUM);
    }
    else if (this.toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {
        return new goog.math.Rect(toolboxRect.right - width, -BIG_NUM, BIG_NUM + width, 2 * BIG_NUM);
    }
    else if (this.toolboxPosition == Blockly.TOOLBOX_AT_TOP) {
        return new goog.math.Rect(-BIG_NUM, -BIG_NUM, 2 * BIG_NUM, BIG_NUM + y + height);
    }
    else {
        return new goog.math.Rect(0, y, 2 * BIG_NUM, BIG_NUM);
    }
};
Blockly.Toolbox.prototype.refreshSelection = function () {
    this.showAll_();
};
Blockly.Toolbox.prototype.getSelectedItem = function () {
    return this.selectedItem_;
};
Blockly.Toolbox.prototype.getSelectedCategoryName = function () {
    return this.selectedItem_.name_;
};
Blockly.Toolbox.prototype.getSelectedCategoryId = function () {
    return this.selectedItem_.id_;
};
Blockly.Toolbox.prototype.getCategoryScrollOffset = function () {
    var categoryPos = this.getCategoryPositionById(this.getSelectedCategoryId());
    return this.flyout_.getScrollPos() - categoryPos;
};
Blockly.Toolbox.prototype.getCategoryPositionByName = function (name) {
    var scrollPositions = this.flyout_.categoryScrollPositions;
    for (var i = 0; i < scrollPositions.length; i++) {
        if (name === scrollPositions[i].categoryName) {
            return scrollPositions[i].position;
        }
    }
};
Blockly.Toolbox.prototype.getCategoryPositionById = function (id) {
    var scrollPositions = this.flyout_.categoryScrollPositions;
    for (var i = 0; i < scrollPositions.length; i++) {
        if (id === scrollPositions[i].categoryId) {
            return scrollPositions[i].position;
        }
    }
};
Blockly.Toolbox.prototype.getCategoryLengthByName = function (name) {
    var scrollPositions = this.flyout_.categoryScrollPositions;
    for (var i = 0; i < scrollPositions.length; i++) {
        if (name === scrollPositions[i].categoryName) {
            return scrollPositions[i].length;
        }
    }
};
Blockly.Toolbox.prototype.getCategoryLengthById = function (id) {
    var scrollPositions = this.flyout_.categoryScrollPositions;
    for (var i = 0; i < scrollPositions.length; i++) {
        if (id === scrollPositions[i].categoryId) {
            return scrollPositions[i].length;
        }
    }
};
Blockly.Toolbox.prototype.setFlyoutScrollPos = function (pos) {
    this.flyout_.setScrollPos(pos);
};
Blockly.Toolbox.prototype.setSelectedItem = function (item, opt_shouldScroll) {
    if (typeof opt_shouldScroll === 'undefined') {
        opt_shouldScroll = true;
    }
    if (this.selectedItem_) {
        this.selectedItem_.setSelected(false);
    }
    this.selectedItem_ = item;
    if (this.selectedItem_ != null) {
        this.selectedItem_.setSelected(true);
        var categoryId = item.id_;
        if (opt_shouldScroll) {
            this.scrollToCategoryById(categoryId);
        }
    }
};
Blockly.Toolbox.prototype.setSelectedCategoryByName = function (name) {
    this.selectCategoryByName(name);
    this.scrollToCategoryByName(name);
};
Blockly.Toolbox.prototype.setSelectedCategoryById = function (id) {
    this.selectCategoryById(id);
    this.scrollToCategoryById(id);
};
Blockly.Toolbox.prototype.scrollToCategoryByName = function (name) {
    var scrollPositions = this.flyout_.categoryScrollPositions;
    for (var i = 0; i < scrollPositions.length; i++) {
        if (name === scrollPositions[i].categoryName) {
            this.flyout_.setVisible(true);
            this.flyout_.scrollTo(scrollPositions[i].position);
            return;
        }
    }
};
Blockly.Toolbox.prototype.scrollToCategoryById = function (id) {
    var scrollPositions = this.flyout_.categoryScrollPositions;
    for (var i = 0; i < scrollPositions.length; i++) {
        if (id === scrollPositions[i].categoryId) {
            this.flyout_.setVisible(true);
            this.flyout_.scrollTo(scrollPositions[i].position);
            return;
        }
    }
};
Blockly.Toolbox.prototype.getCategoryByIndex = function (index) {
    if (!this.categoryMenu_.categories_)
        return null;
    return this.categoryMenu_.categories_[index];
};
Blockly.Toolbox.prototype.selectCategoryByName = function (name) {
    for (var i = 0; i < this.categoryMenu_.categories_.length; i++) {
        var category = this.categoryMenu_.categories_[i];
        if (name === category.name_) {
            this.selectedItem_.setSelected(false);
            this.selectedItem_ = category;
            this.selectedItem_.setSelected(true);
        }
    }
};
Blockly.Toolbox.prototype.selectCategoryById = function (id) {
    for (var i = 0; i < this.categoryMenu_.categories_.length; i++) {
        var category = this.categoryMenu_.categories_[i];
        if (id === category.id_) {
            this.selectedItem_.setSelected(false);
            this.selectedItem_ = category;
            this.selectedItem_.setSelected(true);
        }
    }
};
Blockly.Toolbox.prototype.setSelectedItemFactory = function (item) {
    var selectedItem = item;
    return function () {
        if (!this.workspace_.isDragging()) {
            this.setSelectedItem(selectedItem);
            Blockly.Touch.clearTouchIdentifier();
        }
    };
};
Blockly.Toolbox.CategoryMenu = function (parent, parentHtml) {
    this.parent_ = parent;
    this.height_ = 0;
    this.parentHtml_ = parentHtml;
    this.createDom();
    this.categories_ = [];
};
Blockly.Toolbox.CategoryMenu.prototype.getHeight = function () {
    return this.height_;
};
Blockly.Toolbox.CategoryMenu.prototype.createDom = function () {
    this.table = goog.dom.createDom('div', this.parent_.horizontalLayout_ ?
        'scratchCategoryMenuHorizontal' : 'scratchCategoryMenu');
    this.parentHtml_.appendChild(this.table);
};
Blockly.Toolbox.CategoryMenu.prototype.populate = function (domTree) {
    if (!domTree) {
        return;
    }
    this.dispose();
    this.createDom();
    var categories = [];
    for (var i = 0, child; child = domTree.childNodes[i]; i++) {
        if (!child.tagName || child.tagName.toUpperCase() != 'CATEGORY') {
            continue;
        }
        categories.push(child);
    }
    for (var i = 0; i < categories.length; i++) {
        var child = categories[i];
        var row = goog.dom.createDom('div', 'scratchCategoryMenuRow');
        this.table.appendChild(row);
        if (child) {
            this.categories_.push(new Blockly.Toolbox.Category(this, row, child));
        }
    }
    this.height_ = this.table.offsetHeight;
};
Blockly.Toolbox.CategoryMenu.prototype.dispose = function () {
    for (var i = 0, category; category = this.categories_[i]; i++) {
        category.dispose();
    }
    this.categories_ = [];
    if (this.table) {
        goog.dom.removeNode(this.table);
        this.table = null;
    }
};
Blockly.Toolbox.Category = function (parent, parentHtml, domTree) {
    this.parent_ = parent;
    this.parentHtml_ = parentHtml;
    this.name_ = domTree.getAttribute('name');
    this.id_ = domTree.getAttribute('id');
    this.setColour(domTree);
    this.custom_ = domTree.getAttribute('custom');
    this.iconURI_ = domTree.getAttribute('iconURI');
    this.showStatusButton_ = domTree.getAttribute('showStatusButton');
    this.contents_ = [];
    if (!this.custom_) {
        this.parseContents_(domTree);
    }
    this.createDom();
};
Blockly.Toolbox.Category.prototype.dispose = function () {
    if (this.item_) {
        goog.dom.removeNode(this.item_);
        this.item = null;
    }
    this.parent_ = null;
    this.parentHtml_ = null;
    this.contents_ = null;
};
Blockly.Toolbox.Category.prototype.getMenuItemClassName_ = function (selected) {
    var classNames = [
        'scratchCategoryMenuItem',
        'scratchCategoryId-' + this.id_,
    ];
    if (selected) {
        classNames.push('categorySelected');
    }
    return classNames.join(' ');
};
Blockly.Toolbox.Category.prototype.createDom = function () {
    var toolbox = this.parent_.parent_;
    this.item_ = goog.dom.createDom('div', { 'class': this.getMenuItemClassName_() });
    this.label_ = goog.dom.createDom('div', { 'class': 'scratchCategoryMenuItemLabel' }, Blockly.utils.replaceMessageReferences(this.name_));
    if (this.iconURI_) {
        this.bubble_ = goog.dom.createDom('div', { 'class': 'scratchCategoryItemIcon' });
        this.bubble_.style.backgroundImage = 'url(' + this.iconURI_ + ')';
    }
    else {
        this.bubble_ = goog.dom.createDom('div', { 'class': 'scratchCategoryItemBubble' });
        this.bubble_.style.backgroundColor = this.colour_;
        this.bubble_.style.borderColor = this.secondaryColour_;
    }
    this.item_.appendChild(this.bubble_);
    this.item_.appendChild(this.label_);
    this.parentHtml_.appendChild(this.item_);
    Blockly.bindEvent_(this.item_, 'mouseup', toolbox, toolbox.setSelectedItemFactory(this));
};
Blockly.Toolbox.Category.prototype.setSelected = function (selected) {
    this.item_.className = this.getMenuItemClassName_(selected);
};
Blockly.Toolbox.Category.prototype.parseContents_ = function (domTree) {
    for (var i = 0, child; child = domTree.childNodes[i]; i++) {
        if (!child.tagName) {
            continue;
        }
        switch (child.tagName.toUpperCase()) {
            case 'BLOCK':
            case 'SHADOW':
            case 'LABEL':
            case 'BUTTON':
            case 'SEP':
            case 'TEXT':
                this.contents_.push(child);
                break;
            default:
                break;
        }
    }
};
Blockly.Toolbox.Category.prototype.getContents = function () {
    return this.custom_ ? this.custom_ : this.contents_;
};
Blockly.Toolbox.Category.prototype.setColour = function (node) {
    var colour = node.getAttribute('colour');
    var secondaryColour = node.getAttribute('secondaryColour');
    if (goog.isString(colour)) {
        if (colour.match(/^#[0-9a-fA-F]{6}$/)) {
            this.colour_ = colour;
        }
        else {
            this.colour_ = Blockly.hueToRgb(colour);
        }
        if (secondaryColour.match(/^#[0-9a-fA-F]{6}$/)) {
            this.secondaryColour_ = secondaryColour;
        }
        else {
            this.secondaryColour_ = Blockly.hueToRgb(secondaryColour);
        }
        this.hasColours_ = true;
    }
    else {
        this.colour_ = '#000000';
        this.secondaryColour_ = '#000000';
    }
};
'use strict';
goog.provide('Blockly.Tooltip');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
Blockly.Tooltip.visible = false;
Blockly.Tooltip.blocked_ = false;
Blockly.Tooltip.LIMIT = 50;
Blockly.Tooltip.mouseOutPid_ = 0;
Blockly.Tooltip.showPid_ = 0;
Blockly.Tooltip.lastX_ = 0;
Blockly.Tooltip.lastY_ = 0;
Blockly.Tooltip.element_ = null;
Blockly.Tooltip.poisonedElement_ = null;
Blockly.Tooltip.OFFSET_X = 0;
Blockly.Tooltip.OFFSET_Y = 10;
Blockly.Tooltip.RADIUS_OK = 10;
Blockly.Tooltip.HOVER_MS = 750;
Blockly.Tooltip.MARGINS = 5;
Blockly.Tooltip.DIV = null;
Blockly.Tooltip.createDom = function () {
    if (Blockly.Tooltip.DIV) {
        return;
    }
    Blockly.Tooltip.DIV =
        goog.dom.createDom(goog.dom.TagName.DIV, 'blocklyTooltipDiv');
    document.body.appendChild(Blockly.Tooltip.DIV);
};
Blockly.Tooltip.bindMouseEvents = function (element) {
    Blockly.bindEvent_(element, 'mouseover', null, Blockly.Tooltip.onMouseOver_);
    Blockly.bindEvent_(element, 'mouseout', null, Blockly.Tooltip.onMouseOut_);
    element.addEventListener('mousemove', Blockly.Tooltip.onMouseMove_, false);
};
Blockly.Tooltip.onMouseOver_ = function (e) {
    if (Blockly.Tooltip.blocked_) {
        return;
    }
    var element = e.target;
    while (!goog.isString(element.tooltip) && !goog.isFunction(element.tooltip)) {
        element = element.tooltip;
    }
    if (Blockly.Tooltip.element_ != element) {
        Blockly.Tooltip.hide();
        Blockly.Tooltip.poisonedElement_ = null;
        Blockly.Tooltip.element_ = element;
    }
    clearTimeout(Blockly.Tooltip.mouseOutPid_);
};
Blockly.Tooltip.onMouseOut_ = function (_e) {
    if (Blockly.Tooltip.blocked_) {
        return;
    }
    Blockly.Tooltip.mouseOutPid_ = setTimeout(function () {
        Blockly.Tooltip.element_ = null;
        Blockly.Tooltip.poisonedElement_ = null;
        Blockly.Tooltip.hide();
    }, 1);
    clearTimeout(Blockly.Tooltip.showPid_);
};
Blockly.Tooltip.onMouseMove_ = function (e) {
    if (!Blockly.Tooltip.element_ || !Blockly.Tooltip.element_.tooltip) {
        return;
    }
    else if (Blockly.WidgetDiv.isVisible()) {
        return;
    }
    else if (Blockly.Tooltip.blocked_) {
        return;
    }
    if (Blockly.Tooltip.visible) {
        var dx = Blockly.Tooltip.lastX_ - e.pageX;
        var dy = Blockly.Tooltip.lastY_ - e.pageY;
        if (Math.sqrt(dx * dx + dy * dy) > Blockly.Tooltip.RADIUS_OK) {
            Blockly.Tooltip.hide();
        }
    }
    else if (Blockly.Tooltip.poisonedElement_ != Blockly.Tooltip.element_) {
        clearTimeout(Blockly.Tooltip.showPid_);
        Blockly.Tooltip.lastX_ = e.pageX;
        Blockly.Tooltip.lastY_ = e.pageY;
        Blockly.Tooltip.showPid_ =
            setTimeout(Blockly.Tooltip.show_, Blockly.Tooltip.HOVER_MS);
    }
};
Blockly.Tooltip.hide = function () {
    if (Blockly.Tooltip.visible) {
        Blockly.Tooltip.visible = false;
        if (Blockly.Tooltip.DIV) {
            Blockly.Tooltip.DIV.style.display = 'none';
        }
    }
    if (Blockly.Tooltip.showPid_) {
        clearTimeout(Blockly.Tooltip.showPid_);
    }
};
Blockly.Tooltip.block = function () {
    Blockly.Tooltip.hide();
    Blockly.Tooltip.blocked_ = true;
};
Blockly.Tooltip.unblock = function () {
    Blockly.Tooltip.blocked_ = false;
};
Blockly.Tooltip.show_ = function () {
    if (Blockly.Tooltip.blocked_) {
        return;
    }
    Blockly.Tooltip.poisonedElement_ = Blockly.Tooltip.element_;
    if (!Blockly.Tooltip.DIV) {
        return;
    }
    goog.dom.removeChildren((Blockly.Tooltip.DIV));
    var tip = Blockly.Tooltip.element_.tooltip;
    while (goog.isFunction(tip)) {
        tip = tip();
    }
    tip = Blockly.utils.wrap(tip, Blockly.Tooltip.LIMIT);
    var lines = tip.split('\n');
    for (var i = 0; i < lines.length; i++) {
        var div = document.createElement('div');
        div.appendChild(document.createTextNode(lines[i]));
        Blockly.Tooltip.DIV.appendChild(div);
    }
    var rtl = Blockly.Tooltip.element_.RTL;
    var windowSize = goog.dom.getViewportSize();
    Blockly.Tooltip.DIV.style.direction = rtl ? 'rtl' : 'ltr';
    Blockly.Tooltip.DIV.style.display = 'block';
    Blockly.Tooltip.visible = true;
    var anchorX = Blockly.Tooltip.lastX_;
    if (rtl) {
        anchorX -= Blockly.Tooltip.OFFSET_X + Blockly.Tooltip.DIV.offsetWidth;
    }
    else {
        anchorX += Blockly.Tooltip.OFFSET_X;
    }
    var anchorY = Blockly.Tooltip.lastY_ + Blockly.Tooltip.OFFSET_Y;
    if (anchorY + Blockly.Tooltip.DIV.offsetHeight >
        windowSize.height + window.scrollY) {
        anchorY -= Blockly.Tooltip.DIV.offsetHeight + 2 * Blockly.Tooltip.OFFSET_Y;
    }
    if (rtl) {
        anchorX = Math.max(Blockly.Tooltip.MARGINS - window.scrollX, anchorX);
    }
    else {
        if (anchorX + Blockly.Tooltip.DIV.offsetWidth >
            windowSize.width + window.scrollX - 2 * Blockly.Tooltip.MARGINS) {
            anchorX = windowSize.width - Blockly.Tooltip.DIV.offsetWidth -
                2 * Blockly.Tooltip.MARGINS;
        }
    }
    Blockly.Tooltip.DIV.style.top = anchorY + 'px';
    Blockly.Tooltip.DIV.style.left = anchorX + 'px';
};
'use strict';
goog.provide('Blockly.Touch');
goog.require('goog.events');
goog.require('goog.events.BrowserFeature');
goog.require('goog.string');
Blockly.Touch.touchIdentifier_ = null;
Blockly.Touch.TOUCH_MAP = {};
if (goog.events.BrowserFeature.TOUCH_ENABLED) {
    Blockly.Touch.TOUCH_MAP = {
        'mousedown': ['touchstart'],
        'mousemove': ['touchmove'],
        'mouseup': ['touchend', 'touchcancel']
    };
}
Blockly.longPid_ = 0;
Blockly.longStart_ = function (e, gesture) {
    Blockly.longStop_();
    if (e.changedTouches.length != 1) {
        return;
    }
    Blockly.longPid_ = setTimeout(function () {
        e.button = 2;
        e.clientX = e.changedTouches[0].clientX;
        e.clientY = e.changedTouches[0].clientY;
        if (gesture) {
            gesture.handleRightClick(e);
        }
    }, Blockly.LONGPRESS);
};
Blockly.longStop_ = function () {
    if (Blockly.longPid_) {
        clearTimeout(Blockly.longPid_);
        Blockly.longPid_ = 0;
    }
};
Blockly.Touch.clearTouchIdentifier = function () {
    Blockly.Touch.touchIdentifier_ = null;
};
Blockly.Touch.shouldHandleEvent = function (e) {
    return !Blockly.Touch.isMouseOrTouchEvent(e) ||
        Blockly.Touch.checkTouchIdentifier(e);
};
Blockly.Touch.getTouchIdentifierFromEvent = function (e) {
    return (e.changedTouches && e.changedTouches[0] &&
        e.changedTouches[0].identifier != undefined &&
        e.changedTouches[0].identifier != null) ?
        e.changedTouches[0].identifier : 'mouse';
};
Blockly.Touch.checkTouchIdentifier = function (e) {
    var identifier = Blockly.Touch.getTouchIdentifierFromEvent(e);
    if (Blockly.Touch.touchIdentifier_ != undefined &&
        Blockly.Touch.touchIdentifier_ != null) {
        return Blockly.Touch.touchIdentifier_ == identifier;
    }
    if (e.type == 'mousedown' || e.type == 'touchstart') {
        Blockly.Touch.touchIdentifier_ = identifier;
        return true;
    }
    return false;
};
Blockly.Touch.setClientFromTouch = function (e) {
    if (Blockly.utils.startsWith(e.type, 'touch')) {
        var touchPoint = e.changedTouches[0];
        e.clientX = touchPoint.clientX;
        e.clientY = touchPoint.clientY;
    }
};
Blockly.Touch.isMouseOrTouchEvent = function (e) {
    return Blockly.utils.startsWith(e.type, 'touch') ||
        Blockly.utils.startsWith(e.type, 'mouse');
};
Blockly.Touch.splitEventByTouches = function (e) {
    var events = [];
    if (e.changedTouches) {
        for (var i = 0; i < e.changedTouches.length; i++) {
            var newEvent = {
                type: e.type,
                changedTouches: [e.changedTouches[i]],
                target: e.target,
                stopPropagation: function () { e.stopPropagation(); },
                preventDefault: function () { e.preventDefault(); }
            };
            events[i] = newEvent;
        }
    }
    else {
        events.push(e);
    }
    return events;
};
'use strict';
goog.provide('Blockly.Trashcan');
goog.require('goog.dom');
goog.require('goog.math.Rect');
Blockly.Trashcan = function (workspace) {
    this.workspace_ = workspace;
};
Blockly.Trashcan.prototype.WIDTH_ = 47;
Blockly.Trashcan.prototype.BODY_HEIGHT_ = 44;
Blockly.Trashcan.prototype.LID_HEIGHT_ = 16;
Blockly.Trashcan.prototype.MARGIN_BOTTOM_ = 20;
Blockly.Trashcan.prototype.MARGIN_SIDE_ = 20;
Blockly.Trashcan.prototype.MARGIN_HOTSPOT_ = 10;
Blockly.Trashcan.prototype.SPRITE_LEFT_ = 0;
Blockly.Trashcan.prototype.SPRITE_TOP_ = 32;
Blockly.Trashcan.prototype.isOpen = false;
Blockly.Trashcan.prototype.svgGroup_ = null;
Blockly.Trashcan.prototype.svgLid_ = null;
Blockly.Trashcan.prototype.lidTask_ = 0;
Blockly.Trashcan.prototype.lidOpen_ = 0;
Blockly.Trashcan.prototype.left_ = 0;
Blockly.Trashcan.prototype.top_ = 0;
Blockly.Trashcan.prototype.createDom = function () {
    this.svgGroup_ = Blockly.utils.createSvgElement('g', { 'class': 'blocklyTrash' }, null);
    var clip;
    var rnd = String(Math.random()).substring(2);
    clip = Blockly.utils.createSvgElement('clipPath', { 'id': 'blocklyTrashBodyClipPath' + rnd }, this.svgGroup_);
    Blockly.utils.createSvgElement('rect', {
        'width': this.WIDTH_,
        'height': this.BODY_HEIGHT_,
        'y': this.LID_HEIGHT_
    }, clip);
    var body = Blockly.utils.createSvgElement('image', {
        'width': Blockly.SPRITE.width,
        'x': -this.SPRITE_LEFT_,
        'height': Blockly.SPRITE.height,
        'y': -this.SPRITE_TOP_,
        'clip-path': 'url(#blocklyTrashBodyClipPath' + rnd + ')'
    }, this.svgGroup_);
    body.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', this.workspace_.options.pathToMedia + Blockly.SPRITE.url);
    clip = Blockly.utils.createSvgElement('clipPath', { 'id': 'blocklyTrashLidClipPath' + rnd }, this.svgGroup_);
    Blockly.utils.createSvgElement('rect', { 'width': this.WIDTH_, 'height': this.LID_HEIGHT_ }, clip);
    this.svgLid_ = Blockly.utils.createSvgElement('image', {
        'width': Blockly.SPRITE.width,
        'x': -this.SPRITE_LEFT_,
        'height': Blockly.SPRITE.height,
        'y': -this.SPRITE_TOP_,
        'clip-path': 'url(#blocklyTrashLidClipPath' + rnd + ')'
    }, this.svgGroup_);
    this.svgLid_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', this.workspace_.options.pathToMedia + Blockly.SPRITE.url);
    Blockly.bindEventWithChecks_(this.svgGroup_, 'mouseup', this, this.click);
    this.animateLid_();
    return this.svgGroup_;
};
Blockly.Trashcan.prototype.init = function (bottom) {
    this.bottom_ = this.MARGIN_BOTTOM_ + bottom;
    this.setOpen_(false);
    return this.bottom_ + this.BODY_HEIGHT_ + this.LID_HEIGHT_;
};
Blockly.Trashcan.prototype.dispose = function () {
    if (this.svgGroup_) {
        goog.dom.removeNode(this.svgGroup_);
        this.svgGroup_ = null;
    }
    this.svgLid_ = null;
    this.workspace_ = null;
    clearTimeout(this.lidTask_);
};
Blockly.Trashcan.prototype.position = function () {
    var metrics = this.workspace_.getMetrics();
    if (!metrics) {
        return;
    }
    if (this.workspace_.RTL) {
        this.left_ = this.MARGIN_SIDE_ + Blockly.Scrollbar.scrollbarThickness;
        if (metrics.toolboxPosition == Blockly.TOOLBOX_AT_LEFT) {
            this.left_ += metrics.flyoutWidth;
            if (this.workspace_.toolbox_) {
                this.left_ += metrics.absoluteLeft;
            }
        }
    }
    else {
        this.left_ = metrics.viewWidth + metrics.absoluteLeft -
            this.WIDTH_ - this.MARGIN_SIDE_ - Blockly.Scrollbar.scrollbarThickness;
        if (metrics.toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {
            this.left_ -= metrics.flyoutWidth;
        }
    }
    this.top_ = metrics.viewHeight + metrics.absoluteTop -
        (this.BODY_HEIGHT_ + this.LID_HEIGHT_) - this.bottom_;
    if (metrics.toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM) {
        this.top_ -= metrics.flyoutHeight;
    }
    this.svgGroup_.setAttribute('transform', 'translate(' + this.left_ + ',' + this.top_ + ')');
};
Blockly.Trashcan.prototype.getClientRect = function () {
    if (!this.svgGroup_) {
        return null;
    }
    var trashRect = this.svgGroup_.getBoundingClientRect();
    var left = trashRect.left + this.SPRITE_LEFT_ - this.MARGIN_HOTSPOT_;
    var top = trashRect.top + this.SPRITE_TOP_ - this.MARGIN_HOTSPOT_;
    var width = this.WIDTH_ + 2 * this.MARGIN_HOTSPOT_;
    var height = this.LID_HEIGHT_ + this.BODY_HEIGHT_ + 2 * this.MARGIN_HOTSPOT_;
    return new goog.math.Rect(left, top, width, height);
};
Blockly.Trashcan.prototype.setOpen_ = function (state) {
    if (this.isOpen == state) {
        return;
    }
    clearTimeout(this.lidTask_);
    this.isOpen = state;
    this.animateLid_();
};
Blockly.Trashcan.prototype.animateLid_ = function () {
    this.lidOpen_ += this.isOpen ? 0.2 : -0.2;
    this.lidOpen_ = Math.min(Math.max(this.lidOpen_, 0), 1);
    var lidAngle = this.lidOpen_ * 45;
    this.svgLid_.setAttribute('transform', 'rotate(' +
        (this.workspace_.RTL ? -lidAngle : lidAngle) + ',' +
        (this.workspace_.RTL ? 4 : this.WIDTH_ - 4) + ',' +
        (this.LID_HEIGHT_ - 2) + ')');
    var opacity = 0.4 + this.lidOpen_ * (0.8 - 0.4);
    this.svgGroup_.style.opacity = opacity;
    if (this.lidOpen_ > 0 && this.lidOpen_ < 1) {
        this.lidTask_ = setTimeout(this.animateLid_.bind(this), 20);
    }
};
Blockly.Trashcan.prototype.close = function () {
    this.setOpen_(false);
};
Blockly.Trashcan.prototype.click = function () {
    var dx = this.workspace_.startScrollX - this.workspace_.scrollX;
    var dy = this.workspace_.startScrollY - this.workspace_.scrollY;
    if (Math.sqrt(dx * dx + dy * dy) > Blockly.DRAG_RADIUS) {
        return;
    }
    console.log('TODO: Inspect trash.');
};
'use strict';
goog.provide('Blockly.utils.uiMenu');
Blockly.utils.uiMenu.getSize = function (menu) {
    var menuDom = menu.getElement();
    var menuSize = goog.style.getSize(menuDom);
    menuSize.height = menuDom.scrollHeight;
    return menuSize;
};
Blockly.utils.uiMenu.adjustBBoxesForRTL = function (viewportBBox, anchorBBox, menuSize) {
    anchorBBox.left += menuSize.width;
    anchorBBox.right += menuSize.width;
    viewportBBox.left += menuSize.width;
    viewportBBox.right += menuSize.width;
};
'use strict';
goog.provide('Blockly.utils');
goog.require('Blockly.Touch');
goog.require('goog.dom');
goog.require('goog.events.BrowserFeature');
goog.require('goog.math.Coordinate');
goog.require('goog.userAgent');
Blockly.utils.getMessageArray_ = function () {
    return goog.global['Blockly']['Msg'];
};
Blockly.utils.removeAttribute = function (element, attributeName) {
    if (goog.userAgent.IE && goog.userAgent.isVersion('10.0')) {
        element.setAttribute(attributeName, null);
    }
    else {
        element.removeAttribute(attributeName);
    }
};
Blockly.utils.addClass = function (element, className) {
    var classes = element.getAttribute('class') || '';
    if ((' ' + classes + ' ').indexOf(' ' + className + ' ') != -1) {
        return false;
    }
    if (classes) {
        classes += ' ';
    }
    element.setAttribute('class', classes + className);
    return true;
};
Blockly.utils.removeClass = function (element, className) {
    var classes = element.getAttribute('class');
    if ((' ' + classes + ' ').indexOf(' ' + className + ' ') == -1) {
        return false;
    }
    var classList = classes.split(/\s+/);
    for (var i = 0; i < classList.length; i++) {
        if (!classList[i] || classList[i] == className) {
            classList.splice(i, 1);
            i--;
        }
    }
    if (classList.length) {
        element.setAttribute('class', classList.join(' '));
    }
    else {
        Blockly.utils.removeAttribute(element, 'class');
    }
    return true;
};
Blockly.utils.hasClass = function (element, className) {
    var classes = element.getAttribute('class');
    return (' ' + classes + ' ').indexOf(' ' + className + ' ') != -1;
};
Blockly.utils.noEvent = function (e) {
    e.preventDefault();
    e.stopPropagation();
};
Blockly.utils.isTargetInput = function (e) {
    return e.target.type == 'textarea' || e.target.type == 'text' ||
        e.target.type == 'number' || e.target.type == 'email' ||
        e.target.type == 'password' || e.target.type == 'search' ||
        e.target.type == 'tel' || e.target.type == 'url' ||
        e.target.isContentEditable;
};
Blockly.utils.getRelativeXY = function (element) {
    var xy = new goog.math.Coordinate(0, 0);
    var x = element.getAttribute('x');
    if (x) {
        xy.x = parseInt(x, 10);
    }
    var y = element.getAttribute('y');
    if (y) {
        xy.y = parseInt(y, 10);
    }
    var transform = element.getAttribute('transform');
    var r = transform && transform.match(Blockly.utils.getRelativeXY.XY_REGEX_);
    if (r) {
        xy.x += parseFloat(r[1]);
        if (r[3]) {
            xy.y += parseFloat(r[3]);
        }
    }
    var style = element.getAttribute('style');
    if (style && style.indexOf('translate') > -1) {
        var styleComponents = style.match(Blockly.utils.getRelativeXY.XY_STYLE_REGEX_);
        if (styleComponents) {
            xy.x += parseFloat(styleComponents[1]);
            if (styleComponents[3]) {
                xy.y += parseFloat(styleComponents[3]);
            }
        }
    }
    return xy;
};
Blockly.utils.getInjectionDivXY_ = function (element) {
    var x = 0;
    var y = 0;
    while (element) {
        var xy = Blockly.utils.getRelativeXY(element);
        var scale = Blockly.utils.getScale_(element);
        x = (x * scale) + xy.x;
        y = (y * scale) + xy.y;
        var classes = element.getAttribute('class') || '';
        if ((' ' + classes + ' ').indexOf(' injectionDiv ') != -1) {
            break;
        }
        element = element.parentNode;
    }
    return new goog.math.Coordinate(x, y);
};
Blockly.utils.getScale_ = function (element) {
    var scale = 1;
    var transform = element.getAttribute('transform');
    if (transform) {
        var transformComponents = transform.match(Blockly.utils.getScale_.REGEXP_);
        if (transformComponents && transformComponents[0]) {
            scale = parseFloat(transformComponents[0]);
        }
    }
    return scale;
};
Blockly.utils.getRelativeXY.XY_REGEX_ =
    /translate\(\s*([-+\d.e]+)([ ,]\s*([-+\d.e]+)\s*)?/;
Blockly.utils.getScale_REGEXP_ = /scale\(\s*([-+\d.e]+)\s*\)/;
Blockly.utils.getRelativeXY.XY_STYLE_REGEX_ =
    /transform:\s*translate(?:3d)?\(\s*([-+\d.e]+)\s*px([ ,]\s*([-+\d.e]+)\s*px)?/;
Blockly.utils.createSvgElement = function (name, attrs, parent) {
    var e = (document.createElementNS(Blockly.SVG_NS, name));
    for (var key in attrs) {
        e.setAttribute(key, attrs[key]);
    }
    if (document.body.runtimeStyle) {
        e.runtimeStyle = e.currentStyle = e.style;
    }
    if (parent) {
        parent.appendChild(e);
    }
    return e;
};
Blockly.utils.isRightButton = function (e) {
    if (e.ctrlKey && goog.userAgent.MAC) {
        return true;
    }
    return e.button == 2;
};
Blockly.utils.mouseToSvg = function (e, svg, matrix) {
    var svgPoint = svg.createSVGPoint();
    svgPoint.x = e.clientX;
    svgPoint.y = e.clientY;
    if (!matrix) {
        matrix = svg.getScreenCTM().inverse();
    }
    return svgPoint.matrixTransform(matrix);
};
Blockly.utils.shortestStringLength = function (array) {
    if (!array.length) {
        return 0;
    }
    return array.reduce(function (a, b) {
        return a.length < b.length ? a : b;
    }).length;
};
Blockly.utils.commonWordPrefix = function (array, opt_shortest) {
    if (!array.length) {
        return 0;
    }
    else if (array.length == 1) {
        return array[0].length;
    }
    var wordPrefix = 0;
    var max = opt_shortest || Blockly.utils.shortestStringLength(array);
    for (var len = 0; len < max; len++) {
        var letter = array[0][len];
        for (var i = 1; i < array.length; i++) {
            if (letter != array[i][len]) {
                return wordPrefix;
            }
        }
        if (letter == ' ') {
            wordPrefix = len + 1;
        }
    }
    for (var i = 1; i < array.length; i++) {
        var letter = array[i][len];
        if (letter && letter != ' ') {
            return wordPrefix;
        }
    }
    return max;
};
Blockly.utils.commonWordSuffix = function (array, opt_shortest) {
    if (!array.length) {
        return 0;
    }
    else if (array.length == 1) {
        return array[0].length;
    }
    var wordPrefix = 0;
    var max = opt_shortest || Blockly.utils.shortestStringLength(array);
    for (var len = 0; len < max; len++) {
        var letter = array[0].substr(-len - 1, 1);
        for (var i = 1; i < array.length; i++) {
            if (letter != array[i].substr(-len - 1, 1)) {
                return wordPrefix;
            }
        }
        if (letter == ' ') {
            wordPrefix = len + 1;
        }
    }
    for (var i = 1; i < array.length; i++) {
        var letter = array[i].charAt(array[i].length - len - 1);
        if (letter && letter != ' ') {
            return wordPrefix;
        }
    }
    return max;
};
Blockly.utils.tokenizeInterpolation = function (message) {
    return Blockly.utils.tokenizeInterpolation_(message, true);
};
Blockly.utils.replaceMessageReferences = function (message) {
    if (!goog.isString(message)) {
        return message;
    }
    var interpolatedResult = Blockly.utils.tokenizeInterpolation_(message, false);
    return interpolatedResult.length ? interpolatedResult[0] : '';
};
Blockly.utils.checkMessageReferences = function (message) {
    var isValid = true;
    var regex = /%{BKY_([a-zA-Z][a-zA-Z0-9_]*)}/g;
    var match = regex.exec(message);
    while (match) {
        var msgKey = match[1];
        if (Blockly.utils.getMessageArray_()[msgKey] == undefined) {
            console.log('WARNING: No message string for %{BKY_' + msgKey + '}.');
            isValid = false;
        }
        message = message.substring(match.index + msgKey.length + 1);
        match = regex.exec(message);
    }
    return isValid;
};
Blockly.utils.tokenizeInterpolation_ = function (message, parseInterpolationTokens) {
    var tokens = [];
    var chars = message.split('');
    chars.push('');
    var state = 0;
    var buffer = [];
    var number = null;
    for (var i = 0; i < chars.length; i++) {
        var c = chars[i];
        if (state == 0) {
            if (c == '%') {
                var text = buffer.join('');
                if (text) {
                    tokens.push(text);
                }
                buffer.length = 0;
                state = 1;
            }
            else {
                buffer.push(c);
            }
        }
        else if (state == 1) {
            if (c == '%') {
                buffer.push(c);
                state = 0;
            }
            else if (parseInterpolationTokens && '0' <= c && c <= '9') {
                state = 2;
                number = c;
                var text = buffer.join('');
                if (text) {
                    tokens.push(text);
                }
                buffer.length = 0;
            }
            else if (c == '{') {
                state = 3;
            }
            else {
                buffer.push('%', c);
                state = 0;
            }
        }
        else if (state == 2) {
            if ('0' <= c && c <= '9') {
                number += c;
            }
            else {
                tokens.push(parseInt(number, 10));
                i--;
                state = 0;
            }
        }
        else if (state == 3) {
            if (c == '') {
                buffer.splice(0, 0, '%{');
                i--;
                state = 0;
            }
            else if (c != '}') {
                buffer.push(c);
            }
            else {
                var rawKey = buffer.join('');
                if (/[a-zA-Z][a-zA-Z0-9_]*/.test(rawKey)) {
                    var keyUpper = rawKey.toUpperCase();
                    var bklyKey = goog.string.startsWith(keyUpper, 'BKY_') ?
                        keyUpper.substring(4) : null;
                    if (bklyKey && bklyKey in Blockly.Msg) {
                        var rawValue = Blockly.Msg[bklyKey];
                        if (goog.isString(rawValue)) {
                            Array.prototype.push.apply(tokens, Blockly.utils.tokenizeInterpolation(rawValue));
                        }
                        else if (parseInterpolationTokens) {
                            tokens.push(String(rawValue));
                        }
                        else {
                            tokens.push(rawValue);
                        }
                    }
                    else {
                        tokens.push('%{' + rawKey + '}');
                    }
                    buffer.length = 0;
                    state = 0;
                }
                else {
                    tokens.push('%{' + rawKey + '}');
                    buffer.length = 0;
                    state = 0;
                }
            }
        }
    }
    var text = buffer.join('');
    if (text) {
        tokens.push(text);
    }
    var mergedTokens = [];
    buffer.length = 0;
    for (var i = 0; i < tokens.length; ++i) {
        if (typeof tokens[i] == 'string') {
            buffer.push(tokens[i]);
        }
        else {
            text = buffer.join('');
            if (text) {
                mergedTokens.push(text);
            }
            buffer.length = 0;
            mergedTokens.push(tokens[i]);
        }
    }
    text = buffer.join('');
    if (text) {
        mergedTokens.push(text);
    }
    buffer.length = 0;
    return mergedTokens;
};
Blockly.utils.genUid = function () {
    var length = 20;
    var soupLength = Blockly.utils.genUid.soup_.length;
    var id = [];
    for (var i = 0; i < length; i++) {
        id[i] = Blockly.utils.genUid.soup_.charAt(Math.random() * soupLength);
    }
    return id.join('');
};
Blockly.utils.genUid.soup_ = '!#$%()*+,-./:;=?@[]^_`{|}~' +
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
Blockly.utils.wrap = function (text, limit) {
    var lines = text.split('\n');
    for (var i = 0; i < lines.length; i++) {
        lines[i] = Blockly.utils.wrapLine_(lines[i], limit);
    }
    return lines.join('\n');
};
Blockly.utils.wrapLine_ = function (text, limit) {
    if (text.length <= limit) {
        return text;
    }
    var words = text.trim().split(/\s+/);
    for (var i = 0; i < words.length; i++) {
        if (words[i].length > limit) {
            limit = words[i].length;
        }
    }
    var lastScore;
    var score = -Infinity;
    var lastText;
    var lineCount = 1;
    do {
        lastScore = score;
        lastText = text;
        var wordBreaks = [];
        var steps = words.length / lineCount;
        var insertedBreaks = 1;
        for (var i = 0; i < words.length - 1; i++) {
            if (insertedBreaks < (i + 1.5) / steps) {
                insertedBreaks++;
                wordBreaks[i] = true;
            }
            else {
                wordBreaks[i] = false;
            }
        }
        wordBreaks = Blockly.utils.wrapMutate_(words, wordBreaks, limit);
        score = Blockly.utils.wrapScore_(words, wordBreaks, limit);
        text = Blockly.utils.wrapToText_(words, wordBreaks);
        lineCount++;
    } while (score > lastScore);
    return lastText;
};
Blockly.utils.wrapScore_ = function (words, wordBreaks, limit) {
    var lineLengths = [0];
    var linePunctuation = [];
    for (var i = 0; i < words.length; i++) {
        lineLengths[lineLengths.length - 1] += words[i].length;
        if (wordBreaks[i] === true) {
            lineLengths.push(0);
            linePunctuation.push(words[i].charAt(words[i].length - 1));
        }
        else if (wordBreaks[i] === false) {
            lineLengths[lineLengths.length - 1]++;
        }
    }
    var maxLength = Math.max.apply(Math, lineLengths);
    var score = 0;
    for (var i = 0; i < lineLengths.length; i++) {
        score -= Math.pow(Math.abs(limit - lineLengths[i]), 1.5) * 2;
        score -= Math.pow(maxLength - lineLengths[i], 1.5);
        if ('.?!'.indexOf(linePunctuation[i]) != -1) {
            score += limit / 3;
        }
        else if (',;)]}'.indexOf(linePunctuation[i]) != -1) {
            score += limit / 4;
        }
    }
    if (lineLengths.length > 1 && lineLengths[lineLengths.length - 1] <=
        lineLengths[lineLengths.length - 2]) {
        score += 0.5;
    }
    return score;
};
Blockly.utils.wrapMutate_ = function (words, wordBreaks, limit) {
    var bestScore = Blockly.utils.wrapScore_(words, wordBreaks, limit);
    var bestBreaks;
    for (var i = 0; i < wordBreaks.length - 1; i++) {
        if (wordBreaks[i] == wordBreaks[i + 1]) {
            continue;
        }
        var mutatedWordBreaks = [].concat(wordBreaks);
        mutatedWordBreaks[i] = !mutatedWordBreaks[i];
        mutatedWordBreaks[i + 1] = !mutatedWordBreaks[i + 1];
        var mutatedScore = Blockly.utils.wrapScore_(words, mutatedWordBreaks, limit);
        if (mutatedScore > bestScore) {
            bestScore = mutatedScore;
            bestBreaks = mutatedWordBreaks;
        }
    }
    if (bestBreaks) {
        return Blockly.utils.wrapMutate_(words, bestBreaks, limit);
    }
    return wordBreaks;
};
Blockly.utils.wrapToText_ = function (words, wordBreaks) {
    var text = [];
    for (var i = 0; i < words.length; i++) {
        text.push(words[i]);
        if (wordBreaks[i] !== undefined) {
            text.push(wordBreaks[i] ? '\n' : ' ');
        }
    }
    return text.join('');
};
Blockly.utils.is3dSupported = function () {
    if (Blockly.utils.is3dSupported.cached_ !== undefined) {
        return Blockly.utils.is3dSupported.cached_;
    }
    if (!goog.global.getComputedStyle) {
        return false;
    }
    var el = document.createElement('p');
    var has3d = 'none';
    var transforms = {
        'webkitTransform': '-webkit-transform',
        'OTransform': '-o-transform',
        'msTransform': '-ms-transform',
        'MozTransform': '-moz-transform',
        'transform': 'transform'
    };
    document.body.insertBefore(el, null);
    for (var t in transforms) {
        if (el.style[t] !== undefined) {
            el.style[t] = 'translate3d(1px,1px,1px)';
            var computedStyle = goog.global.getComputedStyle(el);
            if (!computedStyle) {
                document.body.removeChild(el);
                return false;
            }
            has3d = computedStyle.getPropertyValue(transforms[t]);
        }
    }
    document.body.removeChild(el);
    Blockly.utils.is3dSupported.cached_ = has3d !== 'none';
    return Blockly.utils.is3dSupported.cached_;
};
Blockly.utils.insertAfter = function (newNode, refNode) {
    var siblingNode = refNode.nextSibling;
    var parentNode = refNode.parentNode;
    if (!parentNode) {
        throw 'Reference node has no parent.';
    }
    if (siblingNode) {
        parentNode.insertBefore(newNode, siblingNode);
    }
    else {
        parentNode.appendChild(newNode);
    }
};
Blockly.utils.runAfterPageLoad = function (fn) {
    if (!document) {
        throw new Error('Blockly.utils.runAfterPageLoad() requires browser document.');
    }
    if (document.readyState === 'complete') {
        fn();
    }
    else {
        var readyStateCheckInterval = setInterval(function () {
            if (document.readyState === 'complete') {
                clearInterval(readyStateCheckInterval);
                fn();
            }
        }, 10);
    }
};
Blockly.utils.setCssTransform = function (node, transform) {
    node.style['transform'] = transform;
    node.style['-webkit-transform'] = transform;
};
Blockly.utils.getViewportBBox = function () {
    var windowSize = goog.dom.getViewportSize();
    var scrollOffset = goog.style.getViewportPageOffset(document);
    return {
        right: windowSize.width + scrollOffset.x,
        bottom: windowSize.height + scrollOffset.y,
        top: scrollOffset.y,
        left: scrollOffset.x
    };
};
Blockly.utils.startsWith = function (str, prefix) {
    return str.lastIndexOf(prefix, 0) == 0;
};
Blockly.utils.toRadians = function (angleDegrees) {
    return angleDegrees * Math.PI / 180;
};
'use strict';
goog.provide('Blockly.WidgetDiv');
goog.require('Blockly.Css');
goog.require('goog.dom');
goog.require('goog.dom.TagName');
goog.require('goog.style');
Blockly.WidgetDiv.DIV = null;
Blockly.WidgetDiv.owner_ = null;
Blockly.WidgetDiv.dispose_ = null;
Blockly.WidgetDiv.disposeAnimationFinished_ = null;
Blockly.WidgetDiv.disposeAnimationTimer_ = null;
Blockly.WidgetDiv.disposeAnimationTimerLength_ = 0;
Blockly.WidgetDiv.createDom = function () {
    if (Blockly.WidgetDiv.DIV) {
        return;
    }
    Blockly.WidgetDiv.DIV =
        goog.dom.createDom(goog.dom.TagName.DIV, 'blocklyWidgetDiv');
    document.body.appendChild(Blockly.WidgetDiv.DIV);
};
Blockly.WidgetDiv.show = function (newOwner, rtl, opt_dispose, opt_disposeAnimationFinished, opt_disposeAnimationTimerLength) {
    Blockly.WidgetDiv.hide();
    Blockly.WidgetDiv.owner_ = newOwner;
    Blockly.WidgetDiv.dispose_ = opt_dispose;
    Blockly.WidgetDiv.disposeAnimationFinished_ = opt_disposeAnimationFinished;
    Blockly.WidgetDiv.disposeAnimationTimerLength_ = opt_disposeAnimationTimerLength;
    var xy = goog.style.getViewportPageOffset(document);
    Blockly.WidgetDiv.DIV.style.top = xy.y + 'px';
    Blockly.WidgetDiv.DIV.style.direction = rtl ? 'rtl' : 'ltr';
    Blockly.WidgetDiv.DIV.style.display = 'block';
};
Blockly.WidgetDiv.repositionForWindowResize = function () {
    if (Blockly.WidgetDiv.owner_
        && Blockly.WidgetDiv.owner_.getScaledBBox_
        && Blockly.WidgetDiv.owner_.getSize) {
        var widgetScaledBBox = Blockly.WidgetDiv.owner_.getScaledBBox_();
        var widgetSize = Blockly.WidgetDiv.owner_.getSize();
        Blockly.WidgetDiv.positionInternal_(widgetScaledBBox.left, widgetScaledBBox.top, widgetSize.height);
    }
    else {
        Blockly.WidgetDiv.hide();
    }
};
Blockly.WidgetDiv.hide = function (opt_noAnimate) {
    if (Blockly.WidgetDiv.disposeAnimationTimer_) {
        window.clearTimeout(Blockly.WidgetDiv.disposeAnimationTimer_);
        Blockly.WidgetDiv.disposeAnimationFinished_ && Blockly.WidgetDiv.disposeAnimationFinished_();
        Blockly.WidgetDiv.disposeAnimationFinished_ = null;
        Blockly.WidgetDiv.disposeAnimationTimer_ = null;
        Blockly.WidgetDiv.owner_ = null;
        Blockly.WidgetDiv.hideAndClearDom_();
    }
    else if (Blockly.WidgetDiv.isVisible()) {
        Blockly.WidgetDiv.dispose_ && Blockly.WidgetDiv.dispose_();
        Blockly.WidgetDiv.dispose_ = null;
        if (Blockly.WidgetDiv.disposeAnimationFinished_ && !opt_noAnimate) {
            Blockly.WidgetDiv.disposeAnimationTimer_ = window.setTimeout(Blockly.WidgetDiv.hide, Blockly.WidgetDiv.disposeAnimationTimerLength_ * 1000);
        }
        else {
            Blockly.WidgetDiv.disposeAnimationFinished_ && Blockly.WidgetDiv.disposeAnimationFinished_();
            Blockly.WidgetDiv.disposeAnimationFinished_ = null;
            Blockly.WidgetDiv.owner_ = null;
            Blockly.WidgetDiv.hideAndClearDom_();
        }
    }
};
Blockly.WidgetDiv.hideAndClearDom_ = function () {
    Blockly.WidgetDiv.DIV.style.display = 'none';
    Blockly.WidgetDiv.DIV.style.left = '';
    Blockly.WidgetDiv.DIV.style.top = '';
    Blockly.WidgetDiv.DIV.style.height = '';
    goog.dom.removeChildren(Blockly.WidgetDiv.DIV);
};
Blockly.WidgetDiv.isVisible = function () {
    return !!Blockly.WidgetDiv.owner_;
};
Blockly.WidgetDiv.hideIfOwner = function (oldOwner) {
    if (Blockly.WidgetDiv.owner_ == oldOwner) {
        Blockly.WidgetDiv.hide();
    }
};
Blockly.WidgetDiv.position = function (anchorX, anchorY, windowSize, scrollOffset, rtl) {
    if (anchorY < scrollOffset.y) {
        anchorY = scrollOffset.y;
    }
    if (rtl) {
        if (anchorX > windowSize.width + scrollOffset.x) {
            anchorX = windowSize.width + scrollOffset.x;
        }
    }
    else {
        if (anchorX < scrollOffset.x) {
            anchorX = scrollOffset.x;
        }
    }
    Blockly.WidgetDiv.positionInternal_(anchorX, anchorY, windowSize.height);
};
Blockly.WidgetDiv.positionInternal_ = function (x, y, height) {
    Blockly.WidgetDiv.DIV.style.left = x + 'px';
    Blockly.WidgetDiv.DIV.style.top = y + 'px';
    Blockly.WidgetDiv.DIV.style.height = height + 'px';
};
Blockly.WidgetDiv.positionWithAnchor = function (viewportBBox, anchorBBox, widgetSize, rtl) {
    var y = Blockly.WidgetDiv.calculateY_(viewportBBox, anchorBBox, widgetSize);
    var x = Blockly.WidgetDiv.calculateX_(viewportBBox, anchorBBox, widgetSize, rtl);
    if (y < 0) {
        Blockly.WidgetDiv.positionInternal_(x, 0, widgetSize.height + y);
    }
    else {
        Blockly.WidgetDiv.positionInternal_(x, y, widgetSize.height);
    }
};
Blockly.WidgetDiv.calculateX_ = function (viewportBBox, anchorBBox, widgetSize, rtl) {
    if (rtl) {
        var widgetLeft = anchorBBox.right - widgetSize.width;
        var x = Math.max(widgetLeft, viewportBBox.left);
        return Math.min(x, viewportBBox.right - widgetSize.width);
    }
    else {
        var x = Math.min(anchorBBox.left, viewportBBox.right - widgetSize.width);
        return Math.max(x, viewportBBox.left);
    }
};
Blockly.WidgetDiv.calculateY_ = function (viewportBBox, anchorBBox, widgetSize) {
    if (anchorBBox.bottom + widgetSize.height >=
        viewportBBox.bottom) {
        return anchorBBox.top - widgetSize.height;
    }
    else {
        return anchorBBox.bottom;
    }
};
'use strict';
goog.provide('Blockly.Workspace');
goog.require('Blockly.VariableMap');
goog.require('Blockly.WorkspaceComment');
goog.require('goog.array');
goog.require('goog.math');
Blockly.Workspace = function (opt_options) {
    this.id = Blockly.utils.genUid();
    Blockly.Workspace.WorkspaceDB_[this.id] = this;
    this.options = opt_options || {};
    this.RTL = !!this.options.RTL;
    this.horizontalLayout = !!this.options.horizontalLayout;
    this.toolboxPosition = this.options.toolboxPosition;
    this.topBlocks_ = [];
    this.topComments_ = [];
    this.commentDB_ = Object.create(null);
    this.listeners_ = [];
    this.tapListeners_ = [];
    this.undoStack_ = [];
    this.redoStack_ = [];
    this.blockDB_ = Object.create(null);
    this.variableMap_ = new Blockly.VariableMap(this);
    this.potentialVariableMap_ = null;
};
Blockly.Workspace.prototype.rendered = false;
Blockly.Workspace.prototype.isClearing = false;
Blockly.Workspace.prototype.MAX_UNDO = 1024;
Blockly.Workspace.prototype.refreshToolboxSelection_ = function () {
};
Blockly.Workspace.prototype.dispose = function () {
    this.listeners_.length = 0;
    this.clear();
    delete Blockly.Workspace.WorkspaceDB_[this.id];
};
Blockly.Workspace.SCAN_ANGLE = 3;
Blockly.Workspace.prototype.addTopBlock = function (block) {
    this.topBlocks_.push(block);
};
Blockly.Workspace.prototype.removeTopBlock = function (block) {
    if (!goog.array.remove(this.topBlocks_, block)) {
        throw 'Block not present in workspace\'s list of top-most blocks.';
    }
};
Blockly.Workspace.prototype.getTopBlocks = function (ordered) {
    var blocks = [].concat(this.topBlocks_);
    if (ordered && blocks.length > 1) {
        var offset = Math.sin(goog.math.toRadians(Blockly.Workspace.SCAN_ANGLE));
        if (this.RTL) {
            offset *= -1;
        }
        blocks.sort(function (a, b) {
            var aXY = a.getRelativeToSurfaceXY();
            var bXY = b.getRelativeToSurfaceXY();
            return (aXY.y + offset * aXY.x) - (bXY.y + offset * bXY.x);
        });
    }
    return blocks;
};
Blockly.Workspace.prototype.addTopComment = function (comment) {
    this.topComments_.push(comment);
    if (this.commentDB_[comment.id]) {
        console.warn('Overriding an existing comment on this workspace, with id "' +
            comment.id + '"');
    }
    this.commentDB_[comment.id] = comment;
};
Blockly.Workspace.prototype.removeTopComment = function (comment) {
    if (!goog.array.remove(this.topComments_, comment)) {
        throw 'Comment not present in workspace\'s list of top-most comments.';
    }
    delete this.commentDB_[comment.id];
};
Blockly.Workspace.prototype.getTopComments = function (ordered) {
    var comments = [].concat(this.topComments_);
    if (ordered && comments.length > 1) {
        var offset = Math.sin(goog.math.toRadians(Blockly.Workspace.SCAN_ANGLE));
        if (this.RTL) {
            offset *= -1;
        }
        comments.sort(function (a, b) {
            var aXY = a instanceof Blockly.ScratchBlockComment ? a.getXY() : a.getRelativeToSurfaceXY();
            var bXY = b instanceof Blockly.ScratchBlockComment ? b.getXY() : b.getRelativeToSurfaceXY();
            return (aXY.y + offset * aXY.x) - (bXY.y + offset * bXY.x);
        });
    }
    return comments;
};
Blockly.Workspace.prototype.getAllBlocks = function (ordered) {
    if (ordered) {
        var topBlocks = this.getTopBlocks(true);
        var blocks = [];
        for (var i = 0; i < topBlocks.length; i++) {
            blocks.push.apply(blocks, topBlocks[i].getDescendants(true));
        }
    }
    else {
        var blocks = this.getTopBlocks(false);
        for (var i = 0; i < blocks.length; i++) {
            blocks.push.apply(blocks, blocks[i].getChildren(false));
        }
    }
    return blocks;
};
Blockly.Workspace.prototype.clear = function () {
    this.isClearing = true;
    var existingGroup = Blockly.Events.getGroup();
    if (!existingGroup) {
        Blockly.Events.setGroup(true);
    }
    while (this.topBlocks_.length) {
        this.topBlocks_[0].dispose();
    }
    while (this.topComments_.length) {
        this.topComments_[this.topComments_.length - 1].dispose();
    }
    if (!existingGroup) {
        Blockly.Events.setGroup(false);
    }
    this.variableMap_.clear();
    if (Blockly.DropDownDiv) {
        Blockly.DropDownDiv.hideWithoutAnimation();
    }
    if (Blockly.WidgetDiv) {
        Blockly.WidgetDiv.hide(true);
    }
    if (this.potentialVariableMap_) {
        this.potentialVariableMap_.clear();
    }
    this.isClearing = false;
};
Blockly.Workspace.prototype.renameVariableById = function (id, newName) {
    this.variableMap_.renameVariableById(id, newName);
};
Blockly.Workspace.prototype.createVariable = function (name, opt_type, opt_id, opt_isLocal, opt_isCloud) {
    return this.variableMap_.createVariable(name, opt_type, opt_id, opt_isLocal, opt_isCloud);
};
Blockly.Workspace.prototype.getVariableUsesById = function (id) {
    return this.variableMap_.getVariableUsesById(id);
};
Blockly.Workspace.prototype.deleteVariableById = function (id) {
    this.variableMap_.deleteVariableById(id);
};
Blockly.Workspace.prototype.deleteVariableInternal_ = function (variable, uses) {
    this.variableMap_.deleteVariableInternal_(variable, uses);
};
Blockly.Workspace.prototype.variableIndexOf = function (_name) {
    console.warn('Deprecated call to Blockly.Workspace.prototype.variableIndexOf');
    return -1;
};
Blockly.Workspace.prototype.getVariable = function (name, opt_type) {
    return this.variableMap_.getVariable(name, opt_type);
};
Blockly.Workspace.prototype.getVariableById = function (id) {
    return this.variableMap_.getVariableById(id);
};
Blockly.Workspace.prototype.getVariablesOfType = function (type) {
    return this.variableMap_.getVariablesOfType(type);
};
Blockly.Workspace.prototype.getVariableTypes = function () {
    return this.variableMap_.getVariableTypes();
};
Blockly.Workspace.prototype.getAllVariables = function () {
    return this.variableMap_.getAllVariables();
};
Blockly.Workspace.prototype.getWidth = function () {
    return 0;
};
Blockly.Workspace.prototype.newBlock = function (prototypeName, opt_id) {
    return new Blockly.Block(this, prototypeName, opt_id);
};
Blockly.Workspace.prototype.undo = function (redo) {
    var inputStack = redo ? this.redoStack_ : this.undoStack_;
    var outputStack = redo ? this.undoStack_ : this.redoStack_;
    var inputEvent = inputStack.pop();
    if (!inputEvent) {
        return;
    }
    var events = [inputEvent];
    while (inputStack.length && inputEvent.group &&
        inputEvent.group == inputStack[inputStack.length - 1].group) {
        events.push(inputStack.pop());
    }
    for (var i = 0, event; event = events[i]; i++) {
        outputStack.push(event);
    }
    events = Blockly.Events.filter(events, redo);
    Blockly.Events.recordUndo = false;
    if (Blockly.selected) {
        Blockly.Events.disable();
        try {
            Blockly.selected.unselect();
        }
        finally {
            Blockly.Events.enable();
        }
    }
    try {
        for (var i = 0, event; event = events[i]; i++) {
            event.run(redo);
        }
    }
    finally {
        Blockly.Events.recordUndo = true;
    }
};
Blockly.Workspace.prototype.clearUndo = function () {
    this.undoStack_.length = 0;
    this.redoStack_.length = 0;
    Blockly.Events.clearPendingUndo();
};
Blockly.Workspace.prototype.hasRedoStack = function () {
    return this.redoStack_.length != 0;
};
Blockly.Workspace.prototype.hasUndoStack = function () {
    return this.undoStack_.length != 0;
};
Blockly.Workspace.prototype.addChangeListener = function (func) {
    this.listeners_.push(func);
    return func;
};
Blockly.Workspace.prototype.removeChangeListener = function (func) {
    goog.array.remove(this.listeners_, func);
};
Blockly.Workspace.prototype.fireChangeListener = function (event) {
    if (event.recordUndo) {
        this.undoStack_.push(event);
        this.redoStack_.length = 0;
        if (this.undoStack_.length > this.MAX_UNDO) {
            this.undoStack_.unshift();
        }
    }
    var currentListeners = this.listeners_.slice();
    for (var i = 0, func; func = currentListeners[i]; i++) {
        func(event);
    }
};
Blockly.Workspace.prototype.getBlockById = function (id) {
    var block = this.blockDB_[id];
    if (!block && this.getFlyout() && this.getFlyout().getWorkspace()) {
        block = this.getFlyout().getWorkspace().blockDB_[id];
    }
    return block || null;
};
Blockly.Workspace.prototype.getCommentById = function (id) {
    return this.commentDB_[id] || null;
};
Blockly.Workspace.prototype.getFlyout = function () {
    return null;
};
Blockly.Workspace.prototype.allInputsFilled = function (opt_shadowBlocksAreFilled) {
    var blocks = this.getTopBlocks(false);
    for (var i = 0, block; block = blocks[i]; i++) {
        if (!block.allInputsFilled(opt_shadowBlocksAreFilled)) {
            return false;
        }
    }
    return true;
};
Blockly.Workspace.prototype.getPotentialVariableMap = function () {
    return this.potentialVariableMap_;
};
Blockly.Workspace.prototype.createPotentialVariableMap = function () {
    this.potentialVariableMap_ = new Blockly.VariableMap(this);
};
Blockly.Workspace.prototype.getVariableMap = function () {
    return this.variableMap_;
};
Blockly.Workspace.WorkspaceDB_ = Object.create(null);
Blockly.Workspace.getById = function (id) {
    return Blockly.Workspace.WorkspaceDB_[id] || null;
};
Blockly.Workspace.prototype['clear'] = Blockly.Workspace.prototype.clear;
Blockly.Workspace.prototype['clearUndo'] =
    Blockly.Workspace.prototype.clearUndo;
Blockly.Workspace.prototype['addChangeListener'] =
    Blockly.Workspace.prototype.addChangeListener;
Blockly.Workspace.prototype['removeChangeListener'] =
    Blockly.Workspace.prototype.removeChangeListener;
'use strict';
goog.provide('Blockly.WorkspaceAudio');
goog.require('goog.userAgent');
Blockly.WorkspaceAudio = function (parentWorkspace) {
    this.parentWorkspace_ = parentWorkspace;
    this.SOUNDS_ = Object.create(null);
};
Blockly.WorkspaceAudio.prototype.lastSound_ = null;
Blockly.WorkspaceAudio.prototype.dispose = function () {
    this.parentWorkspace_ = null;
    this.SOUNDS_ = null;
};
Blockly.WorkspaceAudio.prototype.load = function (filenames, name) {
    if (!filenames.length) {
        return;
    }
    try {
        var audioTest = new window['Audio']();
    }
    catch (e) {
        return;
    }
    var sound;
    for (var i = 0; i < filenames.length; i++) {
        var filename = filenames[i];
        var ext = filename.match(/\.(\w+)$/);
        if (ext && audioTest.canPlayType('audio/' + ext[1])) {
            sound = new window['Audio'](filename);
            break;
        }
    }
    if (sound && sound.play) {
        this.SOUNDS_[name] = sound;
    }
};
Blockly.WorkspaceAudio.prototype.preload = function () {
    for (var name in this.SOUNDS_) {
        var sound = this.SOUNDS_[name];
        sound.volume = 0.01;
        var playPromise = sound.play();
        if (playPromise) {
            playPromise.then(sound.pause).catch(function () {
            });
        }
        else {
            sound.pause();
        }
        if (goog.userAgent.IPAD || goog.userAgent.IPHONE) {
            break;
        }
    }
};
Blockly.WorkspaceAudio.prototype.play = function (name, opt_volume) {
    var sound = this.SOUNDS_[name];
    if (sound) {
        var now = new Date;
        if (this.lastSound_ != null &&
            now - this.lastSound_ < Blockly.SOUND_LIMIT) {
            return;
        }
        this.lastSound_ = now;
        var mySound;
        var ie9 = goog.userAgent.DOCUMENT_MODE &&
            goog.userAgent.DOCUMENT_MODE === 9;
        if (ie9 || goog.userAgent.IPAD || goog.userAgent.ANDROID) {
            mySound = sound;
        }
        else {
            mySound = sound.cloneNode();
        }
        mySound.volume = (opt_volume === undefined ? 1 : opt_volume);
        mySound.play();
    }
    else if (this.parentWorkspace_) {
        this.parentWorkspace_.getAudioManager().play(name, opt_volume);
    }
};
'use strict';
goog.provide('Blockly.WorkspaceComment');
goog.require('Blockly.Events.CommentChange');
goog.require('Blockly.Events.CommentCreate');
goog.require('Blockly.Events.CommentDelete');
goog.require('Blockly.Events.CommentMove');
goog.require('goog.math.Coordinate');
Blockly.WorkspaceComment = function (workspace, content, height, width, minimized, opt_id) {
    this.id = (opt_id && !workspace.getCommentById(opt_id)) ?
        opt_id : Blockly.utils.genUid();
    workspace.addTopComment(this);
    this.xy_ = new goog.math.Coordinate(0, 0);
    this.height_ = height;
    this.width_ = width;
    this.isMinimized_ = minimized;
    this.workspace = workspace;
    this.RTL = workspace.RTL;
    this.deletable_ = true;
    this.movable_ = true;
    this.content_ = content;
    this.isComment = true;
    Blockly.WorkspaceComment.fireCreateEvent(this);
};
Blockly.WorkspaceComment.MAX_LABEL_LENGTH = 12;
Blockly.WorkspaceComment.COMMENT_TEXT_LIMIT = 8000;
Blockly.WorkspaceComment.prototype.dispose = function () {
    if (!this.workspace) {
        return;
    }
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.CommentDelete(this));
    }
    this.workspace.removeTopComment(this);
    this.workspace = null;
};
Blockly.WorkspaceComment.prototype.getHeight = function () {
    return this.height_;
};
Blockly.WorkspaceComment.prototype.setHeight = function (height) {
    this.height_ = height;
};
Blockly.WorkspaceComment.prototype.getWidth = function () {
    return this.width_;
};
Blockly.WorkspaceComment.prototype.setWidth = function (width) {
    this.width_ = width;
};
Blockly.WorkspaceComment.prototype.getHeightWidth = function () {
    return { height: this.height_, width: this.width_ };
};
Blockly.WorkspaceComment.prototype.getXY = function () {
    return this.xy_.clone();
};
Blockly.WorkspaceComment.prototype.moveBy = function (dx, dy) {
    var event = new Blockly.Events.CommentMove(this);
    this.xy_.translate(dx, dy);
    event.recordNew();
    Blockly.Events.fire(event);
};
Blockly.WorkspaceComment.prototype.isDeletable = function () {
    return this.deletable_ &&
        !(this.workspace && this.workspace.options.readOnly);
};
Blockly.WorkspaceComment.prototype.setDeletable = function (deletable) {
    this.deletable_ = deletable;
};
Blockly.WorkspaceComment.prototype.isMovable = function () {
    return this.movable_ &&
        !(this.workspace && this.workspace.options.readOnly);
};
Blockly.WorkspaceComment.prototype.setMovable = function (movable) {
    this.movable_ = movable;
};
Blockly.WorkspaceComment.prototype.getText = function () {
    return this.content_;
};
Blockly.WorkspaceComment.prototype.setText = function (text) {
    if (this.content_ != text) {
        Blockly.Events.fire(new Blockly.Events.CommentChange(this, { text: this.content_ }, { text: text }));
        this.content_ = text;
    }
};
Blockly.WorkspaceComment.prototype.isMinimized = function () {
    return this.isMinimized_;
};
Blockly.WorkspaceComment.prototype.toXmlWithXY = function (opt_noId) {
    var element = this.toXml(opt_noId);
    element.setAttribute('x', Math.round(this.xy_.x));
    element.setAttribute('y', Math.round(this.xy_.y));
    element.setAttribute('h', this.height_);
    element.setAttribute('w', this.width_);
    return element;
};
Blockly.WorkspaceComment.prototype.getLabelText = function () {
    if (this.content_.length > Blockly.WorkspaceComment.MAX_LABEL_LENGTH) {
        if (this.RTL) {
            return '\u2026' + this.content_.slice(0, Blockly.WorkspaceComment.MAX_LABEL_LENGTH);
        }
        return this.content_.slice(0, Blockly.WorkspaceComment.MAX_LABEL_LENGTH) + '\u2026';
    }
    else {
        return this.content_;
    }
};
Blockly.WorkspaceComment.prototype.toXml = function (opt_noId) {
    var commentElement = goog.dom.createDom('comment');
    if (!opt_noId) {
        commentElement.setAttribute('id', this.id);
    }
    if (this.isMinimized_) {
        commentElement.setAttribute('minimized', true);
    }
    commentElement.textContent = this.getText();
    return commentElement;
};
Blockly.WorkspaceComment.fireCreateEvent = function (comment) {
    if (Blockly.Events.isEnabled()) {
        var existingGroup = Blockly.Events.getGroup();
        if (!existingGroup) {
            Blockly.Events.setGroup(true);
        }
        try {
            Blockly.Events.fire(new Blockly.Events.CommentCreate(comment));
        }
        finally {
            if (!existingGroup) {
                Blockly.Events.setGroup(false);
            }
        }
    }
};
Blockly.WorkspaceComment.fromXml = function (xmlComment, workspace) {
    var info = Blockly.WorkspaceComment.parseAttributes(xmlComment);
    var comment = new Blockly.WorkspaceComment(workspace, info.content, info.h, info.w, info.minimized, info.id);
    if (!isNaN(info.x) && !isNaN(info.y)) {
        comment.moveBy(info.x, info.y);
    }
    Blockly.WorkspaceComment.fireCreateEvent(comment);
    return comment;
};
Blockly.WorkspaceComment.parseAttributes = function (xml) {
    var xmlH = xml.getAttribute('h');
    var xmlW = xml.getAttribute('w');
    return {
        id: xml.getAttribute('id'),
        h: xmlH ? parseInt(xmlH, 10) : 100,
        w: xmlW ? parseInt(xmlW, 10) : 100,
        x: parseInt(xml.getAttribute('x'), 10),
        y: parseInt(xml.getAttribute('y'), 10),
        minimized: xml.getAttribute('minimized') == 'true' || false,
        content: xml.textContent
    };
};
'use strict';
goog.provide('Blockly.WorkspaceCommentSvg');
goog.require('Blockly.Events.CommentCreate');
goog.require('Blockly.Events.CommentDelete');
goog.require('Blockly.Events.CommentMove');
goog.require('Blockly.WorkspaceComment');
Blockly.WorkspaceCommentSvg = function (workspace, content, height, width, minimized, opt_id) {
    this.svgGroup_ = Blockly.utils.createSvgElement('g', {}, null);
    this.svgGroup_.translate_ = '';
    this.svgRect_ = Blockly.utils.createSvgElement('rect', {
        'class': 'scratchCommentRect scratchWorkspaceCommentBorder',
        'x': 0,
        'y': 0,
        'rx': 4 * Blockly.WorkspaceCommentSvg.BORDER_WIDTH,
        'ry': 4 * Blockly.WorkspaceCommentSvg.BORDER_WIDTH
    });
    this.svgGroup_.appendChild(this.svgRect_);
    this.rendered_ = false;
    this.useDragSurface_ =
        Blockly.utils.is3dSupported() && !!workspace.blockDragSurface_;
    Blockly.WorkspaceCommentSvg.superClass_.constructor.call(this, workspace, content, height, width, minimized, opt_id);
    this.render();
};
goog.inherits(Blockly.WorkspaceCommentSvg, Blockly.WorkspaceComment);
Blockly.WorkspaceCommentSvg.DEFAULT_SIZE = 200;
Blockly.WorkspaceCommentSvg.prototype.dispose = function () {
    if (!this.workspace) {
        return;
    }
    if (Blockly.selected == this) {
        this.unselect();
        this.workspace.cancelCurrentGesture();
    }
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.fire(new Blockly.Events.CommentDelete(this));
    }
    goog.dom.removeNode(this.svgGroup_);
    this.svgGroup_ = null;
    this.svgRect_ = null;
    this.disposeInternal_();
    Blockly.Events.disable();
    Blockly.WorkspaceCommentSvg.superClass_.dispose.call(this);
    Blockly.Events.enable();
};
Blockly.WorkspaceCommentSvg.prototype.initSvg = function () {
    goog.asserts.assert(this.workspace.rendered, 'Workspace is headless.');
    if (!this.workspace.options.readOnly && !this.eventsInit_) {
        Blockly.bindEventWithChecks_(this.svgRectTarget_, 'mousedown', this, this.pathMouseDown_);
        Blockly.bindEventWithChecks_(this.svgHandleTarget_, 'mousedown', this, this.pathMouseDown_);
    }
    this.eventsInit_ = true;
    this.updateMovable();
    if (!this.getSvgRoot().parentNode) {
        this.workspace.getBubbleCanvas().appendChild(this.getSvgRoot());
    }
};
Blockly.WorkspaceCommentSvg.prototype.pathMouseDown_ = function (e) {
    var gesture = this.workspace.getGesture(e);
    if (gesture) {
        gesture.handleBubbleStart(e, this);
    }
};
Blockly.WorkspaceCommentSvg.prototype.showContextMenu_ = function (e) {
    if (this.workspace.options.readOnly) {
        return;
    }
    var comment = this;
    var menuOptions = [];
    if (this.isDeletable() && this.isMovable()) {
        menuOptions.push(Blockly.ContextMenu.commentDuplicateOption(comment));
        menuOptions.push(Blockly.ContextMenu.commentDeleteOption(comment));
    }
    Blockly.ContextMenu.show(e, menuOptions, this.RTL);
};
Blockly.WorkspaceCommentSvg.prototype.select = function () {
    if (Blockly.selected == this) {
        return;
    }
    var oldId = null;
    if (Blockly.selected) {
        oldId = Blockly.selected.id;
        Blockly.Events.disable();
        try {
            Blockly.selected.unselect();
        }
        finally {
            Blockly.Events.enable();
        }
    }
    var event = new Blockly.Events.Ui(null, 'selected', oldId, this.id);
    event.workspaceId = this.workspace.id;
    Blockly.Events.fire(event);
    Blockly.selected = this;
    this.addSelect();
};
Blockly.WorkspaceCommentSvg.prototype.unselect = function () {
    if (Blockly.selected != this) {
        return;
    }
    var event = new Blockly.Events.Ui(null, 'selected', this.id, null);
    event.workspaceId = this.workspace.id;
    Blockly.Events.fire(event);
    Blockly.selected = null;
    this.removeSelect();
};
Blockly.WorkspaceCommentSvg.prototype.addSelect = function () {
    Blockly.utils.addClass((this.svgGroup_), 'blocklySelected');
    this.setFocus();
};
Blockly.WorkspaceCommentSvg.prototype.removeSelect = function () {
    Blockly.utils.removeClass((this.svgGroup_), 'blocklySelected');
    this.blurFocus();
};
Blockly.WorkspaceCommentSvg.prototype.addFocus = function () {
    Blockly.utils.addClass((this.svgGroup_), 'blocklyFocused');
};
Blockly.WorkspaceCommentSvg.prototype.removeFocus = function () {
    Blockly.utils.removeClass((this.svgGroup_), 'blocklyFocused');
};
Blockly.WorkspaceCommentSvg.prototype.getRelativeToSurfaceXY = function () {
    var x = 0;
    var y = 0;
    var dragSurfaceGroup = this.useDragSurface_ ?
        this.workspace.blockDragSurface_.getGroup() : null;
    var element = this.getSvgRoot();
    if (element) {
        do {
            var xy = Blockly.utils.getRelativeXY(element);
            x += xy.x;
            y += xy.y;
            if (this.useDragSurface_ &&
                this.workspace.blockDragSurface_.getCurrentBlock() == element) {
                var surfaceTranslation = this.workspace.blockDragSurface_.getSurfaceTranslation();
                x += surfaceTranslation.x;
                y += surfaceTranslation.y;
            }
            element = element.parentNode;
        } while (element && element != this.workspace.getBubbleCanvas() &&
            element != dragSurfaceGroup);
    }
    this.xy_ = new goog.math.Coordinate(x, y);
    return this.xy_;
};
Blockly.WorkspaceCommentSvg.prototype.moveBy = function (dx, dy) {
    var event = new Blockly.Events.CommentMove(this);
    var xy = this.getRelativeToSurfaceXY();
    this.translate(xy.x + dx, xy.y + dy);
    event.recordNew();
    Blockly.Events.fire(event);
    this.workspace.resizeContents();
};
Blockly.WorkspaceCommentSvg.prototype.translate = function (x, y) {
    this.xy_ = new goog.math.Coordinate(x, y);
    this.getSvgRoot().setAttribute('transform', 'translate(' + x + ',' + y + ')');
};
Blockly.WorkspaceCommentSvg.prototype.moveToDragSurface_ = function () {
    if (!this.useDragSurface_) {
        return;
    }
    var xy = this.getRelativeToSurfaceXY();
    this.clearTransformAttributes_();
    this.workspace.blockDragSurface_.translateSurface(xy.x, xy.y);
    this.workspace.blockDragSurface_.setBlocksAndShow(this.getSvgRoot());
};
Blockly.WorkspaceCommentSvg.prototype.moveOffDragSurface_ = function (newXY) {
    if (!this.useDragSurface_) {
        return;
    }
    this.translate(newXY.x, newXY.y);
    this.workspace.blockDragSurface_.clearAndHide(this.workspace.getCanvas());
};
Blockly.WorkspaceCommentSvg.prototype.moveDuringDrag = function (dragSurface, newLoc) {
    if (dragSurface) {
        dragSurface.translateSurface(newLoc.x, newLoc.y);
    }
    else {
        this.svgGroup_.translate_ = 'translate(' + newLoc.x + ',' + newLoc.y + ')';
        this.svgGroup_.setAttribute('transform', this.svgGroup_.translate_ + this.svgGroup_.skew_);
    }
};
Blockly.WorkspaceCommentSvg.prototype.moveTo = function (x, y) {
    this.translate(x, y);
};
Blockly.WorkspaceCommentSvg.prototype.clearTransformAttributes_ = function () {
    Blockly.utils.removeAttribute(this.getSvgRoot(), 'transform');
};
Blockly.WorkspaceCommentSvg.prototype.getBubbleSize = function () {
    if (this.rendered_) {
        return {
            width: parseInt(this.svgRect_.getAttribute('width')),
            height: parseInt(this.svgRect_.getAttribute('height'))
        };
    }
    else {
        this.getHeightWidth();
    }
};
Blockly.WorkspaceCommentSvg.prototype.getBoundingRectangle = function () {
    var blockXY = this.getRelativeToSurfaceXY();
    var commentBounds = this.getHeightWidth();
    var topLeft;
    var bottomRight;
    if (this.RTL) {
        topLeft = new goog.math.Coordinate(blockXY.x - (commentBounds.width), blockXY.y);
        bottomRight = new goog.math.Coordinate(blockXY.x, blockXY.y + commentBounds.height);
    }
    else {
        topLeft = new goog.math.Coordinate(blockXY.x, blockXY.y);
        bottomRight = new goog.math.Coordinate(blockXY.x + commentBounds.width, blockXY.y + commentBounds.height);
    }
    return { topLeft: topLeft, bottomRight: bottomRight };
};
Blockly.WorkspaceCommentSvg.prototype.updateMovable = function () {
    if (this.isMovable()) {
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDraggable');
    }
    else {
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDraggable');
    }
};
Blockly.WorkspaceCommentSvg.prototype.setMovable = function (movable) {
    Blockly.WorkspaceCommentSvg.superClass_.setMovable.call(this, movable);
    this.updateMovable();
};
Blockly.WorkspaceCommentSvg.prototype.setDragging = function (adding) {
    if (adding) {
        var group = this.getSvgRoot();
        group.translate_ = '';
        group.skew_ = '';
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDragging');
    }
    else {
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDragging');
    }
};
Blockly.WorkspaceCommentSvg.prototype.getSvgRoot = function () {
    return this.svgGroup_;
};
Blockly.WorkspaceCommentSvg.prototype.getText = function () {
    return this.textarea_ ? this.textarea_.value : this.content_;
};
Blockly.WorkspaceCommentSvg.prototype.setText = function (text) {
    Blockly.WorkspaceCommentSvg.superClass_.setText.call(this, text);
    if (this.textarea_) {
        this.textarea_.value = text;
    }
};
Blockly.WorkspaceCommentSvg.prototype.setDeleteStyle = function (enable) {
    if (enable) {
        Blockly.utils.addClass((this.svgGroup_), 'blocklyDraggingDelete');
    }
    else {
        Blockly.utils.removeClass((this.svgGroup_), 'blocklyDraggingDelete');
    }
};
Blockly.WorkspaceCommentSvg.prototype.setAutoLayout = function () {
};
Blockly.WorkspaceCommentSvg.fromXml = function (xmlComment, workspace, opt_wsWidth) {
    Blockly.Events.disable();
    try {
        var info = Blockly.WorkspaceComment.parseAttributes(xmlComment);
        var comment = new Blockly.WorkspaceCommentSvg(workspace, info.content, info.h, info.w, info.minimized, info.id);
        if (workspace.rendered) {
            comment.initSvg();
            comment.render(false);
        }
        if (!isNaN(info.x) && !isNaN(info.y)) {
            if (workspace.RTL) {
                var wsWidth = opt_wsWidth || workspace.getWidth();
                comment.moveBy(wsWidth - info.x, info.y);
            }
            else {
                comment.moveBy(info.x, info.y);
            }
        }
    }
    finally {
        Blockly.Events.enable();
    }
    Blockly.WorkspaceComment.fireCreateEvent(comment);
    return comment;
};
Blockly.WorkspaceCommentSvg.prototype.toXmlWithXY = function (opt_noId) {
    var width;
    if (this.workspace.RTL) {
        width = this.workspace.getWidth();
    }
    var element = this.toXml(opt_noId);
    var xy = this.getRelativeToSurfaceXY();
    element.setAttribute('x', Math.round(this.workspace.RTL ? width - xy.x : xy.x));
    element.setAttribute('y', Math.round(xy.y));
    element.setAttribute('h', this.getHeight());
    element.setAttribute('w', this.getWidth());
    return element;
};
'use strict';
goog.provide('Blockly.WorkspaceCommentSvg.render');
goog.require('Blockly.WorkspaceCommentSvg');
Blockly.WorkspaceCommentSvg.BORDER_WIDTH = 1;
Blockly.WorkspaceCommentSvg.RESIZE_SIZE = 16;
Blockly.WorkspaceCommentSvg.TEXTAREA_OFFSET = 12;
Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT = 32;
Blockly.WorkspaceCommentSvg.MINIMIZE_ICON_SIZE = 32;
Blockly.WorkspaceCommentSvg.DELETE_ICON_SIZE = 32;
Blockly.WorkspaceCommentSvg.TOP_BAR_ICON_INSET = 0;
Blockly.WorkspaceCommentSvg.RESIZE_CORNER_PAD = 4;
Blockly.WorkspaceCommentSvg.RESIZE_OUTER_PAD = 8;
Blockly.WorkspaceCommentSvg.MINIMIZE_WIDTH = 200;
Blockly.WorkspaceCommentSvg.prototype.getHeightWidth = function () {
    return { width: this.getWidth(), height: this.getHeight() };
};
Blockly.WorkspaceCommentSvg.prototype.render = function () {
    if (this.rendered_) {
        return;
    }
    var size = this.getHeightWidth();
    this.commentEditor_ = this.createEditor_();
    this.svgGroup_.appendChild(this.commentEditor_);
    this.createCommentTopBar_();
    this.svgRectTarget_ = Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyDraggable scratchCommentTarget',
        'x': 0,
        'y': Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT,
        'rx': 4 * Blockly.WorkspaceCommentSvg.BORDER_WIDTH,
        'ry': 4 * Blockly.WorkspaceCommentSvg.BORDER_WIDTH
    });
    this.svgGroup_.appendChild(this.svgRectTarget_);
    this.addResizeDom_();
    if (this.isMinimized()) {
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-up.svg');
        this.commentEditor_.setAttribute('display', 'none');
        this.resizeGroup_.setAttribute('display', 'none');
    }
    else {
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-down.svg');
        this.topBarLabel_.setAttribute('display', 'none');
    }
    this.setSize(size.width, size.height);
    this.textarea_.value = this.content_;
    this.rendered_ = true;
    if (this.resizeGroup_) {
        Blockly.bindEventWithChecks_(this.resizeGroup_, 'mousedown', this, this.resizeMouseDown_);
        Blockly.bindEventWithChecks_(this.resizeGroup_, 'mouseup', this, this.resizeMouseUp_);
    }
    Blockly.bindEventWithChecks_(this.minimizeArrow_, 'mousedown', this, this.minimizeArrowMouseDown_, true);
    Blockly.bindEventWithChecks_(this.minimizeArrow_, 'mouseout', this, this.minimizeArrowMouseOut_, true);
    Blockly.bindEventWithChecks_(this.minimizeArrow_, 'mouseup', this, this.minimizeArrowMouseUp_, true);
    Blockly.bindEventWithChecks_(this.deleteIcon_, 'mousedown', this, this.deleteMouseDown_, true);
    Blockly.bindEventWithChecks_(this.deleteIcon_, 'mouseout', this, this.deleteMouseOut_, true);
    Blockly.bindEventWithChecks_(this.deleteIcon_, 'mouseup', this, this.deleteMouseUp_, true);
};
Blockly.WorkspaceCommentSvg.prototype.createEditor_ = function () {
    this.foreignObject_ = Blockly.utils.createSvgElement('foreignObject', {
        'x': Blockly.WorkspaceCommentSvg.BORDER_WIDTH,
        'y': Blockly.WorkspaceCommentSvg.BORDER_WIDTH + Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT,
        'class': 'scratchCommentForeignObject'
    }, null);
    var body = document.createElementNS(Blockly.HTML_NS, 'body');
    body.setAttribute('xmlns', Blockly.HTML_NS);
    body.className = 'blocklyMinimalBody scratchCommentBody';
    var textarea = document.createElementNS(Blockly.HTML_NS, 'textarea');
    textarea.className = 'scratchCommentTextarea scratchCommentText';
    textarea.setAttribute('dir', this.RTL ? 'RTL' : 'LTR');
    textarea.setAttribute('maxlength', Blockly.WorkspaceComment.COMMENT_TEXT_LIMIT);
    textarea.setAttribute('placeholder', Blockly.Msg.WORKSPACE_COMMENT_DEFAULT_TEXT);
    body.appendChild(textarea);
    this.textarea_ = textarea;
    this.textarea_.style.margin = (Blockly.WorkspaceCommentSvg.TEXTAREA_OFFSET) + 'px';
    this.foreignObject_.appendChild(body);
    Blockly.bindEventWithChecks_(textarea, 'mousedown', this, function (e) {
        e.stopPropagation();
    }, true, true);
    Blockly.bindEventWithChecks_(textarea, 'wheel', this, function (e) {
        e.stopPropagation();
    });
    Blockly.bindEventWithChecks_(textarea, 'change', this, function (_e) {
        if (this.text_ != textarea.value) {
            this.setText(textarea.value);
        }
    });
    this.labelText_ = this.getLabelText();
    return this.foreignObject_;
};
Blockly.WorkspaceCommentSvg.prototype.addResizeDom_ = function () {
    this.resizeGroup_ = Blockly.utils.createSvgElement('g', {
        'class': this.RTL ? 'scratchCommentResizeSW' : 'scratchCommentResizeSE'
    }, this.svgGroup_);
    var resizeSize = Blockly.WorkspaceCommentSvg.RESIZE_SIZE;
    var outerPad = Blockly.ScratchBubble.RESIZE_OUTER_PAD;
    var cornerPad = Blockly.ScratchBubble.RESIZE_CORNER_PAD;
    Blockly.utils.createSvgElement('polygon', {
        'points': [
            -outerPad, resizeSize + cornerPad,
            resizeSize + cornerPad, resizeSize + cornerPad,
            resizeSize + cornerPad, -outerPad
        ].join(' ')
    }, this.resizeGroup_);
    Blockly.utils.createSvgElement('line', {
        'class': 'blocklyResizeLine',
        'x1': resizeSize / 3, 'y1': resizeSize - 1,
        'x2': resizeSize - 1, 'y2': resizeSize / 3
    }, this.resizeGroup_);
    Blockly.utils.createSvgElement('line', {
        'class': 'blocklyResizeLine',
        'x1': resizeSize * 2 / 3, 'y1': resizeSize - 1,
        'x2': resizeSize - 1, 'y2': resizeSize * 2 / 3
    }, this.resizeGroup_);
};
Blockly.WorkspaceCommentSvg.prototype.createCommentTopBar_ = function () {
    this.svgHandleTarget_ = Blockly.utils.createSvgElement('rect', {
        'class': 'blocklyDraggable scratchCommentTopBar',
        'rx': Blockly.WorkspaceCommentSvg.BORDER_WIDTH,
        'ry': Blockly.WorkspaceCommentSvg.BORDER_WIDTH,
        'height': Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT
    }, this.svgGroup_);
    this.createTopBarIcons_();
    this.createTopBarLabel_();
};
Blockly.WorkspaceCommentSvg.prototype.createTopBarLabel_ = function () {
    this.topBarLabel_ = Blockly.utils.createSvgElement('text', {
        'class': 'scratchCommentText',
        'x': this.width_ / 2,
        'y': (Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT / 2) + Blockly.WorkspaceCommentSvg.BORDER_WIDTH,
        'text-anchor': 'middle',
        'dominant-baseline': 'middle'
    }, this.svgGroup_);
    var labelTextNode = document.createTextNode(this.labelText_);
    this.topBarLabel_.appendChild(labelTextNode);
};
Blockly.WorkspaceCommentSvg.prototype.createTopBarIcons_ = function () {
    var topBarMiddleY = (Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT / 2) +
        Blockly.WorkspaceCommentSvg.BORDER_WIDTH;
    var xInset = Blockly.WorkspaceCommentSvg.TOP_BAR_ICON_INSET;
    this.minimizeArrow_ = Blockly.utils.createSvgElement('image', {
        'x': xInset,
        'y': topBarMiddleY - Blockly.WorkspaceCommentSvg.MINIMIZE_ICON_SIZE / 2,
        'width': Blockly.WorkspaceCommentSvg.MINIMIZE_ICON_SIZE,
        'height': Blockly.WorkspaceCommentSvg.MINIMIZE_ICON_SIZE
    }, this.svgGroup_);
    this.deleteIcon_ = Blockly.utils.createSvgElement('image', {
        'x': xInset,
        'y': topBarMiddleY - Blockly.WorkspaceCommentSvg.DELETE_ICON_SIZE / 2,
        'width': Blockly.WorkspaceCommentSvg.DELETE_ICON_SIZE,
        'height': Blockly.WorkspaceCommentSvg.DELETE_ICON_SIZE
    }, this.svgGroup_);
    this.deleteIcon_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'delete-x.svg');
};
Blockly.WorkspaceCommentSvg.prototype.minimizeArrowMouseDown_ = function (e) {
    this.shouldToggleMinimize_ = true;
    e.stopPropagation();
};
Blockly.WorkspaceCommentSvg.prototype.minimizeArrowMouseOut_ = function (_e) {
    this.shouldToggleMinimize_ = false;
};
Blockly.WorkspaceCommentSvg.prototype.minimizeArrowMouseUp_ = function (e) {
    if (this.shouldToggleMinimize_) {
        this.shouldToggleMinimize = false;
        this.toggleMinimize_();
    }
    e.stopPropagation();
};
Blockly.WorkspaceCommentSvg.prototype.deleteMouseDown_ = function (e) {
    this.shouldDelete_ = true;
    e.stopPropagation();
};
Blockly.WorkspaceCommentSvg.prototype.deleteMouseOut_ = function (_e) {
    this.shouldDelete_ = false;
};
Blockly.WorkspaceCommentSvg.prototype.deleteMouseUp_ = function (e) {
    if (this.shouldDelete_) {
        this.dispose();
    }
    e.stopPropagation();
};
Blockly.WorkspaceCommentSvg.prototype.resizeMouseDown_ = function (e) {
    this.resizeStartSize_ = { width: this.width_, height: this.height_ };
    this.unbindDragEvents_();
    this.workspace.setResizesEnabled(false);
    if (Blockly.utils.isRightButton(e)) {
        e.stopPropagation();
        return;
    }
    this.workspace.startDrag(e, new goog.math.Coordinate(this.workspace.RTL ? -this.width_ : this.width_, this.height_));
    this.onMouseUpWrapper_ = Blockly.bindEventWithChecks_(document, 'mouseup', this, this.resizeMouseUp_);
    this.onMouseMoveWrapper_ = Blockly.bindEventWithChecks_(document, 'mousemove', this, this.resizeMouseMove_);
    Blockly.hideChaff();
    e.stopPropagation();
};
Blockly.WorkspaceCommentSvg.prototype.setRenderedMinimizeState_ = function (minimize, labelText) {
    if (minimize) {
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-up.svg');
        this.commentEditor_.setAttribute('display', 'none');
        if (this.resizeGroup_) {
            this.resizeGroup_.setAttribute('display', 'none');
        }
        if (labelText && this.labelText_ != labelText) {
            this.topBarLabel_.textContent = labelText;
        }
        Blockly.utils.removeAttribute(this.topBarLabel_, 'display');
    }
    else {
        this.minimizeArrow_.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', Blockly.mainWorkspace.options.pathToMedia + 'comment-arrow-down.svg');
        this.topBarLabel_.setAttribute('display', 'none');
        Blockly.utils.removeAttribute(this.commentEditor_, 'display');
        if (this.resizeGroup_) {
            Blockly.utils.removeAttribute(this.resizeGroup_, 'display');
        }
    }
};
Blockly.WorkspaceCommentSvg.prototype.unbindDragEvents_ = function () {
    if (this.onMouseUpWrapper_) {
        Blockly.unbindEvent_(this.onMouseUpWrapper_);
        this.onMouseUpWrapper_ = null;
    }
    if (this.onMouseMoveWrapper_) {
        Blockly.unbindEvent_(this.onMouseMoveWrapper_);
        this.onMouseMoveWrapper_ = null;
    }
};
Blockly.WorkspaceCommentSvg.prototype.resizeMouseUp_ = function () {
    Blockly.Touch.clearTouchIdentifier();
    this.unbindDragEvents_();
    var oldHW = this.resizeStartSize_;
    this.resizeStartSize_ = null;
    if (this.width_ == oldHW.width && this.height_ == oldHW.height) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.CommentChange(this, { width: oldHW.width, height: oldHW.height }, { width: this.width_, height: this.height_ }));
    this.workspace.setResizesEnabled(true);
};
Blockly.WorkspaceCommentSvg.prototype.resizeMouseMove_ = function (e) {
    this.autoLayout_ = false;
    var newXY = this.workspace.moveDrag(e);
    var disabled = false;
    if (Blockly.Events.isEnabled()) {
        Blockly.Events.disable();
        disabled = true;
    }
    this.setSize(this.RTL ? -newXY.x : newXY.x, newXY.y);
    if (disabled) {
        Blockly.Events.enable();
    }
};
Blockly.WorkspaceCommentSvg.prototype.resizeComment_ = function () {
    var doubleBorderWidth = 2 * Blockly.WorkspaceCommentSvg.BORDER_WIDTH;
    var topOffset = Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT;
    var textOffset = Blockly.WorkspaceCommentSvg.TEXTAREA_OFFSET * 2;
    this.foreignObject_.setAttribute('width', this.width_ - doubleBorderWidth);
    this.foreignObject_.setAttribute('height', this.height_ - doubleBorderWidth - topOffset);
    if (this.RTL) {
        this.foreignObject_.setAttribute('x', -this.width_);
    }
    this.textarea_.style.width =
        (this.width_ - textOffset) + 'px';
    this.textarea_.style.height =
        (this.height_ - doubleBorderWidth - textOffset - topOffset) + 'px';
};
Blockly.WorkspaceCommentSvg.prototype.setSize = function (width, height) {
    var oldWidth = this.width_;
    var oldHeight = this.height_;
    var doubleBorderWidth = 2 * Blockly.WorkspaceCommentSvg.BORDER_WIDTH;
    if (this.isMinimized_) {
        width = Blockly.WorkspaceCommentSvg.MINIMIZE_WIDTH;
        height = Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT;
    }
    else {
        width = Math.max(width, doubleBorderWidth + 50);
        height = Math.max(height, doubleBorderWidth + 20 + Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT);
        this.width_ = width;
        this.height_ = height;
        Blockly.Events.fire(new Blockly.Events.CommentChange(this, { width: oldWidth, height: oldHeight }, { width: this.width_, height: this.height_ }));
    }
    this.svgRect_.setAttribute('width', width);
    this.svgRect_.setAttribute('height', height);
    this.svgRectTarget_.setAttribute('width', width);
    this.svgRectTarget_.setAttribute('height', height - Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT);
    this.svgHandleTarget_.setAttribute('width', width);
    this.svgHandleTarget_.setAttribute('height', Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT);
    if (this.RTL) {
        this.minimizeArrow_.setAttribute('x', width -
            (Blockly.WorkspaceCommentSvg.MINIMIZE_ICON_SIZE) -
            Blockly.WorkspaceCommentSvg.TOP_BAR_ICON_INSET);
        this.deleteIcon_.setAttribute('x', (-width +
            Blockly.WorkspaceCommentSvg.TOP_BAR_ICON_INSET));
        this.svgRect_.setAttribute('transform', 'scale(-1 1)');
        this.svgHandleTarget_.setAttribute('transform', 'scale(-1 1)');
        this.svgHandleTarget_.setAttribute('transform', 'translate(' + -width + ', 1)');
        this.minimizeArrow_.setAttribute('transform', 'translate(' + -width + ', 1)');
        this.deleteIcon_.setAttribute('tranform', 'translate(' + -width + ', 1)');
        this.svgRectTarget_.setAttribute('transform', 'translate(' + -width + ', 1)');
        this.topBarLabel_.setAttribute('transform', 'translate(' + -width + ', 1)');
    }
    else {
        this.deleteIcon_.setAttribute('x', width -
            Blockly.WorkspaceCommentSvg.DELETE_ICON_SIZE -
            Blockly.WorkspaceCommentSvg.TOP_BAR_ICON_INSET);
    }
    var resizeSize = Blockly.WorkspaceCommentSvg.RESIZE_SIZE;
    if (this.resizeGroup_) {
        if (this.RTL) {
            this.resizeGroup_.setAttribute('transform', 'translate(' +
                (-width + doubleBorderWidth + resizeSize) + ',' +
                (height - doubleBorderWidth - resizeSize) + ') scale(-1 1)');
        }
        else {
            this.resizeGroup_.setAttribute('transform', 'translate(' +
                (width - doubleBorderWidth - resizeSize) + ',' +
                (height - doubleBorderWidth - resizeSize) + ')');
        }
    }
    if (this.isMinimized_) {
        this.topBarLabel_.setAttribute('x', width / 2);
        this.topBarLabel_.setAttribute('y', height / 2);
    }
    this.resizeComment_();
};
Blockly.WorkspaceComment.prototype.toggleMinimize_ = function () {
    this.setMinimized(!this.isMinimized_);
};
Blockly.WorkspaceComment.prototype.setMinimized = function (minimize) {
    if (this.isMinimized_ == minimize) {
        return;
    }
    Blockly.Events.fire(new Blockly.Events.CommentChange(this, { minimized: this.isMinimized_ }, { minimized: minimize }));
    this.isMinimized_ = minimize;
    if (minimize) {
        if (this.rendered_) {
            this.setRenderedMinimizeState_(true, this.getLabelText());
        }
        this.setSize(Blockly.WorkspaceCommentSvg.MINIMIZE_WIDTH, Blockly.WorkspaceCommentSvg.TOP_BAR_HEIGHT);
    }
    else {
        if (this.rendered_) {
            this.setRenderedMinimizeState_(false);
        }
        this.setText(this.content_);
        this.setSize(this.width_, this.height_);
    }
};
Blockly.WorkspaceCommentSvg.prototype.disposeInternal_ = function () {
    this.textarea_ = null;
    this.foreignObject_ = null;
    this.svgRect_ = null;
    this.svgRectTarget_ = null;
    this.svgHandleTarget_ = null;
};
Blockly.WorkspaceCommentSvg.prototype.setFocus = function () {
    var comment = this;
    this.focused_ = true;
    comment.textarea_.focus();
    setTimeout(function () {
        comment.addFocus();
        Blockly.utils.addClass(comment.svgRectTarget_, 'scratchCommentTargetFocused');
        Blockly.utils.addClass(comment.svgHandleTarget_, 'scratchCommentHandleTargetFocused');
    }, 0);
};
Blockly.WorkspaceCommentSvg.prototype.blurFocus = function () {
    var comment = this;
    this.focused_ = false;
    comment.textarea_.blur();
    setTimeout(function () {
        if (comment.svgGroup_) {
            comment.removeFocus();
            Blockly.utils.removeClass(comment.svgRectTarget_, 'scratchCommentTargetFocused');
            Blockly.utils.removeClass(comment.svgHandleTarget_, 'scratchCommentHandleTargetFocused');
        }
    }, 0);
};
'use strict';
goog.provide('Blockly.WorkspaceDragSurfaceSvg');
goog.require('Blockly.utils');
goog.require('goog.asserts');
goog.require('goog.math.Coordinate');
Blockly.WorkspaceDragSurfaceSvg = function (container) {
    this.container_ = container;
    this.createDom();
};
Blockly.WorkspaceDragSurfaceSvg.prototype.SVG_ = null;
Blockly.WorkspaceDragSurfaceSvg.prototype.dragGroup_ = null;
Blockly.WorkspaceDragSurfaceSvg.prototype.container_ = null;
Blockly.WorkspaceDragSurfaceSvg.prototype.createDom = function () {
    if (this.SVG_) {
        return;
    }
    this.SVG_ = Blockly.utils.createSvgElement('svg', {
        'xmlns': Blockly.SVG_NS,
        'xmlns:html': Blockly.HTML_NS,
        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
        'version': '1.1',
        'class': 'blocklyWsDragSurface blocklyOverflowVisible'
    }, null);
    this.container_.appendChild(this.SVG_);
};
Blockly.WorkspaceDragSurfaceSvg.prototype.translateSurface = function (x, y) {
    var fixedX = x.toFixed(0);
    var fixedY = y.toFixed(0);
    this.SVG_.style.display = 'block';
    Blockly.utils.setCssTransform(this.SVG_, 'translate3d(' + fixedX + 'px, ' + fixedY + 'px, 0px)');
};
Blockly.WorkspaceDragSurfaceSvg.prototype.getSurfaceTranslation = function () {
    return Blockly.utils.getRelativeXY(this.SVG_);
};
Blockly.WorkspaceDragSurfaceSvg.prototype.clearAndHide = function (newSurface) {
    if (!newSurface) {
        throw 'Couldn\'t clear and hide the drag surface: missing new surface.';
    }
    var blockCanvas = this.SVG_.childNodes[0];
    var bubbleCanvas = this.SVG_.childNodes[1];
    if (!blockCanvas || !bubbleCanvas ||
        !Blockly.utils.hasClass(blockCanvas, 'blocklyBlockCanvas') ||
        !Blockly.utils.hasClass(bubbleCanvas, 'blocklyBubbleCanvas')) {
        throw 'Couldn\'t clear and hide the drag surface.  A node was missing.';
    }
    if (this.previousSibling_ != null) {
        Blockly.utils.insertAfter(blockCanvas, this.previousSibling_);
    }
    else {
        newSurface.insertBefore(blockCanvas, newSurface.firstChild);
    }
    Blockly.utils.insertAfter(bubbleCanvas, blockCanvas);
    this.SVG_.style.display = 'none';
    goog.asserts.assert(this.SVG_.childNodes.length == 0, 'Drag surface was not cleared.');
    Blockly.utils.setCssTransform(this.SVG_, '');
    this.previousSibling_ = null;
};
Blockly.WorkspaceDragSurfaceSvg.prototype.setContentsAndShow = function (blockCanvas, bubbleCanvas, previousSibling, width, height, scale) {
    goog.asserts.assert(this.SVG_.childNodes.length == 0, 'Already dragging a block.');
    this.previousSibling_ = previousSibling;
    blockCanvas.setAttribute('transform', 'translate(0, 0) scale(' + scale + ')');
    bubbleCanvas.setAttribute('transform', 'translate(0, 0) scale(' + scale + ')');
    this.SVG_.setAttribute('width', width);
    this.SVG_.setAttribute('height', height);
    this.SVG_.appendChild(blockCanvas);
    this.SVG_.appendChild(bubbleCanvas);
    this.SVG_.style.display = 'block';
};
'use strict';
goog.provide('Blockly.WorkspaceSvg');
goog.require('Blockly.Colours');
goog.require('Blockly.ConnectionDB');
goog.require('Blockly.constants');
goog.require('Blockly.DataCategory');
goog.require('Blockly.DropDownDiv');
goog.require('Blockly.Events.BlockCreate');
goog.require('Blockly.Gesture');
goog.require('Blockly.Grid');
goog.require('Blockly.Options');
goog.require('Blockly.scratchBlocksUtils');
goog.require('Blockly.ScrollbarPair');
goog.require('Blockly.Touch');
goog.require('Blockly.Trashcan');
goog.require('Blockly.Workspace');
goog.require('Blockly.WorkspaceAudio');
goog.require('Blockly.WorkspaceComment');
goog.require('Blockly.WorkspaceCommentSvg');
goog.require('Blockly.WorkspaceCommentSvg.render');
goog.require('Blockly.WorkspaceDragSurfaceSvg');
goog.require('Blockly.Xml');
goog.require('Blockly.ZoomControls');
goog.require('goog.array');
goog.require('goog.dom');
goog.require('goog.math.Coordinate');
goog.require('goog.userAgent');
goog.require('goog.math.Rect');
Blockly.WorkspaceSvg = function (options, opt_blockDragSurface, opt_wsDragSurface) {
    Blockly.WorkspaceSvg.superClass_.constructor.call(this, options);
    this.getMetrics =
        options.getMetrics || Blockly.WorkspaceSvg.getTopLevelWorkspaceMetrics_;
    this.setMetrics =
        options.setMetrics || Blockly.WorkspaceSvg.setTopLevelWorkspaceMetrics_;
    Blockly.ConnectionDB.init(this);
    if (opt_blockDragSurface) {
        this.blockDragSurface_ = opt_blockDragSurface;
    }
    if (opt_wsDragSurface) {
        this.workspaceDragSurface_ = opt_wsDragSurface;
    }
    this.useWorkspaceDragSurface_ =
        this.workspaceDragSurface_ && Blockly.utils.is3dSupported();
    this.highlightedBlocks_ = [];
    this.glowingBlocks_ = [];
    this.audioManager_ = new Blockly.WorkspaceAudio(options.parentWorkspace);
    this.grid_ = this.options.gridPattern ?
        new Blockly.Grid(options.gridPattern, options.gridOptions) : null;
    this.registerToolboxCategoryCallback(Blockly.VARIABLE_CATEGORY_NAME, Blockly.DataCategory);
    this.registerToolboxCategoryCallback(Blockly.PROCEDURE_CATEGORY_NAME, Blockly.Procedures.flyoutCategory);
};
goog.inherits(Blockly.WorkspaceSvg, Blockly.Workspace);
Blockly.WorkspaceSvg.prototype.resizeHandlerWrapper_ = null;
Blockly.WorkspaceSvg.prototype.rendered = true;
Blockly.WorkspaceSvg.prototype.isVisible_ = true;
Blockly.WorkspaceSvg.prototype.isFlyout = false;
Blockly.WorkspaceSvg.prototype.isMutator = false;
Blockly.WorkspaceSvg.prototype.resizesEnabled_ = true;
Blockly.WorkspaceSvg.prototype.toolboxRefreshEnabled_ = true;
Blockly.WorkspaceSvg.prototype.scrollX = 0;
Blockly.WorkspaceSvg.prototype.scrollY = 0;
Blockly.WorkspaceSvg.prototype.startScrollX = 0;
Blockly.WorkspaceSvg.prototype.startScrollY = 0;
Blockly.WorkspaceSvg.prototype.dragDeltaXY_ = null;
Blockly.WorkspaceSvg.prototype.scale = 1;
Blockly.WorkspaceSvg.prototype.trashcan = null;
Blockly.WorkspaceSvg.prototype.scrollbar = null;
Blockly.WorkspaceSvg.prototype.currentGesture_ = null;
Blockly.WorkspaceSvg.prototype.blockDragSurface_ = null;
Blockly.WorkspaceSvg.prototype.workspaceDragSurface_ = null;
Blockly.WorkspaceSvg.prototype.useWorkspaceDragSurface_ = false;
Blockly.WorkspaceSvg.prototype.isDragSurfaceActive_ = false;
Blockly.WorkspaceSvg.prototype.injectionDiv_ = null;
Blockly.WorkspaceSvg.prototype.lastRecordedPageScroll_ = null;
Blockly.WorkspaceSvg.prototype.flyoutButtonCallbacks_ = {};
Blockly.WorkspaceSvg.prototype.toolboxCategoryCallbacks_ = {};
Blockly.WorkspaceSvg.prototype.inverseScreenCTM_ = null;
Blockly.WorkspaceSvg.prototype.inverseScreenCTMDirty_ = true;
Blockly.WorkspaceSvg.prototype.getInverseScreenCTM = function () {
    if (this.inverseScreenCTMDirty_) {
        var ctm = this.getParentSvg().getScreenCTM();
        if (ctm) {
            this.inverseScreenCTM_ = ctm.inverse();
            this.inverseScreenCTMDirty_ = false;
        }
    }
    return this.inverseScreenCTM_;
};
Blockly.WorkspaceSvg.prototype.isVisible = function () {
    return this.isVisible_;
};
Blockly.WorkspaceSvg.prototype.updateInverseScreenCTM = function () {
    this.inverseScreenCTMDirty_ = true;
};
Blockly.WorkspaceSvg.prototype.getSvgXY = function (element) {
    var x = 0;
    var y = 0;
    var scale = 1;
    if (goog.dom.contains(this.getCanvas(), element) ||
        goog.dom.contains(this.getBubbleCanvas(), element)) {
        scale = this.scale;
    }
    do {
        var xy = Blockly.utils.getRelativeXY(element);
        if (element == this.getCanvas() ||
            element == this.getBubbleCanvas()) {
            scale = 1;
        }
        x += xy.x * scale;
        y += xy.y * scale;
        element = element.parentNode;
    } while (element && element != this.getParentSvg());
    return new goog.math.Coordinate(x, y);
};
Blockly.WorkspaceSvg.prototype.getOriginOffsetInPixels = function () {
    return Blockly.utils.getInjectionDivXY_(this.svgBlockCanvas_);
};
Blockly.WorkspaceSvg.prototype.getInjectionDiv = function () {
    if (!this.injectionDiv_) {
        var element = this.svgGroup_;
        while (element) {
            var classes = element.getAttribute('class') || '';
            if ((' ' + classes + ' ').indexOf(' injectionDiv ') != -1) {
                this.injectionDiv_ = element;
                break;
            }
            element = element.parentNode;
        }
    }
    return this.injectionDiv_;
};
Blockly.WorkspaceSvg.prototype.setResizeHandlerWrapper = function (handler) {
    this.resizeHandlerWrapper_ = handler;
};
Blockly.WorkspaceSvg.prototype.createDom = function (opt_backgroundClass) {
    this.svgGroup_ = Blockly.utils.createSvgElement('g', { 'class': 'blocklyWorkspace' }, null);
    if (opt_backgroundClass) {
        this.svgBackground_ = Blockly.utils.createSvgElement('rect', { 'height': '100%', 'width': '100%', 'class': opt_backgroundClass }, this.svgGroup_);
        if (opt_backgroundClass == 'blocklyMainBackground' && this.grid_) {
            this.svgBackground_.style.fill =
                'url(#' + this.grid_.getPatternId() + ')';
        }
    }
    this.svgBlockCanvas_ = Blockly.utils.createSvgElement('g', { 'class': 'blocklyBlockCanvas' }, this.svgGroup_, this);
    this.svgBubbleCanvas_ = Blockly.utils.createSvgElement('g', { 'class': 'blocklyBubbleCanvas' }, this.svgGroup_, this);
    var bottom = Blockly.Scrollbar.scrollbarThickness;
    if (this.options.hasTrashcan) {
        bottom = this.addTrashcan_(bottom);
    }
    if (this.options.zoomOptions && this.options.zoomOptions.controls) {
        this.addZoomControls_(bottom);
    }
    if (!this.isFlyout) {
        Blockly.bindEventWithChecks_(this.svgGroup_, 'mousedown', this, this.onMouseDown_);
        if (this.options.zoomOptions && this.options.zoomOptions.wheel) {
            Blockly.bindEventWithChecks_(this.svgGroup_, 'wheel', this, this.onMouseWheel_);
        }
    }
    if (this.options.hasCategories) {
        this.toolbox_ = new Blockly.Toolbox(this);
    }
    if (this.grid_) {
        this.grid_.update(this.scale);
    }
    this.recordCachedAreas();
    return this.svgGroup_;
};
Blockly.WorkspaceSvg.prototype.dispose = function () {
    this.rendered = false;
    if (this.currentGesture_) {
        this.currentGesture_.cancel();
    }
    Blockly.WorkspaceSvg.superClass_.dispose.call(this);
    if (this.svgGroup_) {
        goog.dom.removeNode(this.svgGroup_);
        this.svgGroup_ = null;
    }
    this.svgBlockCanvas_ = null;
    this.svgBubbleCanvas_ = null;
    if (this.toolbox_) {
        this.toolbox_.dispose();
        this.toolbox_ = null;
    }
    if (this.flyout_) {
        this.flyout_.dispose();
        this.flyout_ = null;
    }
    if (this.trashcan) {
        this.trashcan.dispose();
        this.trashcan = null;
    }
    if (this.scrollbar) {
        this.scrollbar.dispose();
        this.scrollbar = null;
    }
    if (this.zoomControls_) {
        this.zoomControls_.dispose();
        this.zoomControls_ = null;
    }
    if (this.audioManager_) {
        this.audioManager_.dispose();
        this.audioManager_ = null;
    }
    if (this.grid_) {
        this.grid_.dispose();
        this.grid_ = null;
    }
    if (this.toolboxCategoryCallbacks_) {
        this.toolboxCategoryCallbacks_ = null;
    }
    if (this.flyoutButtonCallbacks_) {
        this.flyoutButtonCallbacks_ = null;
    }
    if (!this.options.parentWorkspace) {
        goog.dom.removeNode(this.getParentSvg().parentNode);
    }
    if (this.resizeHandlerWrapper_) {
        Blockly.unbindEvent_(this.resizeHandlerWrapper_);
        this.resizeHandlerWrapper_ = null;
    }
};
Blockly.WorkspaceSvg.prototype.newBlock = function (prototypeName, opt_id) {
    return new Blockly.BlockSvg(this, prototypeName, opt_id);
};
Blockly.WorkspaceSvg.prototype.addTrashcan_ = function (bottom) {
    this.trashcan = new Blockly.Trashcan(this);
    var svgTrashcan = this.trashcan.createDom();
    this.svgGroup_.insertBefore(svgTrashcan, this.svgBlockCanvas_);
    return this.trashcan.init(bottom);
};
Blockly.WorkspaceSvg.prototype.addZoomControls_ = function (bottom) {
    this.zoomControls_ = new Blockly.ZoomControls(this);
    var svgZoomControls = this.zoomControls_.createDom();
    this.svgGroup_.appendChild(svgZoomControls);
    return this.zoomControls_.init(bottom);
};
Blockly.WorkspaceSvg.prototype.addFlyout_ = function (tagName) {
    var workspaceOptions = {
        disabledPatternId: this.options.disabledPatternId,
        parentWorkspace: this,
        RTL: this.RTL,
        oneBasedIndex: this.options.oneBasedIndex,
        horizontalLayout: this.horizontalLayout,
        toolboxPosition: this.options.toolboxPosition,
        stackGlowFilterId: this.options.stackGlowFilterId
    };
    if (this.horizontalLayout) {
        this.flyout_ = new Blockly.HorizontalFlyout(workspaceOptions);
    }
    else {
        this.flyout_ = new Blockly.VerticalFlyout(workspaceOptions);
    }
    this.flyout_.autoClose = false;
    return this.flyout_.createDom(tagName);
};
Blockly.WorkspaceSvg.prototype.getFlyout = function () {
    if (this.flyout_) {
        return this.flyout_;
    }
    if (this.toolbox_) {
        return this.toolbox_.flyout_;
    }
    return null;
};
Blockly.WorkspaceSvg.prototype.getToolbox = function () {
    return this.toolbox_;
};
Blockly.WorkspaceSvg.prototype.updateScreenCalculations_ = function () {
    this.updateInverseScreenCTM();
    this.recordCachedAreas();
};
Blockly.WorkspaceSvg.prototype.resizeContents = function () {
    if (!this.resizesEnabled_ || !this.rendered) {
        return;
    }
    if (this.scrollbar) {
        this.scrollbar.resize();
    }
    this.updateInverseScreenCTM();
};
Blockly.WorkspaceSvg.prototype.resize = function () {
    if (this.toolbox_) {
        this.toolbox_.position();
    }
    if (this.flyout_) {
        this.flyout_.position();
    }
    if (this.trashcan) {
        this.trashcan.position();
    }
    if (this.zoomControls_) {
        this.zoomControls_.position();
    }
    if (this.scrollbar) {
        this.scrollbar.resize();
    }
    this.updateScreenCalculations_();
};
Blockly.WorkspaceSvg.prototype.updateScreenCalculationsIfScrolled
    = function () {
        var currScroll = goog.dom.getDocumentScroll();
        if (!goog.math.Coordinate.equals(this.lastRecordedPageScroll_, currScroll)) {
            this.lastRecordedPageScroll_ = currScroll;
            this.updateScreenCalculations_();
        }
    };
Blockly.WorkspaceSvg.prototype.getCanvas = function () {
    return this.svgBlockCanvas_;
};
Blockly.WorkspaceSvg.prototype.getBubbleCanvas = function () {
    return this.svgBubbleCanvas_;
};
Blockly.WorkspaceSvg.prototype.getParentSvg = function () {
    if (this.cachedParentSvg_) {
        return this.cachedParentSvg_;
    }
    var element = this.svgGroup_;
    while (element) {
        if (element.tagName == 'svg') {
            this.cachedParentSvg_ = element;
            return element;
        }
        element = element.parentNode;
    }
    return null;
};
Blockly.WorkspaceSvg.prototype.translate = function (x, y) {
    if (this.useWorkspaceDragSurface_ && this.isDragSurfaceActive_) {
        this.workspaceDragSurface_.translateSurface(x, y);
    }
    else {
        var translation = 'translate(' + x + ',' + y + ') ' +
            'scale(' + this.scale + ')';
        this.svgBlockCanvas_.setAttribute('transform', translation);
        this.svgBubbleCanvas_.setAttribute('transform', translation);
    }
    if (this.blockDragSurface_) {
        this.blockDragSurface_.translateAndScaleGroup(x, y, this.scale);
    }
};
Blockly.WorkspaceSvg.prototype.resetDragSurface = function () {
    if (!this.useWorkspaceDragSurface_) {
        return;
    }
    this.isDragSurfaceActive_ = false;
    var trans = this.workspaceDragSurface_.getSurfaceTranslation();
    this.workspaceDragSurface_.clearAndHide(this.svgGroup_);
    var translation = 'translate(' + trans.x + ',' + trans.y + ') ' +
        'scale(' + this.scale + ')';
    this.svgBlockCanvas_.setAttribute('transform', translation);
    this.svgBubbleCanvas_.setAttribute('transform', translation);
};
Blockly.WorkspaceSvg.prototype.setupDragSurface = function () {
    if (!this.useWorkspaceDragSurface_) {
        return;
    }
    if (this.isDragSurfaceActive_) {
        return;
    }
    this.isDragSurfaceActive_ = true;
    var previousElement = this.svgBlockCanvas_.previousSibling;
    var width = parseInt(this.getParentSvg().getAttribute('width'), 10);
    var height = parseInt(this.getParentSvg().getAttribute('height'), 10);
    var coord = Blockly.utils.getRelativeXY(this.svgBlockCanvas_);
    this.workspaceDragSurface_.setContentsAndShow(this.svgBlockCanvas_, this.svgBubbleCanvas_, previousElement, width, height, this.scale);
    this.workspaceDragSurface_.translateSurface(coord.x, coord.y);
};
Blockly.WorkspaceSvg.prototype.getBlockDragSurface = function () {
    return this.blockDragSurface_;
};
Blockly.WorkspaceSvg.prototype.getWidth = function () {
    var metrics = this.getMetrics();
    return metrics ? metrics.viewWidth / this.scale : 0;
};
Blockly.WorkspaceSvg.prototype.setVisible = function (isVisible) {
    if (this.scrollbar) {
        this.scrollbar.setContainerVisible(isVisible);
    }
    if (this.getFlyout()) {
        this.getFlyout().setContainerVisible(isVisible);
    }
    this.getParentSvg().style.display = isVisible ? 'block' : 'none';
    if (this.toolbox_) {
        this.toolbox_.HtmlDiv.style.display = isVisible ? 'block' : 'none';
    }
    if (isVisible) {
        this.render();
        this.resize();
    }
    else {
        Blockly.hideChaff(true);
        Blockly.DropDownDiv.hideWithoutAnimation();
    }
    this.isVisible_ = isVisible;
};
Blockly.WorkspaceSvg.prototype.render = function () {
    var blocks = this.getAllBlocks();
    for (var i = blocks.length - 1; i >= 0; i--) {
        blocks[i].render(false);
    }
};
Blockly.WorkspaceSvg.prototype.traceOn = function () {
    console.warn('Deprecated call to traceOn, delete this.');
};
Blockly.WorkspaceSvg.prototype.highlightBlock = function (id, opt_state) {
    if (opt_state === undefined) {
        for (var i = 0, block; block = this.highlightedBlocks_[i]; i++) {
            block.highlightForReplacement(false);
        }
        this.highlightedBlocks_.length = 0;
    }
    var block = id ? this.getBlockById(id) : null;
    if (block) {
        var state = (opt_state === undefined) || opt_state;
        if (!state) {
            goog.array.remove(this.highlightedBlocks_, block);
        }
        else if (this.highlightedBlocks_.indexOf(block) == -1) {
            this.highlightedBlocks_.push(block);
        }
        block.highlightForReplacement(state);
    }
};
Blockly.WorkspaceSvg.prototype.glowBlock = function (id, isGlowingBlock) {
    if (isGlowingBlock === undefined) {
        for (var i = 0, block; block = this.glowingBlocks_[i]; i++) {
            block.setGlowBlock(false);
        }
        this.glowingBlocks_.length = 0;
        return;
    }
    if (id) {
        var block = this.getBlockById(id);
        if (!block) {
            throw 'Tried to glow block that does not exist.';
        }
        block.setGlowBlock(isGlowingBlock);
        if (!isGlowingBlock) {
            goog.array.remove(this.glowingBlocks_, block);
        }
        else if (this.glowingBlocks_.indexOf(block) == -1) {
            this.glowingBlocks_.push(block);
        }
    }
};
Blockly.WorkspaceSvg.prototype.glowStack = function (id, isGlowingStack) {
    var block = null;
    if (id) {
        block = this.getBlockById(id);
        if (!block) {
            throw 'Tried to glow stack on block that does not exist.';
        }
    }
    block.setGlowStack(isGlowingStack);
};
Blockly.WorkspaceSvg.prototype.reportValue = function (id, value) {
    var block = this.getBlockById(id);
    if (!block) {
        throw 'Tried to report value on block that does not exist.';
    }
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.DropDownDiv.clearContent();
    var contentDiv = Blockly.DropDownDiv.getContentDiv();
    var valueReportBox = goog.dom.createElement('div');
    valueReportBox.setAttribute('class', 'valueReportBox');
    valueReportBox.innerHTML = Blockly.scratchBlocksUtils.encodeEntities(value);
    contentDiv.appendChild(valueReportBox);
    Blockly.DropDownDiv.setColour(Blockly.Colours.valueReportBackground, Blockly.Colours.valueReportBorder);
    Blockly.DropDownDiv.showPositionedByBlock(this, block);
};
Blockly.WorkspaceSvg.prototype.paste = function (xmlBlock) {
    if (!this.rendered) {
        return;
    }
    if (this.currentGesture_) {
        this.currentGesture_.cancel();
    }
    if (xmlBlock.tagName.toLowerCase() == 'comment') {
        this.pasteWorkspaceComment_(xmlBlock);
    }
    else {
        this.pasteBlock_(xmlBlock);
    }
};
Blockly.WorkspaceSvg.prototype.pasteBlock_ = function (xmlBlock) {
    Blockly.Events.disable();
    try {
        var block = Blockly.Xml.domToBlock(xmlBlock, this);
        Blockly.scratchBlocksUtils.changeObscuredShadowIds(block);
        var blockX = parseInt(xmlBlock.getAttribute('x'), 10);
        var blockY = parseInt(xmlBlock.getAttribute('y'), 10);
        if (!isNaN(blockX) && !isNaN(blockY)) {
            if (this.RTL) {
                blockX = -blockX;
            }
            do {
                var collide = false;
                var allBlocks = this.getAllBlocks();
                for (var i = 0, otherBlock; otherBlock = allBlocks[i]; i++) {
                    var otherXY = otherBlock.getRelativeToSurfaceXY();
                    if (Math.abs(blockX - otherXY.x) <= 1 &&
                        Math.abs(blockY - otherXY.y) <= 1) {
                        collide = true;
                        break;
                    }
                }
                if (!collide) {
                    var connections = block.getConnections_(false);
                    for (var i = 0, connection; connection = connections[i]; i++) {
                        var neighbour = connection.closest(Blockly.SNAP_RADIUS, new goog.math.Coordinate(blockX, blockY));
                        if (neighbour.connection) {
                            collide = true;
                            break;
                        }
                    }
                }
                if (collide) {
                    if (this.RTL) {
                        blockX -= Blockly.SNAP_RADIUS;
                    }
                    else {
                        blockX += Blockly.SNAP_RADIUS;
                    }
                    blockY += Blockly.SNAP_RADIUS * 2;
                }
            } while (collide);
            block.moveBy(blockX, blockY);
        }
    }
    finally {
        Blockly.Events.enable();
    }
    if (Blockly.Events.isEnabled() && !block.isShadow()) {
        Blockly.Events.fire(new Blockly.Events.BlockCreate(block));
    }
    block.select();
};
Blockly.WorkspaceSvg.prototype.pasteWorkspaceComment_ = function (xmlComment) {
    Blockly.Events.disable();
    try {
        var comment = Blockly.WorkspaceCommentSvg.fromXml(xmlComment, this);
        var commentX = parseInt(xmlComment.getAttribute('x'), 10);
        var commentY = parseInt(xmlComment.getAttribute('y'), 10);
        if (!isNaN(commentX) && !isNaN(commentY)) {
            if (this.RTL) {
                commentX = -commentX;
            }
            commentX += 50;
            commentY += 50;
            comment.moveBy(commentX, commentY);
        }
    }
    finally {
        Blockly.Events.enable();
    }
    if (Blockly.Events.isEnabled()) {
        Blockly.WorkspaceComment.fireCreateEvent(comment);
    }
    comment.select();
};
Blockly.WorkspaceSvg.prototype.refreshToolboxSelection_ = function () {
    if (this.toolbox_) {
        if (this.toolbox_.flyout_ && !this.currentGesture_ &&
            this.toolboxRefreshEnabled_) {
            this.toolbox_.refreshSelection();
        }
    }
    else {
        var thisTarget = this.targetWorkspace;
        if (thisTarget && thisTarget.toolbox_ && thisTarget.toolbox_.flyout_ &&
            !thisTarget.currentGesture_ && thisTarget.toolboxRefreshEnabled_) {
            thisTarget.toolbox_.refreshSelection();
        }
    }
};
Blockly.WorkspaceSvg.prototype.renameVariableById = function (id, newName) {
    Blockly.WorkspaceSvg.superClass_.renameVariableById.call(this, id, newName);
    this.refreshToolboxSelection_();
};
Blockly.WorkspaceSvg.prototype.deleteVariableById = function (id) {
    Blockly.WorkspaceSvg.superClass_.deleteVariableById.call(this, id);
    this.refreshToolboxSelection_();
};
Blockly.WorkspaceSvg.prototype.createVariable = function (name, opt_type, opt_id, opt_isLocal, opt_isCloud) {
    var variableInMap = (this.getVariable(name, opt_type) != null);
    var newVar = Blockly.WorkspaceSvg.superClass_.createVariable.call(this, name, opt_type, opt_id, opt_isLocal, opt_isCloud);
    if (!variableInMap && (opt_type != Blockly.BROADCAST_MESSAGE_VARIABLE_TYPE)) {
        this.refreshToolboxSelection_();
    }
    return newVar;
};
Blockly.WorkspaceSvg.prototype.recordCachedAreas = function () {
    this.recordBlocksArea_();
    this.recordDeleteAreas_();
};
Blockly.WorkspaceSvg.prototype.recordDeleteAreas_ = function () {
    if (this.trashcan) {
        this.deleteAreaTrash_ = this.trashcan.getClientRect();
    }
    else {
        this.deleteAreaTrash_ = null;
    }
    if (this.flyout_) {
        this.deleteAreaToolbox_ = this.flyout_.getClientRect();
    }
    else if (this.toolbox_) {
        this.deleteAreaToolbox_ = this.toolbox_.getClientRect();
    }
    else {
        this.deleteAreaToolbox_ = null;
    }
};
Blockly.WorkspaceSvg.prototype.recordBlocksArea_ = function () {
    var parentSvg = this.getParentSvg();
    if (parentSvg) {
        var bounds = parentSvg.getBoundingClientRect();
        this.blocksArea_ = new goog.math.Rect(bounds.left, bounds.top, bounds.width, bounds.height);
    }
    else {
        this.blocksArea_ = null;
    }
};
Blockly.WorkspaceSvg.prototype.isDeleteArea = function (e) {
    var xy = new goog.math.Coordinate(e.clientX, e.clientY);
    if (this.deleteAreaTrash_ && this.deleteAreaTrash_.contains(xy)) {
        return Blockly.DELETE_AREA_TRASH;
    }
    if (this.deleteAreaToolbox_ && this.deleteAreaToolbox_.contains(xy)) {
        return Blockly.DELETE_AREA_TOOLBOX;
    }
    return Blockly.DELETE_AREA_NONE;
};
Blockly.WorkspaceSvg.prototype.isInsideBlocksArea = function (e) {
    var xy = new goog.math.Coordinate(e.clientX, e.clientY);
    if (this.isDeleteArea(e) || (this.blocksArea_ && this.blocksArea_.contains(xy))) {
        return true;
    }
    return false;
};
Blockly.WorkspaceSvg.prototype.onMouseDown_ = function (e) {
    var gesture = this.getGesture(e);
    if (gesture) {
        gesture.handleWsStart(e, this);
    }
};
Blockly.WorkspaceSvg.prototype.startDrag = function (e, xy) {
    var point = Blockly.utils.mouseToSvg(e, this.getParentSvg(), this.getInverseScreenCTM());
    point.x /= this.scale;
    point.y /= this.scale;
    this.dragDeltaXY_ = goog.math.Coordinate.difference(xy, point);
};
Blockly.WorkspaceSvg.prototype.moveDrag = function (e) {
    var point = Blockly.utils.mouseToSvg(e, this.getParentSvg(), this.getInverseScreenCTM());
    point.x /= this.scale;
    point.y /= this.scale;
    return goog.math.Coordinate.sum(this.dragDeltaXY_, point);
};
Blockly.WorkspaceSvg.prototype.isDragging = function () {
    return this.currentGesture_ && this.currentGesture_.isDragging();
};
Blockly.WorkspaceSvg.prototype.isDraggable = function () {
    return !!this.scrollbar;
};
Blockly.WorkspaceSvg.prototype.onMouseWheel_ = function (e) {
    if (this.currentGesture_) {
        this.currentGesture_.cancel();
    }
    var multiplier = e.deltaMode === 0x1 ? Blockly.LINE_SCROLL_MULTIPLIER : 1;
    if (e.ctrlKey) {
        var PIXELS_PER_ZOOM_STEP = 50;
        var delta = -e.deltaY / PIXELS_PER_ZOOM_STEP * multiplier;
        var position = Blockly.utils.mouseToSvg(e, this.getParentSvg(), this.getInverseScreenCTM());
        this.zoom(position.x, position.y, delta);
    }
    else {
        Blockly.WidgetDiv.hide(true);
        Blockly.DropDownDiv.hideWithoutAnimation();
        var x = this.scrollX - e.deltaX * multiplier;
        var y = this.scrollY - e.deltaY * multiplier;
        if (e.shiftKey && e.deltaX === 0) {
            x = this.scrollX - e.deltaY * multiplier;
            y = this.scrollY;
        }
        this.startDragMetrics = this.getMetrics();
        this.scroll(x, y);
    }
    e.preventDefault();
};
Blockly.WorkspaceSvg.prototype.getBlocksBoundingBox = function () {
    var topBlocks = this.getTopBlocks(false);
    var topComments = this.getTopComments(false);
    var topElements = topBlocks.concat(topComments);
    if (!topElements.length) {
        return { x: 0, y: 0, width: 0, height: 0 };
    }
    var boundary = topElements[0].getBoundingRectangle();
    for (var i = 1; i < topElements.length; i++) {
        var blockBoundary = topElements[i].getBoundingRectangle();
        if (blockBoundary.topLeft.x < boundary.topLeft.x) {
            boundary.topLeft.x = blockBoundary.topLeft.x;
        }
        if (blockBoundary.bottomRight.x > boundary.bottomRight.x) {
            boundary.bottomRight.x = blockBoundary.bottomRight.x;
        }
        if (blockBoundary.topLeft.y < boundary.topLeft.y) {
            boundary.topLeft.y = blockBoundary.topLeft.y;
        }
        if (blockBoundary.bottomRight.y > boundary.bottomRight.y) {
            boundary.bottomRight.y = blockBoundary.bottomRight.y;
        }
    }
    return {
        x: boundary.topLeft.x,
        y: boundary.topLeft.y,
        width: boundary.bottomRight.x - boundary.topLeft.x,
        height: boundary.bottomRight.y - boundary.topLeft.y
    };
};
Blockly.WorkspaceSvg.prototype.cleanUp = function () {
    this.setResizesEnabled(false);
    Blockly.Events.setGroup(true);
    var topBlocks = this.getTopBlocks(true);
    var cursorY = 0;
    for (var i = 0, block; block = topBlocks[i]; i++) {
        var xy = block.getRelativeToSurfaceXY();
        block.moveBy(-xy.x, cursorY - xy.y);
        block.snapToGrid();
        cursorY = block.getRelativeToSurfaceXY().y +
            block.getHeightWidth().height + Blockly.BlockSvg.MIN_BLOCK_Y;
    }
    Blockly.Events.setGroup(false);
    this.setResizesEnabled(true);
};
Blockly.WorkspaceSvg.prototype.showContextMenu_ = function (e) {
    if (this.options.readOnly || this.isFlyout) {
        return;
    }
    var menuOptions = [];
    var topBlocks = this.getTopBlocks(true);
    var eventGroup = Blockly.utils.genUid();
    var ws = this;
    menuOptions.push(Blockly.ContextMenu.wsUndoOption(this));
    menuOptions.push(Blockly.ContextMenu.wsRedoOption(this));
    if (this.scrollbar) {
        menuOptions.push(Blockly.ContextMenu.wsCleanupOption(this, topBlocks.length));
    }
    if (this.options.collapse) {
        var hasCollapsedBlocks = false;
        var hasExpandedBlocks = false;
        for (var i = 0; i < topBlocks.length; i++) {
            var block = topBlocks[i];
            while (block) {
                if (block.isCollapsed()) {
                    hasCollapsedBlocks = true;
                }
                else {
                    hasExpandedBlocks = true;
                }
                block = block.getNextBlock();
            }
        }
        menuOptions.push(Blockly.ContextMenu.wsCollapseOption(hasExpandedBlocks, topBlocks));
        menuOptions.push(Blockly.ContextMenu.wsExpandOption(hasCollapsedBlocks, topBlocks));
    }
    if (this.options.comments) {
        menuOptions.push(Blockly.ContextMenu.workspaceCommentOption(ws, e));
    }
    var deleteList = Blockly.WorkspaceSvg.buildDeleteList_(topBlocks);
    var deleteCount = 0;
    for (var i = 0; i < deleteList.length; i++) {
        if (!deleteList[i].isShadow()) {
            deleteCount++;
        }
    }
    var DELAY = 10;
    function deleteNext() {
        Blockly.Events.setGroup(eventGroup);
        var block = deleteList.shift();
        if (block) {
            if (block.workspace) {
                block.dispose(false, true);
                setTimeout(deleteNext, DELAY);
            }
            else {
                deleteNext();
            }
        }
        Blockly.Events.setGroup(false);
    }
    var deleteOption = {
        text: deleteCount == 1 ? Blockly.Msg.DELETE_BLOCK :
            Blockly.Msg.DELETE_X_BLOCKS.replace('%1', String(deleteCount)),
        enabled: deleteCount > 0,
        callback: function () {
            if (ws.currentGesture_) {
                ws.currentGesture_.cancel();
            }
            if (deleteCount < 2) {
                deleteNext();
            }
            else {
                Blockly.confirm(Blockly.Msg.DELETE_ALL_BLOCKS.replace('%1', String(deleteCount)), function (ok) {
                    if (ok) {
                        deleteNext();
                    }
                });
            }
        }
    };
    menuOptions.push(deleteOption);
    Blockly.ContextMenu.show(e, menuOptions, this.RTL);
};
Blockly.WorkspaceSvg.buildDeleteList_ = function (topBlocks) {
    var deleteList = [];
    function addDeletableBlocks(block) {
        if (block.isDeletable()) {
            deleteList = deleteList.concat(block.getDescendants(false));
        }
        else {
            var children = block.getChildren();
            for (var i = 0; i < children.length; i++) {
                addDeletableBlocks(children[i]);
            }
        }
    }
    for (var i = 0; i < topBlocks.length; i++) {
        addDeletableBlocks(topBlocks[i]);
    }
    return deleteList;
};
Blockly.WorkspaceSvg.prototype.updateToolbox = function (tree) {
    tree = Blockly.Options.parseToolboxTree(tree);
    if (!tree) {
        if (this.options.languageTree) {
            throw 'Can\'t nullify an existing toolbox.';
        }
        return;
    }
    if (!this.options.languageTree) {
        throw 'Existing toolbox is null.  Can\'t create new toolbox.';
    }
    if (tree.getElementsByTagName('category').length) {
        if (!this.toolbox_) {
            throw 'Existing toolbox has no categories.  Can\'t change mode.';
        }
        this.options.languageTree = tree;
        this.toolbox_.populate_(tree);
        this.toolbox_.position();
    }
    else {
        if (!this.flyout_) {
            throw 'Existing toolbox has categories.  Can\'t change mode.';
        }
        this.options.languageTree = tree;
        this.flyout_.show(tree.childNodes);
    }
};
Blockly.WorkspaceSvg.prototype.markFocused = function () {
    if (this.options.parentWorkspace) {
        this.options.parentWorkspace.markFocused();
    }
    else {
        Blockly.mainWorkspace = this;
        this.setBrowserFocus();
    }
};
Blockly.WorkspaceSvg.prototype.setBrowserFocus = function () {
    if (document.activeElement) {
        document.activeElement.blur();
    }
    try {
        this.getParentSvg().focus();
    }
    catch (e) {
        try {
            this.getParentSvg().parentNode.setActive();
        }
        catch (e) {
            this.getParentSvg().parentNode.focus();
        }
    }
};
Blockly.WorkspaceSvg.prototype.zoom = function (x, y, amount) {
    var speed = this.options.zoomOptions.scaleSpeed;
    var metrics = this.getMetrics();
    var center = this.getParentSvg().createSVGPoint();
    center.x = x;
    center.y = y;
    center = center.matrixTransform(this.getCanvas().getCTM().inverse());
    x = center.x;
    y = center.y;
    var canvas = this.getCanvas();
    var scaleChange = Math.pow(speed, amount);
    var newScale = this.scale * scaleChange;
    if (newScale > this.options.zoomOptions.maxScale) {
        scaleChange = this.options.zoomOptions.maxScale / this.scale;
    }
    else if (newScale < this.options.zoomOptions.minScale) {
        scaleChange = this.options.zoomOptions.minScale / this.scale;
    }
    if (this.scale == newScale) {
        return;
    }
    if (this.scrollbar) {
        var matrix = canvas.getCTM()
            .translate(x * (1 - scaleChange), y * (1 - scaleChange))
            .scale(scaleChange);
        this.scrollX = matrix.e - metrics.absoluteLeft;
        this.scrollY = matrix.f - metrics.absoluteTop;
    }
    this.setScale(newScale);
    Blockly.WidgetDiv.hide(true);
    Blockly.DropDownDiv.hideWithoutAnimation();
};
Blockly.WorkspaceSvg.prototype.zoomCenter = function (type) {
    var metrics = this.getMetrics();
    var x = metrics.viewWidth / 2;
    var y = metrics.viewHeight / 2;
    this.zoom(x, y, type);
};
Blockly.WorkspaceSvg.prototype.zoomToFit = function () {
    var metrics = this.getMetrics();
    var blocksBox = this.getBlocksBoundingBox();
    var blocksWidth = blocksBox.width;
    var blocksHeight = blocksBox.height;
    if (!blocksWidth) {
        return;
    }
    var workspaceWidth = metrics.viewWidth;
    var workspaceHeight = metrics.viewHeight;
    if (this.flyout_) {
        workspaceWidth -= this.flyout_.width_;
    }
    if (!this.scrollbar) {
        blocksWidth += metrics.contentLeft;
        blocksHeight += metrics.contentTop;
    }
    var ratioX = workspaceWidth / blocksWidth;
    var ratioY = workspaceHeight / blocksHeight;
    this.setScale(Math.min(ratioX, ratioY));
    this.scrollCenter();
};
Blockly.WorkspaceSvg.prototype.scrollCenter = function () {
    if (!this.scrollbar) {
        console.warn('Tried to scroll a non-scrollable workspace.');
        return;
    }
    Blockly.WidgetDiv.hide(true);
    Blockly.DropDownDiv.hideWithoutAnimation();
    Blockly.hideChaff(false);
    var metrics = this.getMetrics();
    var x = (metrics.contentWidth - metrics.viewWidth) / 2;
    if (this.flyout_) {
        x -= this.flyout_.width_ / 2;
    }
    var y = (metrics.contentHeight - metrics.viewHeight) / 2;
    this.scrollbar.set(x, y);
};
Blockly.WorkspaceSvg.prototype.centerOnBlock = function (id) {
    if (!this.scrollbar) {
        console.warn('Tried to scroll a non-scrollable workspace.');
        return;
    }
    var block = this.getBlockById(id);
    if (!block) {
        return;
    }
    var xy = block.getRelativeToSurfaceXY();
    var heightWidth = block.getHeightWidth();
    var blockCenterY = xy.y + heightWidth.height / 2;
    var multiplier = this.RTL ? -1 : 1;
    var blockCenterX = xy.x + (multiplier * heightWidth.width / 2);
    var scale = this.scale;
    var pixelX = blockCenterX * scale;
    var pixelY = blockCenterY * scale;
    var metrics = this.getMetrics();
    var scrollToBlockX = pixelX - metrics.contentLeft;
    var scrollToBlockY = pixelY - metrics.contentTop;
    var halfViewWidth = metrics.viewWidth / 2;
    var halfViewHeight = metrics.viewHeight / 2;
    var scrollToCenterX = scrollToBlockX - halfViewWidth;
    var scrollToCenterY = scrollToBlockY - halfViewHeight;
    Blockly.hideChaff();
    this.scrollbar.set(scrollToCenterX, scrollToCenterY);
};
Blockly.WorkspaceSvg.prototype.setScale = function (newScale) {
    if (this.options.zoomOptions.maxScale &&
        newScale > this.options.zoomOptions.maxScale) {
        newScale = this.options.zoomOptions.maxScale;
    }
    else if (this.options.zoomOptions.minScale &&
        newScale < this.options.zoomOptions.minScale) {
        newScale = this.options.zoomOptions.minScale;
    }
    this.scale = newScale;
    if (this.grid_) {
        this.grid_.update(this.scale);
    }
    if (this.scrollbar) {
        this.scrollbar.resize();
    }
    else {
        this.translate(this.scrollX, this.scrollY);
    }
    Blockly.hideChaff(false);
    if (this.flyout_) {
        this.flyout_.reflow();
    }
};
Blockly.WorkspaceSvg.prototype.scroll = function (x, y) {
    var metrics = this.startDragMetrics;
    x = Math.min(x, -metrics.contentLeft);
    y = Math.min(y, -metrics.contentTop);
    x = Math.max(x, metrics.viewWidth - metrics.contentLeft -
        metrics.contentWidth);
    y = Math.max(y, metrics.viewHeight - metrics.contentTop -
        metrics.contentHeight);
    Blockly.WidgetDiv.hide(true);
    Blockly.DropDownDiv.hideWithoutAnimation();
    this.scrollbar.set(-x - metrics.contentLeft, -y - metrics.contentTop);
};
Blockly.WorkspaceSvg.prototype.updateStackGlowScale_ = function () {
    if (this.options.stackGlowBlur) {
        this.options.stackGlowBlur.setAttribute('stdDeviation', Blockly.Colours.stackGlowSize / this.scale);
    }
};
Blockly.WorkspaceSvg.getDimensionsPx_ = function (elem) {
    var width = 0;
    var height = 0;
    if (elem) {
        width = elem.getWidth();
        height = elem.getHeight();
    }
    return {
        width: width,
        height: height
    };
};
Blockly.WorkspaceSvg.getContentDimensions_ = function (ws, svgSize) {
    if (ws.scrollbar) {
        return Blockly.WorkspaceSvg.getContentDimensionsBounded_(ws, svgSize);
    }
    else {
        return Blockly.WorkspaceSvg.getContentDimensionsExact_(ws);
    }
};
Blockly.WorkspaceSvg.getContentDimensionsExact_ = function (ws) {
    var blockBox = ws.getBlocksBoundingBox();
    var scale = ws.scale;
    var width = blockBox.width * scale;
    var height = blockBox.height * scale;
    var left = blockBox.x * scale;
    var top = blockBox.y * scale;
    return {
        left: left,
        top: top,
        right: left + width,
        bottom: top + height,
        width: width,
        height: height
    };
};
Blockly.WorkspaceSvg.getContentDimensionsBounded_ = function (ws, svgSize) {
    var content = Blockly.WorkspaceSvg.getContentDimensionsExact_(ws);
    var viewWidth = svgSize.width;
    var viewHeight = svgSize.height;
    var halfWidth = viewWidth / 2;
    var halfHeight = viewHeight / 2;
    var left = Math.min(content.left - halfWidth, content.right - viewWidth);
    var right = Math.max(content.right + halfWidth, content.left + viewWidth);
    var top = Math.min(content.top - halfHeight, content.bottom - viewHeight);
    var bottom = Math.max(content.bottom + halfHeight, content.top + viewHeight);
    var dimensions = {
        left: left,
        top: top,
        height: bottom - top,
        width: right - left
    };
    return dimensions;
};
Blockly.WorkspaceSvg.getTopLevelWorkspaceMetrics_ = function () {
    var toolboxDimensions = Blockly.WorkspaceSvg.getDimensionsPx_(this.toolbox_);
    var flyoutDimensions = Blockly.WorkspaceSvg.getDimensionsPx_(this.flyout_);
    var svgSize = Blockly.svgSize(this.getParentSvg());
    if (this.toolbox_) {
        if (this.toolboxPosition == Blockly.TOOLBOX_AT_TOP ||
            this.toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM) {
            svgSize.height -= toolboxDimensions.height;
        }
        else if (this.toolboxPosition == Blockly.TOOLBOX_AT_LEFT ||
            this.toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {
            svgSize.width -= toolboxDimensions.width;
        }
    }
    var contentDimensions = Blockly.WorkspaceSvg.getContentDimensions_(this, svgSize);
    var absoluteLeft = 0;
    if (this.toolbox_ && this.toolboxPosition == Blockly.TOOLBOX_AT_LEFT) {
        absoluteLeft = toolboxDimensions.width;
    }
    var absoluteTop = 0;
    if (this.toolbox_ && this.toolboxPosition == Blockly.TOOLBOX_AT_TOP) {
        absoluteTop = toolboxDimensions.height;
    }
    var metrics = {
        contentHeight: contentDimensions.height,
        contentWidth: contentDimensions.width,
        contentTop: contentDimensions.top,
        contentLeft: contentDimensions.left,
        viewHeight: svgSize.height,
        viewWidth: svgSize.width,
        viewTop: -this.scrollY,
        viewLeft: -this.scrollX,
        absoluteTop: absoluteTop,
        absoluteLeft: absoluteLeft,
        toolboxWidth: toolboxDimensions.width,
        toolboxHeight: toolboxDimensions.height,
        flyoutWidth: flyoutDimensions.width,
        flyoutHeight: flyoutDimensions.height,
        toolboxPosition: this.toolboxPosition
    };
    return metrics;
};
Blockly.WorkspaceSvg.setTopLevelWorkspaceMetrics_ = function (xyRatio) {
    if (!this.scrollbar) {
        throw 'Attempt to set top level workspace scroll without scrollbars.';
    }
    var metrics = this.getMetrics();
    if (goog.isNumber(xyRatio.x)) {
        this.scrollX = -metrics.contentWidth * xyRatio.x - metrics.contentLeft;
    }
    if (goog.isNumber(xyRatio.y)) {
        this.scrollY = -metrics.contentHeight * xyRatio.y - metrics.contentTop;
    }
    var x = this.scrollX + metrics.absoluteLeft;
    var y = this.scrollY + metrics.absoluteTop;
    this.translate(x, y);
    if (this.grid_) {
        this.grid_.moveTo(x, y);
    }
};
Blockly.WorkspaceSvg.prototype.setResizesEnabled = function (enabled) {
    var reenabled = (!this.resizesEnabled_ && enabled);
    this.resizesEnabled_ = enabled;
    if (reenabled) {
        this.resizeContents();
    }
};
Blockly.WorkspaceSvg.prototype.setToolboxRefreshEnabled = function (enabled) {
    var reenabled = (!this.toolboxRefreshEnabled_ && enabled);
    this.toolboxRefreshEnabled_ = enabled;
    if (reenabled) {
        this.refreshToolboxSelection_();
    }
};
Blockly.WorkspaceSvg.prototype.clear = function () {
    this.setResizesEnabled(false);
    Blockly.WorkspaceSvg.superClass_.clear.call(this);
    this.setResizesEnabled(true);
};
Blockly.WorkspaceSvg.prototype.registerButtonCallback = function (key, func) {
    goog.asserts.assert(goog.isFunction(func), 'Button callbacks must be functions.');
    this.flyoutButtonCallbacks_[key] = func;
};
Blockly.WorkspaceSvg.prototype.getButtonCallback = function (key) {
    var result = this.flyoutButtonCallbacks_[key];
    return result ? result : null;
};
Blockly.WorkspaceSvg.prototype.removeButtonCallback = function (key) {
    this.flyoutButtonCallbacks_[key] = null;
};
Blockly.WorkspaceSvg.prototype.registerToolboxCategoryCallback = function (key, func) {
    goog.asserts.assert(goog.isFunction(func), 'Toolbox category callbacks must be functions.');
    this.toolboxCategoryCallbacks_[key] = func;
};
Blockly.WorkspaceSvg.prototype.getToolboxCategoryCallback = function (key) {
    var result = this.toolboxCategoryCallbacks_[key];
    return result ? result : null;
};
Blockly.WorkspaceSvg.prototype.removeToolboxCategoryCallback = function (key) {
    this.toolboxCategoryCallbacks_[key] = null;
};
Blockly.WorkspaceSvg.prototype.getGesture = function (e) {
    var isStart = (e.type == 'mousedown' || e.type == 'touchstart');
    var gesture = this.currentGesture_;
    if (gesture) {
        if (isStart && gesture.hasStarted()) {
            gesture.cancel();
            return null;
        }
        return gesture;
    }
    if (isStart) {
        this.currentGesture_ = new Blockly.Gesture(e, this);
        return this.currentGesture_;
    }
    return null;
};
Blockly.WorkspaceSvg.prototype.clearGesture = function () {
    this.currentGesture_ = null;
};
Blockly.WorkspaceSvg.prototype.cancelCurrentGesture = function () {
    if (this.currentGesture_) {
        this.currentGesture_.cancel();
    }
};
Blockly.WorkspaceSvg.prototype.startDragWithFakeEvent = function (fakeEvent, block) {
    Blockly.Touch.clearTouchIdentifier();
    Blockly.Touch.checkTouchIdentifier(fakeEvent);
    var gesture = block.workspace.getGesture(fakeEvent);
    gesture.forceStartBlockDrag(fakeEvent, block);
};
Blockly.WorkspaceSvg.prototype.getAudioManager = function () {
    return this.audioManager_;
};
Blockly.WorkspaceSvg.prototype.getGrid = function () {
    return this.grid_;
};
Blockly.WorkspaceSvg.prototype['setVisible'] =
    Blockly.WorkspaceSvg.prototype.setVisible;
'use strict';
goog.provide('Blockly.WorkspaceDragger');
goog.require('goog.math.Coordinate');
goog.require('goog.asserts');
Blockly.WorkspaceDragger = function (workspace) {
    this.workspace_ = workspace;
    this.startDragMetrics_ = workspace.getMetrics();
    this.startScrollXY_ = new goog.math.Coordinate(workspace.scrollX, workspace.scrollY);
};
Blockly.WorkspaceDragger.prototype.dispose = function () {
    this.workspace_ = null;
};
Blockly.WorkspaceDragger.prototype.startDrag = function () {
    if (Blockly.selected) {
        Blockly.selected.unselect();
    }
    this.workspace_.setupDragSurface();
};
Blockly.WorkspaceDragger.prototype.endDrag = function (currentDragDeltaXY) {
    this.drag(currentDragDeltaXY);
    this.workspace_.resetDragSurface();
};
Blockly.WorkspaceDragger.prototype.drag = function (currentDragDeltaXY) {
    var metrics = this.startDragMetrics_;
    var newXY = goog.math.Coordinate.sum(this.startScrollXY_, currentDragDeltaXY);
    var x = Math.min(newXY.x, -metrics.contentLeft);
    var y = Math.min(newXY.y, -metrics.contentTop);
    x = Math.max(x, metrics.viewWidth - metrics.contentLeft -
        metrics.contentWidth);
    y = Math.max(y, metrics.viewHeight - metrics.contentTop -
        metrics.contentHeight);
    x = -x - metrics.contentLeft;
    y = -y - metrics.contentTop;
    this.updateScroll_(x, y);
};
Blockly.WorkspaceDragger.prototype.updateScroll_ = function (x, y) {
    this.workspace_.scrollbar.set(x, y);
};
'use strict';
goog.provide('Blockly.FlyoutDragger');
goog.require('Blockly.WorkspaceDragger');
goog.require('goog.asserts');
goog.require('goog.math.Coordinate');
Blockly.FlyoutDragger = function (flyout) {
    Blockly.FlyoutDragger.superClass_.constructor.call(this, flyout.getWorkspace());
    this.scrollbar_ = flyout.scrollbar_;
    this.horizontalLayout_ = flyout.horizontalLayout_;
};
goog.inherits(Blockly.FlyoutDragger, Blockly.WorkspaceDragger);
Blockly.FlyoutDragger.prototype.updateScroll_ = function (x, y) {
    if (this.horizontalLayout_) {
        this.scrollbar_.set(x);
    }
    else {
        this.scrollbar_.set(y);
    }
};
'use strict';
goog.provide('Blockly.ZoomControls');
goog.require('Blockly.Touch');
goog.require('goog.dom');
Blockly.ZoomControls = function (workspace) {
    this.workspace_ = workspace;
};
Blockly.ZoomControls.prototype.ZOOM_IN_PATH_ = 'zoom-in.svg';
Blockly.ZoomControls.prototype.ZOOM_OUT_PATH_ = 'zoom-out.svg';
Blockly.ZoomControls.prototype.ZOOM_RESET_PATH_ = 'zoom-reset.svg';
Blockly.ZoomControls.prototype.WIDTH_ = 36;
Blockly.ZoomControls.prototype.HEIGHT_ = 124;
Blockly.ZoomControls.prototype.MARGIN_BETWEEN_ = 8;
Blockly.ZoomControls.prototype.MARGIN_BOTTOM_ = 12;
Blockly.ZoomControls.prototype.MARGIN_SIDE_ = 12;
Blockly.ZoomControls.prototype.svgGroup_ = null;
Blockly.ZoomControls.prototype.left_ = 0;
Blockly.ZoomControls.prototype.top_ = 0;
Blockly.ZoomControls.prototype.createDom = function () {
    this.svgGroup_ =
        Blockly.utils.createSvgElement('g', { 'class': 'blocklyZoom' }, null);
    this.createZoomOutSvg_();
    this.createZoomInSvg_();
    this.createZoomResetSvg_();
    return this.svgGroup_;
};
Blockly.ZoomControls.prototype.init = function (bottom) {
    this.bottom_ = this.MARGIN_BOTTOM_ + bottom;
    return this.bottom_ + this.HEIGHT_;
};
Blockly.ZoomControls.prototype.dispose = function () {
    if (this.svgGroup_) {
        goog.dom.removeNode(this.svgGroup_);
        this.svgGroup_ = null;
    }
    this.workspace_ = null;
};
Blockly.ZoomControls.prototype.position = function () {
    var metrics = this.workspace_.getMetrics();
    if (!metrics) {
        return;
    }
    if (this.workspace_.RTL) {
        this.left_ = this.MARGIN_SIDE_ + Blockly.Scrollbar.scrollbarThickness;
        if (metrics.toolboxPosition == Blockly.TOOLBOX_AT_LEFT) {
            this.left_ += metrics.flyoutWidth;
            if (this.workspace_.toolbox_) {
                this.left_ += metrics.absoluteLeft;
            }
        }
    }
    else {
        this.left_ = metrics.viewWidth + metrics.absoluteLeft -
            this.WIDTH_ - this.MARGIN_SIDE_ - Blockly.Scrollbar.scrollbarThickness;
        if (metrics.toolboxPosition == Blockly.TOOLBOX_AT_RIGHT) {
            this.left_ -= metrics.flyoutWidth;
        }
    }
    this.top_ = metrics.viewHeight + metrics.absoluteTop -
        this.HEIGHT_ - this.bottom_;
    if (metrics.toolboxPosition == Blockly.TOOLBOX_AT_BOTTOM) {
        this.top_ -= metrics.flyoutHeight;
    }
    this.svgGroup_.setAttribute('transform', 'translate(' + this.left_ + ',' + this.top_ + ')');
};
Blockly.ZoomControls.prototype.createZoomOutSvg_ = function () {
    var ws = this.workspace_;
    var zoomoutSvg = Blockly.utils.createSvgElement('image', {
        'width': this.WIDTH_,
        'height': this.WIDTH_,
        'y': (this.WIDTH_ * 1) + (this.MARGIN_BETWEEN_ * 1)
    }, this.svgGroup_);
    zoomoutSvg.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', ws.options.pathToMedia + this.ZOOM_OUT_PATH_);
    Blockly.bindEventWithChecks_(zoomoutSvg, 'mousedown', null, function (e) {
        ws.markFocused();
        ws.zoomCenter(-1);
        Blockly.Touch.clearTouchIdentifier();
        e.stopPropagation();
        e.preventDefault();
    });
};
Blockly.ZoomControls.prototype.createZoomInSvg_ = function () {
    var ws = this.workspace_;
    var zoominSvg = Blockly.utils.createSvgElement('image', {
        'width': this.WIDTH_,
        'height': this.WIDTH_,
        'y': 0
    }, this.svgGroup_);
    zoominSvg.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', ws.options.pathToMedia + this.ZOOM_IN_PATH_);
    Blockly.bindEventWithChecks_(zoominSvg, 'mousedown', null, function (e) {
        ws.markFocused();
        ws.zoomCenter(1);
        Blockly.Touch.clearTouchIdentifier();
        e.stopPropagation();
        e.preventDefault();
    });
};
Blockly.ZoomControls.prototype.createZoomResetSvg_ = function () {
    var ws = this.workspace_;
    var zoomresetSvg = Blockly.utils.createSvgElement('image', {
        'width': this.WIDTH_,
        'height': this.WIDTH_,
        'y': (this.WIDTH_ * 2) + (this.MARGIN_BETWEEN_ * 2)
    }, this.svgGroup_);
    zoomresetSvg.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', ws.options.pathToMedia + this.ZOOM_RESET_PATH_);
    Blockly.bindEventWithChecks_(zoomresetSvg, 'mousedown', null, function (e) {
        ws.markFocused();
        ws.setScale(ws.options.zoomOptions.startScale);
        ws.scrollCenter();
        Blockly.Touch.clearTouchIdentifier();
        e.stopPropagation();
        e.preventDefault();
    });
};
'use strict';
goog.provide('Blockly.Xml');
goog.require('Blockly.Events.BlockCreate');
goog.require('Blockly.Events.VarCreate');
goog.require('goog.asserts');
goog.require('goog.dom');
Blockly.Xml.workspaceToDom = function (workspace, opt_noId) {
    var xml = goog.dom.createDom('xml');
    xml.appendChild(Blockly.Xml.variablesToDom(workspace.getAllVariables()));
    var comments = workspace.getTopComments(true).filter(function (topComment) {
        return topComment instanceof Blockly.WorkspaceComment;
    });
    for (var i = 0, comment; comment = comments[i]; i++) {
        xml.appendChild(comment.toXmlWithXY(opt_noId));
    }
    var blocks = workspace.getTopBlocks(true);
    for (var i = 0, block; block = blocks[i]; i++) {
        xml.appendChild(Blockly.Xml.blockToDomWithXY(block, opt_noId));
    }
    return xml;
};
Blockly.Xml.variablesToDom = function (variableList) {
    var variables = goog.dom.createDom('variables');
    for (var i = 0, variable; variable = variableList[i]; i++) {
        var element = goog.dom.createDom('variable', null, variable.name);
        element.setAttribute('type', variable.type);
        element.setAttribute('id', variable.getId());
        element.setAttribute('islocal', variable.isLocal);
        element.setAttribute('isCloud', variable.isCloud);
        variables.appendChild(element);
    }
    return variables;
};
Blockly.Xml.blockToDomWithXY = function (block, opt_noId) {
    var width;
    if (block.workspace.RTL) {
        width = block.workspace.getWidth();
    }
    var element = Blockly.Xml.blockToDom(block, opt_noId);
    var xy = block.getRelativeToSurfaceXY();
    element.setAttribute('x', Math.round(block.workspace.RTL ? width - xy.x : xy.x));
    element.setAttribute('y', Math.round(xy.y));
    return element;
};
Blockly.Xml.fieldToDomVariable_ = function (field) {
    var id = field.getValue();
    if (id == null) {
        field.initModel();
        id = field.getValue();
    }
    var variable = field.getVariable();
    if (!variable) {
        throw Error('Tried to serialize a variable field with no variable.');
    }
    var container = goog.dom.createDom('field', null, variable.name);
    container.setAttribute('name', field.name);
    container.setAttribute('id', variable.getId());
    container.setAttribute('variabletype', variable.type);
    return container;
};
Blockly.Xml.fieldToDom_ = function (field) {
    if (field.name && field.SERIALIZABLE) {
        if (field.referencesVariables()) {
            return Blockly.Xml.fieldToDomVariable_(field);
        }
        else {
            var container = goog.dom.createDom('field', null, field.getValue());
            container.setAttribute('name', field.name);
            return container;
        }
    }
    return null;
};
Blockly.Xml.allFieldsToDom_ = function (block, element) {
    for (var i = 0, input; input = block.inputList[i]; i++) {
        for (var j = 0, field; field = input.fieldRow[j]; j++) {
            var fieldDom = Blockly.Xml.fieldToDom_(field);
            if (fieldDom) {
                element.appendChild(fieldDom);
            }
        }
    }
};
Blockly.Xml.blockToDom = function (block, opt_noId) {
    var element = goog.dom.createDom(block.isShadow() ? 'shadow' : 'block');
    element.setAttribute('type', block.type);
    if (!opt_noId) {
        element.setAttribute('id', block.id);
    }
    if (block.mutationToDom) {
        var mutation = block.mutationToDom();
        if (mutation && (mutation.hasChildNodes() || mutation.hasAttributes())) {
            element.appendChild(mutation);
        }
    }
    Blockly.Xml.allFieldsToDom_(block, element);
    Blockly.Xml.scratchCommentToDom_(block, element);
    if (block.data) {
        var dataElement = goog.dom.createDom('data', null, block.data);
        element.appendChild(dataElement);
    }
    for (var i = 0, input; input = block.inputList[i]; i++) {
        var container;
        var empty = true;
        if (input.type == Blockly.DUMMY_INPUT) {
            continue;
        }
        else {
            var childBlock = input.connection.targetBlock();
            if (input.type == Blockly.INPUT_VALUE) {
                container = goog.dom.createDom('value');
            }
            else if (input.type == Blockly.NEXT_STATEMENT) {
                container = goog.dom.createDom('statement');
            }
            var shadow = input.connection.getShadowDom();
            if (shadow && (!childBlock || !childBlock.isShadow())) {
                var shadowClone = Blockly.Xml.cloneShadow_(shadow);
                if (opt_noId && shadowClone.getAttribute('id')) {
                    shadowClone.removeAttribute('id');
                }
                container.appendChild(shadowClone);
            }
            if (childBlock) {
                container.appendChild(Blockly.Xml.blockToDom(childBlock, opt_noId));
                empty = false;
            }
        }
        container.setAttribute('name', input.name);
        if (!empty) {
            element.appendChild(container);
        }
    }
    if (block.inputsInlineDefault != block.inputsInline) {
        element.setAttribute('inline', block.inputsInline);
    }
    if (block.isCollapsed()) {
        element.setAttribute('collapsed', true);
    }
    if (block.disabled) {
        element.setAttribute('disabled', true);
    }
    if (!block.isDeletable() && !block.isShadow()) {
        element.setAttribute('deletable', false);
    }
    if (!block.isMovable() && !block.isShadow()) {
        element.setAttribute('movable', false);
    }
    if (!block.isEditable()) {
        element.setAttribute('editable', false);
    }
    var nextBlock = block.getNextBlock();
    if (nextBlock) {
        var container = goog.dom.createDom('next', null, Blockly.Xml.blockToDom(nextBlock, opt_noId));
        element.appendChild(container);
    }
    var shadow = block.nextConnection && block.nextConnection.getShadowDom();
    if (shadow && (!nextBlock || !nextBlock.isShadow())) {
        container.appendChild(Blockly.Xml.cloneShadow_(shadow));
    }
    return element;
};
Blockly.Xml.scratchCommentToDom_ = function (block, element) {
    var commentText = block.getCommentText();
    if (commentText) {
        var commentElement = goog.dom.createDom('comment', null, commentText);
        if (typeof block.comment == 'object') {
            commentElement.setAttribute('id', block.comment.id);
            commentElement.setAttribute('pinned', block.comment.isVisible());
            var hw;
            if (block.comment instanceof Blockly.ScratchBlockComment) {
                hw = block.comment.getHeightWidth();
            }
            else {
                hw = block.comment.getBubbleSize();
            }
            commentElement.setAttribute('h', hw.height);
            commentElement.setAttribute('w', hw.width);
            var xy = block.comment.getXY();
            commentElement.setAttribute('x', Math.round(block.workspace.RTL ? block.workspace.getWidth() - xy.x - hw.width :
                xy.x));
            commentElement.setAttribute('y', xy.y);
            commentElement.setAttribute('minimized', block.comment.isMinimized());
        }
        element.appendChild(commentElement);
    }
};
Blockly.Xml.cloneShadow_ = function (shadow) {
    shadow = shadow.cloneNode(true);
    var node = shadow;
    var textNode;
    while (node) {
        if (node.firstChild) {
            node = node.firstChild;
        }
        else {
            while (node && !node.nextSibling) {
                textNode = node;
                node = node.parentNode;
                if (textNode.nodeType == 3 && textNode.data.trim() == '' &&
                    node.firstChild != textNode) {
                    goog.dom.removeNode(textNode);
                }
            }
            if (node) {
                textNode = node;
                node = node.nextSibling;
                if (textNode.nodeType == 3 && textNode.data.trim() == '') {
                    goog.dom.removeNode(textNode);
                }
            }
        }
    }
    return shadow;
};
Blockly.Xml.domToText = function (dom) {
    var oSerializer = new XMLSerializer();
    return oSerializer.serializeToString(dom);
};
Blockly.Xml.domToPrettyText = function (dom) {
    var blob = Blockly.Xml.domToText(dom);
    var lines = blob.split('<');
    var indent = '';
    for (var i = 1; i < lines.length; i++) {
        var line = lines[i];
        if (line[0] == '/') {
            indent = indent.substring(2);
        }
        lines[i] = indent + '<' + line;
        if (line[0] != '/' && line.slice(-2) != '/>') {
            indent += '  ';
        }
    }
    var text = lines.join('\n');
    text = text.replace(/(<(\w+)\b[^>]*>[^\n]*)\n *<\/\2>/g, '$1</$2>');
    return text.replace(/^\n/, '');
};
Blockly.Xml.textToDom = function (text) {
    var oParser = new DOMParser();
    var dom = oParser.parseFromString(text, 'text/xml');
    if (!dom || !dom.firstChild ||
        dom.firstChild.nodeName.toLowerCase() != 'xml' ||
        dom.firstChild !== dom.lastChild) {
        goog.asserts.fail('Blockly.Xml.textToDom did not obtain a valid XML tree.');
    }
    return dom.firstChild;
};
Blockly.Xml.clearWorkspaceAndLoadFromXml = function (xml, workspace) {
    workspace.setResizesEnabled(false);
    workspace.setToolboxRefreshEnabled(false);
    workspace.clear();
    var blockIds = Blockly.Xml.domToWorkspace(xml, workspace);
    workspace.setResizesEnabled(true);
    workspace.setToolboxRefreshEnabled(true);
    return blockIds;
};
Blockly.Xml.domToWorkspace = function (xml, workspace) {
    if (xml instanceof Blockly.Workspace) {
        var swap = xml;
        xml = workspace;
        workspace = swap;
        console.warn('Deprecated call to Blockly.Xml.domToWorkspace, ' +
            'swap the arguments.');
    }
    var width;
    if (workspace.RTL) {
        width = workspace.getWidth();
    }
    var newBlockIds = [];
    Blockly.Field.startCache();
    var childCount = xml.childNodes.length;
    var existingGroup = Blockly.Events.getGroup();
    if (!existingGroup) {
        Blockly.Events.setGroup(true);
    }
    if (workspace.setResizesEnabled) {
        workspace.setResizesEnabled(false);
    }
    var variablesFirst = true;
    try {
        for (var i = 0; i < childCount; i++) {
            var xmlChild = xml.childNodes[i];
            var name = xmlChild.nodeName.toLowerCase();
            if (name == 'block' ||
                (name == 'shadow' && !Blockly.Events.recordUndo)) {
                var block = Blockly.Xml.domToBlock(xmlChild, workspace);
                newBlockIds.push(block.id);
                var blockX = xmlChild.hasAttribute('x') ?
                    parseInt(xmlChild.getAttribute('x'), 10) : 10;
                var blockY = xmlChild.hasAttribute('y') ?
                    parseInt(xmlChild.getAttribute('y'), 10) : 10;
                if (!isNaN(blockX) && !isNaN(blockY)) {
                    block.moveBy(workspace.RTL ? width - blockX : blockX, blockY);
                    if (block.comment && typeof block.comment === 'object') {
                        var commentXY = block.comment.getXY();
                        var commentWidth = block.comment.getBubbleSize().width;
                        block.comment.moveTo(block.workspace.RTL ? width - commentXY.x - commentWidth : commentXY.x, commentXY.y);
                    }
                }
                variablesFirst = false;
            }
            else if (name == 'shadow') {
                goog.asserts.fail('Shadow block cannot be a top-level block.');
                variablesFirst = false;
            }
            else if (name == 'comment') {
                if (workspace.rendered) {
                    Blockly.WorkspaceCommentSvg.fromXml(xmlChild, workspace, width);
                }
                else {
                    Blockly.WorkspaceComment.fromXml(xmlChild, workspace);
                }
            }
            else if (name == 'variables') {
                if (variablesFirst) {
                    Blockly.Xml.domToVariables(xmlChild, workspace);
                }
                else {
                    throw Error('\'variables\' tag must exist once before block and ' +
                        'shadow tag elements in the workspace XML, but it was found in ' +
                        'another location.');
                }
                variablesFirst = false;
            }
        }
    }
    finally {
        if (!existingGroup) {
            Blockly.Events.setGroup(false);
        }
        Blockly.Field.stopCache();
    }
    if (workspace.setResizesEnabled) {
        workspace.setResizesEnabled(true);
    }
    return newBlockIds;
};
Blockly.Xml.appendDomToWorkspace = function (xml, workspace) {
    var bbox;
    if (workspace.hasOwnProperty('scale')) {
        var savetab = Blockly.BlockSvg.TAB_WIDTH;
        try {
            Blockly.BlockSvg.TAB_WIDTH = 0;
            bbox = workspace.getBlocksBoundingBox();
        }
        finally {
            Blockly.BlockSvg.TAB_WIDTH = savetab;
        }
    }
    var newBlockIds = Blockly.Xml.domToWorkspace(xml, workspace);
    if (bbox && bbox.height) {
        var offsetY = 0;
        var offsetX = 0;
        var farY = bbox.y + bbox.height;
        var topX = bbox.x;
        var newX = Infinity;
        var newY = Infinity;
        for (var i = 0; i < newBlockIds.length; i++) {
            var blockXY = workspace.getBlockById(newBlockIds[i]).getRelativeToSurfaceXY();
            if (blockXY.y < newY) {
                newY = blockXY.y;
            }
            if (blockXY.x < newX) {
                newX = blockXY.x;
            }
        }
        offsetY = farY - newY + Blockly.BlockSvg.SEP_SPACE_Y;
        offsetX = topX - newX;
        var width;
        if (workspace.RTL) {
            width = workspace.getWidth();
        }
        for (var i = 0; i < newBlockIds.length; i++) {
            var block = workspace.getBlockById(newBlockIds[i]);
            block.moveBy(workspace.RTL ? width - offsetX : offsetX, offsetY);
        }
    }
    return newBlockIds;
};
Blockly.Xml.domToBlock = function (xmlBlock, workspace) {
    if (xmlBlock instanceof Blockly.Workspace) {
        var swap = xmlBlock;
        xmlBlock = workspace;
        workspace = swap;
        console.warn('Deprecated call to Blockly.Xml.domToBlock, ' +
            'swap the arguments.');
    }
    Blockly.Events.disable();
    var variablesBeforeCreation = workspace.getAllVariables();
    try {
        var topBlock = Blockly.Xml.domToBlockHeadless_(xmlBlock, workspace);
        var blocks = topBlock.getDescendants(false);
        if (workspace.rendered) {
            topBlock.setConnectionsHidden(true);
            for (var i = blocks.length - 1; i >= 0; i--) {
                blocks[i].initSvg();
            }
            for (var i = blocks.length - 1; i >= 0; i--) {
                blocks[i].render(false);
            }
            if (!workspace.isFlyout) {
                setTimeout(function () {
                    if (topBlock.workspace) {
                        topBlock.setConnectionsHidden(false);
                    }
                }, 1);
            }
            topBlock.updateDisabled();
            workspace.resizeContents();
        }
        else {
            for (var i = blocks.length - 1; i >= 0; i--) {
                blocks[i].initModel();
            }
        }
    }
    finally {
        Blockly.Events.enable();
    }
    if (Blockly.Events.isEnabled()) {
        var newVariables = Blockly.Variables.getAddedVariables(workspace, variablesBeforeCreation);
        for (var i = 0; i < newVariables.length; i++) {
            var thisVariable = newVariables[i];
            Blockly.Events.fire(new Blockly.Events.VarCreate(thisVariable));
        }
        Blockly.Events.fire(new Blockly.Events.BlockCreate(topBlock));
    }
    return topBlock;
};
Blockly.Xml.domToVariables = function (xmlVariables, workspace) {
    for (var i = 0, xmlChild; xmlChild = xmlVariables.children[i]; i++) {
        var type = xmlChild.getAttribute('type');
        var id = xmlChild.getAttribute('id');
        var isLocal = xmlChild.getAttribute('islocal') == 'true';
        var isCloud = xmlChild.getAttribute('iscloud') == 'true';
        var name = xmlChild.textContent;
        if (typeof (type) === undefined || type === null) {
            throw Error('Variable with id, ' + id + ' is without a type');
        }
        workspace.createVariable(name, type, id, isLocal, isCloud);
    }
};
Blockly.Xml.domToBlockHeadless_ = function (xmlBlock, workspace) {
    var block = null;
    var prototypeName = xmlBlock.getAttribute('type');
    goog.asserts.assert(prototypeName, 'Block type unspecified: %s', xmlBlock.outerHTML);
    var id = xmlBlock.getAttribute('id');
    block = workspace.newBlock(prototypeName, id);
    var blockChild = null;
    for (var i = 0, xmlChild; xmlChild = xmlBlock.childNodes[i]; i++) {
        if (xmlChild.nodeType == 3) {
            continue;
        }
        var input;
        var childBlockElement = null;
        var childShadowElement = null;
        for (var j = 0, grandchild; grandchild = xmlChild.childNodes[j]; j++) {
            if (grandchild.nodeType == 1) {
                if (grandchild.nodeName.toLowerCase() == 'block') {
                    childBlockElement = (grandchild);
                }
                else if (grandchild.nodeName.toLowerCase() == 'shadow') {
                    childShadowElement = (grandchild);
                }
            }
        }
        if (!childBlockElement && childShadowElement) {
            childBlockElement = childShadowElement;
        }
        var name = xmlChild.getAttribute('name');
        switch (xmlChild.nodeName.toLowerCase()) {
            case 'mutation':
                if (block.domToMutation) {
                    block.domToMutation(xmlChild);
                    if (block.initSvg) {
                        block.initSvg();
                    }
                }
                break;
            case 'comment':
                var commentId = xmlChild.getAttribute('id');
                var bubbleX = parseInt(xmlChild.getAttribute('x'), 10);
                var bubbleY = parseInt(xmlChild.getAttribute('y'), 10);
                var minimized = xmlChild.getAttribute('minimized') || false;
                block.setCommentText(xmlChild.textContent, commentId, bubbleX, bubbleY, minimized == 'true');
                var visible = xmlChild.getAttribute('pinned');
                if (visible && !block.isInFlyout) {
                    setTimeout(function () {
                        if (block.comment && block.comment.setVisible) {
                            block.comment.setVisible(visible == 'true');
                        }
                    }, 1);
                }
                var bubbleW = parseInt(xmlChild.getAttribute('w'), 10);
                var bubbleH = parseInt(xmlChild.getAttribute('h'), 10);
                if (!isNaN(bubbleW) && !isNaN(bubbleH) &&
                    block.comment && block.comment.setVisible) {
                    if (block.comment instanceof Blockly.ScratchBlockComment) {
                        block.comment.setSize(bubbleW, bubbleH);
                    }
                    else {
                        block.comment.setBubbleSize(bubbleW, bubbleH);
                    }
                }
                break;
            case 'data':
                block.data = xmlChild.textContent;
                break;
            case 'title':
            case 'field':
                Blockly.Xml.domToField_(block, name, xmlChild);
                break;
            case 'value':
            case 'statement':
                input = block.getInput(name);
                if (!input) {
                    console.warn('Ignoring non-existent input ' + name + ' in block ' +
                        prototypeName);
                    break;
                }
                if (childShadowElement) {
                    input.connection.setShadowDom(childShadowElement);
                }
                if (childBlockElement) {
                    blockChild = Blockly.Xml.domToBlockHeadless_(childBlockElement, workspace);
                    if (blockChild.outputConnection) {
                        input.connection.connect(blockChild.outputConnection);
                    }
                    else if (blockChild.previousConnection) {
                        input.connection.connect(blockChild.previousConnection);
                    }
                    else {
                        goog.asserts.fail('Child block does not have output or previous statement.');
                    }
                }
                break;
            case 'next':
                if (childShadowElement && block.nextConnection) {
                    block.nextConnection.setShadowDom(childShadowElement);
                }
                if (childBlockElement) {
                    goog.asserts.assert(block.nextConnection, 'Next statement does not exist.');
                    goog.asserts.assert(!block.nextConnection.isConnected(), 'Next statement is already connected.');
                    blockChild = Blockly.Xml.domToBlockHeadless_(childBlockElement, workspace);
                    goog.asserts.assert(blockChild.previousConnection, 'Next block does not have previous statement.');
                    block.nextConnection.connect(blockChild.previousConnection);
                }
                break;
            default:
                console.warn('Ignoring unknown tag: ' + xmlChild.nodeName);
        }
    }
    var inline = xmlBlock.getAttribute('inline');
    if (inline) {
        block.setInputsInline(inline == 'true');
    }
    var disabled = xmlBlock.getAttribute('disabled');
    if (disabled) {
        block.setDisabled(disabled == 'true' || disabled == 'disabled');
    }
    var deletable = xmlBlock.getAttribute('deletable');
    if (deletable) {
        block.setDeletable(deletable == 'true');
    }
    var movable = xmlBlock.getAttribute('movable');
    if (movable) {
        block.setMovable(movable == 'true');
    }
    var editable = xmlBlock.getAttribute('editable');
    if (editable) {
        block.setEditable(editable == 'true');
    }
    var collapsed = xmlBlock.getAttribute('collapsed');
    if (collapsed) {
        block.setCollapsed(collapsed == 'true');
    }
    if (xmlBlock.nodeName.toLowerCase() == 'shadow') {
        var children = block.getChildren(false);
        for (var i = 0, child; child = children[i]; i++) {
            goog.asserts.assert(child.isShadow(), 'Shadow block not allowed non-shadow child.');
        }
        block.setShadow(true);
    }
    return block;
};
Blockly.Xml.domToFieldVariable_ = function (workspace, xml, text, field) {
    var type = xml.getAttribute('variabletype') || '';
    if (type == '\'\'') {
        type = '';
    }
    var variable;
    if (!workspace.getPotentialVariableMap() && !workspace.isFlyout &&
        workspace.getFlyout()) {
        var flyoutWs = workspace.getFlyout().getWorkspace();
        variable = Blockly.Variables.realizePotentialVar(text, type, flyoutWs, true);
    }
    if (!variable) {
        variable = Blockly.Variables.getOrCreateVariablePackage(workspace, xml.id, text, type);
    }
    if (type != null && type !== variable.type) {
        throw Error('Serialized variable type with id \'' +
            variable.getId() + '\' had type ' + variable.type + ', and ' +
            'does not match variable field that references it: ' +
            Blockly.Xml.domToText(xml) + '.');
    }
    field.setValue(variable.getId());
};
Blockly.Xml.domToField_ = function (block, fieldName, xml) {
    var field = block.getField(fieldName);
    if (!field) {
        console.warn('Ignoring non-existent field ' + fieldName + ' in block ' +
            block.type);
        return;
    }
    var workspace = block.workspace;
    var text = xml.textContent;
    if (field.referencesVariables()) {
        Blockly.Xml.domToFieldVariable_(workspace, xml, text, field);
    }
    else {
        field.setValue(text);
    }
};
Blockly.Xml.deleteNext = function (xmlBlock) {
    for (var i = 0, child; child = xmlBlock.childNodes[i]; i++) {
        if (child.nodeName.toLowerCase() == 'next') {
            xmlBlock.removeChild(child);
            break;
        }
    }
};
if (!goog.global['Blockly']) {
    goog.global['Blockly'] = {};
}
if (!goog.global['Blockly']['Xml']) {
    goog.global['Blockly']['Xml'] = {};
}
goog.global['Blockly']['Xml']['domToText'] = Blockly.Xml.domToText;
goog.global['Blockly']['Xml']['domToWorkspace'] = Blockly.Xml.domToWorkspace;
goog.global['Blockly']['Xml']['textToDom'] = Blockly.Xml.textToDom;
goog.global['Blockly']['Xml']['workspaceToDom'] = Blockly.Xml.workspaceToDom;
goog.global['Blockly']['Xml']['clearWorkspaceAndLoadFromXml'] =
    Blockly.Xml.clearWorkspaceAndLoadFromXml;
